{
    "repository": "cunla/fakeredis-py",
    "stars": 150,
    "language": "python",
    "size": 3271,
    "clone_url": "https://github.com/cunla/fakeredis-py.git",
    "timestamp": "2023-07-01T17:30:30.977173Z",
    "clone_success": true,
    "number_of_actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "unknown",
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "",
                "name": "test.test_json.test_json",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "collection skipped",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "",
                "name": "test.test_json.test_json_arr_commands",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "collection skipped",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "",
                "name": "test.test_json.test_json_commands",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "collection skipped",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection",
                "name": "test_ping[StrictRedis]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection",
                "name": "test_ping[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection",
                "name": "test_echo[StrictRedis]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection",
                "name": "test_echo[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection",
                "name": "test_time[FakeStrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestDecodeResponses",
                "name": "test_decode_str[StrictRedis]",
                "time": 0.025,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestDecodeResponses",
                "name": "test_decode_str[FakeStrictRedis]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestDecodeResponses",
                "name": "test_decode_set[StrictRedis]",
                "time": 0.027,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestDecodeResponses",
                "name": "test_decode_set[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestDecodeResponses",
                "name": "test_decode_list[StrictRedis]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestDecodeResponses",
                "name": "test_decode_list[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestDecodeResponses",
                "name": "test_decode_dict[StrictRedis]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestDecodeResponses",
                "name": "test_decode_dict[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestDecodeResponses",
                "name": "test_decode_error[StrictRedis]",
                "time": 0.063,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestDecodeResponses",
                "name": "test_decode_error[FakeStrictRedis]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_flushdb[FakeStrictRedis]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_flushall[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_append[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_bitcount[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_decr[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_exists[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_expire[FakeStrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_pexpire[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_echo[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_get[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_getbit[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_getset[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_incr[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_incrby[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_ncrbyfloat[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_keys[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_mget[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_mset[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_msetnx[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_persist[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_rename[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_eval[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_lpush[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_lrange[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_llen[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_lrem[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_rpush[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_lpop[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_lset[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_rpushx[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_ltrim[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_lindex[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_lpushx[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_rpop[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_linsert[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_rpoplpush[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_blpop[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_brpop[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_brpoplpush[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_hdel[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_hexists[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_hget[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_hgetall[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_hincrby[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_hincrbyfloat[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_hkeys[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_hlen[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_hset[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_hsetnx[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_hmset[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_hmget[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_hvals[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_sadd[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_scard[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_sdiff[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_sdiffstore[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_sinter[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_sinterstore[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_sismember[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_smembers[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_smove[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_spop[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_srandmember[FakeStrictRedis]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_srem[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_sunion[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_sunionstore[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_zadd[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_zcard[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_zcount[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_zincrby[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_zinterstore[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_zrange[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_zrangebyscore[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_rangebylex[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_zrem[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_zremrangebyrank[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_zremrangebyscore[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_zremrangebylex[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_zlexcount[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_zrevrange[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_zrevrangebyscore[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_zrevrangebylex[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_zrevran[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_zscore[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_zunionstor[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_pipeline[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_transaction[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_lock[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_pubsub[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_pfadd[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_pfmerge[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_scan[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_sscan[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_hscan[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_scan_iter[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_sscan_iter[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestFakeStrictRedisConnectionErrors",
                "name": "test_hscan_iter[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestPubSubConnected",
                "name": "test_basic_subscribe[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_connection.TestPubSubConnected",
                "name": "test_subscription_conn_lost[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_extract_args",
                "name": "test_extract_args",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_extract_args",
                "name": "test_extract_args__should_raise_error",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_extract_args",
                "name": "test_extract_args__should_return_something",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_extract_args",
                "name": "test_extract_args__multiple_numbers",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_extract_args",
                "name": "test_extract_args__extract_non_numbers",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_extract_args",
                "name": "test_extract_args__extract_maxlen",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_general",
                "name": "test_singleton",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_general",
                "name": "test_asyncioio_is_used",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_general",
                "name": "test_unknown_command[StrictRedis]",
                "time": 0.064,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_general",
                "name": "test_unknown_command[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_general",
                "name": "test_new_server_when_no_params",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_init_args",
                "name": "test_multidb_redispy4[StrictRedis]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test is not applicable to redis-py 4.5.5 (above, 5)",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_init_args",
                "name": "test_multidb_redispy4[FakeStrictRedis]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test is not applicable to redis-py 4.5.5 (above, 5)",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_init_args.TestInitArgs",
                "name": "test_singleton",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_init_args.TestInitArgs",
                "name": "test_host_init_arg",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_init_args.TestInitArgs",
                "name": "test_from_url",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_init_args.TestInitArgs",
                "name": "test_from_url_user",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_init_args.TestInitArgs",
                "name": "test_from_url_user_password",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_init_args.TestInitArgs",
                "name": "test_from_url_with_db_arg",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_init_args.TestInitArgs",
                "name": "test_from_url_db_value_error",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_init_args.TestInitArgs",
                "name": "test_can_pass_through_extra_args",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_init_args.TestInitArgs",
                "name": "test_can_allow_extra_args",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_init_args.TestInitArgs",
                "name": "test_repr",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_init_args.TestInitArgs",
                "name": "test_from_unix_socket",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_init_args.TestInitArgs",
                "name": "test_same_connection_params",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mock",
                "name": "test_mock",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_ping[fake]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_ping[real]",
                "time": 0.045,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_types[fake]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_types[real]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_transaction[fake]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_transaction[real]",
                "time": 0.056,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_transaction_fail[fake]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_transaction_fail[real]",
                "time": 0.035,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_pubsub[fake]",
                "time": 0.027,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_pubsub[real]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_blocking_ready[fake]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_blocking_ready[real]",
                "time": 0.085,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_wrongtype_error[fake]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_wrongtype_error[real]",
                "time": 0.027,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_syntax_error[fake]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_syntax_error[real]",
                "time": 0.042,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_no_script_error[fake]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_no_script_error[real]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio.TestScripts",
                "name": "test_failed_script_error6[fake]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio.TestScripts",
                "name": "test_failed_script_error6[real]",
                "time": 0.098,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio.TestScripts",
                "name": "test_failed_script_error7[fake]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio.TestScripts",
                "name": "test_failed_script_error7[real]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_repr[fake]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_not_connected[fake]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_disconnect_server[fake]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_xdel[fake]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_xdel[real]",
                "time": 0.085,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_from_url",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_from_url_with_server[fake]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_without_server",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_without_server_disconnected",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_async",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_connection_disconnect[False]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_connection_disconnect[True]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio",
                "name": "test_connection_with_username_and_password",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio.TestInitArgs",
                "name": "test_singleton",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio.TestInitArgs",
                "name": "test_host_init_arg",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio.TestInitArgs",
                "name": "test_from_url",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio.TestInitArgs",
                "name": "test_from_url_user",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio.TestInitArgs",
                "name": "test_from_url_user_password",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio.TestInitArgs",
                "name": "test_from_url_with_db_arg",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio.TestInitArgs",
                "name": "test_from_url_db_value_error",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio.TestInitArgs",
                "name": "test_can_pass_through_extra_args",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio.TestInitArgs",
                "name": "test_can_allow_extra_args",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio.TestInitArgs",
                "name": "test_repr",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_redis_asyncio.TestInitArgs",
                "name": "test_from_unix_socket",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_sscan_delete_key_while_scanning_should_not_returns_it_in_scan[StrictRedis]",
                "time": 0.026,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_sscan_delete_key_while_scanning_should_not_returns_it_in_scan[FakeStrictRedis]",
                "time": 0.029,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_hscan_delete_key_while_scanning_should_not_returns_it_in_scan[StrictRedis]",
                "time": 0.042,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_hscan_delete_key_while_scanning_should_not_returns_it_in_scan[FakeStrictRedis]",
                "time": 0.029,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_scan_delete_unseen_key_while_scanning_should_not_returns_it_in_scan[StrictRedis]",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_scan_delete_unseen_key_while_scanning_should_not_returns_it_in_scan[FakeStrictRedis]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_scan_delete_seen_key_while_scanning_should_return_all_keys[StrictRedis]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_scan_delete_seen_key_while_scanning_should_return_all_keys[FakeStrictRedis]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_scan_add_key_while_scanning_should_return_all_keys[StrictRedis]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_scan_add_key_while_scanning_should_return_all_keys[FakeStrictRedis]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_scan[StrictRedis]",
                "time": 0.066,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_scan[FakeStrictRedis]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_scan_single[StrictRedis]",
                "time": 0.025,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_scan_single[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_scan_iter_single_page[StrictRedis]",
                "time": 0.115,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: syntax error",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_scan_iter_single_page[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_scan_iter_multiple_pages[StrictRedis]",
                "time": 0.263,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert {b'key:88', b...'key:93', ...} == {b'key:0', b'...'key:13', ...}\n  Extra items in the right set:\n  b'key:48'\n  b'key:25'\n  b'key:34'\n  b'key:17'\n  b'key:26'\n  b'key:32'\n  b'key:5'\n  b'key:43'\n  b'key:58'\n  b'key:45'\n  b'key:8'\n  b'key:51'\n  b'key:44'\n  b'key:54'\n  b'key:29'\n  b'key:65'\n  b'key:57'\n  b'key:77'\n  b'key:15'\n  b'key:22'\n  b'key:33'\n  b'key:3'\n  b'key:36'\n  b'key:0'\n  b'key:50'\n  b'key:40'\n  b'key:87'\n  b'key:42'\n  b'key:64'\n  b'key:66'\n  b'key:71'\n  b'key:1'\n  b'key:79'\n  b'key:86'\n  b'key:63'\n  b'key:61'\n  b'key:70'\n  b'key:69'\n  b'key:19'\n  b'key:21'\n  b'key:75'\n  b'key:68'\n  b'key:74'\n  b'key:2'\n  b'key:82'\n  b'key:12'\n  b'key:41'\n  b'key:4'\n  b'key:56'\n  b'key:83'\n  b'key:49'\n  b'key:84'\n  b'key:30'\n  b'key:10'\n  b'key:76'\n  b'key:39'\n  b'key:81'\n  b'key:80'\n  b'key:14'\n  b'key:55'\n  b'key:73'\n  b'key:23'\n  b'key:72'\n  b'key:31'\n  b'key:18'\n  b'key:53'\n  b'key:9'\n  b'key:7'\n  b'key:38'\n  b'key:13'\n  b'key:24'\n  b'key:28'\n  b'key:46'\n  b'key:59'\n  b'key:60'\n  b'key:11'\n  b'key:37'\n  b'key:16'\n  b'key:47'\n  b'key:35'\n  b'key:85'\n  b'key:67'\n  b'key:62'\n  b'key:78'\n  b'key:20'\n  b'key:52'\n  b'key:27'\n  b'key:6'\n  Full diff:\n    {\n  -  b'key:0',\n  -  b'key:1',\n  -  b'key:10',\n  -  b'key:11',\n  -  b'key:12',\n  -  b'key:13',\n  -  b'key:14',\n  -  b'key:15',\n  -  b'key:16',\n  -  b'key:17',\n  -  b'key:18',\n  -  b'key:19',\n  -  b'key:2',\n  -  b'key:20',\n  -  b'key:21',\n  -  b'key:22',\n  -  b'key:23',\n  -  b'key:24',\n  -  b'key:25',\n  -  b'key:26',\n  -  b'key:27',\n  -  b'key:28',\n  -  b'key:29',\n  -  b'key:3',\n  -  b'key:30',\n  -  b'key:31',\n  -  b'key:32',\n  -  b'key:33',\n  -  b'key:34',\n  -  b'key:35',\n  -  b'key:36',\n  -  b'key:37',\n  -  b'key:38',\n  -  b'key:39',\n  -  b'key:4',\n  -  b'key:40',\n  -  b'key:41',\n  -  b'key:42',\n  -  b'key:43',\n  -  b'key:44',\n  -  b'key:45',\n  -  b'key:46',\n  -  b'key:47',\n  -  b'key:48',\n  -  b'key:49',\n  -  b'key:5',\n  -  b'key:50',\n  -  b'key:51',\n  -  b'key:52',\n  -  b'key:53',\n  -  b'key:54',\n  -  b'key:55',\n  -  b'key:56',\n  -  b'key:57',\n  -  b'key:58',\n  -  b'key:59',\n  -  b'key:6',\n  -  b'key:60',\n  -  b'key:61',\n  -  b'key:62',\n  -  b'key:63',\n  -  b'key:64',\n  -  b'key:65',\n  -  b'key:66',\n  -  b'key:67',\n  -  b'key:68',\n  -  b'key:69',\n  -  b'key:7',\n  -  b'key:70',\n  -  b'key:71',\n  -  b'key:72',\n  -  b'key:73',\n  -  b'key:74',\n  -  b'key:75',\n  -  b'key:76',\n  -  b'key:77',\n  -  b'key:78',\n  -  b'key:79',\n  -  b'key:8',\n  -  b'key:80',\n  -  b'key:81',\n  -  b'key:82',\n  -  b'key:83',\n  -  b'key:84',\n  -  b'key:85',\n  -  b'key:86',\n  -  b'key:87',\n     b'key:88',\n     b'key:89',\n  -  b'key:9',\n     b'key:90',\n     b'key:91',\n     b'key:92',\n     b'key:93',\n     b'key:94',\n     b'key:95',\n     b'key:96',\n     b'key:97',\n     b'key:98',\n     b'key:99',\n    }",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_scan_iter_multiple_pages[FakeStrictRedis]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_scan_iter_multiple_pages_with_match[StrictRedis]",
                "time": 0.218,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert {b'key:97', b...8', b'key:99'} == {b'key:0', b'...'key:13', ...}\n  Extra items in the right set:\n  b'key:92'\n  b'key:90'\n  b'key:48'\n  b'key:88'\n  b'key:25'\n  b'key:34'\n  b'key:17'\n  b'key:26'\n  b'key:32'\n  b'key:5'\n  b'key:43'\n  b'key:58'\n  b'key:45'\n  b'key:8'\n  b'key:51'\n  b'key:44'\n  b'key:54'\n  b'key:29'\n  b'key:65'\n  b'key:57'\n  b'key:77'\n  b'key:15'\n  b'key:22'\n  b'key:33'\n  b'key:3'\n  b'key:89'\n  b'key:36'\n  b'key:0'\n  b'key:50'\n  b'key:40'\n  b'key:87'\n  b'key:42'\n  b'key:64'\n  b'key:66'\n  b'key:71'\n  b'key:1'\n  b'key:79'\n  b'key:86'\n  b'key:96'\n  b'key:63'\n  b'key:61'\n  b'key:70'\n  b'key:69'\n  b'key:19'\n  b'key:21'\n  b'key:75'\n  b'key:95'\n  b'key:68'\n  b'key:91'\n  b'key:74'\n  b'key:2'\n  b'key:82'\n  b'key:12'\n  b'key:94'\n  b'key:41'\n  b'key:4'\n  b'key:56'\n  b'key:83'\n  b'key:93'\n  b'key:49'\n  b'key:84'\n  b'key:30'\n  b'key:10'\n  b'key:76'\n  b'key:39'\n  b'key:81'\n  b'key:80'\n  b'key:14'\n  b'key:55'\n  b'key:73'\n  b'key:23'\n  b'key:72'\n  b'key:31'\n  b'key:18'\n  b'key:53'\n  b'key:9'\n  b'key:7'\n  b'key:38'\n  b'key:13'\n  b'key:24'\n  b'key:28'\n  b'key:46'\n  b'key:59'\n  b'key:60'\n  b'key:11'\n  b'key:37'\n  b'key:16'\n  b'key:47'\n  b'key:35'\n  b'key:85'\n  b'key:67'\n  b'key:62'\n  b'key:78'\n  b'key:20'\n  b'key:52'\n  b'key:27'\n  b'key:6'\n  Full diff:\n    {\n  -  b'key:0',\n  -  b'key:1',\n  -  b'key:10',\n  -  b'key:11',\n  -  b'key:12',\n  -  b'key:13',\n  -  b'key:14',\n  -  b'key:15',\n  -  b'key:16',\n  -  b'key:17',\n  -  b'key:18',\n  -  b'key:19',\n  -  b'key:2',\n  -  b'key:20',\n  -  b'key:21',\n  -  b'key:22',\n  -  b'key:23',\n  -  b'key:24',\n  -  b'key:25',\n  -  b'key:26',\n  -  b'key:27',\n  -  b'key:28',\n  -  b'key:29',\n  -  b'key:3',\n  -  b'key:30',\n  -  b'key:31',\n  -  b'key:32',\n  -  b'key:33',\n  -  b'key:34',\n  -  b'key:35',\n  -  b'key:36',\n  -  b'key:37',\n  -  b'key:38',\n  -  b'key:39',\n  -  b'key:4',\n  -  b'key:40',\n  -  b'key:41',\n  -  b'key:42',\n  -  b'key:43',\n  -  b'key:44',\n  -  b'key:45',\n  -  b'key:46',\n  -  b'key:47',\n  -  b'key:48',\n  -  b'key:49',\n  -  b'key:5',\n  -  b'key:50',\n  -  b'key:51',\n  -  b'key:52',\n  -  b'key:53',\n  -  b'key:54',\n  -  b'key:55',\n  -  b'key:56',\n  -  b'key:57',\n  -  b'key:58',\n  -  b'key:59',\n  -  b'key:6',\n  -  b'key:60',\n  -  b'key:61',\n  -  b'key:62',\n  -  b'key:63',\n  -  b'key:64',\n  -  b'key:65',\n  -  b'key:66',\n  -  b'key:67',\n  -  b'key:68',\n  -  b'key:69',\n  -  b'key:7',\n  -  b'key:70',\n  -  b'key:71',\n  -  b'key:72',\n  -  b'key:73',\n  -  b'key:74',\n  -  b'key:75',\n  -  b'key:76',\n  -  b'key:77',\n  -  b'key:78',\n  -  b'key:79',\n  -  b'key:8',\n  -  b'key:80',\n  -  b'key:81',\n  -  b'key:82',\n  -  b'key:83',\n  -  b'key:84',\n  -  b'key:85',\n  -  b'key:86',\n  -  b'key:87',\n  -  b'key:88',\n  -  b'key:89',\n  -  b'key:9',\n  -  b'key:90',\n  -  b'key:91',\n  -  b'key:92',\n  -  b'key:93',\n  -  b'key:94',\n  -  b'key:95',\n  -  b'key:96',\n     b'key:97',\n     b'key:98',\n     b'key:99',\n    }",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_scan_iter_multiple_pages_with_match[FakeStrictRedis]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_scan_multiple_pages_with_count_arg[StrictRedis]",
                "time": 0.065,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert {b'key:65', b...'key:70', ...} == {b'key:0', b'...'key:13', ...}\n  Extra items in the right set:\n  b'key:48'\n  b'key:49'\n  b'key:30'\n  b'key:25'\n  b'key:34'\n  b'key:17'\n  b'key:10'\n  b'key:26'\n  b'key:39'\n  b'key:14'\n  b'key:32'\n  b'key:55'\n  b'key:5'\n  b'key:43'\n  b'key:58'\n  b'key:45'\n  b'key:23'\n  b'key:8'\n  b'key:51'\n  b'key:44'\n  b'key:54'\n  b'key:31'\n  b'key:29'\n  b'key:18'\n  b'key:57'\n  b'key:53'\n  b'key:15'\n  b'key:22'\n  b'key:33'\n  b'key:3'\n  b'key:56'\n  b'key:36'\n  b'key:9'\n  b'key:7'\n  b'key:0'\n  b'key:50'\n  b'key:38'\n  b'key:40'\n  b'key:42'\n  b'key:64'\n  b'key:1'\n  b'key:13'\n  b'key:24'\n  b'key:28'\n  b'key:63'\n  b'key:61'\n  b'key:46'\n  b'key:59'\n  b'key:60'\n  b'key:11'\n  b'key:37'\n  b'key:19'\n  b'key:21'\n  b'key:16'\n  b'key:47'\n  b'key:35'\n  b'key:62'\n  b'key:2'\n  b'key:20'\n  b'key:52'\n  b'key:12'\n  b'key:27'\n  b'key:41'\n  b'key:4'\n  b'key:6'\n  Full diff:\n    {\n  -  b'key:0',\n  -  b'key:1',\n  -  b'key:10',\n  -  b'key:11',\n  -  b'key:12',\n  -  b'key:13',\n  -  b'key:14',\n  -  b'key:15',\n  -  b'key:16',\n  -  b'key:17',\n  -  b'key:18',\n  -  b'key:19',\n  -  b'key:2',\n  -  b'key:20',\n  -  b'key:21',\n  -  b'key:22',\n  -  b'key:23',\n  -  b'key:24',\n  -  b'key:25',\n  -  b'key:26',\n  -  b'key:27',\n  -  b'key:28',\n  -  b'key:29',\n  -  b'key:3',\n  -  b'key:30',\n  -  b'key:31',\n  -  b'key:32',\n  -  b'key:33',\n  -  b'key:34',\n  -  b'key:35',\n  -  b'key:36',\n  -  b'key:37',\n  -  b'key:38',\n  -  b'key:39',\n  -  b'key:4',\n  -  b'key:40',\n  -  b'key:41',\n  -  b'key:42',\n  -  b'key:43',\n  -  b'key:44',\n  -  b'key:45',\n  -  b'key:46',\n  -  b'key:47',\n  -  b'key:48',\n  -  b'key:49',\n  -  b'key:5',\n  -  b'key:50',\n  -  b'key:51',\n  -  b'key:52',\n  -  b'key:53',\n  -  b'key:54',\n  -  b'key:55',\n  -  b'key:56',\n  -  b'key:57',\n  -  b'key:58',\n  -  b'key:59',\n  -  b'key:6',\n  -  b'key:60',\n  -  b'key:61',\n  -  b'key:62',\n  -  b'key:63',\n  -  b'key:64',\n     b'key:65',\n     b'key:66',\n     b'key:67',\n     b'key:68',\n     b'key:69',\n  -  b'key:7',\n     b'key:70',\n     b'key:71',\n     b'key:72',\n     b'key:73',\n     b'key:74',\n     b'key:75',\n     b'key:76',\n     b'key:77',\n     b'key:78',\n     b'key:79',\n  -  b'key:8',\n     b'key:80',\n     b'key:81',\n     b'key:82',\n     b'key:83',\n     b'key:84',\n     b'key:85',\n     b'key:86',\n     b'key:87',\n     b'key:88',\n     b'key:89',\n  -  b'key:9',\n     b'key:90',\n     b'key:91',\n     b'key:92',\n     b'key:93',\n     b'key:94',\n     b'key:95',\n     b'key:96',\n     b'key:97',\n     b'key:98',\n     b'key:99',\n    }",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_scan_multiple_pages_with_count_arg[FakeStrictRedis]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_scan_all_in_single_call[StrictRedis]",
                "time": 0.034,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert {b'key:10', b...'key:15', ...} == {b'key:0', b'...'key:13', ...}\n  Extra items in the right set:\n  b'key:1'\n  b'key:2'\n  b'key:3'\n  b'key:4'\n  b'key:0'\n  Full diff:\n    {\n  -  b'key:0',\n  -  b'key:1',\n     b'key:10',\n     b'key:11',\n     b'key:12',\n     b'key:13',\n     b'key:14',\n     b'key:15',\n     b'key:16',\n     b'key:17',\n     b'key:18',\n     b'key:19',\n  -  b'key:2',\n     b'key:20',\n     b'key:21',\n     b'key:22',\n     b'key:23',\n     b'key:24',\n     b'key:25',\n     b'key:26',\n     b'key:27',\n     b'key:28',\n     b'key:29',\n  -  b'key:3',\n     b'key:30',\n     b'key:31',\n     b'key:32',\n     b'key:33',\n     b'key:34',\n     b'key:35',\n     b'key:36',\n     b'key:37',\n     b'key:38',\n     b'key:39',\n  -  b'key:4',\n     b'key:40',\n     b'key:41',\n     b'key:42',\n     b'key:43',\n     b'key:44',\n     b'key:45',\n     b'key:46',\n     b'key:47',\n     b'key:48',\n     b'key:49',\n     b'key:5',\n     b'key:50',\n     b'key:51',\n     b'key:52',\n     b'key:53',\n     b'key:54',\n     b'key:55',\n     b'key:56',\n     b'key:57',\n     b'key:58',\n     b'key:59',\n     b'key:6',\n     b'key:60',\n     b'key:61',\n     b'key:62',\n     b'key:63',\n     b'key:64',\n     b'key:65',\n     b'key:66',\n     b'key:67',\n     b'key:68',\n     b'key:69',\n     b'key:7',\n     b'key:70',\n     b'key:71',\n     b'key:72',\n     b'key:73',\n     b'key:74',\n     b'key:75',\n     b'key:76',\n     b'key:77',\n     b'key:78',\n     b'key:79',\n     b'key:8',\n     b'key:80',\n     b'key:81',\n     b'key:82',\n     b'key:83',\n     b'key:84',\n     b'key:85',\n     b'key:86',\n     b'key:87',\n     b'key:88',\n     b'key:89',\n     b'key:9',\n     b'key:90',\n     b'key:91',\n     b'key:92',\n     b'key:93',\n     b'key:94',\n     b'key:95',\n     b'key:96',\n     b'key:97',\n     b'key:98',\n     b'key:99',\n    }",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scan",
                "name": "test_scan_all_in_single_call[FakeStrictRedis]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_blpop[StrictRedis]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_blpop[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_set_value_to_arg[StrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_set_value_to_arg[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_conditional[StrictRedis]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_conditional[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_table[StrictRedis]",
                "time": 0.046,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_table[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_table_with_nil[StrictRedis]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_table_with_nil[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_table_with_numbers[StrictRedis]",
                "time": 0.047,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_table_with_numbers[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_nested_table[StrictRedis]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_nested_table[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_iterate_over_argv[StrictRedis]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_iterate_over_argv[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_iterate_over_keys[StrictRedis]",
                "time": 0.042,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_iterate_over_keys[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_mget[StrictRedis]",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_mget[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_mget_not_set[StrictRedis]",
                "time": 0.052,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_mget_not_set[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_hgetall[StrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_hgetall[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_hgetall_iterate[StrictRedis]",
                "time": 0.027,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_hgetall_iterate[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_invalid_command[StrictRedis]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_invalid_command[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_syntax_error[StrictRedis]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_syntax_error[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_runtime_error[StrictRedis]",
                "time": 0.071,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_runtime_error[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_more_keys_than_args[StrictRedis]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_more_keys_than_args[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_numkeys_float_string[StrictRedis]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_numkeys_float_string[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_numkeys_integer_string[StrictRedis]",
                "time": 0.058,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_numkeys_integer_string[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_numkeys_negative[StrictRedis]",
                "time": 0.096,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_numkeys_negative[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_numkeys_float[StrictRedis]",
                "time": 0.031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_numkeys_float[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_global_variable[StrictRedis]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_global_variable[FakeStrictRedis]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_global_and_return_ok[StrictRedis]",
                "time": 0.032,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_global_and_return_ok[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_convert_number[StrictRedis]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_convert_number[FakeStrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_convert_bool[StrictRedis]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_convert_bool[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_call_bool6[StrictRedis]",
                "time": 0.262,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_call_bool6[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_call_bool7[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_call_bool7[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_return_error[StrictRedis]",
                "time": 0.354,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_return_error[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_return_redis_error[StrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_return_redis_error[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_return_ok[StrictRedis]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_return_ok[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_return_ok_nested[StrictRedis]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_return_ok_nested[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_return_ok_wrong_type[StrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_return_ok_wrong_type[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_pcall[StrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_pcall[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_pcall_return_value[StrictRedis]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_pcall_return_value[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_delete[StrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_delete[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_exists[StrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_exists[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_flushdb[StrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_flushdb[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_flushall[StrictRedis]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_flushall[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_incrbyfloat[StrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_incrbyfloat[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_lrange[StrictRedis]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_lrange[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_ltrim[StrictRedis]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_ltrim[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_lset[StrictRedis]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_lset[FakeStrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_sdiff[StrictRedis]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_eval_sdiff[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_script[StrictRedis]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_script[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_lua_log[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_lua_log_no_message[StrictRedis]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_lua_log_no_message[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_lua_log_different_types[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_lua_log_wrong_level[StrictRedis]",
                "time": 0.032,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_lua_log_wrong_level[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_lua_log_defined_vars[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_hscan_cursors_are_bytes[StrictRedis]",
                "time": 0.034,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_hscan_cursors_are_bytes[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_deleting_while_scan[StrictRedis]",
                "time": 0.021,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_scripting_lua_only",
                "name": "test_deleting_while_scan[FakeStrictRedis]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd[StrictRedis]",
                "time": 0.024,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_empty[StrictRedis]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_empty[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_minus_zero_redis6[StrictRedis]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_minus_zero_redis6[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_minus_zero_redis7[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_minus_zero_redis7[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_wrong_type[StrictRedis]",
                "time": 0.103,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_wrong_type[FakeStrictRedis]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_multiple[StrictRedis]",
                "time": 0.057,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_multiple[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_nx[StrictRedis-False-param0-0-state0]",
                "time": 0.066,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_nx[StrictRedis-False-param1-1-state1]",
                "time": 0.049,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_nx[StrictRedis-False-param2-2-state2]",
                "time": 0.129,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_nx[StrictRedis-True-param0-0-state0]",
                "time": 0.042,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_nx[StrictRedis-True-param1-1-state1]",
                "time": 0.026,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_nx[StrictRedis-True-param2-2-state2]",
                "time": 0.023,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert [(b'one', 1.0), (b'two', 2.0)] == [(b'one', 1.0...b'four', 4.0)]\n  Right contains 2 more items, first extra item: (b'three', 3.0)\n  Full diff:\n  - [(b'one', 1.0), (b'two', 2.0), (b'three', 3.0), (b'four', 4.0)]\n  + [(b'one', 1.0), (b'two', 2.0)]",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_nx[FakeStrictRedis-False-param0-0-state0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_nx[FakeStrictRedis-False-param1-1-state1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_nx[FakeStrictRedis-False-param2-2-state2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_nx[FakeStrictRedis-True-param0-0-state0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_nx[FakeStrictRedis-True-param1-1-state1]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_nx[FakeStrictRedis-True-param2-2-state2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_gt_and_ch[StrictRedis-param0-0-state0]",
                "time": 0.101,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_gt_and_ch[StrictRedis-param1-2-state1]",
                "time": 0.036,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_gt_and_ch[StrictRedis-param2-2-state2]",
                "time": 0.12,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: syntax error",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_gt_and_ch[FakeStrictRedis-param0-0-state0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_gt_and_ch[FakeStrictRedis-param1-2-state1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_gt_and_ch[FakeStrictRedis-param2-2-state2]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_gt[StrictRedis-param0-0-state0]",
                "time": 0.021,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: syntax error",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_gt[StrictRedis-param1-1-state1]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: syntax error",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_gt[StrictRedis-param2-2-state2]",
                "time": 0.031,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: syntax error",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_gt[FakeStrictRedis-param0-0-state0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_gt[FakeStrictRedis-param1-1-state1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_gt[FakeStrictRedis-param2-2-state2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_ch[StrictRedis-param0-1-state0]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_ch[StrictRedis-param1-2-state1]",
                "time": 0.027,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_ch[StrictRedis-param2-2-state2]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_ch[FakeStrictRedis-param0-1-state0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_ch[FakeStrictRedis-param1-2-state1]",
                "time": 0.029,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_ch[FakeStrictRedis-param2-2-state2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_xx[StrictRedis-False-param0-2-state0]",
                "time": 0.044,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_xx[StrictRedis-False-param1-0-state1]",
                "time": 0.069,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_xx[StrictRedis-False-param2-0-state2]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_xx[StrictRedis-True-param0-2-state0]",
                "time": 0.048,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_xx[StrictRedis-True-param1-0-state1]",
                "time": 0.034,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_xx[StrictRedis-True-param2-0-state2]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_xx[FakeStrictRedis-False-param0-2-state0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_xx[FakeStrictRedis-False-param1-0-state1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_xx[FakeStrictRedis-False-param2-0-state2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_xx[FakeStrictRedis-True-param0-2-state0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_xx[FakeStrictRedis-True-param1-0-state1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_xx[FakeStrictRedis-True-param2-0-state2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_nx_and_xx[StrictRedis-False]",
                "time": 0.057,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_nx_and_xx[StrictRedis-True]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_nx_and_xx[FakeStrictRedis-False]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_nx_and_xx[FakeStrictRedis-True]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_incr[StrictRedis-False]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_incr[StrictRedis-True]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_incr[FakeStrictRedis-False]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_incr[FakeStrictRedis-True]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_xx_and_gt_and_ch[StrictRedis]",
                "time": 0.079,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: syntax error",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_with_xx_and_gt_and_ch[FakeStrictRedis]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_and_zrangebyscore[StrictRedis]",
                "time": 0.096,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_zadd",
                "name": "test_zadd_and_zrangebyscore[FakeStrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_getbit[StrictRedis]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_getbit[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_getbit_wrong_type[StrictRedis]",
                "time": 0.029,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_getbit_wrong_type[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_multiple_bits_set[StrictRedis]",
                "time": 0.035,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert 0 == 1\n +  where 0 = <bound method BasicKeyCommands.getbit of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 1)\n +    where <bound method BasicKeyCommands.getbit of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.getbit",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_multiple_bits_set[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_unset_bits[StrictRedis]",
                "time": 0.025,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_unset_bits[FakeStrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_get_set_bits[StrictRedis]",
                "time": 0.095,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_get_set_bits[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_setbits_and_getkeys[StrictRedis]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_setbits_and_getkeys[FakeStrictRedis]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_setbit_wrong_type[StrictRedis]",
                "time": 0.067,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_setbit_wrong_type[FakeStrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_setbit_expiry[StrictRedis]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_setbit_expiry[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_bitcount[StrictRedis]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_bitcount[FakeStrictRedis]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_bitcount_mode_redis6[StrictRedis]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_bitcount_mode_redis6[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_bitcount_mode_redis7[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_bitcount_mode_redis7[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_bitcount_wrong_type[StrictRedis]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_bitcount_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_bitop[StrictRedis]",
                "time": 0.056,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_bitop[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_bitop_errors[StrictRedis]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_bitop_errors[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_bitpos[StrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_bitpos[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_bitops_mode_redis7[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_bitops_mode_redis7[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_bitops_mode_redis6[StrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_bitops_mode_redis6[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_bitpos_wrong_arguments[StrictRedis]",
                "time": 0.034,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_bitmap_commands",
                "name": "test_bitpos_wrong_arguments[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_expireat_should_return_true_for_existing_key[StrictRedis]",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_expireat_should_return_true_for_existing_key[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_expireat_should_return_false_for_missing_key[StrictRedis]",
                "time": 0.059,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_expireat_should_return_false_for_missing_key[FakeStrictRedis]",
                "time": 0.056,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_del_operator[StrictRedis]",
                "time": 0.054,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_del_operator[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_expire_should_not_handle_floating_point_values[StrictRedis]",
                "time": 0.03,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_expire_should_not_handle_floating_point_values[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_ttl_should_return_minus_one_for_non_expiring_key[StrictRedis]",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_ttl_should_return_minus_one_for_non_expiring_key[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_range_offset_range[StrictRedis]",
                "time": 0.041,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_range_offset_range[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_range_offset_range_and_desc[StrictRedis]",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_range_offset_range_and_desc[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_range_offset_norange[StrictRedis]",
                "time": 0.026,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_range_offset_norange[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_range_with_large_range[StrictRedis]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_range_with_large_range[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_descending[StrictRedis]",
                "time": 0.058,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_descending[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_alpha[StrictRedis]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_alpha[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_foo[StrictRedis]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_foo[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_empty[StrictRedis]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_empty[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_wrong_type[StrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_wrong_type[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_with_store_option[StrictRedis]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_with_store_option[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_with_by_and_get_option[StrictRedis]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_with_by_and_get_option[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_with_hash[StrictRedis]",
                "time": 0.099,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert [b'youngest', b'eldest'] == [b'youngest',...e', b'eldest']\n  At index 1 diff: b'eldest' != b'middle'\n  Right contains one more item: b'eldest'\n  Full diff:\n  - [b'youngest', b'middle', b'eldest']\n  ?               -----------\n  + [b'youngest', b'eldest']",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_with_hash[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_with_set[StrictRedis]",
                "time": 0.055,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_sort_with_set[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_ttl_should_return_minus_two_for_non_existent_key[StrictRedis]",
                "time": 0.05,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_ttl_should_return_minus_two_for_non_existent_key[FakeStrictRedis]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_type[StrictRedis]",
                "time": 0.11,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert b'none' == b'string'\n  At index 0 diff: b'n' != b's'\n  Full diff:\n  - b'string'\n  + b'none'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_type[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_unlink[StrictRedis]",
                "time": 0.021,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_unlink[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_dump_missing[StrictRedis]",
                "time": 0.036,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_dump_missing[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_dump_restore[StrictRedis]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_dump_restore[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_dump_restore_ttl[StrictRedis]",
                "time": 0.051,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_dump_restore_ttl[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_dump_restore_replace[StrictRedis]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_dump_restore_replace[FakeStrictRedis]",
                "time": 0.029,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_restore_exists[StrictRedis]",
                "time": 0.031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_restore_exists[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_restore_invalid_dump[StrictRedis]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_restore_invalid_dump[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_restore_invalid_ttl[StrictRedis]",
                "time": 0.029,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_restore_invalid_ttl[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_set_then_get[StrictRedis]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_set_then_get[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_exists[StrictRedis]",
                "time": 0.032,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_exists[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_expire_should_throw_error[StrictRedis]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_expire_should_throw_error[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_expire_extra_params_return_error[StrictRedis]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_expire_extra_params_return_error[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_expire_should_return_true_for_existing_key[StrictRedis]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_expire_should_return_true_for_existing_key[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_expire_should_return_false_for_missing_key[StrictRedis]",
                "time": 0.03,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_expire_should_return_false_for_missing_key[FakeStrictRedis]",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_watch_expire[StrictRedis]",
                "time": 0.026,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_watch_expire[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_pexpire_should_return_truthy_for_existing_key[StrictRedis]",
                "time": 0.039,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_pexpire_should_return_truthy_for_existing_key[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_pexpire_should_return_falsey_for_missing_key[StrictRedis]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_pexpire_should_return_falsey_for_missing_key[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_pexpireat_should_return_true_for_existing_key[StrictRedis]",
                "time": 0.035,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_pexpireat_should_return_true_for_existing_key[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_pexpireat_should_return_false_for_missing_key[StrictRedis]",
                "time": 0.098,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_pexpireat_should_return_false_for_missing_key[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_pttl_should_return_minus_one_for_non_expiring_key[StrictRedis]",
                "time": 0.094,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_pttl_should_return_minus_one_for_non_expiring_key[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_pttl_should_return_minus_two_for_non_existent_key[StrictRedis]",
                "time": 0.046,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_pttl_should_return_minus_two_for_non_existent_key[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_randomkey_returns_none_on_empty_db[StrictRedis]",
                "time": 0.092,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_randomkey_returns_none_on_empty_db[FakeStrictRedis]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_randomkey_returns_existing_key[StrictRedis]",
                "time": 0.077,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_randomkey_returns_existing_key[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_persist[StrictRedis]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_persist[FakeStrictRedis]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_watch_persist[StrictRedis]",
                "time": 0.052,
                "results": [
                    {
                        "result": "Failure",
                        "message": "Failed: DID NOT RAISE <class 'redis.exceptions.WatchError'>",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_watch_persist[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_set_existing_key_persists[StrictRedis]",
                "time": 0.055,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_set_existing_key_persists[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_set_non_str_keys[StrictRedis]",
                "time": 0.046,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_set_non_str_keys[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_getset_not_exist[StrictRedis]",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_getset_not_exist[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_get_float_type[StrictRedis]",
                "time": 0.025,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_get_float_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_set_float_value[StrictRedis]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_set_float_value[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_expire_should_not_expire__when_no_expire_is_set[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_expire_should_not_expire__when_no_expire_is_set[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_expire_should_not_expire__when_expire_is_set[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_expire_should_not_expire__when_expire_is_set[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_expire_should_expire__when_expire_is_greater[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_expire_should_expire__when_expire_is_greater[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_expire_should_expire__when_expire_is_lessthan[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_expire_should_expire__when_expire_is_lessthan[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_rename[StrictRedis]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_rename[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_rename_nonexistent_key[StrictRedis]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_rename_nonexistent_key[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_renamenx_doesnt_exist[StrictRedis]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_renamenx_doesnt_exist[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_rename_does_exist[StrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_rename_does_exist[FakeStrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_rename_expiry[StrictRedis]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_rename_expiry[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_keys[StrictRedis]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_keys[FakeStrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_contains[StrictRedis]",
                "time": 0.151,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_contains[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_delete[StrictRedis]",
                "time": 0.145,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_delete[FakeStrictRedis]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_delete_multiple[StrictRedis]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_delete_multiple[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_delete_nonexistent_key[StrictRedis]",
                "time": 0.108,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_delete_nonexistent_key[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_basic_sort[StrictRedis]",
                "time": 0.085,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_basic_sort[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_key_patterns[StrictRedis]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_key_patterns[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_watch_when_setbit_does_not_change_value[StrictRedis]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_watch_when_setbit_does_not_change_value[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_from_hypothesis_redis7[StrictRedis]",
                "time": 0.034,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert None == b'\\x00'\n +  where None = <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>(b'')\n +    where <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.get",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_generic_commands",
                "name": "test_from_hypothesis_redis7[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_geoadd_ch[StrictRedis]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: syntax error. Try GEOADD key [x1] [y1] [name1] [x2] [y2] [name2] ...",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_geoadd_ch[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_geoadd[StrictRedis]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_geoadd[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_geoadd_xx[StrictRedis]",
                "time": 0.13,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: syntax error. Try GEOADD key [x1] [y1] [name1] [x2] [y2] [name2] ...",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_geoadd_xx[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_geohash[StrictRedis]",
                "time": 0.107,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_geohash[FakeStrictRedis]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_geopos[StrictRedis]",
                "time": 0.04,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_geopos[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_geodist[StrictRedis]",
                "time": 0.076,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_geodist[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_geodist_units[StrictRedis]",
                "time": 0.042,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_geodist_units[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_geodist_missing_one_member[StrictRedis]",
                "time": 0.06,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_geodist_missing_one_member[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadius[StrictRedis-2.191-41.433-1000-extra0-expected0]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadius[StrictRedis-2.187-41.406-1000-extra1-expected1]",
                "time": 0.028,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert [] == [b'place2']\n  Right contains one more item: b'place2'\n  Full diff:\n  - [b'place2']\n  + []",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadius[StrictRedis-1-2-1000-extra2-expected2]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadius[StrictRedis-2.191-41.433-1-extra3-expected3]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadius[StrictRedis-2.191-41.433-3000-extra4-expected4]",
                "time": 0.024,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadius[FakeStrictRedis-2.191-41.433-1000-extra0-expected0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadius[FakeStrictRedis-2.187-41.406-1000-extra1-expected1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadius[FakeStrictRedis-1-2-1000-extra2-expected2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadius[FakeStrictRedis-2.191-41.433-1-extra3-expected3]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadius[FakeStrictRedis-2.191-41.433-3000-extra4-expected4]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadiusbymember[StrictRedis-place1-1000-extra0-expected0]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadiusbymember[StrictRedis-place2-1000-extra1-expected1]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert [] == [b'place2']\n  Right contains one more item: b'place2'\n  Full diff:\n  - [b'place2']\n  + []",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadiusbymember[StrictRedis-place1-1-extra2-expected2]",
                "time": 0.053,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadiusbymember[StrictRedis-place1-3000-extra3-expected3]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadiusbymember[FakeStrictRedis-place1-1000-extra0-expected0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadiusbymember[FakeStrictRedis-place2-1000-extra1-expected1]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadiusbymember[FakeStrictRedis-place1-1-extra2-expected2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadiusbymember[FakeStrictRedis-place1-3000-extra3-expected3]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadius_with[StrictRedis]",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadius_with[FakeStrictRedis]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadius_count[StrictRedis]",
                "time": 0.138,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert 0 == 1\n +  where 0 = <bound method SortedSetCommands.zcard of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('extract')\n +    where <bound method SortedSetCommands.zcard of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.zcard",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadius_count[FakeStrictRedis]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadius_errors[StrictRedis]",
                "time": 0.077,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_georadius_errors[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_geosearch[StrictRedis]",
                "time": 0.126,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: unknown command `GEOSEARCH`, with args beginning with: `barcelona`, `FROMLONLAT`, `2.191`, `41.433`, `BYRADIUS`, `1000`, `m`,",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_geo_commands",
                "name": "test_geosearch[FakeStrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hstrlen_missing[StrictRedis]",
                "time": 0.115,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hstrlen_missing[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hstrlen[StrictRedis]",
                "time": 0.073,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hstrlen[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hset_then_hget[StrictRedis]",
                "time": 0.076,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hset_then_hget[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hset_update[StrictRedis]",
                "time": 0.038,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hset_update[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hset_wrong_type[StrictRedis]",
                "time": 0.075,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hset_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hgetall[StrictRedis]",
                "time": 0.035,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hgetall[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hgetall_empty_key[StrictRedis]",
                "time": 0.039,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hgetall_empty_key[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hgetall_wrong_type[StrictRedis]",
                "time": 0.025,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hgetall_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hexists[StrictRedis]",
                "time": 0.043,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hexists[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hexists_wrong_type[StrictRedis]",
                "time": 0.029,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hexists_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hkeys[StrictRedis]",
                "time": 0.106,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hkeys[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hkeys_wrong_type[StrictRedis]",
                "time": 0.029,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hkeys_wrong_type[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hlen[StrictRedis]",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hlen[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hlen_wrong_type[StrictRedis]",
                "time": 0.072,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hlen_wrong_type[FakeStrictRedis]",
                "time": 0.026,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hvals[StrictRedis]",
                "time": 0.035,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hvals[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hvals_wrong_type[StrictRedis]",
                "time": 0.045,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hvals_wrong_type[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hmget[StrictRedis]",
                "time": 0.068,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hmget[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hmget_wrong_type[StrictRedis]",
                "time": 0.04,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hmget_wrong_type[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hdel[StrictRedis]",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hdel[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hdel_wrong_type[StrictRedis]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hdel_wrong_type[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hincrby[StrictRedis]",
                "time": 0.037,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hincrby[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hincrby_with_no_starting_value[StrictRedis]",
                "time": 0.107,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hincrby_with_no_starting_value[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hincrby_with_range_param[StrictRedis]",
                "time": 0.162,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hincrby_with_range_param[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hincrby_wrong_type[StrictRedis]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hincrby_wrong_type[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hincrbyfloat[StrictRedis]",
                "time": 0.136,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hincrbyfloat[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hincrbyfloat_with_no_starting_value[StrictRedis]",
                "time": 0.119,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hincrbyfloat_with_no_starting_value[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hincrbyfloat_with_range_param[StrictRedis]",
                "time": 0.047,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hincrbyfloat_with_range_param[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hincrbyfloat_on_non_float_value_raises_error[StrictRedis]",
                "time": 0.052,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hincrbyfloat_on_non_float_value_raises_error[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hincrbyfloat_with_non_float_amount_raises_error[StrictRedis]",
                "time": 0.021,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hincrbyfloat_with_non_float_amount_raises_error[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hincrbyfloat_wrong_type[StrictRedis]",
                "time": 0.081,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hincrbyfloat_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hincrbyfloat_precision[StrictRedis]",
                "time": 0.083,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hincrbyfloat_precision[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hsetnx[StrictRedis]",
                "time": 0.036,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hsetnx[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hmset_empty_raises_error[StrictRedis]",
                "time": 0.055,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hmset_empty_raises_error[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hmset_redispy4[StrictRedis]",
                "time": 0.052,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hmset_redispy4[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hmset_wrong_type[StrictRedis]",
                "time": 0.066,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hmset_wrong_type[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_empty_hash[StrictRedis]",
                "time": 0.039,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_empty_hash[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hset_removing_last_field_delete_key[StrictRedis]",
                "time": 0.03,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hset_removing_last_field_delete_key[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hscan[StrictRedis]",
                "time": 0.071,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert 3 == 20\n +  where 3 = len({b'key:17': b'result:17', b'key:18': b'result:18', b'key:19': b'result:19'})",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hscan[FakeStrictRedis]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hrandfield[StrictRedis]",
                "time": 0.136,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: unknown command `HRANDFIELD`, with args beginning with: `key`,",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_hash_commands",
                "name": "test_hrandfield[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpush_then_lrange_all[StrictRedis]",
                "time": 0.04,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert 2 == 1\n +  where 2 = <bound method ListCommands.lpush of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 'bar')\n +    where <bound method ListCommands.lpush of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.lpush",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpush_then_lrange_all[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpush_then_lrange_portion[StrictRedis]",
                "time": 0.049,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpush_then_lrange_portion[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lrange_negative_indices[StrictRedis]",
                "time": 0.046,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lrange_negative_indices[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpush_key_does_not_exist[StrictRedis]",
                "time": 0.036,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpush_key_does_not_exist[FakeStrictRedis]",
                "time": 0.028,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpush_with_nonstr_key[StrictRedis]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpush_with_nonstr_key[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpush_wrong_type[StrictRedis]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpush_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_llen[StrictRedis]",
                "time": 0.076,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_llen[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_llen_no_exist[StrictRedis]",
                "time": 0.025,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_llen_no_exist[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_llen_wrong_type[StrictRedis]",
                "time": 0.047,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_llen_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lrem_positive_count[StrictRedis]",
                "time": 0.033,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lrem_positive_count[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lrem_negative_count[StrictRedis]",
                "time": 0.053,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert [b'one', b'two', b'three'] == [b'removeme',...wo', b'three']\n  At index 0 diff: b'one' != b'removeme'\n  Right contains one more item: b'three'\n  Full diff:\n  - [b'removeme', b'one', b'two', b'three']\n  ?  -------------\n  + [b'one', b'two', b'three']",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lrem_negative_count[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lrem_zero_count[StrictRedis]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lrem_zero_count[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lrem_default_value[StrictRedis]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lrem_default_value[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lrem_does_not_exist[StrictRedis]",
                "time": 0.026,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lrem_does_not_exist[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lrem_return_value[StrictRedis]",
                "time": 0.029,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lrem_return_value[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lrem_wrong_type[StrictRedis]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lrem_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpush[StrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpush[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpush_wrong_type[StrictRedis]",
                "time": 0.05,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpush_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpop[StrictRedis]",
                "time": 0.043,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpop[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpop_empty_list[StrictRedis]",
                "time": 0.039,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpop_empty_list[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpop_zero_elem[StrictRedis]",
                "time": 0.181,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: wrong number of arguments for 'lpop' command",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpop_zero_elem[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpop_zero_non_existing_list[StrictRedis]",
                "time": 0.241,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: wrong number of arguments for 'lpop' command",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpop_zero_non_existing_list[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpop_zero_wrong_type[StrictRedis]",
                "time": 0.077,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpop_zero_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpop_wrong_type[StrictRedis]",
                "time": 0.045,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpop_wrong_type[FakeStrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpop_count[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 2) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpop_count[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 2) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpop_count_negative[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 2) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpop_count_negative[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 2) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lset[StrictRedis]",
                "time": 0.029,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lset[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lset_index_out_of_range[StrictRedis]",
                "time": 0.108,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lset_index_out_of_range[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lset_wrong_type[StrictRedis]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lset_wrong_type[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpushx[StrictRedis]",
                "time": 0.065,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpushx[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpushx_wrong_type[StrictRedis]",
                "time": 0.057,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpushx_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_ltrim[StrictRedis]",
                "time": 0.03,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_ltrim[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_ltrim_with_non_existent_key[StrictRedis]",
                "time": 0.055,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_ltrim_with_non_existent_key[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_ltrim_expiry[StrictRedis]",
                "time": 0.05,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_ltrim_expiry[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_ltrim_wrong_type[StrictRedis]",
                "time": 0.036,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_ltrim_wrong_type[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lindex[StrictRedis]",
                "time": 0.027,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lindex[FakeStrictRedis]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lindex_wrong_type[StrictRedis]",
                "time": 0.081,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lindex_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpushx[StrictRedis]",
                "time": 0.035,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpushx[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpushx_wrong_type[StrictRedis]",
                "time": 0.078,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lpushx_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpop[StrictRedis]",
                "time": 0.039,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpop[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpop_wrong_type[StrictRedis]",
                "time": 0.033,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpop_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpop_count[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 2) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpop_count[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 2) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpop_count_negative[StrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 2) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpop_count_negative[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 2) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_linsert_before[StrictRedis]",
                "time": 0.06,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_linsert_before[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_linsert_after[StrictRedis]",
                "time": 0.052,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_linsert_after[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_linsert_bad_command[StrictRedis]",
                "time": 0.112,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_linsert_bad_command[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_linsert_no_pivot[StrictRedis]",
                "time": 0.104,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_linsert_no_pivot[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_linsert_wrong_type[StrictRedis]",
                "time": 0.06,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_linsert_wrong_type[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpoplpush[StrictRedis]",
                "time": 0.32,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpoplpush[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpoplpush_to_nonexistent_destination[StrictRedis]",
                "time": 0.079,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpoplpush_to_nonexistent_destination[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpoplpush_expiry[StrictRedis]",
                "time": 0.049,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpoplpush_expiry[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpoplpush_one_to_self[StrictRedis]",
                "time": 0.127,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpoplpush_one_to_self[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpoplpush_wrong_type[StrictRedis]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_rpoplpush_wrong_type[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_blpop_single_list[StrictRedis]",
                "time": 0.15,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_blpop_single_list[FakeStrictRedis]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_blpop_test_multiple_lists[StrictRedis]",
                "time": 0.033,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_blpop_test_multiple_lists[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_blpop_allow_single_key[StrictRedis]",
                "time": 0.135,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_blpop_allow_single_key[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_blpop_wrong_type[StrictRedis]",
                "time": 0.089,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_blpop_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_blpop_transaction[StrictRedis]",
                "time": 0.068,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_blpop_transaction[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_brpop_test_multiple_lists[StrictRedis]",
                "time": 0.036,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_brpop_test_multiple_lists[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_brpop_single_key[StrictRedis]",
                "time": 0.142,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_brpop_single_key[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_brpop_wrong_type[StrictRedis]",
                "time": 0.303,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_brpop_wrong_type[FakeStrictRedis]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_brpoplpush_multi_keys[StrictRedis]",
                "time": 0.177,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_brpoplpush_multi_keys[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_brpoplpush_wrong_type[StrictRedis]",
                "time": 0.029,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_brpoplpush_wrong_type[FakeStrictRedis]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_empty_list[StrictRedis]",
                "time": 0.117,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_empty_list[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lmove_to_nonexistent_destination[StrictRedis]",
                "time": 0.164,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: unknown command `LMOVE`, with args beginning with: `foo`, `bar`, `RIGHT`, `LEFT`,",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lmove_to_nonexistent_destination[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lmove_expiry[StrictRedis]",
                "time": 0.124,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lmove_expiry[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lmove_wrong_type[StrictRedis]",
                "time": 0.179,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lmove_wrong_type[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lmove[StrictRedis]",
                "time": 0.102,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: unknown command `LMOVE`, with args beginning with: `foo`, `bar`, `RIGHT`, `LEFT`,",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lmove[FakeStrictRedis]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_blmove[StrictRedis]",
                "time": 0.056,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: unknown command `BLMOVE`, with args beginning with: `a`, `b`, `LEFT`, `RIGHT`, `5`,",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_blmove[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_list_commands",
                "name": "test_lmove_disconnected_raises_connection_error[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_pubsub_commands",
                "name": "test_ping_pubsub[StrictRedis]",
                "time": 0.215,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_pubsub_commands",
                "name": "test_ping_pubsub[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_pubsub_commands",
                "name": "test_socket_cleanup_pubsub",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_pubsub_commands",
                "name": "test_pubsub_channels[StrictRedis]",
                "time": 0.169,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_pubsub_commands",
                "name": "test_pubsub_channels[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_pubsub_commands",
                "name": "test_pubsub_channels_pattern[StrictRedis]",
                "time": 0.526,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_pubsub_commands",
                "name": "test_pubsub_channels_pattern[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_pubsub_commands",
                "name": "test_pubsub_no_subcommands[StrictRedis]",
                "time": 0.243,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_pubsub_commands",
                "name": "test_pubsub_no_subcommands[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_pubsub_commands",
                "name": "test_pubsub_help_redis7[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_pubsub_commands",
                "name": "test_pubsub_help_redis7[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_pubsub_commands",
                "name": "test_pubsub_help_redis71[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7, 1) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_pubsub_commands",
                "name": "test_pubsub_help_redis71[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7, 1) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_pubsub_commands",
                "name": "test_pubsub_help_redis6[StrictRedis]",
                "time": 0.148,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert [b'PUBSUB <su...ault: none).'] == [b'PUBSUB <su...l> ...]', ...]\n  At index 0 diff: b'PUBSUB <subcommand> arg arg ... arg. Subcommands are:' != b'PUBSUB <subcommand> [<arg> [value] [opt] ...]. Subcommands are:'\n  Right contains 6 more items, first extra item: b'    Return number of subscriptions to patterns.'\n  Full diff:\n    [\n  -  b'PUBSUB <subcommand> [<arg> [value] [opt] ...]. Subcommands are:',\n  ?                        --   ^^^^ ^^^^^^^^^^    ^\n  +  b'PUBSUB <subcommand> arg arg ... arg. Subcommands are:',\n  ?                           ^ ^^    ^^^^\n  +  b'CHANNELS [<pattern>] -- Return the currently active channels matching a patt'\n  +  b'ern (default: all).',\n  -  b'CHANNELS [<pattern>]',\n  -  b\"    Return the currently active channels matching a <pattern> (default: '*')\"\n  -  b'.',\n  -  b'NUMPAT',\n  -  b'    Return number of subscriptions to patterns.',\n  ?    ^^^\n  +  b'NUMPAT -- Return number of subscriptions to patterns.',\n  ?    ^^^^^^^^^\n  +  b'NUMSUB [channel-1 .. channel-N] -- Returns the number of subscribers for the'\n  +  b' specified channels (excluding patterns, default: none).',\n  -  b'NUMSUB [<channel> ...]',\n  -  b'    Return the number of subscribers for the specified channels, excluding',\n  -  b'    pattern subscriptions(default: no channels).',\n  -  b'HELP',\n  -  b'    Prints this help.',\n    ]",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_pubsub_commands",
                "name": "test_pubsub_help_redis6[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_pubsub_commands",
                "name": "test_pubsub_numsub[StrictRedis]",
                "time": 0.148,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_pubsub_commands",
                "name": "test_pubsub_numsub[FakeStrictRedis]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_scripting",
                "name": "test_script_exists_redis7[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_scripting",
                "name": "test_script_exists_redis7[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_scripting",
                "name": "test_script_exists_redis6[StrictRedis]",
                "time": 0.236,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_scripting",
                "name": "test_script_exists_redis6[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_scripting",
                "name": "test_script_flush_errors_with_args[StrictRedis-args0]",
                "time": 0.255,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_scripting",
                "name": "test_script_flush_errors_with_args[StrictRedis-args1]",
                "time": 0.42,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_scripting",
                "name": "test_script_flush_errors_with_args[FakeStrictRedis-args0]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_scripting",
                "name": "test_script_flush_errors_with_args[FakeStrictRedis-args1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_scripting",
                "name": "test_script_flush[StrictRedis]",
                "time": 0.14,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_scripting",
                "name": "test_script_flush[FakeStrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_scripting",
                "name": "test_script_no_subcommands[StrictRedis]",
                "time": 0.042,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_scripting",
                "name": "test_script_no_subcommands[FakeStrictRedis]",
                "time": 0.021,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_scripting",
                "name": "test_script_help[StrictRedis]",
                "time": 0.16,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert [b'SCRIPT <su...xecuting it.'] == [b'SCRIPT <su...C|SYNC]', ...]\n  At index 0 diff: b'SCRIPT <subcommand> arg arg ... arg. Subcommands are:' != b'SCRIPT <subcommand> [<arg> [value] [opt] ...]. Subcommands are:'\n  Right contains 11 more items, first extra item: b'    Flush the Lua scripts cache. Very dangerous on replicas.'\n  Full diff:\n    [\n  -  b'SCRIPT <subcommand> [<arg> [value] [opt] ...]. Subcommands are:',\n  ?                        --   ^^^^ ^^^^^^^^^^    ^\n  +  b'SCRIPT <subcommand> arg arg ... arg. Subcommands are:',\n  ?                           ^ ^^    ^^^^\n  -  b'DEBUG (YES|SYNC|NO)',\n  -  b'    Set the debug mode for subsequent scripts executed.',\n  ?    ^^^\n  +  b'DEBUG (yes|sync|no) -- Set the debug mode for subsequent scripts executed.',\n  ?    ^^^^^^^^^^^^^^^^^^^^^^\n  +  b'EXISTS <sha1> [<sha1> ...] -- Return information about the existence of the '\n  +  b'scripts in the script cache.',\n  -  b'EXISTS <sha1> [<sha1> ...]',\n  -  b'    Return information about the existence of the scripts in the script cach'\n  -  b'e.',\n  -  b'FLUSH [ASYNC|SYNC]',\n  -  b'    Flush the Lua scripts cache. Very dangerous on replicas.',\n  ?    ^^^\n  +  b'FLUSH -- Flush the Lua scripts cache. Very dangerous on replicas.',\n  ?    ^^^^^^^^\n  -  b'    When called without the optional mode argument, the behavior is determin'\n  -  b'ed by the',\n  -  b'    lazyfree-lazy-user-flush configuration directive. Valid modes are:',\n  -  b'    * ASYNC: Asynchronously flush the scripts cache.',\n  -  b'    * SYNC: Synchronously flush the scripts cache.',\n  -  b'KILL',\n  -  b'    Kill the currently executing Lua script.',\n  ?    ^^^\n  +  b'KILL -- Kill the currently executing Lua script.',\n  ?    ^^^^^^^\n  -  b'LOAD <script>',\n  -  b'    Load a script into the scripts cache without executing it.',\n  ?    ---- ^^^^^^\n  +  b'LOAD <script> -- Load a script into the scripts cache, without executing it.',\n  ?     ^^^^^      ++++++++++++++++++                       +\n  -  b'HELP',\n  -  b'    Prints this help.',\n    ]",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_scripting",
                "name": "test_script_help[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_scripting",
                "name": "test_script_help71[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7, 1) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_scripting",
                "name": "test_script_help71[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7, 1) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_server_commands",
                "name": "test_swapdb[StrictRedis]",
                "time": 0.134,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert None == b'abc'\n +  where None = <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=1>>>>('foo')\n +    where <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=1>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=1>>>.get",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_server_commands",
                "name": "test_swapdb[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_server_commands",
                "name": "test_swapdb_same_db[StrictRedis]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_server_commands",
                "name": "test_swapdb_same_db[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_server_commands",
                "name": "test_save[StrictRedis]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_server_commands",
                "name": "test_save[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_server_commands",
                "name": "test_bgsave[StrictRedis]",
                "time": 0.115,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_server_commands",
                "name": "test_bgsave[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_server_commands",
                "name": "test_lastsave[StrictRedis]",
                "time": 0.222,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_server_commands",
                "name": "test_lastsave[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_server_commands",
                "name": "test_dbsize[StrictRedis]",
                "time": 0.139,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert 1 == 0\n +  where 1 = <bound method ManagementCommands.dbsize of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>()\n +    where <bound method ManagementCommands.dbsize of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.dbsize",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_server_commands",
                "name": "test_dbsize[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_server_commands",
                "name": "test_flushdb_redispy4[StrictRedis]",
                "time": 0.1,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_server_commands",
                "name": "test_flushdb_redispy4[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_server_commands",
                "name": "test_flushdb_redispy5[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test is not applicable to redis-py 4.5.5 (above, 5)",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_server_commands",
                "name": "test_flushdb_redispy5[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test is not applicable to redis-py 4.5.5 (above, 5)",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sadd[StrictRedis]",
                "time": 0.083,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sadd[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sadd_as_str_type[StrictRedis]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sadd_as_str_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sadd_wrong_type[StrictRedis]",
                "time": 0.049,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sadd_wrong_type[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_scard[StrictRedis]",
                "time": 0.077,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_scard[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_scard_wrong_type[StrictRedis]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_scard_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sdiff[StrictRedis]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sdiff[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sdiff_one_key[StrictRedis]",
                "time": 0.093,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sdiff_one_key[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sdiff_empty[StrictRedis]",
                "time": 0.024,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sdiff_empty[FakeStrictRedis]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sdiff_wrong_type[StrictRedis]",
                "time": 0.084,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sdiff_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sdiffstore[StrictRedis]",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sdiffstore[FakeStrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sinter[StrictRedis]",
                "time": 0.032,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sinter[FakeStrictRedis]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sinter_bytes_keys[StrictRedis]",
                "time": 0.113,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sinter_bytes_keys[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sinter_wrong_type[StrictRedis]",
                "time": 0.039,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sinter_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sinterstore[StrictRedis]",
                "time": 0.035,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sinterstore[FakeStrictRedis]",
                "time": 0.028,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sismember[StrictRedis]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sismember[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_smismember[StrictRedis]",
                "time": 0.119,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: unknown command `SMISMEMBER`, with args beginning with: `foo`, `member1`, `member2`, `member3`,",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_smismember[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_smismember_wrong_type[StrictRedis]",
                "time": 0.277,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_smismember_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sismember_wrong_type[StrictRedis]",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sismember_wrong_type[FakeStrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_smembers[StrictRedis]",
                "time": 0.093,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_smembers[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_smembers_copy[StrictRedis]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_smembers_copy[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_smembers_wrong_type[StrictRedis]",
                "time": 0.067,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_smembers_wrong_type[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_smembers_runtime_error[StrictRedis]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_smembers_runtime_error[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_smove[StrictRedis]",
                "time": 0.08,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_smove[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_smove_non_existent_key[StrictRedis]",
                "time": 0.036,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_smove_non_existent_key[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_smove_wrong_type[StrictRedis]",
                "time": 0.054,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_smove_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_spop[StrictRedis]",
                "time": 0.021,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_spop[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_spop_wrong_type[StrictRedis]",
                "time": 0.065,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_spop_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_srandmember[StrictRedis]",
                "time": 0.046,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_srandmember[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_srandmember_number[StrictRedis]",
                "time": 0.09,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_srandmember_number[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_srandmember_wrong_type[StrictRedis]",
                "time": 0.029,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_srandmember_wrong_type[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_srem[StrictRedis]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_srem[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_srem_wrong_type[StrictRedis]",
                "time": 0.051,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_srem_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sunion[StrictRedis]",
                "time": 0.055,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sunion[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sunion_wrong_type[StrictRedis]",
                "time": 0.034,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sunion_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sunionstore[StrictRedis]",
                "time": 0.059,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sunionstore[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_empty_set[StrictRedis]",
                "time": 0.043,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_empty_set[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sscan[StrictRedis]",
                "time": 0.054,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sscan[FakeStrictRedis]",
                "time": 0.028,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sintercard[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sintercard[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sintercard_key_doesnt_exist[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sintercard_key_doesnt_exist[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sintercard_bytes_keys[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sintercard_bytes_keys[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sintercard_wrong_type[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sintercard_wrong_type[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sintercard_syntax_error[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_sintercard_syntax_error[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_pfadd[StrictRedis]",
                "time": 0.083,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_pfadd[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_pfcount[StrictRedis]",
                "time": 0.285,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_pfcount[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_pfmerge[StrictRedis]",
                "time": 0.228,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_set_commands",
                "name": "test_pfmerge[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zpopmin[StrictRedis]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zpopmin[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zpopmin_too_many[StrictRedis]",
                "time": 0.031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zpopmin_too_many[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zpopmax[StrictRedis]",
                "time": 0.021,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zpopmax[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrange_same_score[StrictRedis]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrange_same_score[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrange_with_bylex_and_byscore[StrictRedis]",
                "time": 0.026,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrange_with_bylex_and_byscore[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrange_with_rev_and_bylex[StrictRedis]",
                "time": 0.071,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: value is not an integer or out of range",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrange_with_rev_and_bylex[FakeStrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrange_with_bylex[StrictRedis]",
                "time": 0.213,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: value is not an integer or out of range",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrange_with_bylex[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrange_with_byscore[StrictRedis]",
                "time": 0.046,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: syntax error",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrange_with_byscore[FakeStrictRedis]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zcard[StrictRedis]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zcard[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zcard_non_existent_key[StrictRedis]",
                "time": 0.167,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert 2 == 0\n +  where 2 = <bound method SortedSetCommands.zcard of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo')\n +    where <bound method SortedSetCommands.zcard of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.zcard",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zcard_non_existent_key[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zcard_wrong_type[StrictRedis]",
                "time": 0.11,
                "results": [
                    {
                        "result": "Failure",
                        "message": "Failed: DID NOT RAISE <class 'redis.exceptions.ResponseError'>",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zcard_wrong_type[FakeStrictRedis]",
                "time": 0.021,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zcount[StrictRedis]",
                "time": 0.03,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zcount[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zcount_exclusive[StrictRedis]",
                "time": 0.035,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zcount_exclusive[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zcount_wrong_type[StrictRedis]",
                "time": 0.056,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zcount_wrong_type[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zincrby[StrictRedis]",
                "time": 0.062,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zincrby[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zincrby_wrong_type[StrictRedis]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zincrby_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrange_descending[StrictRedis]",
                "time": 0.046,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrange_descending[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrange_descending_with_scores[StrictRedis]",
                "time": 0.034,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrange_descending_with_scores[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrange_with_positive_indices[StrictRedis]",
                "time": 0.07,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrange_with_positive_indices[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrange_wrong_type[StrictRedis]",
                "time": 0.117,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrange_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrange_score_cast[StrictRedis]",
                "time": 0.098,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrange_score_cast[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrank[StrictRedis]",
                "time": 0.068,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrank[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrank_non_existent_member[StrictRedis]",
                "time": 0.116,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrank_non_existent_member[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrank_wrong_type[StrictRedis]",
                "time": 0.126,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrank_wrong_type[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrem[StrictRedis]",
                "time": 0.111,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrem[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrem_non_existent_member[StrictRedis]",
                "time": 0.105,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrem_non_existent_member[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrem_numeric_member[StrictRedis]",
                "time": 0.052,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrem_numeric_member[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrem_wrong_type[StrictRedis]",
                "time": 0.034,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrem_wrong_type[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zscore[StrictRedis]",
                "time": 0.036,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zscore[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zscore_non_existent_member[StrictRedis]",
                "time": 0.113,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zscore_non_existent_member[FakeStrictRedis]",
                "time": 0.067,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zscore_wrong_type[StrictRedis]",
                "time": 0.134,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zscore_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zmscore[StrictRedis]",
                "time": 0.138,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: unknown command `ZMSCORE`, with args beginning with: `scored-set-members`, `one`, `two`, `three`, `four`, `five`, `six`,",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zmscore[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zmscore_missing_members[StrictRedis]",
                "time": 0.124,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: unknown command `ZMSCORE`, with args beginning with: `scored-set-members`, `one`, `two`, `three`, `four`, `five`, `six`,",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zmscore_missing_members[FakeStrictRedis]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zmscore_mixed_membership[StrictRedis]",
                "time": 0.077,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: unknown command `ZMSCORE`, with args beginning with: `scored-set-members`, `one`, `two`, `three`, `four`, `five`, `six`,",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zmscore_mixed_membership[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrank[StrictRedis]",
                "time": 0.21,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrank[FakeStrictRedis]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrank_non_existent_member[StrictRedis]",
                "time": 0.221,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrank_non_existent_member[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrank_wrong_type[StrictRedis]",
                "time": 0.021,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrank_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrange[StrictRedis]",
                "time": 0.032,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrange[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrange_sorted_keys[StrictRedis]",
                "time": 0.076,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrange_sorted_keys[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrange_wrong_type[StrictRedis]",
                "time": 0.064,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrange_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrange_score_cast[StrictRedis]",
                "time": 0.142,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert [(b'two', 2.2...'two_b', 0.0)] == [(b'two', 2.2), (b'one', 1.2)]\n  Left contains one more item: (b'two_b', 0.0)\n  Full diff:\n  - [(b'two', 2.2), (b'one', 1.2)]\n  + [(b'two', 2.2), (b'one', 1.2), (b'two_b', 0.0)]\n  ?                              +++++++++++++++++",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrange_score_cast[FakeStrictRedis]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrange_with_large_int[StrictRedis]",
                "time": 0.175,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrange_with_large_int[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangebyscore[StrictRedis]",
                "time": 0.078,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangebyscore[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangebysore_exclusive[StrictRedis]",
                "time": 0.08,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangebysore_exclusive[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangebyscore_raises_error[StrictRedis]",
                "time": 0.085,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangebyscore_raises_error[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangebyscore_wrong_type[StrictRedis]",
                "time": 0.036,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangebyscore_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangebyscore_slice[StrictRedis]",
                "time": 0.04,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert [b'one_a', b'three_a'] == [b'two_a', b'two_b']\n  At index 0 diff: b'one_a' != b'two_a'\n  Full diff:\n  - [b'two_a', b'two_b']\n  + [b'one_a', b'three_a']",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangebyscore_slice[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangebyscore_withscores[StrictRedis]",
                "time": 0.063,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangebyscore_withscores[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangebyscore_cast_scores[StrictRedis]",
                "time": 0.075,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangebyscore_cast_scores[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrangebyscore[StrictRedis]",
                "time": 0.069,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrangebyscore[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrangebyscore_exclusive[StrictRedis]",
                "time": 0.048,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrangebyscore_exclusive[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrangebyscore_raises_error[StrictRedis]",
                "time": 0.098,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrangebyscore_raises_error[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrangebyscore_wrong_type[StrictRedis]",
                "time": 0.163,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrangebyscore_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrangebyscore_cast_scores[StrictRedis]",
                "time": 0.065,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrangebyscore_cast_scores[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangebylex[StrictRedis]",
                "time": 0.192,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangebylex[FakeStrictRedis]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangebylex_wrong_type[StrictRedis]",
                "time": 0.057,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangebylex_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zlexcount[StrictRedis]",
                "time": 0.216,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zlexcount[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zlexcount_wrong_type[StrictRedis]",
                "time": 0.116,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zlexcount_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangebylex_with_limit[StrictRedis]",
                "time": 0.05,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangebylex_with_limit[FakeStrictRedis]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangebylex_raises_error[StrictRedis]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangebylex_raises_error[FakeStrictRedis]",
                "time": 0.043,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrangebylex[StrictRedis]",
                "time": 0.055,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrangebylex[FakeStrictRedis]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrangebylex_with_limit[StrictRedis]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrangebylex_with_limit[FakeStrictRedis]",
                "time": 0.021,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrangebylex_raises_error[StrictRedis]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrangebylex_raises_error[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrangebylex_wrong_type[StrictRedis]",
                "time": 0.114,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrevrangebylex_wrong_type[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebyrank[StrictRedis]",
                "time": 0.029,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebyrank[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebyrank_negative_indices[StrictRedis]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebyrank_negative_indices[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebyrank_out_of_bounds[StrictRedis]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebyrank_out_of_bounds[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebyrank_wrong_type[StrictRedis]",
                "time": 0.068,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebyrank_wrong_type[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebyscore[StrictRedis]",
                "time": 0.03,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebyscore[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebyscore_exclusive[StrictRedis]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebyscore_exclusive[FakeStrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebyscore_raises_error[StrictRedis]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebyscore_raises_error[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebyscore_badkey[StrictRedis]",
                "time": 0.064,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebyscore_badkey[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebyscore_wrong_type[StrictRedis]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebyscore_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebylex[StrictRedis]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebylex[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebylex_error[StrictRedis]",
                "time": 0.035,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebylex_error[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebylex_badkey[StrictRedis]",
                "time": 0.058,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebylex_badkey[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebylex_wrong_type[StrictRedis]",
                "time": 0.117,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zremrangebylex_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore[StrictRedis]",
                "time": 0.08,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore_sum[StrictRedis]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore_sum[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore_max[StrictRedis]",
                "time": 0.065,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore_max[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore_min[StrictRedis]",
                "time": 0.078,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore_min[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore_weights[StrictRedis]",
                "time": 0.028,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore_weights[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore_nan_to_zero[StrictRedis]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore_nan_to_zero[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore_nan_to_zero2[StrictRedis]",
                "time": 0.039,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore_nan_to_zero2[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore_nan_to_zero_ordering[StrictRedis]",
                "time": 0.034,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore_nan_to_zero_ordering[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore_mixed_set_types[StrictRedis]",
                "time": 0.026,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore_mixed_set_types[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore_badkey[StrictRedis]",
                "time": 0.032,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore_badkey[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore_wrong_type[StrictRedis]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zinterstore[StrictRedis]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zinterstore[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zinterstore_mixed_set_types[StrictRedis]",
                "time": 0.043,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zinterstore_mixed_set_types[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zinterstore_max[StrictRedis]",
                "time": 0.075,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zinterstore_max[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zinterstore_onekey[StrictRedis]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zinterstore_onekey[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zinterstore_nokey[StrictRedis]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zinterstore_nokey[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zinterstore_nan_to_zero[StrictRedis]",
                "time": 0.031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zinterstore_nan_to_zero[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore_nokey[StrictRedis]",
                "time": 0.063,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunionstore_nokey[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zinterstore_wrong_type[StrictRedis]",
                "time": 0.091,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zinterstore_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_empty_zset[StrictRedis]",
                "time": 0.097,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_empty_zset[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zpopmax_too_many[StrictRedis]",
                "time": 0.101,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zpopmax_too_many[FakeStrictRedis]",
                "time": 0.052,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_bzpopmin[StrictRedis]",
                "time": 0.171,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_bzpopmin[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_bzpopmax[StrictRedis]",
                "time": 0.121,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_bzpopmax[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zscan[StrictRedis]",
                "time": 0.102,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zscan[FakeStrictRedis]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrandemember[StrictRedis]",
                "time": 0.038,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: unknown command `ZRANDMEMBER`, with args beginning with: `a`,",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrandemember[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zdiffstore[StrictRedis]",
                "time": 0.128,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: unknown command `ZDIFFSTORE`, with args beginning with: `out`, `2`, `a`, `b`,",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zdiffstore[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zdiff[StrictRedis]",
                "time": 0.044,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: unknown command `ZDIFF`, with args beginning with: `2`, `a`, `b`,",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zdiff[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunion[StrictRedis]",
                "time": 0.052,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: unknown command `ZUNION`, with args beginning with: `3`, `a`, `b`, `c`,",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zunion[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zinter[StrictRedis]",
                "time": 0.198,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: unknown command `ZINTER`, with args beginning with: `3`, `a`, `b`, `c`,",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zinter[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zintercard[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zintercard[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangestore[StrictRedis]",
                "time": 0.163,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: unknown command `ZRANGESTORE`, with args beginning with: `b`, `a`, `0`, `1`,",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_sortedset_commands",
                "name": "test_zrangestore[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xstream",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xadd_redis__green[StrictRedis]",
                "time": 0.162,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xadd_redis__green[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xadd_redis7[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xadd_redis7[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xadd_maxlen[StrictRedis]",
                "time": 0.261,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xadd_maxlen[FakeStrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xadd_minid[StrictRedis]",
                "time": 0.372,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: Invalid stream ID specified as stream command argument",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xadd_minid[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xtrim[StrictRedis]",
                "time": 0.419,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xtrim[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xtrim_minlen_and_length_args[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 2, 4) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xtrim_minlen_and_length_args[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 2, 4) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xadd_nomkstream[StrictRedis]",
                "time": 0.308,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: Invalid stream ID specified as stream command argument",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xadd_nomkstream[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xrevrange[StrictRedis]",
                "time": 0.104,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xrevrange[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xrange[StrictRedis]",
                "time": 0.104,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xrange[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xread[StrictRedis]",
                "time": 0.097,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xread[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xread_bad_commands[StrictRedis]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xread_bad_commands[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xdel[StrictRedis]",
                "time": 0.196,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xdel[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xgroup_destroy[StrictRedis]",
                "time": 0.17,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xgroup_destroy[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xgroup_create_redis6[StrictRedis]",
                "time": 0.175,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xgroup_create_redis6[FakeStrictRedis]",
                "time": 0.031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xgroup_create_redis7[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xgroup_create_redis7[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xgroup_setid_redis7[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xgroup_setid_redis7[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xgroup_delconsumer[StrictRedis]",
                "time": 0.133,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: BUSYGROUP Consumer Group name already exists",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xgroup_delconsumer[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xgroup_createconsumer[StrictRedis]",
                "time": 0.244,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: Unknown subcommand or wrong number of arguments for 'CREATECONSUMER'. Try XGROUP HELP.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xgroup_createconsumer[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xinfo_consumers[StrictRedis]",
                "time": 0.442,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: BUSYGROUP Consumer Group name already exists",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xinfo_consumers[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xreadgroup[StrictRedis]",
                "time": 0.208,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert 0 == 1\n +  where 0 = len([])",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xreadgroup[FakeStrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xinfo_stream[StrictRedis]",
                "time": 0.208,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xinfo_stream[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xack[StrictRedis]",
                "time": 0.183,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: no such key",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xack[FakeStrictRedis]",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xinfo_stream_redis7[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xinfo_stream_redis7[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xinfo_stream_full[StrictRedis]",
                "time": 0.103,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: Unknown subcommand or wrong number of arguments for 'STREAM'. Try XINFO HELP.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xinfo_stream_full[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xpending[StrictRedis]",
                "time": 0.081,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xpending[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xpending_range[StrictRedis]",
                "time": 0.052,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xpending_range[FakeStrictRedis]",
                "time": 0.031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xpending_range_idle[StrictRedis]",
                "time": 0.16,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: syntax error",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xpending_range_idle[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xpending_range_negative[StrictRedis]",
                "time": 0.128,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xpending_range_negative[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xautoclaim_redis6[StrictRedis]",
                "time": 0.145,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: unknown command `XAUTOCLAIM`, with args beginning with: `stream`, `group`, `consumer2`, `0`, `0-0`,",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xautoclaim_redis6[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xautoclaim_redis7[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xautoclaim_redis7[FakeStrictRedis]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xclaim_trimmed_redis7[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xclaim_trimmed_redis7[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xclaim[StrictRedis]",
                "time": 0.119,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: NOGROUP No such key 'stream' or consumer group 'group' in XREADGROUP with GROUP option",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_streams_commands",
                "name": "test_xclaim[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_append[StrictRedis]",
                "time": 0.04,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_append[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_append_with_no_preexisting_key[StrictRedis]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert 4 == 3\n +  where 4 = <bound method BasicKeyCommands.append of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 'bar')\n +    where <bound method BasicKeyCommands.append of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.append",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_append_with_no_preexisting_key[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_append_wrong_type[StrictRedis]",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_append_wrong_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_decr[StrictRedis]",
                "time": 0.056,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_decr[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_decr_newkey[StrictRedis]",
                "time": 0.048,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: value is not an integer or out of range",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_decr_newkey[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_decr_expiry[StrictRedis]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_decr_expiry[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_decr_badtype[StrictRedis]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_decr_badtype[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_get_does_not_exist[StrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_get_does_not_exist[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_get_with_non_str_keys[StrictRedis]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_get_with_non_str_keys[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_get_invalid_type[StrictRedis]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_get_invalid_type[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_getset_exists[StrictRedis]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_getset_exists[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_getset_wrong_type[StrictRedis]",
                "time": 0.113,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_getset_wrong_type[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_getdel[StrictRedis]",
                "time": 0.222,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: unknown command `GETDEL`, with args beginning with: `foo`,",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_getdel[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_getdel_doesnt_exist[StrictRedis]",
                "time": 0.06,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: unknown command `GETDEL`, with args beginning with: `foo`,",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_getdel_doesnt_exist[FakeStrictRedis]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incr_with_no_preexisting_key[StrictRedis]",
                "time": 0.076,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incr_with_no_preexisting_key[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incr_by[StrictRedis]",
                "time": 0.124,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incr_by[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incr_preexisting_key[StrictRedis]",
                "time": 0.106,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incr_preexisting_key[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incr_expiry[StrictRedis]",
                "time": 0.126,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incr_expiry[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incr_bad_type[StrictRedis]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incr_bad_type[FakeStrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incr_with_float[StrictRedis]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incr_with_float[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incr_followed_by_mget[StrictRedis]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incr_followed_by_mget[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incr_followed_by_mget_returns_strings[StrictRedis]",
                "time": 0.037,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incr_followed_by_mget_returns_strings[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incrbyfloat[StrictRedis]",
                "time": 0.058,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incrbyfloat[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incrbyfloat_with_noexist[StrictRedis]",
                "time": 0.31,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incrbyfloat_with_noexist[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incrbyfloat_expiry[StrictRedis]",
                "time": 0.219,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incrbyfloat_expiry[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incrbyfloat_bad_type[StrictRedis]",
                "time": 0.219,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incrbyfloat_bad_type[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incrbyfloat_precision[StrictRedis]",
                "time": 0.244,
                "results": [
                    {
                        "result": "Failure",
                        "message": "redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_incrbyfloat_precision[FakeStrictRedis]",
                "time": 0.04,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_mget[StrictRedis]",
                "time": 0.168,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_mget[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_mget_with_no_keys[StrictRedis]",
                "time": 0.155,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_mget_with_no_keys[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_mget_mixed_types[StrictRedis]",
                "time": 0.219,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_mget_mixed_types[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_mset_with_no_keys[StrictRedis]",
                "time": 0.142,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_mset_with_no_keys[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_mset[StrictRedis]",
                "time": 0.061,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_mset[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_msetnx[StrictRedis]",
                "time": 0.054,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_msetnx[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setex_redispy5[StrictRedis]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test is not applicable to redis-py 4.5.5 (above, 5)",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setex_redispy5[FakeStrictRedis]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test is not applicable to redis-py 4.5.5 (above, 5)",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setex_redispy4[StrictRedis]",
                "time": 0.042,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setex_redispy4[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setex_using_timedelta_redispy4[StrictRedis]",
                "time": 0.038,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setex_using_timedelta_redispy4[FakeStrictRedis]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setex_using_timedelta_redispy5[StrictRedis]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test is not applicable to redis-py 4.5.5 (above, 5)",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setex_using_timedelta_redispy5[FakeStrictRedis]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test is not applicable to redis-py 4.5.5 (above, 5)",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setex_using_float[StrictRedis]",
                "time": 0.098,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setex_using_float[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setex_overflow[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 2) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setex_overflow[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 2) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_ex[StrictRedis]",
                "time": 0.062,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_ex[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_ex_using_timedelta[StrictRedis]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_ex_using_timedelta[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_ex_overflow[StrictRedis]",
                "time": 0.111,
                "results": [
                    {
                        "result": "Failure",
                        "message": "Failed: DID NOT RAISE <class 'redis.exceptions.ResponseError'>",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_ex_overflow[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_px_overflow[StrictRedis]",
                "time": 0.144,
                "results": [
                    {
                        "result": "Failure",
                        "message": "Failed: DID NOT RAISE <class 'redis.exceptions.ResponseError'>",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_px_overflow[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_px[StrictRedis]",
                "time": 0.094,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_px[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_px_using_timedelta[StrictRedis]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_px_using_timedelta[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_conflicting_expire_options[StrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_conflicting_expire_options[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_raises_wrong_ex[StrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_raises_wrong_ex[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_using_timedelta_raises_wrong_ex[StrictRedis]",
                "time": 0.106,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_using_timedelta_raises_wrong_ex[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_raises_wrong_px[StrictRedis]",
                "time": 0.136,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_raises_wrong_px[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_using_timedelta_raises_wrong_px[StrictRedis]",
                "time": 0.202,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_using_timedelta_raises_wrong_px[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setex_raises_wrong_ex[StrictRedis]",
                "time": 0.114,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setex_raises_wrong_ex[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setex_using_timedelta_raises_wrong_ex[StrictRedis]",
                "time": 0.074,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setex_using_timedelta_raises_wrong_ex[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setnx[StrictRedis]",
                "time": 0.157,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert False\n +  where False = <bound method BasicKeyCommands.setnx of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 'bar')\n +    where <bound method BasicKeyCommands.setnx of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.setnx",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setnx[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_nx[StrictRedis]",
                "time": 0.207,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert None is True\n +  where None = <bound method BasicKeyCommands.set of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 'bar', nx=True)\n +    where <bound method BasicKeyCommands.set of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.set",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_nx[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_xx[StrictRedis]",
                "time": 0.036,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert True is None\n +  where True = <bound method BasicKeyCommands.set of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 'bar', xx=True)\n +    where <bound method BasicKeyCommands.set of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.set",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_xx[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_get[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 2) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_get[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 2) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_get_xx[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 2) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_get_xx[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 2) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_get_nx_redis6[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 2) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_get_nx_redis6[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 2) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_get_nx_redis7[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_set_get_nx_redis7[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_substr[StrictRedis]",
                "time": 0.068,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_substr[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_substr_noexist_key[StrictRedis]",
                "time": 0.068,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_substr_noexist_key[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_substr_wrong_type[StrictRedis]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_substr_wrong_type[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_strlen[StrictRedis]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_strlen[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_strlen_wrong_type[StrictRedis]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_strlen_wrong_type[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setrange[StrictRedis]",
                "time": 0.044,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setrange[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setrange_expiry[StrictRedis]",
                "time": 0.037,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setrange_expiry[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_large_command[StrictRedis]",
                "time": 0.116,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_large_command[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_saving_non_ascii_chars_as_value[StrictRedis]",
                "time": 0.064,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_saving_non_ascii_chars_as_value[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_saving_unicode_type_as_value[StrictRedis]",
                "time": 0.034,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_saving_unicode_type_as_value[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_saving_non_ascii_chars_as_key[StrictRedis]",
                "time": 0.058,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_saving_non_ascii_chars_as_key[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_saving_unicode_type_as_key[StrictRedis]",
                "time": 0.034,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_saving_unicode_type_as_key[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_future_newbytes[StrictRedis]",
                "time": 0.024,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_future_newbytes[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_future_newstr[StrictRedis]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_future_newstr[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setitem_getitem[StrictRedis]",
                "time": 0.071,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_setitem_getitem[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_getitem_non_existent_key[StrictRedis]",
                "time": 0.319,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_getitem_non_existent_key[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_lcs[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_string_commands",
                "name": "test_lcs[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (7,) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_multiple_successful_watch_calls[StrictRedis]",
                "time": 0.229,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_multiple_successful_watch_calls[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_watch_state_is_cleared_after_abort[StrictRedis]",
                "time": 0.322,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_watch_state_is_cleared_after_abort[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_transaction_shortcut[StrictRedis]",
                "time": 0.178,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_transaction_shortcut[FakeStrictRedis]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_transaction_value_from_callable[StrictRedis]",
                "time": 0.12,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_transaction_value_from_callable[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_empty[StrictRedis]",
                "time": 0.258,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_empty[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_length[StrictRedis]",
                "time": 0.358,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_length[FakeStrictRedis]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_no_commands[StrictRedis]",
                "time": 0.097,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_no_commands[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_failed_transaction[StrictRedis]",
                "time": 0.072,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_failed_transaction[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_srem_no_change[StrictRedis]",
                "time": 0.056,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_srem_no_change[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_move[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 0) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_move[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 0) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_exec_bad_arguments[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 0, 6) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_exec_bad_arguments[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 0, 6) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_exec_bad_arguments_abort[StrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 0, 6) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_exec_bad_arguments_abort[FakeStrictRedis]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Redis server (6, 0, 6) or more required but (5, 0, 7) found",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline[StrictRedis]",
                "time": 0.153,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_ignore_errors[StrictRedis]",
                "time": 0.077,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_ignore_errors[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_non_transactional[StrictRedis]",
                "time": 0.065,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_non_transactional[FakeStrictRedis]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_raises_when_watched_key_changed[StrictRedis]",
                "time": 0.118,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_raises_when_watched_key_changed[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_succeeds_despite_unwatched_key_changed[StrictRedis]",
                "time": 0.049,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_succeeds_despite_unwatched_key_changed[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_succeeds_when_watching_nonexistent_key[StrictRedis]",
                "time": 0.042,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_pipeline_succeeds_when_watching_nonexistent_key[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_watch_state_is_cleared_across_multiple_watches[StrictRedis]",
                "time": 0.085,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_watch_state_is_cleared_across_multiple_watches[FakeStrictRedis]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_mixins.test_transactions_commands",
                "name": "test_socket_cleanup_watch",
                "time": 0.054,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code] \ud83d\ude80  Start image=crawlergpt:latest\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py] user=0 workdir=\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code] \u2b50 Run Main actions/checkout@v3\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \u2705  Success - Main actions/checkout@v3\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code] \u2b50 Run Main actions/setup-python@v4\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udc33  docker cp src=/tmp/act-cache/86d1fb2d-e0c2-4e60-b659-e346d48c656e/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \u2753  ::group::Installed versions\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::Semantic version spec of 3.11 is 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::isExplicit: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::explicit? false\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::evaluating 6 versions\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::match not found\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Version 3.11 was not found in the local cache\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::Getting manifest from actions/python-versions@main\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::set auth\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::check 3.12.0-beta.3 satisfies 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::check 3.12.0-beta.2 satisfies 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::check 3.12.0-beta.1 satisfies 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::check 3.12.0-alpha.7 satisfies 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::check 3.12.0-alpha.6 satisfies 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::check 3.12.0-alpha.5 satisfies 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::check 3.12.0-alpha.4 satisfies 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::check 3.12.0-alpha.3 satisfies 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::check 3.12.0-alpha.2 satisfies 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::check 3.12.0-alpha.1 satisfies 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::check 3.11.4 satisfies 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::arm64===x64 && darwin===linux\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::x64===x64 && darwin===linux\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::x64===x64 && linux===linux\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::matched 3.11.4\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Version 3.11 is available for downloading\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Download from \"https://github.com/actions/python-versions/releases/download/3.11.4-5199054971/python-3.11.4-linux-20.04-x64.tar.gz\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::Downloading https://github.com/actions/python-versions/releases/download/3.11.4-5199054971/python-3.11.4-linux-20.04-x64.tar.gz\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::Destination /tmp/88177ab8-0ce0-4ed7-b514-cdfd4ecdfd5d\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::set auth\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::download complete\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Extract downloaded archive\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::Checking tar --version\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::tar (GNU tar) 1.30%0ACopyright (C) 2017 Free Software Foundation, Inc.%0ALicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.%0AThis is free software: you are free to change and redistribute it.%0AThere is NO WARRANTY, to the extent permitted by law.%0A%0AWritten by John Gilmore and Jay Fenlason.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | [command]/usr/bin/tar xz --warning=no-unknown-keyword -C /tmp/52d08b23-8062-4a97-8884-986bbe754dc2 -f /tmp/88177ab8-0ce0-4ed7-b514-cdfd4ecdfd5d\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Execute installation script\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Check if Python hostedtoolcache folder exist...\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Create Python 3.11.4 folder\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Copy Python binaries to hostedtoolcache folder\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Create additional symlinks (Required for the UsePythonVersion Azure Pipelines task and the setup-python GitHub Action)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Upgrading pip...\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Looking in links: /tmp/tmp5eujn8o9\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages (65.5.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages (23.1.2)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Collecting pip\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 2.1/2.1 MB 18.4 MB/s eta 0:00:00\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Installing collected packages: pip\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Successfully installed pip-23.1.2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Create complete file\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::isExplicit: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::explicit? false\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::isExplicit: 3.11.4\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::evaluating 7 versions\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::matched: 3.11.4\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.11.4/x64\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udcac  ::debug::Found tool in cache Python 3.11.4 x64\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Successfully set up CPython (3.11.4)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \u2753  ::endgroup::\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \u2705  Success - Main actions/setup-python@v4\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.11.4/x64/lib\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.11.4/x64\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.11.4/x64/lib/pkgconfig\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.11.4/x64\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.11.4/x64\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.11.4/x64\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.11.4/x64/bin/python\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \u2699  ::set-output:: python-version=3.11.4\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.11.4/x64\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.11.4/x64/bin\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code] \u2b50 Run Main Install dependencies\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Creating virtualenv fakeredis-tyrOQ6-o-py3.11 in /home/runneradmin/.cache/pypoetry/virtualenvs\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Installing dependencies from lock file\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Package operations: 67 installs, 0 updates, 0 removals\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing pycparser (2.21)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing cffi (1.15.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing certifi (2023.5.7)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing charset-normalizer (3.1.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing cryptography (41.0.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing distlib (0.3.6)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing filelock (3.12.2)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing idna (3.4)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing jeepney (0.8.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing mdurl (0.1.2)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing more-itertools (9.1.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing packaging (23.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing platformdirs (3.8.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing six (1.16.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing urllib3 (2.0.3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing webencodings (0.5.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing zipp (3.15.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing bleach (6.0.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing cachetools (5.3.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing chardet (5.1.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing colorama (0.4.6)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing docutils (0.20.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing importlib-metadata (6.7.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing jaraco-classes (3.2.3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing markdown-it-py (2.2.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing iniconfig (2.0.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing pycodestyle (2.10.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing pyflakes (3.0.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing pyproject-api (1.5.2)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing mccabe (0.7.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing pygments (2.15.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing pluggy (1.2.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing virtualenv (20.23.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing secretstorage (3.3.3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing requests (2.31.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing wrapt (1.15.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing websocket-client (1.6.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing attrs (23.1.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing coverage (7.2.7)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing docker (6.1.3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing deprecated (1.2.14)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing flake8 (6.0.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing keyring (24.1.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing mypy-extensions (1.0.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing pkginfo (1.9.6)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing pyjwt (2.7.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing pynacl (1.5.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing pytest (7.4.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing requests-toolbelt (1.0.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing rich (13.4.2)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing readme-renderer (37.3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing rfc3986 (2.0.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing sortedcontainers (2.4.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing tox (4.6.3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing typing-extensions (4.7.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing types-pyopenssl (23.2.0.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing flake8-pyproject (1.2.3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing hypothesis (6.79.4)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing mypy (1.4.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing pygithub (1.59.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing pytest-asyncio (0.21.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing pytest-cov (4.1.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing pytest-mock (3.11.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing redis (4.6.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing tox-docker (4.1.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing twine (4.0.2)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   \u2022 Installing types-redis (4.6.0.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Installing the current project: fakeredis (2.15.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \u2705  Success - Main Install dependencies\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \u2699  ::add-path:: /home/runneradmin/.poetry/bin\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code] \u2b50 Run Main Run flake8\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3.sh] user= workdir=\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \u2705  Success - Main Run flake8\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code] \u2b50 Run Main Test import\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Building fakeredis (2.15.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   - Building sdist\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   - Built fakeredis-2.15.1.tar.gz\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   - Building wheel\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   - Built fakeredis-2.15.1-py3-none-any.whl\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Processing ./dist/fakeredis-2.15.1.tar.gz\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   Installing build dependencies: started\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   Installing build dependencies: finished with status 'done'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   Getting requirements to build wheel: started\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   Getting requirements to build wheel: finished with status 'done'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   Preparing metadata (pyproject.toml): started\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Collecting redis>=4 (from fakeredis==2.15.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   Downloading redis-4.6.0-py3-none-any.whl (241 kB)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 241.1/241.1 kB 3.5 MB/s eta 0:00:00\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Collecting sortedcontainers<3,>=2 (from fakeredis==2.15.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   Downloading sortedcontainers-2.4.0-py2.py3-none-any.whl (29 kB)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Building wheels for collected packages: fakeredis\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   Building wheel for fakeredis (pyproject.toml): started\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   Building wheel for fakeredis (pyproject.toml): finished with status 'done'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   Created wheel for fakeredis: filename=fakeredis-2.15.1-py3-none-any.whl size=65648 sha256=5c0337ca13c72b77db3cdd6d63ad011f3ba7588745efa9734eb7537740cc49d2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/62/c7/34/0c0d8cc708ba2d9a8ed5edd5c1ae8652d8123d6647fd27414f\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Successfully built fakeredis\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Installing collected packages: sortedcontainers, redis, fakeredis\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   | Successfully installed fakeredis-2.15.1 redis-4.6.0 sortedcontainers-2.4.0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \u2705  Success - Main Test import\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code] \u2b50 Run Post actions/setup-python@v4\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/cache-save/index.js] user= workdir=\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code]   \u2705  Success - Post actions/setup-python@v4\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/flake8 on code] \ud83c\udfc1  Job succeeded\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2] \ud83d\ude80  Start image=crawlergpt:latest\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ] \ud83d\ude80  Start image=crawlergpt:latest\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py] user=0 workdir=\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py] user=0 workdir=\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2] \ud83e\uddea  Matrix: map[hypothesis:true lupa:true python-version:3.11 redis-image:redis:6.2.12 redis-py:4.5.5]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2] \u2b50 Run Main actions/checkout@v3\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \u2705  Success - Main actions/checkout@v3\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2] \u2b50 Run Main actions/setup-python@v4\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udc33  docker cp src=/tmp/act-cache/86d1fb2d-e0c2-4e60-b659-e346d48c656e/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ] \ud83e\uddea  Matrix: map[python-version:3.7 redis-image:redis:6.2.12 redis-py:4.3.6]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ] \u2b50 Run Main actions/checkout@v3\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \u2705  Success - Main actions/checkout@v3\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ] \u2b50 Run Main actions/setup-python@v4\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udc33  docker cp src=/tmp/act-cache/86d1fb2d-e0c2-4e60-b659-e346d48c656e/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \u2753  ::group::Installed versions\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::Semantic version spec of 3.11 is 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::isExplicit: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::explicit? false\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::evaluating 6 versions\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \u2753  ::group::Installed versions\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udcac  ::debug::isExplicit: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udcac  ::debug::explicit? false\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::match not found\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Version 3.11 was not found in the local cache\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::Getting manifest from actions/python-versions@main\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::set auth\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udcac  ::debug::evaluating 6 versions\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udcac  ::debug::matched: 3.7.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Successfully set up CPython (3.7.11)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \u2753  ::endgroup::\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \u2705  Success - Main actions/setup-python@v4\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib/pkgconfig\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \u2699  ::set-output:: python-version=3.7.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ] \u2b50 Run Main Install dependencies\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::check 3.12.0-beta.3 satisfies 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::check 3.12.0-beta.2 satisfies 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::check 3.12.0-beta.1 satisfies 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::check 3.12.0-alpha.7 satisfies 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::check 3.12.0-alpha.6 satisfies 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::check 3.12.0-alpha.5 satisfies 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::check 3.12.0-alpha.4 satisfies 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::check 3.12.0-alpha.3 satisfies 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::check 3.12.0-alpha.2 satisfies 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::check 3.12.0-alpha.1 satisfies 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::check 3.11.4 satisfies 3.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::arm64===x64 && darwin===linux\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::x64===x64 && darwin===linux\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::x64===x64 && linux===linux\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::matched 3.11.4\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Version 3.11 is available for downloading\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Download from \"https://github.com/actions/python-versions/releases/download/3.11.4-5199054971/python-3.11.4-linux-20.04-x64.tar.gz\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::Downloading https://github.com/actions/python-versions/releases/download/3.11.4-5199054971/python-3.11.4-linux-20.04-x64.tar.gz\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::Destination /tmp/e0f769a8-4f7c-4d86-95d6-8bf83e6f6c54\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::set auth\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::download complete\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Extract downloaded archive\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::Checking tar --version\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::tar (GNU tar) 1.30%0ACopyright (C) 2017 Free Software Foundation, Inc.%0ALicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.%0AThis is free software: you are free to change and redistribute it.%0AThere is NO WARRANTY, to the extent permitted by law.%0A%0AWritten by John Gilmore and Jay Fenlason.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | [command]/usr/bin/tar xz --warning=no-unknown-keyword -C /tmp/b2810834-d441-4679-b434-c395fc196b01 -f /tmp/e0f769a8-4f7c-4d86-95d6-8bf83e6f6c54\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Execute installation script\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Check if Python hostedtoolcache folder exist...\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Create Python 3.11.4 folder\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Copy Python binaries to hostedtoolcache folder\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Create additional symlinks (Required for the UsePythonVersion Azure Pipelines task and the setup-python GitHub Action)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Upgrading pip...\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Looking in links: /tmp/tmpfvuiyu7_\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages (65.5.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages (23.1.2)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Collecting pip\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 2.1/2.1 MB 8.1 MB/s eta 0:00:00\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Installing collected packages: pip\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Successfully installed pip-23.1.2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Create complete file\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::isExplicit: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::explicit? false\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::isExplicit: 3.11.4\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::explicit? true\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::evaluating 7 versions\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::matched: 3.11.4\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.11.4/x64\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udcac  ::debug::Found tool in cache Python 3.11.4 x64\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Successfully set up CPython (3.11.4)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \u2753  ::endgroup::\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \u2705  Success - Main actions/setup-python@v4\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.11.4/x64\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.11.4/x64/lib/pkgconfig\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.11.4/x64\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.11.4/x64\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.11.4/x64\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.11.4/x64/lib\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \u2699  ::set-output:: python-version=3.11.4\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.11.4/x64/bin/python\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.11.4/x64\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.11.4/x64/bin\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2] \u2b50 Run Main Install dependencies\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.7.11/x64/bin/python -m pip install --upgrade pip' command.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Creating virtualenv fakeredis-tyrOQ6-o-py3.7 in /home/runneradmin/.cache/pypoetry/virtualenvs\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Installing dependencies from lock file\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Package operations: 67 installs, 0 updates, 0 removals\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing pycparser (2.21)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing cffi (1.15.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing typing-extensions (4.7.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing zipp (3.15.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing certifi (2023.5.7)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing charset-normalizer (3.1.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing cryptography (41.0.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing distlib (0.3.6)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing filelock (3.12.2)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing idna (3.4)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing importlib-metadata (6.7.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing jeepney (0.8.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing mdurl (0.1.2)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing more-itertools (9.1.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing packaging (23.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing platformdirs (3.8.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing six (1.16.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing tomli (2.0.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing urllib3 (2.0.3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing webencodings (0.5.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing bleach (6.0.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing cachetools (5.3.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing chardet (5.1.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing colorama (0.4.6)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing docutils (0.20.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing exceptiongroup (1.1.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing importlib-resources (5.12.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing iniconfig (2.0.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing jaraco-classes (3.2.3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing markdown-it-py (2.2.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing pluggy (1.2.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing pygments (2.15.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing pyproject-api (1.5.2)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing requests (2.31.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing secretstorage (3.3.3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing virtualenv (20.23.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing websocket-client (1.6.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing wrapt (1.15.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing async-timeout (4.0.2)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing attrs (23.1.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing coverage (7.2.7)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing deprecated (1.2.14)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing docker (6.1.3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing keyring (24.1.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing mypy-extensions (1.0.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing pkginfo (1.9.6)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing pyjwt (2.7.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing pynacl (1.5.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing pytest (7.4.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing readme-renderer (37.3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing requests-toolbelt (1.0.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing rfc3986 (2.0.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing rich (13.4.2)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing sortedcontainers (2.4.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing tox (4.6.3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing typed-ast (1.5.4)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing types-pyopenssl (23.2.0.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing hypothesis (6.79.4)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing mypy (1.4.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing pygithub (1.59.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing pytest-asyncio (0.21.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing pytest-cov (4.1.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing pytest-mock (3.11.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing redis (4.6.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing tox-docker (4.1.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing twine (4.0.2)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   \u2022 Installing types-redis (4.6.0.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Installing the current project: fakeredis (2.15.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Collecting redis==4.3.6\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Downloading redis-4.3.6-py3-none-any.whl (248 kB)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Creating virtualenv fakeredis-tyrOQ6-o-py3.11 in /home/runneradmin/.cache/pypoetry/virtualenvs\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 248.8/248.8 kB 5.2 MB/s eta 0:00:00\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Requirement already satisfied: packaging>=20.4 in /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages (from redis==4.3.6) (23.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Requirement already satisfied: async-timeout>=4.0.2 in /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages (from redis==4.3.6) (4.0.2)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Requirement already satisfied: importlib-metadata>=1.0 in /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages (from redis==4.3.6) (6.7.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Requirement already satisfied: typing-extensions in /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages (from redis==4.3.6) (4.7.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Requirement already satisfied: zipp>=0.5 in /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages (from importlib-metadata>=1.0->redis==4.3.6) (3.15.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Installing dependencies from lock file\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Installing collected packages: redis\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Attempting uninstall: redis\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     Found existing installation: redis 4.6.0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     Uninstalling redis-4.6.0:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |       Successfully uninstalled redis-4.6.0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | Successfully installed redis-4.3.6\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Package operations: 67 installs, 0 updates, 0 removals\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing pycparser (2.21)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing cffi (1.15.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \u2705  Success - Main Install dependencies\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing certifi (2023.5.7)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing charset-normalizer (3.1.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing cryptography (41.0.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing distlib (0.3.6)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing filelock (3.12.2)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing idna (3.4)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing jeepney (0.8.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing mdurl (0.1.2)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing more-itertools (9.1.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing packaging (23.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing platformdirs (3.8.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing six (1.16.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing urllib3 (2.0.3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing webencodings (0.5.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing zipp (3.15.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \u2699  ::add-path:: /home/runneradmin/.poetry/bin\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ] \u2b50 Run Main Get version\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/getVersion.sh] user= workdir=\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing bleach (6.0.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing cachetools (5.3.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing chardet (5.1.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing docutils (0.20.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing importlib-metadata (6.7.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing colorama (0.4.6)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing iniconfig (2.0.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing jaraco-classes (3.2.3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing mccabe (0.7.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing markdown-it-py (2.2.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing pluggy (1.2.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing pygments (2.15.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing requests (2.31.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing secretstorage (3.3.3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing pyflakes (3.0.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing websocket-client (1.6.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing pycodestyle (2.10.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing pyproject-api (1.5.2)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing virtualenv (20.23.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing wrapt (1.15.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing attrs (23.1.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing coverage (7.2.7)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing docker (6.1.3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing flake8 (6.0.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing keyring (24.1.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing deprecated (1.2.14)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing pkginfo (1.9.6)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing pyjwt (2.7.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing pynacl (1.5.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing pytest (7.4.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing mypy-extensions (1.0.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing requests-toolbelt (1.0.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing readme-renderer (37.3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing rfc3986 (2.0.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing sortedcontainers (2.4.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing tox (4.6.3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing typing-extensions (4.7.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing types-pyopenssl (23.2.0.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing rich (13.4.2)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing flake8-pyproject (1.2.3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing hypothesis (6.79.4)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing mypy (1.4.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing pygithub (1.59.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing pytest-asyncio (0.21.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing pytest-cov (4.1.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing pytest-mock (3.11.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing redis (4.6.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing tox-docker (4.1.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing twine (4.0.2)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   \u2022 Installing types-redis (4.6.0.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Installing the current project: fakeredis (2.15.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Collecting redis==4.5.5\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Downloading redis-4.5.5-py3-none-any.whl (240 kB)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 240.3/240.3 kB 2.7 MB/s eta 0:00:00\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Installing collected packages: redis\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Attempting uninstall: redis\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     Found existing installation: redis 4.6.0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     Uninstalling redis-4.6.0:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |       Successfully uninstalled redis-4.6.0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Successfully installed redis-4.5.5\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \u2705  Success - Main Install dependencies\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \u2699  ::add-path:: /home/runneradmin/.poetry/bin\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2] \u2b50 Run Main Install lupa\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \u2705  Success - Main Get version\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Requirement already satisfied: fakeredis[lua] in /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages (2.15.1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \u2699  ::set-output:: VERSION=2.15.1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Collecting lupa<2.0,>=1.14 (from fakeredis[lua])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Downloading lupa-1.14.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl (283 kB)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 283.7/283.7 kB 7.3 MB/s eta 0:00:00\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Requirement already satisfied: redis>=4 in /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages (from fakeredis[lua]) (4.5.5)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Requirement already satisfied: sortedcontainers<3,>=2 in /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages (from fakeredis[lua]) (2.4.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ] \u2b50 Run Main Test without coverage\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/6] user= workdir=\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Installing collected packages: lupa\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | Successfully installed lupa-1.14.1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \u2705  Success - Main Install lupa\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2] \u2b50 Run Main Get version\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/getVersion.sh] user= workdir=\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \u2705  Success - Main Get version\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \u2699  ::set-output:: VERSION=2.15.1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2] \u2b50 Run Main Test without coverage\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/6] user= workdir=\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ============================= test session starts ==============================\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | platform linux -- Python 3.7.11, pytest-7.4.0, pluggy-1.2.0 -- /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/bin/python\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | cachedir: .pytest_cache\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py/.hypothesis/examples')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | rootdir: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | configfile: pyproject.toml\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | plugins: mock-3.11.1, cov-4.1.0, hypothesis-6.79.4, asyncio-0.21.0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | asyncio: mode=strict\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | collecting ... collected 1401 items / 83 deselected / 4 skipped / 1318 selected\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::test_ping[StrictRedis] PASSED                   [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::test_ping[FakeStrictRedis] PASSED               [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::test_echo[StrictRedis] PASSED                   [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::test_echo[FakeStrictRedis] PASSED               [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::test_time[FakeStrictRedis] PASSED               [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestDecodeResponses::test_decode_str[StrictRedis] PASSED [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestDecodeResponses::test_decode_str[FakeStrictRedis] PASSED [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestDecodeResponses::test_decode_set[StrictRedis] PASSED [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestDecodeResponses::test_decode_set[FakeStrictRedis] PASSED [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestDecodeResponses::test_decode_list[StrictRedis] PASSED [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestDecodeResponses::test_decode_list[FakeStrictRedis] PASSED [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestDecodeResponses::test_decode_dict[StrictRedis] PASSED [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestDecodeResponses::test_decode_dict[FakeStrictRedis] PASSED [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestDecodeResponses::test_decode_error[StrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestDecodeResponses::test_decode_error[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_flushdb[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_flushall[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_append[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_bitcount[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_decr[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_exists[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_expire[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_pexpire[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_echo[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_get[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_getbit[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_getset[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_incr[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_incrby[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_ncrbyfloat[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_keys[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_mget[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_mset[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_msetnx[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_persist[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_rename[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_eval[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_lpush[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_lrange[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_llen[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_lrem[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_rpush[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_lpop[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_lset[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_rpushx[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_ltrim[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_lindex[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_lpushx[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_rpop[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_linsert[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_rpoplpush[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_blpop[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_brpop[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_brpoplpush[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hdel[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hexists[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hget[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hgetall[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hincrby[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hincrbyfloat[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hkeys[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hlen[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hset[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hsetnx[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hmset[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hmget[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hvals[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_sadd[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_scard[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_sdiff[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_sdiffstore[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_sinter[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_sinterstore[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_sismember[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_smembers[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_smove[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_spop[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_srandmember[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_srem[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_sunion[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_sunionstore[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zadd[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zcard[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zcount[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zincrby[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zinterstore[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zrange[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zrangebyscore[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_rangebylex[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zrem[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zremrangebyrank[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zremrangebyscore[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zremrangebylex[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zlexcount[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zrevrange[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zrevrangebyscore[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zrevrangebylex[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zrevran[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zscore[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zunionstor[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_pipeline[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_transaction[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_lock[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_pubsub[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_pfadd[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_pfmerge[FakeStrictRedis] PASSED [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_scan[FakeStrictRedis] PASSED [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_sscan[FakeStrictRedis] PASSED [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hscan[FakeStrictRedis] PASSED [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_scan_iter[FakeStrictRedis] PASSED [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_sscan_iter[FakeStrictRedis] PASSED [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hscan_iter[FakeStrictRedis] PASSED [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestPubSubConnected::test_basic_subscribe[FakeStrictRedis] PASSED [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestPubSubConnected::test_subscription_conn_lost[FakeStrictRedis] PASSED [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_extract_args.py::test_extract_args PASSED                      [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_extract_args.py::test_extract_args__should_raise_error PASSED  [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_extract_args.py::test_extract_args__should_return_something PASSED [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_extract_args.py::test_extract_args__multiple_numbers PASSED    [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_extract_args.py::test_extract_args__extract_non_numbers PASSED [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_extract_args.py::test_extract_args__extract_maxlen PASSED      [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_general.py::test_singleton PASSED                              [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_general.py::test_asyncioio_is_used PASSED                      [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_general.py::test_unknown_command[StrictRedis] PASSED           [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_general.py::test_unknown_command[FakeStrictRedis] PASSED       [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_general.py::test_new_server_when_no_params PASSED              [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_init_args.py::test_multidb_redispy4[StrictRedis] SKIPPED (...) [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_init_args.py::test_multidb_redispy4[FakeStrictRedis] SKIPPED   [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_init_args.py::TestInitArgs::test_singleton PASSED              [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_init_args.py::TestInitArgs::test_host_init_arg PASSED          [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_init_args.py::TestInitArgs::test_from_url PASSED               [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_init_args.py::TestInitArgs::test_from_url_user PASSED          [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ============================= test session starts ==============================\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0 -- /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/bin/python\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | cachedir: .pytest_cache\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py/.hypothesis/examples')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | rootdir: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | configfile: pyproject.toml\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | plugins: mock-3.11.1, cov-4.1.0, hypothesis-6.79.4, asyncio-0.21.0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | asyncio: mode=Mode.STRICT\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_init_args.py::TestInitArgs::test_from_url_user_password PASSED [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_init_args.py::TestInitArgs::test_from_url_with_db_arg PASSED   [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_init_args.py::TestInitArgs::test_from_url_db_value_error PASSED [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_init_args.py::TestInitArgs::test_can_pass_through_extra_args PASSED [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_init_args.py::TestInitArgs::test_can_allow_extra_args PASSED   [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_init_args.py::TestInitArgs::test_repr PASSED                   [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_init_args.py::TestInitArgs::test_from_unix_socket PASSED       [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_init_args.py::TestInitArgs::test_same_connection_params PASSED [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mock.py::test_mock PASSED                                      [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_ping[fake] PASSED                       [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_ping[real] PASSED                       [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_types[fake] PASSED                      [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_types[real] PASSED                      [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_transaction[fake] PASSED                [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_transaction[real] PASSED                [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_transaction_fail[fake] PASSED           [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_transaction_fail[real] PASSED           [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_pubsub[fake] PASSED                     [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_pubsub[real] PASSED                     [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_blocking_ready[fake] PASSED             [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_blocking_ready[real] PASSED             [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_wrongtype_error[fake] PASSED            [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_wrongtype_error[real] PASSED            [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_syntax_error[fake] PASSED               [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_syntax_error[real] PASSED               [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_no_script_error[fake] PASSED            [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_no_script_error[real] PASSED            [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::TestScripts::test_failed_script_error6[fake] SKIPPED [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::TestScripts::test_failed_script_error6[real] SKIPPED [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::TestScripts::test_failed_script_error7[fake] SKIPPED [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::TestScripts::test_failed_script_error7[real] SKIPPED [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_repr[fake] PASSED                       [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_not_connected[fake] PASSED              [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_disconnect_server[fake] PASSED          [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_xdel[fake] PASSED                       [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_xdel[real] PASSED                       [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_from_url PASSED                         [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_from_url_with_server[fake] PASSED       [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_without_server PASSED                   [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_without_server_disconnected PASSED      [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_async PASSED                            [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_connection_disconnect[False] SKIPPED    [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_connection_disconnect[True] SKIPPED     [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::test_connection_with_username_and_password PASSED [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::TestInitArgs::test_singleton PASSED          [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::TestInitArgs::test_host_init_arg PASSED      [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::TestInitArgs::test_from_url PASSED           [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::TestInitArgs::test_from_url_user PASSED      [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::TestInitArgs::test_from_url_user_password PASSED [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::TestInitArgs::test_from_url_with_db_arg PASSED [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::TestInitArgs::test_from_url_db_value_error PASSED [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::TestInitArgs::test_can_pass_through_extra_args PASSED [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::TestInitArgs::test_can_allow_extra_args PASSED [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::TestInitArgs::test_repr PASSED               [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_redis_asyncio.py::TestInitArgs::test_from_unix_socket PASSED   [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_sscan_delete_key_while_scanning_should_not_returns_it_in_scan[StrictRedis] PASSED [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_sscan_delete_key_while_scanning_should_not_returns_it_in_scan[FakeStrictRedis] PASSED [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_hscan_delete_key_while_scanning_should_not_returns_it_in_scan[StrictRedis] PASSED [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_hscan_delete_key_while_scanning_should_not_returns_it_in_scan[FakeStrictRedis] PASSED [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_scan_delete_unseen_key_while_scanning_should_not_returns_it_in_scan[StrictRedis] PASSED [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_scan_delete_unseen_key_while_scanning_should_not_returns_it_in_scan[FakeStrictRedis] PASSED [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_scan_delete_seen_key_while_scanning_should_return_all_keys[StrictRedis] XPASS [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_scan_delete_seen_key_while_scanning_should_return_all_keys[FakeStrictRedis] XFAIL [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_scan_add_key_while_scanning_should_return_all_keys[StrictRedis] PASSED [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_scan_add_key_while_scanning_should_return_all_keys[FakeStrictRedis] PASSED [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_scan[StrictRedis] PASSED                         [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_scan[FakeStrictRedis] PASSED                     [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_scan_single[StrictRedis] PASSED                  [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_scan_single[FakeStrictRedis] PASSED              [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_scan_iter_single_page[StrictRedis] FAILED        [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_scan_iter_single_page[FakeStrictRedis] PASSED    [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_scan_iter_multiple_pages[StrictRedis] PASSED     [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_scan_iter_multiple_pages[FakeStrictRedis] PASSED [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_scan_iter_multiple_pages_with_match[StrictRedis] PASSED [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_scan_iter_multiple_pages_with_match[FakeStrictRedis] PASSED [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_scan_multiple_pages_with_count_arg[StrictRedis] PASSED [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_scan_multiple_pages_with_count_arg[FakeStrictRedis] PASSED [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_scan_all_in_single_call[StrictRedis] PASSED      [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py::test_scan_all_in_single_call[FakeStrictRedis] PASSED  [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd[StrictRedis] PASSED                         [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd[FakeStrictRedis] PASSED                     [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_empty[StrictRedis] PASSED                   [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_empty[FakeStrictRedis] PASSED               [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_minus_zero_redis6[StrictRedis] PASSED       [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_minus_zero_redis6[FakeStrictRedis] PASSED   [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_minus_zero_redis7[StrictRedis] SKIPPED      [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_minus_zero_redis7[FakeStrictRedis] SKIPPED  [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_wrong_type[StrictRedis] PASSED              [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_wrong_type[FakeStrictRedis] PASSED          [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_multiple[StrictRedis] PASSED                [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_multiple[FakeStrictRedis] PASSED            [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_nx[StrictRedis-False-param0-0-state0] PASSED [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | collecting ... collected 1500 items / 83 deselected / 3 skipped / 1417 selected\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_nx[StrictRedis-False-param1-1-state1] PASSED [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::test_ping[StrictRedis] PASSED                   [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::test_ping[FakeStrictRedis] PASSED               [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_nx[StrictRedis-False-param2-2-state2] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::test_echo[StrictRedis] PASSED                   [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::test_echo[FakeStrictRedis] PASSED               [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::test_time[FakeStrictRedis] PASSED               [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_nx[StrictRedis-True-param0-0-state0] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestDecodeResponses::test_decode_str[StrictRedis] PASSED [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_nx[StrictRedis-True-param1-1-state1] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestDecodeResponses::test_decode_str[FakeStrictRedis] PASSED [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_nx[StrictRedis-True-param2-2-state2] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_nx[FakeStrictRedis-False-param0-0-state0] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_nx[FakeStrictRedis-False-param1-1-state1] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_nx[FakeStrictRedis-False-param2-2-state2] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_nx[FakeStrictRedis-True-param0-0-state0] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_nx[FakeStrictRedis-True-param1-1-state1] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_nx[FakeStrictRedis-True-param2-2-state2] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_gt_and_ch[StrictRedis-param0-0-state0] FAILED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestDecodeResponses::test_decode_set[StrictRedis] FAILED [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestDecodeResponses::test_decode_set[FakeStrictRedis] PASSED [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestDecodeResponses::test_decode_list[StrictRedis] PASSED [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestDecodeResponses::test_decode_list[FakeStrictRedis] PASSED [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestDecodeResponses::test_decode_dict[StrictRedis] PASSED [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestDecodeResponses::test_decode_dict[FakeStrictRedis] PASSED [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestDecodeResponses::test_decode_error[StrictRedis] PASSED [  0%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestDecodeResponses::test_decode_error[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_flushdb[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_flushall[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_append[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_bitcount[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_decr[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_exists[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_expire[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_pexpire[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_echo[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_get[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_getbit[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_getset[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_incr[FakeStrictRedis] PASSED [  1%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_incrby[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_ncrbyfloat[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_keys[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_mget[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_mset[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_msetnx[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_persist[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_rename[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_eval[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_lpush[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_lrange[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_llen[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_lrem[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_rpush[FakeStrictRedis] PASSED [  2%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_lpop[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_lset[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_rpushx[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_ltrim[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_lindex[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_lpushx[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_rpop[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_linsert[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_rpoplpush[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_blpop[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_brpop[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_brpoplpush[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hdel[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hexists[FakeStrictRedis] PASSED [  3%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hget[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hgetall[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hincrby[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hincrbyfloat[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hkeys[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hlen[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hset[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hsetnx[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hmset[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hmget[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hvals[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_sadd[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_scard[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_sdiff[FakeStrictRedis] PASSED [  4%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_sdiffstore[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_sinter[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_sinterstore[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_sismember[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_smembers[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_smove[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_gt_and_ch[StrictRedis-param1-2-state1] FAILED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_spop[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_srandmember[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_srem[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_sunion[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_sunionstore[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zadd[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zcard[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zcount[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zincrby[FakeStrictRedis] PASSED [  5%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zinterstore[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zrange[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zrangebyscore[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_rangebylex[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zrem[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zremrangebyrank[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zremrangebyscore[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zremrangebylex[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zlexcount[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zrevrange[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zrevrangebyscore[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zrevrangebylex[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zrevran[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zscore[FakeStrictRedis] PASSED [  6%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_zunionstor[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_pipeline[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_transaction[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_lock[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_pubsub[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_pfadd[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_pfmerge[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_scan[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_sscan[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hscan[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_scan_iter[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_sscan_iter[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hscan_iter[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestPubSubConnected::test_basic_subscribe[FakeStrictRedis] PASSED [  7%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestPubSubConnected::test_subscription_conn_lost[FakeStrictRedis] PASSED [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_extract_args.py::test_extract_args PASSED                      [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_extract_args.py::test_extract_args__should_raise_error PASSED  [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_extract_args.py::test_extract_args__should_return_something PASSED [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_extract_args.py::test_extract_args__multiple_numbers PASSED    [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_extract_args.py::test_extract_args__extract_non_numbers PASSED [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_extract_args.py::test_extract_args__extract_maxlen PASSED      [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_general.py::test_singleton PASSED                              [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_general.py::test_asyncioio_is_used PASSED                      [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_general.py::test_unknown_command[StrictRedis] PASSED           [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_general.py::test_unknown_command[FakeStrictRedis] PASSED       [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_general.py::test_new_server_when_no_params PASSED              [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_init_args.py::test_multidb_redispy4[StrictRedis] SKIPPED (...) [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_init_args.py::test_multidb_redispy4[FakeStrictRedis] SKIPPED   [  8%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_init_args.py::TestInitArgs::test_singleton PASSED              [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_init_args.py::TestInitArgs::test_host_init_arg PASSED          [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_init_args.py::TestInitArgs::test_from_url PASSED               [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_init_args.py::TestInitArgs::test_from_url_user PASSED          [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_init_args.py::TestInitArgs::test_from_url_user_password PASSED [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_init_args.py::TestInitArgs::test_from_url_with_db_arg PASSED   [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_init_args.py::TestInitArgs::test_from_url_db_value_error PASSED [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_init_args.py::TestInitArgs::test_can_pass_through_extra_args PASSED [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_init_args.py::TestInitArgs::test_can_allow_extra_args PASSED   [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_init_args.py::TestInitArgs::test_repr PASSED                   [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_init_args.py::TestInitArgs::test_from_unix_socket PASSED       [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_init_args.py::TestInitArgs::test_same_connection_params PASSED [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mock.py::test_mock PASSED                                      [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_ping[fake] PASSED                       [  9%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_ping[real] PASSED                       [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_types[fake] PASSED                      [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_types[real] PASSED                      [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_transaction[fake] PASSED                [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_transaction[real] PASSED                [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_transaction_fail[fake] PASSED           [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_transaction_fail[real] PASSED           [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_pubsub[fake] PASSED                     [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_gt_and_ch[StrictRedis-param2-2-state2] FAILED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_pubsub[real] PASSED                     [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_gt_and_ch[FakeStrictRedis-param0-0-state0] PASSED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_blocking_ready[fake] PASSED             [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_gt_and_ch[FakeStrictRedis-param1-2-state1] PASSED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_gt_and_ch[FakeStrictRedis-param2-2-state2] PASSED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_blocking_ready[real] PASSED             [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_wrongtype_error[fake] PASSED            [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_wrongtype_error[real] PASSED            [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_syntax_error[fake] PASSED               [ 10%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_syntax_error[real] PASSED               [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_no_script_error[fake] PASSED            [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_no_script_error[real] PASSED            [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::TestScripts::test_failed_script_error6[fake] PASSED [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::TestScripts::test_failed_script_error6[real] PASSED [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::TestScripts::test_failed_script_error7[fake] SKIPPED [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::TestScripts::test_failed_script_error7[real] SKIPPED [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_repr[fake] PASSED                       [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_not_connected[fake] PASSED              [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_disconnect_server[fake] PASSED          [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_xdel[fake] PASSED                       [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_xdel[real] PASSED                       [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_from_url PASSED                         [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_from_url_with_server[fake] PASSED       [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_without_server PASSED                   [ 11%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_without_server_disconnected PASSED      [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_async PASSED                            [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_connection_disconnect[False] PASSED     [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_connection_disconnect[True] PASSED      [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::test_connection_with_username_and_password PASSED [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::TestInitArgs::test_singleton PASSED          [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::TestInitArgs::test_host_init_arg PASSED      [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::TestInitArgs::test_from_url PASSED           [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::TestInitArgs::test_from_url_user PASSED      [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::TestInitArgs::test_from_url_user_password PASSED [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::TestInitArgs::test_from_url_with_db_arg PASSED [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::TestInitArgs::test_from_url_db_value_error PASSED [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::TestInitArgs::test_can_pass_through_extra_args PASSED [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::TestInitArgs::test_can_allow_extra_args PASSED [ 12%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::TestInitArgs::test_repr PASSED               [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_redis_asyncio.py::TestInitArgs::test_from_unix_socket PASSED   [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_sscan_delete_key_while_scanning_should_not_returns_it_in_scan[StrictRedis] PASSED [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_gt[StrictRedis-param0-0-state0] FAILED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_sscan_delete_key_while_scanning_should_not_returns_it_in_scan[FakeStrictRedis] PASSED [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_hscan_delete_key_while_scanning_should_not_returns_it_in_scan[StrictRedis] PASSED [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_hscan_delete_key_while_scanning_should_not_returns_it_in_scan[FakeStrictRedis] PASSED [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_scan_delete_unseen_key_while_scanning_should_not_returns_it_in_scan[StrictRedis] PASSED [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_scan_delete_unseen_key_while_scanning_should_not_returns_it_in_scan[FakeStrictRedis] PASSED [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_scan_delete_seen_key_while_scanning_should_return_all_keys[StrictRedis] XPASS [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_scan_delete_seen_key_while_scanning_should_return_all_keys[FakeStrictRedis] XFAIL [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_scan_add_key_while_scanning_should_return_all_keys[StrictRedis] PASSED [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_scan_add_key_while_scanning_should_return_all_keys[FakeStrictRedis] PASSED [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_scan[StrictRedis] PASSED                         [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_scan[FakeStrictRedis] PASSED                     [ 13%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_scan_single[StrictRedis] PASSED                  [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_scan_single[FakeStrictRedis] PASSED              [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_gt[StrictRedis-param1-1-state1] FAILED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_scan_iter_single_page[StrictRedis] FAILED        [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_scan_iter_single_page[FakeStrictRedis] PASSED    [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_gt[StrictRedis-param2-2-state2] FAILED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_gt[FakeStrictRedis-param0-0-state0] PASSED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_gt[FakeStrictRedis-param1-1-state1] PASSED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_gt[FakeStrictRedis-param2-2-state2] PASSED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_ch[StrictRedis-param0-1-state0] PASSED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_ch[StrictRedis-param1-2-state1] PASSED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_ch[StrictRedis-param2-2-state2] PASSED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_scan_iter_multiple_pages[StrictRedis] FAILED     [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_ch[FakeStrictRedis-param0-1-state0] PASSED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_ch[FakeStrictRedis-param1-2-state1] PASSED [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_scan_iter_multiple_pages[FakeStrictRedis] PASSED [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_ch[FakeStrictRedis-param2-2-state2] PASSED [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_xx[StrictRedis-False-param0-2-state0] PASSED [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_xx[StrictRedis-False-param1-0-state1] PASSED [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_xx[StrictRedis-False-param2-0-state2] PASSED [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_scan_iter_multiple_pages_with_match[StrictRedis] FAILED [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_xx[StrictRedis-True-param0-2-state0] PASSED [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_scan_iter_multiple_pages_with_match[FakeStrictRedis] PASSED [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_xx[StrictRedis-True-param1-0-state1] PASSED [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_xx[StrictRedis-True-param2-0-state2] PASSED [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_xx[FakeStrictRedis-False-param0-2-state0] PASSED [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_xx[FakeStrictRedis-False-param1-0-state1] PASSED [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_xx[FakeStrictRedis-False-param2-0-state2] PASSED [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_xx[FakeStrictRedis-True-param0-2-state0] PASSED [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_xx[FakeStrictRedis-True-param1-0-state1] PASSED [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_xx[FakeStrictRedis-True-param2-0-state2] PASSED [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_scan_multiple_pages_with_count_arg[StrictRedis] FAILED [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_nx_and_xx[StrictRedis-False] PASSED    [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_scan_multiple_pages_with_count_arg[FakeStrictRedis] PASSED [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_nx_and_xx[StrictRedis-True] PASSED     [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_nx_and_xx[FakeStrictRedis-False] PASSED [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_nx_and_xx[FakeStrictRedis-True] PASSED [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_incr[StrictRedis-False] PASSED              [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_scan_all_in_single_call[StrictRedis] FAILED      [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_incr[StrictRedis-True] PASSED               [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py::test_scan_all_in_single_call[FakeStrictRedis] PASSED  [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_incr[FakeStrictRedis-False] PASSED          [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_blpop[StrictRedis] PASSED     [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_incr[FakeStrictRedis-True] PASSED           [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_blpop[FakeStrictRedis] PASSED [ 14%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_set_value_to_arg[StrictRedis] PASSED [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_set_value_to_arg[FakeStrictRedis] PASSED [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_xx_and_gt_and_ch[StrictRedis] FAILED   [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_conditional[StrictRedis] PASSED [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_with_xx_and_gt_and_ch[FakeStrictRedis] PASSED [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_conditional[FakeStrictRedis] PASSED [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_table[StrictRedis] PASSED     [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_and_zrangebyscore[StrictRedis] PASSED       [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_table[FakeStrictRedis] PASSED [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py::test_zadd_and_zrangebyscore[FakeStrictRedis] PASSED   [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_table_with_nil[StrictRedis] PASSED [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_table_with_nil[FakeStrictRedis] PASSED [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_getbit[StrictRedis] FAILED [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_table_with_numbers[StrictRedis] PASSED [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_getbit[FakeStrictRedis] PASSED [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_table_with_numbers[FakeStrictRedis] PASSED [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_nested_table[StrictRedis] PASSED [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_getbit_wrong_type[StrictRedis] PASSED [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_nested_table[FakeStrictRedis] PASSED [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_getbit_wrong_type[FakeStrictRedis] PASSED [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_iterate_over_argv[StrictRedis] PASSED [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_iterate_over_argv[FakeStrictRedis] PASSED [ 15%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_multiple_bits_set[StrictRedis] PASSED [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_multiple_bits_set[FakeStrictRedis] PASSED [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_iterate_over_keys[StrictRedis] PASSED [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_iterate_over_keys[FakeStrictRedis] PASSED [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_mget[StrictRedis] PASSED      [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_unset_bits[StrictRedis] PASSED [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_mget[FakeStrictRedis] PASSED  [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_unset_bits[FakeStrictRedis] PASSED [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_mget_not_set[StrictRedis] PASSED [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_mget_not_set[FakeStrictRedis] PASSED [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_get_set_bits[StrictRedis] PASSED [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_get_set_bits[FakeStrictRedis] PASSED [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_hgetall[StrictRedis] PASSED   [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_hgetall[FakeStrictRedis] PASSED [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_setbits_and_getkeys[StrictRedis] PASSED [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_setbits_and_getkeys[FakeStrictRedis] PASSED [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_hgetall_iterate[StrictRedis] PASSED [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_hgetall_iterate[FakeStrictRedis] PASSED [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_setbit_wrong_type[StrictRedis] PASSED [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_setbit_wrong_type[FakeStrictRedis] PASSED [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_invalid_command[StrictRedis] PASSED [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_invalid_command[FakeStrictRedis] PASSED [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_setbit_expiry[StrictRedis] PASSED [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_syntax_error[StrictRedis] PASSED [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_setbit_expiry[FakeStrictRedis] PASSED [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_syntax_error[FakeStrictRedis] PASSED [ 16%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_runtime_error[StrictRedis] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_bitcount[StrictRedis] PASSED [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_runtime_error[FakeStrictRedis] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_bitcount[FakeStrictRedis] PASSED [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_more_keys_than_args[StrictRedis] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_more_keys_than_args[FakeStrictRedis] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_bitcount_mode_redis6[StrictRedis] PASSED [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_numkeys_float_string[StrictRedis] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_bitcount_mode_redis6[FakeStrictRedis] PASSED [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_bitcount_mode_redis7[StrictRedis] SKIPPED [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_numkeys_float_string[FakeStrictRedis] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_bitcount_mode_redis7[FakeStrictRedis] SKIPPED [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_numkeys_integer_string[StrictRedis] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_numkeys_integer_string[FakeStrictRedis] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_bitcount_wrong_type[StrictRedis] PASSED [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_bitcount_wrong_type[FakeStrictRedis] PASSED [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_numkeys_negative[StrictRedis] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_numkeys_negative[FakeStrictRedis] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_bitop[StrictRedis] PASSED [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_bitop[FakeStrictRedis] PASSED [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_numkeys_float[StrictRedis] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_numkeys_float[FakeStrictRedis] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_global_variable[StrictRedis] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_global_variable[FakeStrictRedis] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_bitop_errors[StrictRedis] FAILED [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_bitop_errors[FakeStrictRedis] PASSED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_global_and_return_ok[StrictRedis] PASSED [ 17%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_global_and_return_ok[FakeStrictRedis] PASSED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_convert_number[StrictRedis] PASSED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_bitpos[StrictRedis] PASSED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_convert_number[FakeStrictRedis] PASSED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_bitpos[FakeStrictRedis] PASSED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_convert_bool[StrictRedis] PASSED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_bitops_mode_redis7[StrictRedis] SKIPPED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_convert_bool[FakeStrictRedis] PASSED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_bitops_mode_redis7[FakeStrictRedis] SKIPPED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_call_bool6[StrictRedis] PASSED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_call_bool6[FakeStrictRedis] PASSED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_call_bool7[StrictRedis] SKIPPED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_call_bool7[FakeStrictRedis] SKIPPED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_bitops_mode_redis6[StrictRedis] PASSED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_bitops_mode_redis6[FakeStrictRedis] PASSED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_bitpos_wrong_arguments[StrictRedis] PASSED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py::test_bitpos_wrong_arguments[FakeStrictRedis] PASSED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_return_error[StrictRedis] PASSED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_return_error[FakeStrictRedis] PASSED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_expireat_should_return_true_for_existing_key[StrictRedis] PASSED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_return_redis_error[StrictRedis] PASSED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_expireat_should_return_true_for_existing_key[FakeStrictRedis] PASSED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_return_redis_error[FakeStrictRedis] PASSED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_expireat_should_return_false_for_missing_key[StrictRedis] PASSED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_expireat_should_return_false_for_missing_key[FakeStrictRedis] PASSED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_return_ok[StrictRedis] PASSED [ 18%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_return_ok[FakeStrictRedis] PASSED [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_del_operator[StrictRedis] PASSED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_return_ok_nested[StrictRedis] PASSED [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_del_operator[FakeStrictRedis] PASSED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_return_ok_nested[FakeStrictRedis] PASSED [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_return_ok_wrong_type[StrictRedis] PASSED [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_expire_should_not_handle_floating_point_values[StrictRedis] PASSED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_return_ok_wrong_type[FakeStrictRedis] PASSED [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_expire_should_not_handle_floating_point_values[FakeStrictRedis] PASSED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_pcall[StrictRedis] PASSED     [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_pcall[FakeStrictRedis] PASSED [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_ttl_should_return_minus_one_for_non_expiring_key[StrictRedis] PASSED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_ttl_should_return_minus_one_for_non_expiring_key[FakeStrictRedis] PASSED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_pcall_return_value[StrictRedis] PASSED [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_pcall_return_value[FakeStrictRedis] PASSED [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_delete[StrictRedis] PASSED    [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_delete[FakeStrictRedis] PASSED [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_exists[StrictRedis] PASSED    [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_exists[FakeStrictRedis] PASSED [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_flushdb[StrictRedis] PASSED   [ 19%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_flushdb[FakeStrictRedis] PASSED [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_range_offset_range[StrictRedis] FAILED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_flushall[StrictRedis] PASSED  [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_range_offset_range[FakeStrictRedis] PASSED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_flushall[FakeStrictRedis] PASSED [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_incrbyfloat[StrictRedis] PASSED [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_incrbyfloat[FakeStrictRedis] PASSED [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_lrange[StrictRedis] PASSED    [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_lrange[FakeStrictRedis] PASSED [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_ltrim[StrictRedis] PASSED     [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_ltrim[FakeStrictRedis] PASSED [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_lset[StrictRedis] PASSED      [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_lset[FakeStrictRedis] PASSED  [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_sdiff[StrictRedis] PASSED     [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_eval_sdiff[FakeStrictRedis] PASSED [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_script[StrictRedis] PASSED         [ 20%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_script[FakeStrictRedis] PASSED     [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_lua_log[FakeStrictRedis] PASSED    [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_lua_log_no_message[StrictRedis] PASSED [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_lua_log_no_message[FakeStrictRedis] PASSED [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_lua_log_different_types[FakeStrictRedis] PASSED [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_lua_log_wrong_level[StrictRedis] PASSED [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_lua_log_wrong_level[FakeStrictRedis] PASSED [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_lua_log_defined_vars[FakeStrictRedis] PASSED [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_hscan_cursors_are_bytes[StrictRedis] PASSED [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_hscan_cursors_are_bytes[FakeStrictRedis] PASSED [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_deleting_while_scan[StrictRedis] XPASS [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scripting_lua_only.py::test_deleting_while_scan[FakeStrictRedis] XFAIL [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd[StrictRedis] PASSED                         [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd[FakeStrictRedis] PASSED                     [ 21%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_empty[StrictRedis] PASSED                   [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_empty[FakeStrictRedis] PASSED               [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_minus_zero_redis6[StrictRedis] PASSED       [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_minus_zero_redis6[FakeStrictRedis] PASSED   [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_minus_zero_redis7[StrictRedis] SKIPPED      [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_minus_zero_redis7[FakeStrictRedis] SKIPPED  [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_wrong_type[StrictRedis] PASSED              [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_wrong_type[FakeStrictRedis] PASSED          [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_range_offset_range_and_desc[StrictRedis] FAILED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_range_offset_range_and_desc[FakeStrictRedis] PASSED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_multiple[StrictRedis] PASSED                [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_multiple[FakeStrictRedis] PASSED            [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_range_offset_norange[StrictRedis] PASSED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_range_offset_norange[FakeStrictRedis] PASSED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_nx[StrictRedis-False-param0-0-state0] PASSED [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_range_with_large_range[StrictRedis] PASSED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_range_with_large_range[FakeStrictRedis] PASSED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_nx[StrictRedis-False-param1-1-state1] PASSED [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_nx[StrictRedis-False-param2-2-state2] PASSED [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_descending[StrictRedis] FAILED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_descending[FakeStrictRedis] PASSED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_nx[StrictRedis-True-param0-0-state0] PASSED [ 22%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_alpha[StrictRedis] PASSED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_alpha[FakeStrictRedis] PASSED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_foo[StrictRedis] PASSED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_foo[FakeStrictRedis] PASSED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_empty[StrictRedis] PASSED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_empty[FakeStrictRedis] PASSED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_wrong_type[StrictRedis] PASSED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_wrong_type[FakeStrictRedis] PASSED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_with_store_option[StrictRedis] PASSED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_with_store_option[FakeStrictRedis] PASSED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_with_by_and_get_option[StrictRedis] PASSED [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_with_by_and_get_option[FakeStrictRedis] PASSED [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_with_hash[StrictRedis] PASSED [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_with_hash[FakeStrictRedis] PASSED [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_with_set[StrictRedis] PASSED [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_sort_with_set[FakeStrictRedis] PASSED [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_ttl_should_return_minus_two_for_non_existent_key[StrictRedis] PASSED [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_ttl_should_return_minus_two_for_non_existent_key[FakeStrictRedis] PASSED [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_type[StrictRedis] PASSED [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_type[FakeStrictRedis] PASSED [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_unlink[StrictRedis] PASSED [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_unlink[FakeStrictRedis] PASSED [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_dump_missing[StrictRedis] PASSED [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_nx[StrictRedis-True-param1-1-state1] FAILED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_dump_missing[FakeStrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_dump_restore[StrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_nx[StrictRedis-True-param2-2-state2] FAILED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_dump_restore[FakeStrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_nx[FakeStrictRedis-False-param0-0-state0] PASSED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_nx[FakeStrictRedis-False-param1-1-state1] PASSED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_nx[FakeStrictRedis-False-param2-2-state2] PASSED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_nx[FakeStrictRedis-True-param0-0-state0] PASSED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_nx[FakeStrictRedis-True-param1-1-state1] PASSED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_nx[FakeStrictRedis-True-param2-2-state2] PASSED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_dump_restore_ttl[StrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_dump_restore_ttl[FakeStrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_dump_restore_replace[StrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_dump_restore_replace[FakeStrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_restore_exists[StrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_restore_exists[FakeStrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_restore_invalid_dump[StrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_restore_invalid_dump[FakeStrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_restore_invalid_ttl[StrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_restore_invalid_ttl[FakeStrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_set_then_get[StrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_set_then_get[FakeStrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_exists[StrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_exists[FakeStrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_expire_should_throw_error[StrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_expire_should_throw_error[FakeStrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_expire_extra_params_return_error[StrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_expire_extra_params_return_error[FakeStrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_gt_and_ch[StrictRedis-param0-0-state0] FAILED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_expire_should_return_true_for_existing_key[StrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_expire_should_return_true_for_existing_key[FakeStrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_expire_should_return_false_for_missing_key[StrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_expire_should_return_false_for_missing_key[FakeStrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_watch_expire[StrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_watch_expire[FakeStrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_pexpire_should_return_truthy_for_existing_key[StrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_pexpire_should_return_truthy_for_existing_key[FakeStrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_pexpire_should_return_falsey_for_missing_key[StrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_pexpire_should_return_falsey_for_missing_key[FakeStrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_pexpireat_should_return_true_for_existing_key[StrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_pexpireat_should_return_true_for_existing_key[FakeStrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_gt_and_ch[StrictRedis-param1-2-state1] FAILED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_pexpireat_should_return_false_for_missing_key[StrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_pexpireat_should_return_false_for_missing_key[FakeStrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_pttl_should_return_minus_one_for_non_expiring_key[StrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_pttl_should_return_minus_one_for_non_expiring_key[FakeStrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_pttl_should_return_minus_two_for_non_existent_key[StrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_pttl_should_return_minus_two_for_non_existent_key[FakeStrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_randomkey_returns_none_on_empty_db[StrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_randomkey_returns_none_on_empty_db[FakeStrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_randomkey_returns_existing_key[StrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_randomkey_returns_existing_key[FakeStrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_persist[StrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_persist[FakeStrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_watch_persist[StrictRedis] FAILED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_watch_persist[FakeStrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_set_existing_key_persists[StrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_set_existing_key_persists[FakeStrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_set_non_str_keys[StrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_set_non_str_keys[FakeStrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_gt_and_ch[StrictRedis-param2-2-state2] FAILED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_getset_not_exist[StrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_gt_and_ch[FakeStrictRedis-param0-0-state0] PASSED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_gt_and_ch[FakeStrictRedis-param1-2-state1] PASSED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_getset_not_exist[FakeStrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_gt_and_ch[FakeStrictRedis-param2-2-state2] PASSED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_get_float_type[StrictRedis] FAILED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_get_float_type[FakeStrictRedis] PASSED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_set_float_value[StrictRedis] PASSED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_set_float_value[FakeStrictRedis] PASSED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_expire_should_not_expire__when_no_expire_is_set[StrictRedis] SKIPPED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_expire_should_not_expire__when_no_expire_is_set[FakeStrictRedis] SKIPPED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_expire_should_not_expire__when_expire_is_set[StrictRedis] SKIPPED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_expire_should_not_expire__when_expire_is_set[FakeStrictRedis] SKIPPED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_expire_should_expire__when_expire_is_greater[StrictRedis] SKIPPED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_expire_should_expire__when_expire_is_greater[FakeStrictRedis] SKIPPED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_expire_should_expire__when_expire_is_lessthan[StrictRedis] SKIPPED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_expire_should_expire__when_expire_is_lessthan[FakeStrictRedis] SKIPPED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_rename[StrictRedis] PASSED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_rename[FakeStrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_rename_nonexistent_key[StrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_rename_nonexistent_key[FakeStrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_renamenx_doesnt_exist[StrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_renamenx_doesnt_exist[FakeStrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_gt[StrictRedis-param0-0-state0] FAILED [ 23%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_rename_does_exist[StrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_rename_does_exist[FakeStrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_rename_expiry[StrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_rename_expiry[FakeStrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_keys[StrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_keys[FakeStrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_contains[StrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_contains[FakeStrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_delete[StrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_delete[FakeStrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_delete_multiple[StrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_delete_multiple[FakeStrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_delete_nonexistent_key[StrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_delete_nonexistent_key[FakeStrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_basic_sort[StrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_basic_sort[FakeStrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_key_patterns[StrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_key_patterns[FakeStrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_watch_when_setbit_does_not_change_value[StrictRedis] SKIPPED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_watch_when_setbit_does_not_change_value[FakeStrictRedis] SKIPPED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_from_hypothesis_redis7[StrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py::test_from_hypothesis_redis7[FakeStrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_gt[StrictRedis-param1-1-state1] FAILED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_geoadd_ch[StrictRedis] FAILED [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_geoadd_ch[FakeStrictRedis] PASSED [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_geoadd[StrictRedis] PASSED   [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_geoadd[FakeStrictRedis] PASSED [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_gt[StrictRedis-param2-2-state2] FAILED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_gt[FakeStrictRedis-param0-0-state0] PASSED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_gt[FakeStrictRedis-param1-1-state1] PASSED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_gt[FakeStrictRedis-param2-2-state2] PASSED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_ch[StrictRedis-param0-1-state0] PASSED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_ch[StrictRedis-param1-2-state1] PASSED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_ch[StrictRedis-param2-2-state2] PASSED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_ch[FakeStrictRedis-param0-1-state0] PASSED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_ch[FakeStrictRedis-param1-2-state1] PASSED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_ch[FakeStrictRedis-param2-2-state2] PASSED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_xx[StrictRedis-False-param0-2-state0] PASSED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_xx[StrictRedis-False-param1-0-state1] PASSED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_xx[StrictRedis-False-param2-0-state2] PASSED [ 24%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_xx[StrictRedis-True-param0-2-state0] PASSED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_geoadd_xx[StrictRedis] FAILED [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_geoadd_xx[FakeStrictRedis] PASSED [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_xx[StrictRedis-True-param1-0-state1] PASSED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_xx[StrictRedis-True-param2-0-state2] PASSED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_geohash[StrictRedis] PASSED  [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_xx[FakeStrictRedis-False-param0-2-state0] PASSED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_geohash[FakeStrictRedis] PASSED [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_xx[FakeStrictRedis-False-param1-0-state1] PASSED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_xx[FakeStrictRedis-False-param2-0-state2] PASSED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_xx[FakeStrictRedis-True-param0-2-state0] PASSED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_xx[FakeStrictRedis-True-param1-0-state1] PASSED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_xx[FakeStrictRedis-True-param2-0-state2] PASSED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_geopos[StrictRedis] PASSED   [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_geopos[FakeStrictRedis] PASSED [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_nx_and_xx[StrictRedis-False] PASSED    [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_geodist[StrictRedis] PASSED  [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_nx_and_xx[StrictRedis-True] PASSED     [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_nx_and_xx[FakeStrictRedis-False] PASSED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_geodist[FakeStrictRedis] PASSED [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_nx_and_xx[FakeStrictRedis-True] PASSED [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_geodist_units[StrictRedis] PASSED [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_incr[StrictRedis-False] PASSED              [ 25%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_geodist_units[FakeStrictRedis] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_incr[StrictRedis-True] PASSED               [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_incr[FakeStrictRedis-False] PASSED          [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_incr[FakeStrictRedis-True] PASSED           [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_geodist_missing_one_member[StrictRedis] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_geodist_missing_one_member[FakeStrictRedis] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadius[StrictRedis-2.191-41.433-1000-extra0-expected0] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadius[StrictRedis-2.187-41.406-1000-extra1-expected1] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadius[StrictRedis-1-2-1000-extra2-expected2] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadius[StrictRedis-2.191-41.433-1-extra3-expected3] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadius[StrictRedis-2.191-41.433-3000-extra4-expected4] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadius[FakeStrictRedis-2.191-41.433-1000-extra0-expected0] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadius[FakeStrictRedis-2.187-41.406-1000-extra1-expected1] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadius[FakeStrictRedis-1-2-1000-extra2-expected2] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadius[FakeStrictRedis-2.191-41.433-1-extra3-expected3] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadius[FakeStrictRedis-2.191-41.433-3000-extra4-expected4] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_xx_and_gt_and_ch[StrictRedis] FAILED   [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_with_xx_and_gt_and_ch[FakeStrictRedis] PASSED [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadiusbymember[StrictRedis-place1-1000-extra0-expected0] PASSED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_and_zrangebyscore[StrictRedis] PASSED       [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py::test_zadd_and_zrangebyscore[FakeStrictRedis] PASSED   [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_getbit[StrictRedis] PASSED [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadiusbymember[StrictRedis-place2-1000-extra1-expected1] PASSED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_getbit[FakeStrictRedis] PASSED [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_getbit_wrong_type[StrictRedis] PASSED [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadiusbymember[StrictRedis-place1-1-extra2-expected2] FAILED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_getbit_wrong_type[FakeStrictRedis] PASSED [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadiusbymember[StrictRedis-place1-3000-extra3-expected3] PASSED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadiusbymember[FakeStrictRedis-place1-1000-extra0-expected0] PASSED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_multiple_bits_set[StrictRedis] FAILED [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadiusbymember[FakeStrictRedis-place2-1000-extra1-expected1] PASSED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_multiple_bits_set[FakeStrictRedis] PASSED [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadiusbymember[FakeStrictRedis-place1-1-extra2-expected2] PASSED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadiusbymember[FakeStrictRedis-place1-3000-extra3-expected3] PASSED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_unset_bits[StrictRedis] PASSED [ 26%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_unset_bits[FakeStrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadius_with[StrictRedis] PASSED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadius_with[FakeStrictRedis] PASSED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_get_set_bits[StrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_get_set_bits[FakeStrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_setbits_and_getkeys[StrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_setbits_and_getkeys[FakeStrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadius_count[StrictRedis] FAILED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadius_count[FakeStrictRedis] PASSED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_setbit_wrong_type[StrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_setbit_wrong_type[FakeStrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadius_errors[StrictRedis] PASSED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_georadius_errors[FakeStrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_setbit_expiry[StrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_setbit_expiry[FakeStrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_bitcount[StrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_bitcount[FakeStrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_bitcount_mode_redis6[StrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_bitcount_mode_redis6[FakeStrictRedis] PASSED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_bitcount_mode_redis7[StrictRedis] SKIPPED [ 27%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_bitcount_mode_redis7[FakeStrictRedis] SKIPPED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_bitcount_wrong_type[StrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_bitcount_wrong_type[FakeStrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_bitop[StrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_bitop[FakeStrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_bitop_errors[StrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_bitop_errors[FakeStrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_bitpos[StrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_bitpos[FakeStrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_bitops_mode_redis7[StrictRedis] SKIPPED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_bitops_mode_redis7[FakeStrictRedis] SKIPPED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_bitops_mode_redis6[StrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_bitops_mode_redis6[FakeStrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_bitpos_wrong_arguments[StrictRedis] PASSED [ 28%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py::test_bitpos_wrong_arguments[FakeStrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_expireat_should_return_true_for_existing_key[StrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_expireat_should_return_true_for_existing_key[FakeStrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_expireat_should_return_false_for_missing_key[StrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_expireat_should_return_false_for_missing_key[FakeStrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_del_operator[StrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_del_operator[FakeStrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_expire_should_not_handle_floating_point_values[StrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_expire_should_not_handle_floating_point_values[FakeStrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_geosearch[StrictRedis] FAILED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_ttl_should_return_minus_one_for_non_expiring_key[StrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py::test_geosearch[FakeStrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_ttl_should_return_minus_one_for_non_expiring_key[FakeStrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_range_offset_range[StrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_range_offset_range[FakeStrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_range_offset_range_and_desc[StrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_range_offset_range_and_desc[FakeStrictRedis] PASSED [ 29%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_range_offset_norange[StrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_range_offset_norange[FakeStrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_range_with_large_range[StrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_range_with_large_range[FakeStrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_descending[StrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_descending[FakeStrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_alpha[StrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_alpha[FakeStrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_foo[StrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_foo[FakeStrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_empty[StrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_empty[FakeStrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_wrong_type[StrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_wrong_type[FakeStrictRedis] PASSED [ 30%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_with_store_option[StrictRedis] PASSED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_with_store_option[FakeStrictRedis] PASSED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_with_by_and_get_option[StrictRedis] PASSED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_with_by_and_get_option[FakeStrictRedis] PASSED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hstrlen_missing[StrictRedis] FAILED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hstrlen_missing[FakeStrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_with_hash[StrictRedis] FAILED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_with_hash[FakeStrictRedis] PASSED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hstrlen[StrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hstrlen[FakeStrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_with_set[StrictRedis] PASSED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_sort_with_set[FakeStrictRedis] PASSED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hset_then_hget[StrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hset_then_hget[FakeStrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_ttl_should_return_minus_two_for_non_existent_key[StrictRedis] PASSED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_ttl_should_return_minus_two_for_non_existent_key[FakeStrictRedis] PASSED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hset_update[StrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hset_update[FakeStrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_type[StrictRedis] FAILED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_type[FakeStrictRedis] PASSED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hset_wrong_type[StrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hset_wrong_type[FakeStrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_unlink[StrictRedis] PASSED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_unlink[FakeStrictRedis] PASSED [ 31%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hgetall[StrictRedis] PASSED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_dump_missing[StrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hgetall[FakeStrictRedis] PASSED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_dump_missing[FakeStrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_dump_restore[StrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_dump_restore[FakeStrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_dump_restore_ttl[StrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_dump_restore_ttl[FakeStrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_dump_restore_replace[StrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_dump_restore_replace[FakeStrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_restore_exists[StrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_restore_exists[FakeStrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_restore_invalid_dump[StrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_restore_invalid_dump[FakeStrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_restore_invalid_ttl[StrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_restore_invalid_ttl[FakeStrictRedis] PASSED [ 32%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_set_then_get[StrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_set_then_get[FakeStrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_exists[StrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_exists[FakeStrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_expire_should_throw_error[StrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_expire_should_throw_error[FakeStrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_expire_extra_params_return_error[StrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_expire_extra_params_return_error[FakeStrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_expire_should_return_true_for_existing_key[StrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_expire_should_return_true_for_existing_key[FakeStrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_expire_should_return_false_for_missing_key[StrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_expire_should_return_false_for_missing_key[FakeStrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_watch_expire[StrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_watch_expire[FakeStrictRedis] PASSED [ 33%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hgetall_empty_key[StrictRedis] FAILED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hgetall_empty_key[FakeStrictRedis] PASSED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_pexpire_should_return_truthy_for_existing_key[StrictRedis] PASSED [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_pexpire_should_return_truthy_for_existing_key[FakeStrictRedis] PASSED [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hgetall_wrong_type[StrictRedis] PASSED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_pexpire_should_return_falsey_for_missing_key[StrictRedis] PASSED [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hgetall_wrong_type[FakeStrictRedis] PASSED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_pexpire_should_return_falsey_for_missing_key[FakeStrictRedis] PASSED [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hexists[StrictRedis] PASSED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hexists[FakeStrictRedis] PASSED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_pexpireat_should_return_true_for_existing_key[StrictRedis] PASSED [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_pexpireat_should_return_true_for_existing_key[FakeStrictRedis] PASSED [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hexists_wrong_type[StrictRedis] PASSED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hexists_wrong_type[FakeStrictRedis] PASSED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_pexpireat_should_return_false_for_missing_key[StrictRedis] PASSED [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_pexpireat_should_return_false_for_missing_key[FakeStrictRedis] PASSED [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hkeys[StrictRedis] PASSED   [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hkeys[FakeStrictRedis] PASSED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_pttl_should_return_minus_one_for_non_expiring_key[StrictRedis] PASSED [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_pttl_should_return_minus_one_for_non_expiring_key[FakeStrictRedis] PASSED [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hkeys_wrong_type[StrictRedis] PASSED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hkeys_wrong_type[FakeStrictRedis] PASSED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_pttl_should_return_minus_two_for_non_existent_key[StrictRedis] PASSED [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_pttl_should_return_minus_two_for_non_existent_key[FakeStrictRedis] PASSED [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hlen[StrictRedis] PASSED    [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hlen[FakeStrictRedis] PASSED [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_randomkey_returns_none_on_empty_db[StrictRedis] PASSED [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_randomkey_returns_none_on_empty_db[FakeStrictRedis] PASSED [ 34%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hlen_wrong_type[StrictRedis] PASSED [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hlen_wrong_type[FakeStrictRedis] PASSED [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_randomkey_returns_existing_key[StrictRedis] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_randomkey_returns_existing_key[FakeStrictRedis] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_persist[StrictRedis] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_persist[FakeStrictRedis] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_watch_persist[StrictRedis] FAILED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_watch_persist[FakeStrictRedis] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_set_existing_key_persists[StrictRedis] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_set_existing_key_persists[FakeStrictRedis] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_set_non_str_keys[StrictRedis] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_set_non_str_keys[FakeStrictRedis] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_getset_not_exist[StrictRedis] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_getset_not_exist[FakeStrictRedis] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_get_float_type[StrictRedis] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_get_float_type[FakeStrictRedis] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_set_float_value[StrictRedis] PASSED [ 35%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_set_float_value[FakeStrictRedis] PASSED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_expire_should_not_expire__when_no_expire_is_set[StrictRedis] SKIPPED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_expire_should_not_expire__when_no_expire_is_set[FakeStrictRedis] SKIPPED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_expire_should_not_expire__when_expire_is_set[StrictRedis] SKIPPED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_expire_should_not_expire__when_expire_is_set[FakeStrictRedis] SKIPPED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_expire_should_expire__when_expire_is_greater[StrictRedis] SKIPPED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_expire_should_expire__when_expire_is_greater[FakeStrictRedis] SKIPPED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_expire_should_expire__when_expire_is_lessthan[StrictRedis] SKIPPED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_expire_should_expire__when_expire_is_lessthan[FakeStrictRedis] SKIPPED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_rename[StrictRedis] PASSED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_rename[FakeStrictRedis] PASSED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_rename_nonexistent_key[StrictRedis] PASSED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_rename_nonexistent_key[FakeStrictRedis] PASSED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_renamenx_doesnt_exist[StrictRedis] PASSED [ 36%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_renamenx_doesnt_exist[FakeStrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_rename_does_exist[StrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_rename_does_exist[FakeStrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_rename_expiry[StrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_rename_expiry[FakeStrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_keys[StrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_keys[FakeStrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hvals[StrictRedis] FAILED   [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hvals[FakeStrictRedis] PASSED [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_contains[StrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_contains[FakeStrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hvals_wrong_type[StrictRedis] PASSED [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hvals_wrong_type[FakeStrictRedis] PASSED [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_delete[StrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_delete[FakeStrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_delete_multiple[StrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_delete_multiple[FakeStrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hmget[StrictRedis] FAILED   [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hmget[FakeStrictRedis] PASSED [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_delete_nonexistent_key[StrictRedis] PASSED [ 37%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_delete_nonexistent_key[FakeStrictRedis] PASSED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hmget_wrong_type[StrictRedis] PASSED [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hmget_wrong_type[FakeStrictRedis] PASSED [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hdel[StrictRedis] PASSED    [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hdel[FakeStrictRedis] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hdel_wrong_type[StrictRedis] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hdel_wrong_type[FakeStrictRedis] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hincrby[StrictRedis] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hincrby[FakeStrictRedis] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hincrby_with_no_starting_value[StrictRedis] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hincrby_with_no_starting_value[FakeStrictRedis] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hincrby_with_range_param[StrictRedis] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hincrby_with_range_param[FakeStrictRedis] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hincrby_wrong_type[StrictRedis] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hincrby_wrong_type[FakeStrictRedis] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat[StrictRedis] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat[FakeStrictRedis] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_with_no_starting_value[StrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_with_no_starting_value[FakeStrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_with_range_param[StrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_with_range_param[FakeStrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_on_non_float_value_raises_error[StrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_on_non_float_value_raises_error[FakeStrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_with_non_float_amount_raises_error[StrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_with_non_float_amount_raises_error[FakeStrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_wrong_type[StrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_wrong_type[FakeStrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_basic_sort[StrictRedis] FAILED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_basic_sort[FakeStrictRedis] PASSED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_precision[StrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_precision[FakeStrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_key_patterns[StrictRedis] PASSED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_key_patterns[FakeStrictRedis] PASSED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_watch_when_setbit_does_not_change_value[StrictRedis] SKIPPED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_watch_when_setbit_does_not_change_value[FakeStrictRedis] SKIPPED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hsetnx[StrictRedis] PASSED  [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hsetnx[FakeStrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hmset_empty_raises_error[StrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_from_hypothesis_redis7[StrictRedis] FAILED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hmset_empty_raises_error[FakeStrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py::test_from_hypothesis_redis7[FakeStrictRedis] PASSED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hmset_redispy4[StrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hmset_redispy4[FakeStrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hmset_wrong_type[StrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hmset_wrong_type[FakeStrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_empty_hash[StrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_empty_hash[FakeStrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hset_removing_last_field_delete_key[StrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hset_removing_last_field_delete_key[FakeStrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hscan[StrictRedis] PASSED   [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hscan[FakeStrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_geoadd_ch[StrictRedis] FAILED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_geoadd_ch[FakeStrictRedis] PASSED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_geoadd[StrictRedis] PASSED   [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_geoadd[FakeStrictRedis] PASSED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hrandfield[StrictRedis] FAILED [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hrandfield[FakeStrictRedis] PASSED [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpush_then_lrange_all[StrictRedis] PASSED [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpush_then_lrange_all[FakeStrictRedis] PASSED [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpush_then_lrange_portion[StrictRedis] PASSED [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpush_then_lrange_portion[FakeStrictRedis] PASSED [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lrange_negative_indices[StrictRedis] PASSED [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lrange_negative_indices[FakeStrictRedis] PASSED [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_geoadd_xx[StrictRedis] FAILED [ 38%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_geoadd_xx[FakeStrictRedis] PASSED [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpush_key_does_not_exist[StrictRedis] PASSED [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpush_key_does_not_exist[FakeStrictRedis] PASSED [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_geohash[StrictRedis] PASSED  [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_geohash[FakeStrictRedis] PASSED [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_geopos[StrictRedis] PASSED   [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_geopos[FakeStrictRedis] PASSED [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_geodist[StrictRedis] PASSED  [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_geodist[FakeStrictRedis] PASSED [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpush_with_nonstr_key[StrictRedis] FAILED [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpush_with_nonstr_key[FakeStrictRedis] PASSED [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_geodist_units[StrictRedis] PASSED [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpush_wrong_type[StrictRedis] PASSED [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_geodist_units[FakeStrictRedis] PASSED [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpush_wrong_type[FakeStrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_geodist_missing_one_member[StrictRedis] PASSED [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_geodist_missing_one_member[FakeStrictRedis] PASSED [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_llen[StrictRedis] PASSED    [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_llen[FakeStrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadius[StrictRedis-2.191-41.433-1000-extra0-expected0] PASSED [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_llen_no_exist[StrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_llen_no_exist[FakeStrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadius[StrictRedis-2.187-41.406-1000-extra1-expected1] FAILED [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_llen_wrong_type[StrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadius[StrictRedis-1-2-1000-extra2-expected2] PASSED [ 39%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_llen_wrong_type[FakeStrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadius[StrictRedis-2.191-41.433-1-extra3-expected3] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadius[StrictRedis-2.191-41.433-3000-extra4-expected4] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadius[FakeStrictRedis-2.191-41.433-1000-extra0-expected0] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadius[FakeStrictRedis-2.187-41.406-1000-extra1-expected1] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lrem_positive_count[StrictRedis] FAILED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadius[FakeStrictRedis-1-2-1000-extra2-expected2] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lrem_positive_count[FakeStrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadius[FakeStrictRedis-2.191-41.433-1-extra3-expected3] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadius[FakeStrictRedis-2.191-41.433-3000-extra4-expected4] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lrem_negative_count[StrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lrem_negative_count[FakeStrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadiusbymember[StrictRedis-place1-1000-extra0-expected0] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lrem_zero_count[StrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lrem_zero_count[FakeStrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadiusbymember[StrictRedis-place2-1000-extra1-expected1] FAILED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lrem_default_value[StrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lrem_default_value[FakeStrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadiusbymember[StrictRedis-place1-1-extra2-expected2] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lrem_does_not_exist[StrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadiusbymember[StrictRedis-place1-3000-extra3-expected3] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadiusbymember[FakeStrictRedis-place1-1000-extra0-expected0] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lrem_does_not_exist[FakeStrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadiusbymember[FakeStrictRedis-place2-1000-extra1-expected1] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadiusbymember[FakeStrictRedis-place1-1-extra2-expected2] PASSED [ 40%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lrem_return_value[StrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadiusbymember[FakeStrictRedis-place1-3000-extra3-expected3] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lrem_return_value[FakeStrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadius_with[StrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lrem_wrong_type[StrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lrem_wrong_type[FakeStrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadius_with[FakeStrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpush[StrictRedis] PASSED   [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpush[FakeStrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadius_count[StrictRedis] FAILED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpush_wrong_type[StrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadius_count[FakeStrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpush_wrong_type[FakeStrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadius_errors[StrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_georadius_errors[FakeStrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpop[StrictRedis] FAILED    [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpop[FakeStrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpop_empty_list[StrictRedis] PASSED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpop_empty_list[FakeStrictRedis] PASSED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_geosearch[StrictRedis] FAILED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py::test_geosearch[FakeStrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpop_zero_elem[StrictRedis] FAILED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpop_zero_elem[FakeStrictRedis] PASSED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hstrlen_missing[StrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hstrlen_missing[FakeStrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hstrlen[StrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hstrlen[FakeStrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hset_then_hget[StrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hset_then_hget[FakeStrictRedis] PASSED [ 41%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hset_update[StrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hset_update[FakeStrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hset_wrong_type[StrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hset_wrong_type[FakeStrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hgetall[StrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hgetall[FakeStrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hgetall_empty_key[StrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hgetall_empty_key[FakeStrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hgetall_wrong_type[StrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hgetall_wrong_type[FakeStrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpop_zero_non_existing_list[StrictRedis] FAILED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpop_zero_non_existing_list[FakeStrictRedis] PASSED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hexists[StrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hexists[FakeStrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpop_zero_wrong_type[StrictRedis] PASSED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpop_zero_wrong_type[FakeStrictRedis] PASSED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hexists_wrong_type[StrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hexists_wrong_type[FakeStrictRedis] PASSED [ 42%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpop_wrong_type[StrictRedis] PASSED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpop_wrong_type[FakeStrictRedis] PASSED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpop_count[StrictRedis] SKIPPED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpop_count[FakeStrictRedis] SKIPPED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpop_count_negative[StrictRedis] SKIPPED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpop_count_negative[FakeStrictRedis] SKIPPED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hkeys[StrictRedis] PASSED   [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hkeys[FakeStrictRedis] PASSED [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hkeys_wrong_type[StrictRedis] PASSED [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hkeys_wrong_type[FakeStrictRedis] PASSED [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hlen[StrictRedis] PASSED    [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hlen[FakeStrictRedis] PASSED [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hlen_wrong_type[StrictRedis] PASSED [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hlen_wrong_type[FakeStrictRedis] PASSED [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hvals[StrictRedis] PASSED   [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hvals[FakeStrictRedis] PASSED [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hvals_wrong_type[StrictRedis] PASSED [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hvals_wrong_type[FakeStrictRedis] PASSED [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hmget[StrictRedis] PASSED   [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hmget[FakeStrictRedis] PASSED [ 43%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hmget_wrong_type[StrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hmget_wrong_type[FakeStrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hdel[StrictRedis] PASSED    [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hdel[FakeStrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lset[StrictRedis] FAILED    [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hdel_wrong_type[StrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lset[FakeStrictRedis] PASSED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hdel_wrong_type[FakeStrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lset_index_out_of_range[StrictRedis] PASSED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hincrby[StrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lset_index_out_of_range[FakeStrictRedis] PASSED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hincrby[FakeStrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hincrby_with_no_starting_value[StrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hincrby_with_no_starting_value[FakeStrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lset_wrong_type[StrictRedis] PASSED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lset_wrong_type[FakeStrictRedis] PASSED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hincrby_with_range_param[StrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hincrby_with_range_param[FakeStrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpushx[StrictRedis] PASSED  [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hincrby_wrong_type[StrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpushx[FakeStrictRedis] PASSED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hincrby_wrong_type[FakeStrictRedis] PASSED [ 44%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpushx_wrong_type[StrictRedis] PASSED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpushx_wrong_type[FakeStrictRedis] PASSED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_ltrim[StrictRedis] PASSED   [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_ltrim[FakeStrictRedis] PASSED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_ltrim_with_non_existent_key[StrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_ltrim_with_non_existent_key[FakeStrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_ltrim_expiry[StrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_ltrim_expiry[FakeStrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_ltrim_wrong_type[StrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_ltrim_wrong_type[FakeStrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat[StrictRedis] FAILED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat[FakeStrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lindex[StrictRedis] PASSED  [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lindex[FakeStrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_with_no_starting_value[StrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lindex_wrong_type[StrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_with_no_starting_value[FakeStrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lindex_wrong_type[FakeStrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_with_range_param[StrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_with_range_param[FakeStrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_on_non_float_value_raises_error[StrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_on_non_float_value_raises_error[FakeStrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_with_non_float_amount_raises_error[StrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_with_non_float_amount_raises_error[FakeStrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_wrong_type[StrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_wrong_type[FakeStrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_precision[StrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hincrbyfloat_precision[FakeStrictRedis] PASSED [ 45%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hsetnx[StrictRedis] PASSED  [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hsetnx[FakeStrictRedis] PASSED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hmset_empty_raises_error[StrictRedis] PASSED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hmset_empty_raises_error[FakeStrictRedis] PASSED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hmset_redispy4[StrictRedis] PASSED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hmset_redispy4[FakeStrictRedis] PASSED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpushx[StrictRedis] FAILED  [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hmset_wrong_type[StrictRedis] PASSED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpushx[FakeStrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hmset_wrong_type[FakeStrictRedis] PASSED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_empty_hash[StrictRedis] PASSED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpushx_wrong_type[StrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_empty_hash[FakeStrictRedis] PASSED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lpushx_wrong_type[FakeStrictRedis] PASSED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hset_removing_last_field_delete_key[StrictRedis] PASSED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpop[StrictRedis] PASSED    [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hset_removing_last_field_delete_key[FakeStrictRedis] PASSED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpop[FakeStrictRedis] PASSED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpop_wrong_type[StrictRedis] PASSED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpop_wrong_type[FakeStrictRedis] PASSED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpop_count[StrictRedis] SKIPPED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpop_count[FakeStrictRedis] SKIPPED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpop_count_negative[StrictRedis] SKIPPED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpop_count_negative[FakeStrictRedis] SKIPPED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hscan[StrictRedis] FAILED   [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hscan[FakeStrictRedis] PASSED [ 46%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_linsert_before[StrictRedis] PASSED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_linsert_before[FakeStrictRedis] PASSED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_linsert_after[StrictRedis] PASSED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_linsert_after[FakeStrictRedis] PASSED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_linsert_bad_command[StrictRedis] PASSED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_linsert_bad_command[FakeStrictRedis] PASSED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_linsert_no_pivot[StrictRedis] PASSED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_linsert_no_pivot[FakeStrictRedis] PASSED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_linsert_wrong_type[StrictRedis] PASSED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_linsert_wrong_type[FakeStrictRedis] PASSED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hrandfield[StrictRedis] FAILED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hrandfield[FakeStrictRedis] PASSED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpush_then_lrange_all[StrictRedis] FAILED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpoplpush[StrictRedis] FAILED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpush_then_lrange_all[FakeStrictRedis] PASSED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpoplpush[FakeStrictRedis] PASSED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpush_then_lrange_portion[StrictRedis] PASSED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpush_then_lrange_portion[FakeStrictRedis] PASSED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lrange_negative_indices[StrictRedis] PASSED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpoplpush_to_nonexistent_destination[StrictRedis] FAILED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lrange_negative_indices[FakeStrictRedis] PASSED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpoplpush_to_nonexistent_destination[FakeStrictRedis] PASSED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpush_key_does_not_exist[StrictRedis] PASSED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpoplpush_expiry[StrictRedis] PASSED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpush_key_does_not_exist[FakeStrictRedis] PASSED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpoplpush_expiry[FakeStrictRedis] PASSED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpush_with_nonstr_key[StrictRedis] PASSED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpoplpush_one_to_self[StrictRedis] PASSED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpush_with_nonstr_key[FakeStrictRedis] PASSED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpoplpush_one_to_self[FakeStrictRedis] PASSED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpush_wrong_type[StrictRedis] PASSED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpush_wrong_type[FakeStrictRedis] PASSED [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpoplpush_wrong_type[StrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_rpoplpush_wrong_type[FakeStrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_blpop_single_list[StrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_blpop_single_list[FakeStrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_blpop_test_multiple_lists[StrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_blpop_test_multiple_lists[FakeStrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_blpop_allow_single_key[StrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_blpop_allow_single_key[FakeStrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_blpop_wrong_type[StrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_blpop_wrong_type[FakeStrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_blpop_transaction[StrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_blpop_transaction[FakeStrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_llen[StrictRedis] FAILED    [ 47%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_llen[FakeStrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_brpop_test_multiple_lists[StrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_brpop_test_multiple_lists[FakeStrictRedis] PASSED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_llen_no_exist[StrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_llen_no_exist[FakeStrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_brpop_single_key[StrictRedis] PASSED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_llen_wrong_type[StrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_brpop_single_key[FakeStrictRedis] PASSED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_llen_wrong_type[FakeStrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lrem_positive_count[StrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_brpop_wrong_type[StrictRedis] PASSED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lrem_positive_count[FakeStrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_brpop_wrong_type[FakeStrictRedis] PASSED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_brpoplpush_multi_keys[StrictRedis] PASSED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_brpoplpush_multi_keys[FakeStrictRedis] PASSED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_brpoplpush_wrong_type[StrictRedis] PASSED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_brpoplpush_wrong_type[FakeStrictRedis] PASSED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lrem_negative_count[StrictRedis] FAILED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lrem_negative_count[FakeStrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_empty_list[StrictRedis] PASSED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lrem_zero_count[StrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_empty_list[FakeStrictRedis] PASSED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lrem_zero_count[FakeStrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lrem_default_value[StrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lrem_default_value[FakeStrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lrem_does_not_exist[StrictRedis] PASSED [ 48%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lrem_does_not_exist[FakeStrictRedis] PASSED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lrem_return_value[StrictRedis] PASSED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lrem_return_value[FakeStrictRedis] PASSED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lrem_wrong_type[StrictRedis] PASSED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lrem_wrong_type[FakeStrictRedis] PASSED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpush[StrictRedis] PASSED   [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpush[FakeStrictRedis] PASSED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpush_wrong_type[StrictRedis] PASSED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpush_wrong_type[FakeStrictRedis] PASSED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpop[StrictRedis] PASSED    [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpop[FakeStrictRedis] PASSED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpop_empty_list[StrictRedis] PASSED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpop_empty_list[FakeStrictRedis] PASSED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lmove_to_nonexistent_destination[StrictRedis] FAILED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lmove_to_nonexistent_destination[FakeStrictRedis] PASSED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpop_zero_elem[StrictRedis] FAILED [ 49%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpop_zero_elem[FakeStrictRedis] PASSED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lmove_expiry[StrictRedis] FAILED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lmove_expiry[FakeStrictRedis] PASSED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lmove_wrong_type[StrictRedis] PASSED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lmove_wrong_type[FakeStrictRedis] PASSED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpop_zero_non_existing_list[StrictRedis] FAILED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpop_zero_non_existing_list[FakeStrictRedis] PASSED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpop_zero_wrong_type[StrictRedis] PASSED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpop_zero_wrong_type[FakeStrictRedis] PASSED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpop_wrong_type[StrictRedis] PASSED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpop_wrong_type[FakeStrictRedis] PASSED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lmove[StrictRedis] FAILED   [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpop_count[StrictRedis] SKIPPED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpop_count[FakeStrictRedis] SKIPPED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpop_count_negative[StrictRedis] SKIPPED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpop_count_negative[FakeStrictRedis] SKIPPED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lmove[FakeStrictRedis] PASSED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lset[StrictRedis] PASSED    [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lset[FakeStrictRedis] PASSED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lset_index_out_of_range[StrictRedis] PASSED [ 50%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lset_index_out_of_range[FakeStrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lset_wrong_type[StrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lset_wrong_type[FakeStrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpushx[StrictRedis] PASSED  [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpushx[FakeStrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpushx_wrong_type[StrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpushx_wrong_type[FakeStrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_ltrim[StrictRedis] PASSED   [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_ltrim[FakeStrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_ltrim_with_non_existent_key[StrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_ltrim_with_non_existent_key[FakeStrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_ltrim_expiry[StrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_ltrim_expiry[FakeStrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_blmove[StrictRedis] FAILED  [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_blmove[FakeStrictRedis] PASSED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py::test_lmove_disconnected_raises_connection_error[FakeStrictRedis] PASSED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_ltrim_wrong_type[StrictRedis] PASSED [ 51%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_pubsub_commands.py::test_ping_pubsub[StrictRedis] PASSED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_ltrim_wrong_type[FakeStrictRedis] PASSED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_pubsub_commands.py::test_ping_pubsub[FakeStrictRedis] PASSED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_pubsub_commands.py::test_socket_cleanup_pubsub PASSED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lindex[StrictRedis] PASSED  [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lindex[FakeStrictRedis] PASSED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_channels[StrictRedis] PASSED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_channels[FakeStrictRedis] PASSED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lindex_wrong_type[StrictRedis] PASSED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lindex_wrong_type[FakeStrictRedis] PASSED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_channels_pattern[StrictRedis] PASSED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_channels_pattern[FakeStrictRedis] PASSED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpushx[StrictRedis] PASSED  [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpushx[FakeStrictRedis] PASSED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_no_subcommands[StrictRedis] PASSED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpushx_wrong_type[StrictRedis] PASSED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_no_subcommands[FakeStrictRedis] PASSED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lpushx_wrong_type[FakeStrictRedis] PASSED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_help_redis7[StrictRedis] SKIPPED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_help_redis7[FakeStrictRedis] SKIPPED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_help_redis71[StrictRedis] SKIPPED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_help_redis71[FakeStrictRedis] SKIPPED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpop[StrictRedis] PASSED    [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpop[FakeStrictRedis] PASSED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpop_wrong_type[StrictRedis] PASSED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_help_redis6[StrictRedis] FAILED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpop_wrong_type[FakeStrictRedis] PASSED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpop_count[StrictRedis] SKIPPED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_help_redis6[FakeStrictRedis] PASSED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpop_count[FakeStrictRedis] SKIPPED [ 52%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpop_count_negative[StrictRedis] SKIPPED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpop_count_negative[FakeStrictRedis] SKIPPED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_numsub[StrictRedis] PASSED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_linsert_before[StrictRedis] PASSED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_numsub[FakeStrictRedis] PASSED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_scripting.py::test_script_exists_redis7[StrictRedis] SKIPPED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_linsert_before[FakeStrictRedis] PASSED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_scripting.py::test_script_exists_redis7[FakeStrictRedis] SKIPPED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_linsert_after[StrictRedis] PASSED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_linsert_after[FakeStrictRedis] PASSED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_scripting.py::test_script_exists_redis6[StrictRedis] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_scripting.py::test_script_exists_redis6[FakeStrictRedis] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_linsert_bad_command[StrictRedis] PASSED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_linsert_bad_command[FakeStrictRedis] PASSED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_scripting.py::test_script_flush_errors_with_args[StrictRedis-args0] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_linsert_no_pivot[StrictRedis] PASSED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_scripting.py::test_script_flush_errors_with_args[StrictRedis-args1] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_linsert_no_pivot[FakeStrictRedis] PASSED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_scripting.py::test_script_flush_errors_with_args[FakeStrictRedis-args0] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_scripting.py::test_script_flush_errors_with_args[FakeStrictRedis-args1] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_linsert_wrong_type[StrictRedis] PASSED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_linsert_wrong_type[FakeStrictRedis] PASSED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpoplpush[StrictRedis] PASSED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpoplpush[FakeStrictRedis] PASSED [ 53%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_scripting.py::test_script_flush[StrictRedis] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_scripting.py::test_script_flush[FakeStrictRedis] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpoplpush_to_nonexistent_destination[StrictRedis] PASSED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpoplpush_to_nonexistent_destination[FakeStrictRedis] PASSED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_scripting.py::test_script_no_subcommands[StrictRedis] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_scripting.py::test_script_no_subcommands[FakeStrictRedis] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpoplpush_expiry[StrictRedis] PASSED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpoplpush_expiry[FakeStrictRedis] PASSED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_scripting.py::test_script_help[StrictRedis] FAILED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpoplpush_one_to_self[StrictRedis] PASSED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_scripting.py::test_script_help[FakeStrictRedis] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_scripting.py::test_script_help71[StrictRedis] SKIPPED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_scripting.py::test_script_help71[FakeStrictRedis] SKIPPED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpoplpush_one_to_self[FakeStrictRedis] PASSED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpoplpush_wrong_type[StrictRedis] PASSED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_rpoplpush_wrong_type[FakeStrictRedis] PASSED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_server_commands.py::test_swapdb[StrictRedis] FAILED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_server_commands.py::test_swapdb[FakeStrictRedis] PASSED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_blpop_single_list[StrictRedis] PASSED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_blpop_single_list[FakeStrictRedis] PASSED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_server_commands.py::test_swapdb_same_db[StrictRedis] PASSED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_blpop_test_multiple_lists[StrictRedis] PASSED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_server_commands.py::test_swapdb_same_db[FakeStrictRedis] PASSED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_blpop_test_multiple_lists[FakeStrictRedis] PASSED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_server_commands.py::test_save[StrictRedis] PASSED  [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_server_commands.py::test_save[FakeStrictRedis] PASSED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_blpop_allow_single_key[StrictRedis] PASSED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_blpop_allow_single_key[FakeStrictRedis] PASSED [ 54%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_server_commands.py::test_bgsave[StrictRedis] PASSED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_blpop_wrong_type[StrictRedis] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_server_commands.py::test_bgsave[FakeStrictRedis] PASSED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_blpop_wrong_type[FakeStrictRedis] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_blpop_transaction[StrictRedis] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_blpop_transaction[FakeStrictRedis] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_server_commands.py::test_lastsave[StrictRedis] PASSED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_server_commands.py::test_lastsave[FakeStrictRedis] PASSED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_brpop_test_multiple_lists[StrictRedis] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_brpop_test_multiple_lists[FakeStrictRedis] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_server_commands.py::test_dbsize[StrictRedis] PASSED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_server_commands.py::test_dbsize[FakeStrictRedis] PASSED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_server_commands.py::test_flushdb_redispy4[StrictRedis] PASSED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_server_commands.py::test_flushdb_redispy4[FakeStrictRedis] PASSED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_server_commands.py::test_flushdb_redispy5[StrictRedis] SKIPPED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_server_commands.py::test_flushdb_redispy5[FakeStrictRedis] SKIPPED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sadd[StrictRedis] PASSED     [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sadd[FakeStrictRedis] PASSED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sadd_as_str_type[StrictRedis] PASSED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sadd_as_str_type[FakeStrictRedis] PASSED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sadd_wrong_type[StrictRedis] PASSED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sadd_wrong_type[FakeStrictRedis] PASSED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_brpop_single_key[StrictRedis] FAILED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_brpop_single_key[FakeStrictRedis] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_scard[StrictRedis] PASSED    [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_scard[FakeStrictRedis] PASSED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_brpop_wrong_type[StrictRedis] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_brpop_wrong_type[FakeStrictRedis] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_scard_wrong_type[StrictRedis] PASSED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_scard_wrong_type[FakeStrictRedis] PASSED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_brpoplpush_multi_keys[StrictRedis] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_brpoplpush_multi_keys[FakeStrictRedis] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_brpoplpush_wrong_type[StrictRedis] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_brpoplpush_wrong_type[FakeStrictRedis] PASSED [ 55%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_empty_list[StrictRedis] PASSED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_empty_list[FakeStrictRedis] PASSED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sdiff[StrictRedis] FAILED    [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sdiff[FakeStrictRedis] PASSED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lmove_to_nonexistent_destination[StrictRedis] FAILED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lmove_to_nonexistent_destination[FakeStrictRedis] PASSED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sdiff_one_key[StrictRedis] PASSED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sdiff_one_key[FakeStrictRedis] PASSED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sdiff_empty[StrictRedis] PASSED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sdiff_empty[FakeStrictRedis] PASSED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sdiff_wrong_type[StrictRedis] PASSED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sdiff_wrong_type[FakeStrictRedis] PASSED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lmove_expiry[StrictRedis] FAILED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lmove_expiry[FakeStrictRedis] PASSED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sdiffstore[StrictRedis] PASSED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sdiffstore[FakeStrictRedis] PASSED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lmove_wrong_type[StrictRedis] PASSED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lmove_wrong_type[FakeStrictRedis] PASSED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sinter[StrictRedis] FAILED   [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sinter[FakeStrictRedis] PASSED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sinter_bytes_keys[StrictRedis] PASSED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sinter_bytes_keys[FakeStrictRedis] PASSED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sinter_wrong_type[StrictRedis] PASSED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sinter_wrong_type[FakeStrictRedis] PASSED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lmove[StrictRedis] FAILED   [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sinterstore[StrictRedis] PASSED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lmove[FakeStrictRedis] PASSED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sinterstore[FakeStrictRedis] PASSED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sismember[StrictRedis] PASSED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sismember[FakeStrictRedis] PASSED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_blmove[StrictRedis] FAILED  [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_blmove[FakeStrictRedis] PASSED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py::test_lmove_disconnected_raises_connection_error[FakeStrictRedis] PASSED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_smismember[StrictRedis] FAILED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_smismember[FakeStrictRedis] PASSED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_pubsub_commands.py::test_ping_pubsub[StrictRedis] PASSED [ 56%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_pubsub_commands.py::test_ping_pubsub[FakeStrictRedis] PASSED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_pubsub_commands.py::test_socket_cleanup_pubsub PASSED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_channels[StrictRedis] PASSED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_channels[FakeStrictRedis] PASSED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_smismember_wrong_type[StrictRedis] PASSED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_smismember_wrong_type[FakeStrictRedis] PASSED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_channels_pattern[StrictRedis] PASSED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_channels_pattern[FakeStrictRedis] PASSED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sismember_wrong_type[StrictRedis] FAILED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sismember_wrong_type[FakeStrictRedis] PASSED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_no_subcommands[StrictRedis] PASSED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_no_subcommands[FakeStrictRedis] PASSED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_help_redis7[StrictRedis] SKIPPED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_help_redis7[FakeStrictRedis] SKIPPED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_help_redis71[StrictRedis] SKIPPED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_help_redis71[FakeStrictRedis] SKIPPED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_smembers[StrictRedis] PASSED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_smembers[FakeStrictRedis] PASSED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_help_redis6[StrictRedis] FAILED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_help_redis6[FakeStrictRedis] PASSED [ 57%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_smembers_copy[StrictRedis] PASSED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_smembers_copy[FakeStrictRedis] PASSED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_numsub[StrictRedis] PASSED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_pubsub_commands.py::test_pubsub_numsub[FakeStrictRedis] PASSED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_scripting.py::test_script_exists_redis7[StrictRedis] SKIPPED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_scripting.py::test_script_exists_redis7[FakeStrictRedis] SKIPPED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_smembers_wrong_type[StrictRedis] PASSED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_smembers_wrong_type[FakeStrictRedis] PASSED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_scripting.py::test_script_exists_redis6[StrictRedis] PASSED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_scripting.py::test_script_exists_redis6[FakeStrictRedis] PASSED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_smembers_runtime_error[StrictRedis] PASSED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_smembers_runtime_error[FakeStrictRedis] PASSED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_scripting.py::test_script_flush_errors_with_args[StrictRedis-args0] PASSED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_smove[StrictRedis] PASSED    [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_smove[FakeStrictRedis] PASSED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_scripting.py::test_script_flush_errors_with_args[StrictRedis-args1] PASSED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_scripting.py::test_script_flush_errors_with_args[FakeStrictRedis-args0] PASSED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_scripting.py::test_script_flush_errors_with_args[FakeStrictRedis-args1] PASSED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_smove_non_existent_key[StrictRedis] PASSED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_scripting.py::test_script_flush[StrictRedis] PASSED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_smove_non_existent_key[FakeStrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_scripting.py::test_script_flush[FakeStrictRedis] PASSED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_smove_wrong_type[StrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_smove_wrong_type[FakeStrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_scripting.py::test_script_no_subcommands[StrictRedis] PASSED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_scripting.py::test_script_no_subcommands[FakeStrictRedis] PASSED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_spop[StrictRedis] PASSED     [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_spop[FakeStrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_scripting.py::test_script_help[StrictRedis] FAILED [ 58%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_scripting.py::test_script_help[FakeStrictRedis] PASSED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_scripting.py::test_script_help71[StrictRedis] SKIPPED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_scripting.py::test_script_help71[FakeStrictRedis] SKIPPED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_spop_wrong_type[StrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_spop_wrong_type[FakeStrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_server_commands.py::test_swapdb[StrictRedis] FAILED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_server_commands.py::test_swapdb[FakeStrictRedis] PASSED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_server_commands.py::test_swapdb_same_db[StrictRedis] PASSED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_server_commands.py::test_swapdb_same_db[FakeStrictRedis] PASSED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_srandmember[StrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_srandmember[FakeStrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_server_commands.py::test_save[StrictRedis] PASSED  [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_server_commands.py::test_save[FakeStrictRedis] PASSED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_srandmember_number[StrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_srandmember_number[FakeStrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_server_commands.py::test_bgsave[StrictRedis] PASSED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_server_commands.py::test_bgsave[FakeStrictRedis] PASSED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_srandmember_wrong_type[StrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_srandmember_wrong_type[FakeStrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_server_commands.py::test_lastsave[StrictRedis] PASSED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_server_commands.py::test_lastsave[FakeStrictRedis] PASSED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_srem[StrictRedis] PASSED     [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_srem[FakeStrictRedis] PASSED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_server_commands.py::test_dbsize[StrictRedis] FAILED [ 59%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_server_commands.py::test_dbsize[FakeStrictRedis] PASSED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_srem_wrong_type[StrictRedis] PASSED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_srem_wrong_type[FakeStrictRedis] PASSED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_server_commands.py::test_flushdb_redispy4[StrictRedis] PASSED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_server_commands.py::test_flushdb_redispy4[FakeStrictRedis] PASSED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_server_commands.py::test_flushdb_redispy5[StrictRedis] SKIPPED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_server_commands.py::test_flushdb_redispy5[FakeStrictRedis] SKIPPED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sunion[StrictRedis] PASSED   [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sunion[FakeStrictRedis] PASSED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sadd[StrictRedis] PASSED     [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sadd[FakeStrictRedis] PASSED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sadd_as_str_type[StrictRedis] PASSED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sadd_as_str_type[FakeStrictRedis] PASSED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sadd_wrong_type[StrictRedis] PASSED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sadd_wrong_type[FakeStrictRedis] PASSED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_scard[StrictRedis] PASSED    [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_scard[FakeStrictRedis] PASSED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_scard_wrong_type[StrictRedis] PASSED [ 60%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_scard_wrong_type[FakeStrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sdiff[StrictRedis] PASSED    [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sdiff[FakeStrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sdiff_one_key[StrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sdiff_one_key[FakeStrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sdiff_empty[StrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sdiff_empty[FakeStrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sdiff_wrong_type[StrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sdiff_wrong_type[FakeStrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sunion_wrong_type[StrictRedis] FAILED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sdiffstore[StrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sunion_wrong_type[FakeStrictRedis] PASSED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sdiffstore[FakeStrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sunionstore[StrictRedis] PASSED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sunionstore[FakeStrictRedis] PASSED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sinter[StrictRedis] PASSED   [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sinter[FakeStrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_empty_set[StrictRedis] PASSED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_empty_set[FakeStrictRedis] PASSED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sinter_bytes_keys[StrictRedis] PASSED [ 61%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sinter_bytes_keys[FakeStrictRedis] PASSED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sinter_wrong_type[StrictRedis] PASSED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sinter_wrong_type[FakeStrictRedis] PASSED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sinterstore[StrictRedis] PASSED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sscan[StrictRedis] FAILED    [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sinterstore[FakeStrictRedis] PASSED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sscan[FakeStrictRedis] PASSED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sismember[StrictRedis] PASSED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sintercard[StrictRedis] SKIPPED [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sintercard[FakeStrictRedis] SKIPPED [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sismember[FakeStrictRedis] PASSED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sintercard_key_doesnt_exist[StrictRedis] SKIPPED [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sintercard_key_doesnt_exist[FakeStrictRedis] SKIPPED [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sintercard_bytes_keys[StrictRedis] SKIPPED [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sintercard_bytes_keys[FakeStrictRedis] SKIPPED [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sintercard_wrong_type[StrictRedis] SKIPPED [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sintercard_wrong_type[FakeStrictRedis] SKIPPED [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sintercard_syntax_error[StrictRedis] SKIPPED [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_sintercard_syntax_error[FakeStrictRedis] SKIPPED [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_pfadd[StrictRedis] PASSED    [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_pfadd[FakeStrictRedis] PASSED [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_pfcount[StrictRedis] PASSED  [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_pfcount[FakeStrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_pfmerge[StrictRedis] PASSED  [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py::test_pfmerge[FakeStrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zpopmin[StrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zpopmin[FakeStrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zpopmin_too_many[StrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zpopmin_too_many[FakeStrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zpopmax[StrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zpopmax[FakeStrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_smismember[StrictRedis] FAILED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_smismember[FakeStrictRedis] PASSED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrange_same_score[StrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrange_same_score[FakeStrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_smismember_wrong_type[StrictRedis] PASSED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_smismember_wrong_type[FakeStrictRedis] PASSED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sismember_wrong_type[StrictRedis] PASSED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_bylex_and_byscore[StrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sismember_wrong_type[FakeStrictRedis] PASSED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_bylex_and_byscore[FakeStrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_smembers[StrictRedis] PASSED [ 62%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_smembers[FakeStrictRedis] PASSED [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_smembers_copy[StrictRedis] PASSED [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_smembers_copy[FakeStrictRedis] PASSED [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_smembers_wrong_type[StrictRedis] PASSED [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_smembers_wrong_type[FakeStrictRedis] PASSED [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_smembers_runtime_error[StrictRedis] PASSED [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_smembers_runtime_error[FakeStrictRedis] PASSED [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_smove[StrictRedis] PASSED    [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_smove[FakeStrictRedis] PASSED [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_smove_non_existent_key[StrictRedis] PASSED [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_smove_non_existent_key[FakeStrictRedis] PASSED [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_smove_wrong_type[StrictRedis] PASSED [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_smove_wrong_type[FakeStrictRedis] PASSED [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_spop[StrictRedis] PASSED     [ 63%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_spop[FakeStrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_spop_wrong_type[StrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_spop_wrong_type[FakeStrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_srandmember[StrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_srandmember[FakeStrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_srandmember_number[StrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_srandmember_number[FakeStrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_srandmember_wrong_type[StrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_rev_and_bylex[StrictRedis] FAILED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_srandmember_wrong_type[FakeStrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_rev_and_bylex[FakeStrictRedis] PASSED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_srem[StrictRedis] PASSED     [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_srem[FakeStrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_srem_wrong_type[StrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_srem_wrong_type[FakeStrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sunion[StrictRedis] PASSED   [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sunion[FakeStrictRedis] PASSED [ 64%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sunion_wrong_type[StrictRedis] PASSED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sunion_wrong_type[FakeStrictRedis] PASSED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sunionstore[StrictRedis] PASSED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sunionstore[FakeStrictRedis] PASSED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_empty_set[StrictRedis] PASSED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_empty_set[FakeStrictRedis] PASSED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sscan[StrictRedis] PASSED    [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sscan[FakeStrictRedis] PASSED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sintercard[StrictRedis] SKIPPED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sintercard[FakeStrictRedis] SKIPPED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sintercard_key_doesnt_exist[StrictRedis] SKIPPED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sintercard_key_doesnt_exist[FakeStrictRedis] SKIPPED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sintercard_bytes_keys[StrictRedis] SKIPPED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sintercard_bytes_keys[FakeStrictRedis] SKIPPED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sintercard_wrong_type[StrictRedis] SKIPPED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sintercard_wrong_type[FakeStrictRedis] SKIPPED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sintercard_syntax_error[StrictRedis] SKIPPED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_sintercard_syntax_error[FakeStrictRedis] SKIPPED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_pfadd[StrictRedis] PASSED    [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_pfadd[FakeStrictRedis] PASSED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_pfcount[StrictRedis] PASSED  [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_pfcount[FakeStrictRedis] PASSED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_bylex[StrictRedis] FAILED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_bylex[FakeStrictRedis] PASSED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_pfmerge[StrictRedis] PASSED  [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py::test_pfmerge[FakeStrictRedis] PASSED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zpopmin[StrictRedis] PASSED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zpopmin[FakeStrictRedis] PASSED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zpopmin_too_many[StrictRedis] PASSED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zpopmin_too_many[FakeStrictRedis] PASSED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zpopmax[StrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zpopmax[FakeStrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrange_same_score[StrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrange_same_score[FakeStrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_bylex_and_byscore[StrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_bylex_and_byscore[FakeStrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_rev_and_bylex[StrictRedis] FAILED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_rev_and_bylex[FakeStrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_byscore[StrictRedis] FAILED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_byscore[FakeStrictRedis] PASSED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zcard[StrictRedis] FAILED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zcard[FakeStrictRedis] PASSED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zcard_non_existent_key[StrictRedis] PASSED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zcard_non_existent_key[FakeStrictRedis] PASSED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zcard_wrong_type[StrictRedis] PASSED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zcard_wrong_type[FakeStrictRedis] PASSED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_bylex[StrictRedis] FAILED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_bylex[FakeStrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zcount[StrictRedis] FAILED [ 65%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zcount[FakeStrictRedis] PASSED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zcount_exclusive[StrictRedis] PASSED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zcount_exclusive[FakeStrictRedis] PASSED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zcount_wrong_type[StrictRedis] PASSED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zcount_wrong_type[FakeStrictRedis] PASSED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zincrby[StrictRedis] PASSED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zincrby[FakeStrictRedis] PASSED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zincrby_wrong_type[StrictRedis] PASSED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zincrby_wrong_type[FakeStrictRedis] PASSED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrange_descending[StrictRedis] PASSED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrange_descending[FakeStrictRedis] PASSED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrange_descending_with_scores[StrictRedis] PASSED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrange_descending_with_scores[FakeStrictRedis] PASSED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_positive_indices[StrictRedis] PASSED [ 66%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_byscore[StrictRedis] FAILED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_positive_indices[FakeStrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_byscore[FakeStrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrange_wrong_type[StrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zcard[StrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrange_wrong_type[FakeStrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zcard[FakeStrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrange_score_cast[StrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrange_score_cast[FakeStrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrank[StrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrank[FakeStrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zcard_non_existent_key[StrictRedis] FAILED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zcard_non_existent_key[FakeStrictRedis] PASSED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrank_non_existent_member[StrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrank_non_existent_member[FakeStrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrank_wrong_type[StrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrank_wrong_type[FakeStrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrem[StrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrem[FakeStrictRedis] PASSED [ 67%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zcard_wrong_type[StrictRedis] FAILED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrem_non_existent_member[StrictRedis] PASSED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zcard_wrong_type[FakeStrictRedis] PASSED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrem_non_existent_member[FakeStrictRedis] PASSED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zcount[StrictRedis] PASSED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zcount[FakeStrictRedis] PASSED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zcount_exclusive[StrictRedis] PASSED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zcount_exclusive[FakeStrictRedis] PASSED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrem_numeric_member[StrictRedis] FAILED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zcount_wrong_type[StrictRedis] PASSED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrem_numeric_member[FakeStrictRedis] PASSED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zcount_wrong_type[FakeStrictRedis] PASSED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrem_wrong_type[StrictRedis] PASSED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrem_wrong_type[FakeStrictRedis] PASSED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zincrby[StrictRedis] PASSED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zincrby[FakeStrictRedis] PASSED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zscore[StrictRedis] PASSED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zscore[FakeStrictRedis] PASSED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zincrby_wrong_type[StrictRedis] PASSED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zincrby_wrong_type[FakeStrictRedis] PASSED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zscore_non_existent_member[StrictRedis] PASSED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zscore_non_existent_member[FakeStrictRedis] PASSED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrange_descending[StrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrange_descending[FakeStrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zscore_wrong_type[StrictRedis] PASSED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zscore_wrong_type[FakeStrictRedis] PASSED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrange_descending_with_scores[StrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrange_descending_with_scores[FakeStrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_positive_indices[StrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_positive_indices[FakeStrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrange_wrong_type[StrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrange_wrong_type[FakeStrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrange_score_cast[StrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrange_score_cast[FakeStrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrank[StrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrank[FakeStrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrank_non_existent_member[StrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrank_non_existent_member[FakeStrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zmscore[StrictRedis] FAILED [ 68%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zmscore[FakeStrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrank_wrong_type[StrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrank_wrong_type[FakeStrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrem[StrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrem[FakeStrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrem_non_existent_member[StrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrem_non_existent_member[FakeStrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrem_numeric_member[StrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrem_numeric_member[FakeStrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrem_wrong_type[StrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrem_wrong_type[FakeStrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zscore[StrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zscore[FakeStrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zscore_non_existent_member[StrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zscore_non_existent_member[FakeStrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zmscore_missing_members[StrictRedis] FAILED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zmscore_missing_members[FakeStrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zscore_wrong_type[StrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zscore_wrong_type[FakeStrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zmscore[StrictRedis] FAILED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zmscore[FakeStrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zmscore_mixed_membership[StrictRedis] FAILED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zmscore_mixed_membership[FakeStrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrank[StrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrank[FakeStrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrank_non_existent_member[StrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrank_non_existent_member[FakeStrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrank_wrong_type[StrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrank_wrong_type[FakeStrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrange[StrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrange[FakeStrictRedis] PASSED [ 69%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrange_sorted_keys[StrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrange_sorted_keys[FakeStrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zmscore_missing_members[StrictRedis] FAILED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zmscore_missing_members[FakeStrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrange_wrong_type[StrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrange_wrong_type[FakeStrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrange_score_cast[StrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrange_score_cast[FakeStrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_large_int[StrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_large_int[FakeStrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore[StrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore[FakeStrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangebysore_exclusive[StrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangebysore_exclusive[FakeStrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore_raises_error[StrictRedis] PASSED [ 70%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore_raises_error[FakeStrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore_wrong_type[StrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore_wrong_type[FakeStrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore_slice[StrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore_slice[FakeStrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore_withscores[StrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore_withscores[FakeStrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore_cast_scores[StrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore_cast_scores[FakeStrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebyscore[StrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebyscore[FakeStrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zmscore_mixed_membership[StrictRedis] FAILED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zmscore_mixed_membership[FakeStrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebyscore_exclusive[StrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebyscore_exclusive[FakeStrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrank[StrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrank[FakeStrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebyscore_raises_error[StrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebyscore_raises_error[FakeStrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrank_non_existent_member[StrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrank_non_existent_member[FakeStrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebyscore_wrong_type[StrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebyscore_wrong_type[FakeStrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrank_wrong_type[StrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrank_wrong_type[FakeStrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebyscore_cast_scores[StrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebyscore_cast_scores[FakeStrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrange[StrictRedis] PASSED [ 71%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrange[FakeStrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangebylex[StrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangebylex[FakeStrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrange_sorted_keys[StrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrange_sorted_keys[FakeStrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangebylex_wrong_type[StrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrange_wrong_type[StrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangebylex_wrong_type[FakeStrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrange_wrong_type[FakeStrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrange_score_cast[StrictRedis] FAILED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrange_score_cast[FakeStrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zlexcount[StrictRedis] FAILED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zlexcount[FakeStrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_large_int[StrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrange_with_large_int[FakeStrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zlexcount_wrong_type[StrictRedis] FAILED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore[StrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zlexcount_wrong_type[FakeStrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore[FakeStrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangebylex_with_limit[StrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangebylex_with_limit[FakeStrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangebysore_exclusive[StrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangebysore_exclusive[FakeStrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangebylex_raises_error[StrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangebylex_raises_error[FakeStrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore_raises_error[StrictRedis] PASSED [ 72%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore_raises_error[FakeStrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebylex[StrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebylex[FakeStrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore_wrong_type[StrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore_wrong_type[FakeStrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebylex_with_limit[StrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebylex_with_limit[FakeStrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore_slice[StrictRedis] FAILED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore_slice[FakeStrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebylex_raises_error[StrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebylex_raises_error[FakeStrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore_withscores[StrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore_withscores[FakeStrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebylex_wrong_type[StrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebylex_wrong_type[FakeStrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyrank[StrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyrank[FakeStrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyrank_negative_indices[StrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyrank_negative_indices[FakeStrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyrank_out_of_bounds[StrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyrank_out_of_bounds[FakeStrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyrank_wrong_type[StrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyrank_wrong_type[FakeStrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyscore[StrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyscore[FakeStrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyscore_exclusive[StrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyscore_exclusive[FakeStrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyscore_raises_error[StrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore_cast_scores[StrictRedis] FAILED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangebyscore_cast_scores[FakeStrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyscore_raises_error[FakeStrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebyscore[StrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebyscore[FakeStrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyscore_badkey[StrictRedis] FAILED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyscore_badkey[FakeStrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebyscore_exclusive[StrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebyscore_exclusive[FakeStrictRedis] PASSED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyscore_wrong_type[StrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyscore_wrong_type[FakeStrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebylex[StrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebylex[FakeStrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebylex_error[StrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebylex_error[FakeStrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebylex_badkey[StrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebylex_badkey[FakeStrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebylex_wrong_type[StrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebylex_wrong_type[FakeStrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore[StrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore[FakeStrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_sum[StrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_sum[FakeStrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_max[StrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_max[FakeStrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_min[StrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_min[FakeStrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebyscore_raises_error[StrictRedis] FAILED [ 73%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebyscore_raises_error[FakeStrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_weights[StrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_weights[FakeStrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebyscore_wrong_type[StrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebyscore_wrong_type[FakeStrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebyscore_cast_scores[StrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebyscore_cast_scores[FakeStrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangebylex[StrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangebylex[FakeStrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangebylex_wrong_type[StrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangebylex_wrong_type[FakeStrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_nan_to_zero[StrictRedis] FAILED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_nan_to_zero[FakeStrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zlexcount[StrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zlexcount[FakeStrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_nan_to_zero2[StrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_nan_to_zero2[FakeStrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_nan_to_zero_ordering[StrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_nan_to_zero_ordering[FakeStrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_mixed_set_types[StrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_mixed_set_types[FakeStrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_badkey[StrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_badkey[FakeStrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_wrong_type[StrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_wrong_type[FakeStrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore[StrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore[FakeStrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_mixed_set_types[StrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_mixed_set_types[FakeStrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_max[StrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_max[FakeStrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zlexcount_wrong_type[StrictRedis] FAILED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zlexcount_wrong_type[FakeStrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_onekey[StrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_onekey[FakeStrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_nokey[StrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_nokey[FakeStrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangebylex_with_limit[StrictRedis] PASSED [ 74%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangebylex_with_limit[FakeStrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_nan_to_zero[StrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_nan_to_zero[FakeStrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangebylex_raises_error[StrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangebylex_raises_error[FakeStrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_nokey[StrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_nokey[FakeStrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebylex[StrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebylex[FakeStrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_wrong_type[StrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_wrong_type[FakeStrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebylex_with_limit[StrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebylex_with_limit[FakeStrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_empty_zset[StrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_empty_zset[FakeStrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebylex_raises_error[StrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebylex_raises_error[FakeStrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zpopmax_too_many[StrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zpopmax_too_many[FakeStrictRedis] PASSED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebylex_wrong_type[StrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrevrangebylex_wrong_type[FakeStrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyrank[StrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyrank[FakeStrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyrank_negative_indices[StrictRedis] PASSED [ 75%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyrank_negative_indices[FakeStrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyrank_out_of_bounds[StrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyrank_out_of_bounds[FakeStrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyrank_wrong_type[StrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyrank_wrong_type[FakeStrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyscore[StrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyscore[FakeStrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyscore_exclusive[StrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyscore_exclusive[FakeStrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyscore_raises_error[StrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyscore_raises_error[FakeStrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyscore_badkey[StrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyscore_badkey[FakeStrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyscore_wrong_type[StrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebyscore_wrong_type[FakeStrictRedis] PASSED [ 76%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebylex[StrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebylex[FakeStrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebylex_error[StrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebylex_error[FakeStrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebylex_badkey[StrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebylex_badkey[FakeStrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_bzpopmin[StrictRedis] FAILED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_bzpopmin[FakeStrictRedis] PASSED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebylex_wrong_type[StrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zremrangebylex_wrong_type[FakeStrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_bzpopmax[StrictRedis] PASSED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_bzpopmax[FakeStrictRedis] PASSED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore[StrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore[FakeStrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zscan[StrictRedis] PASSED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_sum[StrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zscan[FakeStrictRedis] PASSED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_sum[FakeStrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_max[StrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_max[FakeStrictRedis] PASSED [ 77%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_min[StrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_min[FakeStrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_weights[StrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_weights[FakeStrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_nan_to_zero[StrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_nan_to_zero[FakeStrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_nan_to_zero2[StrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_nan_to_zero2[FakeStrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_nan_to_zero_ordering[StrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_nan_to_zero_ordering[FakeStrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_mixed_set_types[StrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_mixed_set_types[FakeStrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_badkey[StrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_badkey[FakeStrictRedis] PASSED [ 78%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_wrong_type[StrictRedis] PASSED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_wrong_type[FakeStrictRedis] PASSED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore[StrictRedis] PASSED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore[FakeStrictRedis] PASSED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_mixed_set_types[StrictRedis] PASSED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_mixed_set_types[FakeStrictRedis] PASSED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrandemember[StrictRedis] FAILED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrandemember[FakeStrictRedis] PASSED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_max[StrictRedis] PASSED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_max[FakeStrictRedis] PASSED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_onekey[StrictRedis] PASSED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_onekey[FakeStrictRedis] PASSED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_nokey[StrictRedis] PASSED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_nokey[FakeStrictRedis] PASSED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_nan_to_zero[StrictRedis] PASSED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_nan_to_zero[FakeStrictRedis] PASSED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_nokey[StrictRedis] PASSED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunionstore_nokey[FakeStrictRedis] PASSED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_wrong_type[StrictRedis] PASSED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zinterstore_wrong_type[FakeStrictRedis] PASSED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_empty_zset[StrictRedis] PASSED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_empty_zset[FakeStrictRedis] PASSED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zpopmax_too_many[StrictRedis] PASSED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zpopmax_too_many[FakeStrictRedis] PASSED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zdiffstore[StrictRedis] FAILED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zdiffstore[FakeStrictRedis] PASSED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_bzpopmin[StrictRedis] PASSED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_bzpopmin[FakeStrictRedis] PASSED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_bzpopmax[StrictRedis] PASSED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_bzpopmax[FakeStrictRedis] PASSED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zscan[StrictRedis] PASSED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zscan[FakeStrictRedis] PASSED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zdiff[StrictRedis] FAILED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zdiff[FakeStrictRedis] PASSED [ 79%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrandemember[StrictRedis] FAILED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrandemember[FakeStrictRedis] PASSED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunion[StrictRedis] FAILED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zunion[FakeStrictRedis] PASSED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zdiffstore[StrictRedis] FAILED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zdiffstore[FakeStrictRedis] PASSED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zinter[StrictRedis] FAILED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zinter[FakeStrictRedis] PASSED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zintercard[StrictRedis] SKIPPED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zintercard[FakeStrictRedis] SKIPPED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zdiff[StrictRedis] FAILED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zdiff[FakeStrictRedis] PASSED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunion[StrictRedis] FAILED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zunion[FakeStrictRedis] PASSED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangestore[StrictRedis] FAILED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py::test_zrangestore[FakeStrictRedis] PASSED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xstream PASSED           [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xadd_redis__green[StrictRedis] PASSED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xadd_redis__green[FakeStrictRedis] PASSED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xadd_redis7[StrictRedis] SKIPPED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xadd_redis7[FakeStrictRedis] SKIPPED [ 80%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xadd_maxlen[StrictRedis] PASSED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xadd_maxlen[FakeStrictRedis] PASSED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zinter[StrictRedis] FAILED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zinter[FakeStrictRedis] PASSED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zintercard[StrictRedis] SKIPPED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zintercard[FakeStrictRedis] SKIPPED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xadd_minid[StrictRedis] FAILED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xadd_minid[FakeStrictRedis] PASSED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xtrim[StrictRedis] PASSED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xtrim[FakeStrictRedis] PASSED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xtrim_minlen_and_length_args[StrictRedis] SKIPPED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xtrim_minlen_and_length_args[FakeStrictRedis] SKIPPED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangestore[StrictRedis] FAILED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py::test_zrangestore[FakeStrictRedis] PASSED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xstream PASSED           [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xadd_nomkstream[StrictRedis] FAILED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xadd_nomkstream[FakeStrictRedis] PASSED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xadd_redis__green[StrictRedis] PASSED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xadd_redis__green[FakeStrictRedis] PASSED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xadd_redis7[StrictRedis] SKIPPED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xadd_redis7[FakeStrictRedis] SKIPPED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xadd_maxlen[StrictRedis] PASSED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xadd_maxlen[FakeStrictRedis] PASSED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xrevrange[StrictRedis] FAILED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xrevrange[FakeStrictRedis] PASSED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xrange[StrictRedis] FAILED [ 81%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xrange[FakeStrictRedis] PASSED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xread[StrictRedis] PASSED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xread[FakeStrictRedis] PASSED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xread_bad_commands[StrictRedis] PASSED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xread_bad_commands[FakeStrictRedis] PASSED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xadd_minid[StrictRedis] FAILED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xadd_minid[FakeStrictRedis] PASSED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xdel[StrictRedis] PASSED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xdel[FakeStrictRedis] PASSED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xtrim[StrictRedis] PASSED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xtrim[FakeStrictRedis] PASSED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xtrim_minlen_and_length_args[StrictRedis] SKIPPED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xtrim_minlen_and_length_args[FakeStrictRedis] SKIPPED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xgroup_destroy[StrictRedis] PASSED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xgroup_destroy[FakeStrictRedis] PASSED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xgroup_create_redis6[StrictRedis] PASSED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xgroup_create_redis6[FakeStrictRedis] PASSED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xgroup_create_redis7[StrictRedis] SKIPPED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xgroup_create_redis7[FakeStrictRedis] SKIPPED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xgroup_setid_redis7[StrictRedis] SKIPPED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xgroup_setid_redis7[FakeStrictRedis] SKIPPED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xgroup_delconsumer[StrictRedis] PASSED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xgroup_delconsumer[FakeStrictRedis] PASSED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xadd_nomkstream[StrictRedis] FAILED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xadd_nomkstream[FakeStrictRedis] PASSED [ 82%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xrevrange[StrictRedis] PASSED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xrevrange[FakeStrictRedis] PASSED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xrange[StrictRedis] PASSED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xrange[FakeStrictRedis] PASSED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xgroup_createconsumer[StrictRedis] FAILED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xgroup_createconsumer[FakeStrictRedis] PASSED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xread[StrictRedis] PASSED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xread[FakeStrictRedis] PASSED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xread_bad_commands[StrictRedis] PASSED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xinfo_consumers[StrictRedis] PASSED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xread_bad_commands[FakeStrictRedis] PASSED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xinfo_consumers[FakeStrictRedis] PASSED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xdel[StrictRedis] PASSED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xdel[FakeStrictRedis] PASSED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xreadgroup[StrictRedis] FAILED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xreadgroup[FakeStrictRedis] PASSED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xgroup_destroy[StrictRedis] PASSED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xgroup_destroy[FakeStrictRedis] PASSED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xinfo_stream[StrictRedis] PASSED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xinfo_stream[FakeStrictRedis] PASSED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xgroup_create_redis6[StrictRedis] PASSED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xgroup_create_redis6[FakeStrictRedis] PASSED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xgroup_create_redis7[StrictRedis] SKIPPED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xgroup_create_redis7[FakeStrictRedis] SKIPPED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xgroup_setid_redis7[StrictRedis] SKIPPED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xgroup_setid_redis7[FakeStrictRedis] SKIPPED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xack[StrictRedis] FAILED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xack[FakeStrictRedis] PASSED [ 83%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xinfo_stream_redis7[StrictRedis] SKIPPED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xinfo_stream_redis7[FakeStrictRedis] SKIPPED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xgroup_delconsumer[StrictRedis] FAILED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xgroup_delconsumer[FakeStrictRedis] PASSED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xinfo_stream_full[StrictRedis] FAILED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xinfo_stream_full[FakeStrictRedis] PASSED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xpending[StrictRedis] PASSED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xpending[FakeStrictRedis] PASSED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xpending_range[StrictRedis] PASSED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xpending_range[FakeStrictRedis] PASSED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xgroup_createconsumer[StrictRedis] FAILED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xgroup_createconsumer[FakeStrictRedis] PASSED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xpending_range_idle[StrictRedis] FAILED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xpending_range_idle[FakeStrictRedis] PASSED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xinfo_consumers[StrictRedis] FAILED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xinfo_consumers[FakeStrictRedis] PASSED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xpending_range_negative[StrictRedis] PASSED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xpending_range_negative[FakeStrictRedis] PASSED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xautoclaim_redis6[StrictRedis] SKIPPED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xautoclaim_redis6[FakeStrictRedis] SKIPPED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xautoclaim_redis7[StrictRedis] SKIPPED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xautoclaim_redis7[FakeStrictRedis] SKIPPED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xclaim_trimmed_redis7[StrictRedis] SKIPPED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xclaim_trimmed_redis7[FakeStrictRedis] SKIPPED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xreadgroup[StrictRedis] FAILED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xreadgroup[FakeStrictRedis] PASSED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xclaim[StrictRedis] PASSED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py::test_xclaim[FakeStrictRedis] PASSED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xinfo_stream[StrictRedis] PASSED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xinfo_stream[FakeStrictRedis] PASSED [ 84%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_append[StrictRedis] PASSED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_append[FakeStrictRedis] PASSED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_append_with_no_preexisting_key[StrictRedis] PASSED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_append_with_no_preexisting_key[FakeStrictRedis] PASSED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_append_wrong_type[StrictRedis] PASSED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_append_wrong_type[FakeStrictRedis] PASSED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_decr[StrictRedis] PASSED  [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_decr[FakeStrictRedis] PASSED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_decr_newkey[StrictRedis] PASSED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_decr_newkey[FakeStrictRedis] PASSED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xack[StrictRedis] FAILED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xack[FakeStrictRedis] PASSED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xinfo_stream_redis7[StrictRedis] SKIPPED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xinfo_stream_redis7[FakeStrictRedis] SKIPPED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_decr_expiry[StrictRedis] PASSED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_decr_expiry[FakeStrictRedis] PASSED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_decr_badtype[StrictRedis] PASSED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_decr_badtype[FakeStrictRedis] PASSED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_get_does_not_exist[StrictRedis] PASSED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_get_does_not_exist[FakeStrictRedis] PASSED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_get_with_non_str_keys[StrictRedis] PASSED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_get_with_non_str_keys[FakeStrictRedis] PASSED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_get_invalid_type[StrictRedis] PASSED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_get_invalid_type[FakeStrictRedis] PASSED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_getset_exists[StrictRedis] PASSED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_getset_exists[FakeStrictRedis] PASSED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_getset_wrong_type[StrictRedis] PASSED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_getset_wrong_type[FakeStrictRedis] PASSED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xinfo_stream_full[StrictRedis] FAILED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xinfo_stream_full[FakeStrictRedis] PASSED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xpending[StrictRedis] PASSED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xpending[FakeStrictRedis] PASSED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xpending_range[StrictRedis] PASSED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xpending_range[FakeStrictRedis] PASSED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_getdel[StrictRedis] FAILED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_getdel[FakeStrictRedis] PASSED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xpending_range_idle[StrictRedis] FAILED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xpending_range_idle[FakeStrictRedis] PASSED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xpending_range_negative[StrictRedis] PASSED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xpending_range_negative[FakeStrictRedis] PASSED [ 85%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_getdel_doesnt_exist[StrictRedis] FAILED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_getdel_doesnt_exist[FakeStrictRedis] PASSED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incr_with_no_preexisting_key[StrictRedis] PASSED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incr_with_no_preexisting_key[FakeStrictRedis] PASSED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incr_by[StrictRedis] PASSED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incr_by[FakeStrictRedis] PASSED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incr_preexisting_key[StrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incr_preexisting_key[FakeStrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xautoclaim_redis6[StrictRedis] FAILED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xautoclaim_redis6[FakeStrictRedis] PASSED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xautoclaim_redis7[StrictRedis] SKIPPED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xautoclaim_redis7[FakeStrictRedis] SKIPPED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xclaim_trimmed_redis7[StrictRedis] SKIPPED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xclaim_trimmed_redis7[FakeStrictRedis] SKIPPED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incr_expiry[StrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incr_expiry[FakeStrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incr_bad_type[StrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incr_bad_type[FakeStrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incr_with_float[StrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incr_with_float[FakeStrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incr_followed_by_mget[StrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incr_followed_by_mget[FakeStrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incr_followed_by_mget_returns_strings[StrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incr_followed_by_mget_returns_strings[FakeStrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incrbyfloat[StrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incrbyfloat[FakeStrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xclaim[StrictRedis] FAILED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py::test_xclaim[FakeStrictRedis] PASSED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incrbyfloat_with_noexist[StrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_append[StrictRedis] PASSED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incrbyfloat_with_noexist[FakeStrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_append[FakeStrictRedis] PASSED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incrbyfloat_expiry[StrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incrbyfloat_expiry[FakeStrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_append_with_no_preexisting_key[StrictRedis] FAILED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_append_with_no_preexisting_key[FakeStrictRedis] PASSED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incrbyfloat_bad_type[StrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incrbyfloat_bad_type[FakeStrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_append_wrong_type[StrictRedis] PASSED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_append_wrong_type[FakeStrictRedis] PASSED [ 86%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incrbyfloat_precision[StrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_incrbyfloat_precision[FakeStrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_decr[StrictRedis] PASSED  [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_decr[FakeStrictRedis] PASSED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_mget[StrictRedis] PASSED  [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_mget[FakeStrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_mget_with_no_keys[StrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_mget_with_no_keys[FakeStrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_mget_mixed_types[StrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_mget_mixed_types[FakeStrictRedis] PASSED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_mset_with_no_keys[StrictRedis] PASSED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_mset_with_no_keys[FakeStrictRedis] PASSED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_mset[StrictRedis] PASSED  [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_mset[FakeStrictRedis] PASSED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_msetnx[StrictRedis] PASSED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_decr_newkey[StrictRedis] FAILED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_msetnx[FakeStrictRedis] PASSED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setex_redispy5[StrictRedis] SKIPPED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_decr_newkey[FakeStrictRedis] PASSED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setex_redispy5[FakeStrictRedis] SKIPPED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_decr_expiry[StrictRedis] PASSED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_decr_expiry[FakeStrictRedis] PASSED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_decr_badtype[StrictRedis] PASSED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_decr_badtype[FakeStrictRedis] PASSED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_get_does_not_exist[StrictRedis] PASSED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setex_redispy4[StrictRedis] FAILED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_get_does_not_exist[FakeStrictRedis] PASSED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setex_redispy4[FakeStrictRedis] PASSED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_get_with_non_str_keys[StrictRedis] PASSED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_get_with_non_str_keys[FakeStrictRedis] PASSED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_get_invalid_type[StrictRedis] PASSED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_get_invalid_type[FakeStrictRedis] PASSED [ 87%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setex_using_timedelta_redispy4[StrictRedis] FAILED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_getset_exists[StrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setex_using_timedelta_redispy4[FakeStrictRedis] PASSED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setex_using_timedelta_redispy5[StrictRedis] SKIPPED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_getset_exists[FakeStrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setex_using_timedelta_redispy5[FakeStrictRedis] SKIPPED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_getset_wrong_type[StrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_getset_wrong_type[FakeStrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setex_using_float[StrictRedis] PASSED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setex_using_float[FakeStrictRedis] PASSED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setex_overflow[StrictRedis] SKIPPED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setex_overflow[FakeStrictRedis] SKIPPED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_ex[StrictRedis] PASSED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_ex[FakeStrictRedis] PASSED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_ex_using_timedelta[StrictRedis] PASSED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_ex_using_timedelta[FakeStrictRedis] PASSED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_ex_overflow[StrictRedis] FAILED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_ex_overflow[FakeStrictRedis] PASSED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_getdel[StrictRedis] FAILED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_getdel[FakeStrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_px_overflow[StrictRedis] FAILED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_px_overflow[FakeStrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_px[StrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_px[FakeStrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_px_using_timedelta[StrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_px_using_timedelta[FakeStrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_conflicting_expire_options[StrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_conflicting_expire_options[FakeStrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_raises_wrong_ex[StrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_raises_wrong_ex[FakeStrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_using_timedelta_raises_wrong_ex[StrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_using_timedelta_raises_wrong_ex[FakeStrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_raises_wrong_px[StrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_raises_wrong_px[FakeStrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_using_timedelta_raises_wrong_px[StrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_using_timedelta_raises_wrong_px[FakeStrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_getdel_doesnt_exist[StrictRedis] FAILED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_getdel_doesnt_exist[FakeStrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setex_raises_wrong_ex[StrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setex_raises_wrong_ex[FakeStrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incr_with_no_preexisting_key[StrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incr_with_no_preexisting_key[FakeStrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setex_using_timedelta_raises_wrong_ex[StrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setex_using_timedelta_raises_wrong_ex[FakeStrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incr_by[StrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incr_by[FakeStrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incr_preexisting_key[StrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incr_preexisting_key[FakeStrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setnx[StrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setnx[FakeStrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incr_expiry[StrictRedis] PASSED [ 88%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incr_expiry[FakeStrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_nx[StrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_nx[FakeStrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incr_bad_type[StrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incr_bad_type[FakeStrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_xx[StrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incr_with_float[StrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_xx[FakeStrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incr_with_float[FakeStrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_get[StrictRedis] SKIPPED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_get[FakeStrictRedis] SKIPPED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_get_xx[StrictRedis] SKIPPED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_get_xx[FakeStrictRedis] SKIPPED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_get_nx_redis6[StrictRedis] SKIPPED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incr_followed_by_mget[StrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_get_nx_redis6[FakeStrictRedis] SKIPPED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incr_followed_by_mget[FakeStrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_get_nx_redis7[StrictRedis] SKIPPED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_set_get_nx_redis7[FakeStrictRedis] SKIPPED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incr_followed_by_mget_returns_strings[StrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incr_followed_by_mget_returns_strings[FakeStrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_substr[StrictRedis] PASSED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_substr[FakeStrictRedis] PASSED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incrbyfloat[StrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incrbyfloat[FakeStrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_substr_noexist_key[StrictRedis] PASSED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_substr_noexist_key[FakeStrictRedis] PASSED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incrbyfloat_with_noexist[StrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incrbyfloat_with_noexist[FakeStrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_substr_wrong_type[StrictRedis] PASSED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_substr_wrong_type[FakeStrictRedis] PASSED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incrbyfloat_expiry[StrictRedis] PASSED [ 89%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incrbyfloat_expiry[FakeStrictRedis] PASSED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_strlen[StrictRedis] PASSED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incrbyfloat_bad_type[StrictRedis] PASSED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_strlen[FakeStrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incrbyfloat_bad_type[FakeStrictRedis] PASSED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_strlen_wrong_type[StrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_strlen_wrong_type[FakeStrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setrange[StrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setrange[FakeStrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setrange_expiry[StrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setrange_expiry[FakeStrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_large_command[StrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_large_command[FakeStrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_saving_non_ascii_chars_as_value[StrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_saving_non_ascii_chars_as_value[FakeStrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_saving_unicode_type_as_value[StrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_saving_unicode_type_as_value[FakeStrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_saving_non_ascii_chars_as_key[StrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_saving_non_ascii_chars_as_key[FakeStrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_saving_unicode_type_as_key[StrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_saving_unicode_type_as_key[FakeStrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_future_newbytes[StrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_future_newbytes[FakeStrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_future_newstr[StrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_future_newstr[FakeStrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setitem_getitem[StrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_setitem_getitem[FakeStrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incrbyfloat_precision[StrictRedis] FAILED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_incrbyfloat_precision[FakeStrictRedis] PASSED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_getitem_non_existent_key[StrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_getitem_non_existent_key[FakeStrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_lcs[StrictRedis] SKIPPED  [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py::test_lcs[FakeStrictRedis] SKIPPED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_mget[StrictRedis] PASSED  [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_mget[FakeStrictRedis] PASSED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_mget_with_no_keys[StrictRedis] PASSED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_mget_with_no_keys[FakeStrictRedis] PASSED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_multiple_successful_watch_calls[StrictRedis] FAILED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_multiple_successful_watch_calls[FakeStrictRedis] PASSED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_mget_mixed_types[StrictRedis] PASSED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_mget_mixed_types[FakeStrictRedis] PASSED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_watch_state_is_cleared_after_abort[StrictRedis] PASSED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_watch_state_is_cleared_after_abort[FakeStrictRedis] PASSED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_mset_with_no_keys[StrictRedis] PASSED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_mset_with_no_keys[FakeStrictRedis] PASSED [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_mset[StrictRedis] PASSED  [ 90%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_mset[FakeStrictRedis] PASSED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_msetnx[StrictRedis] PASSED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_msetnx[FakeStrictRedis] PASSED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setex_redispy5[StrictRedis] SKIPPED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setex_redispy5[FakeStrictRedis] SKIPPED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_transaction_shortcut[StrictRedis] FAILED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setex_redispy4[StrictRedis] PASSED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setex_redispy4[FakeStrictRedis] PASSED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_transaction_shortcut[FakeStrictRedis] PASSED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setex_using_timedelta_redispy4[StrictRedis] PASSED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setex_using_timedelta_redispy4[FakeStrictRedis] PASSED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setex_using_timedelta_redispy5[StrictRedis] SKIPPED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setex_using_timedelta_redispy5[FakeStrictRedis] SKIPPED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_transaction_value_from_callable[StrictRedis] PASSED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_transaction_value_from_callable[FakeStrictRedis] PASSED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setex_using_float[StrictRedis] PASSED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setex_using_float[FakeStrictRedis] PASSED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setex_overflow[StrictRedis] SKIPPED [ 91%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setex_overflow[FakeStrictRedis] SKIPPED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_empty[StrictRedis] PASSED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_empty[FakeStrictRedis] PASSED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_ex[StrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_length[StrictRedis] PASSED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_ex[FakeStrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_length[FakeStrictRedis] PASSED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_ex_using_timedelta[StrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_ex_using_timedelta[FakeStrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_no_commands[StrictRedis] PASSED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_no_commands[FakeStrictRedis] PASSED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_ex_overflow[StrictRedis] FAILED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_ex_overflow[FakeStrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_failed_transaction[StrictRedis] PASSED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_failed_transaction[FakeStrictRedis] PASSED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_px_overflow[StrictRedis] FAILED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_px_overflow[FakeStrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_px[StrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_px[FakeStrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_px_using_timedelta[StrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_px_using_timedelta[FakeStrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_srem_no_change[StrictRedis] FAILED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_conflicting_expire_options[StrictRedis] PASSED [ 92%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_srem_no_change[FakeStrictRedis] PASSED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_move[StrictRedis] SKIPPED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_conflicting_expire_options[FakeStrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_move[FakeStrictRedis] SKIPPED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_exec_bad_arguments[StrictRedis] SKIPPED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_raises_wrong_ex[StrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_exec_bad_arguments[FakeStrictRedis] SKIPPED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_exec_bad_arguments_abort[StrictRedis] SKIPPED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_raises_wrong_ex[FakeStrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_exec_bad_arguments_abort[FakeStrictRedis] SKIPPED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_using_timedelta_raises_wrong_ex[StrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_using_timedelta_raises_wrong_ex[FakeStrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline[StrictRedis] PASSED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline[FakeStrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_raises_wrong_px[StrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_raises_wrong_px[FakeStrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_ignore_errors[StrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_ignore_errors[FakeStrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_using_timedelta_raises_wrong_px[StrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_using_timedelta_raises_wrong_px[FakeStrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_non_transactional[StrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_non_transactional[FakeStrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setex_raises_wrong_ex[StrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setex_raises_wrong_ex[FakeStrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_raises_when_watched_key_changed[StrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_raises_when_watched_key_changed[FakeStrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setex_using_timedelta_raises_wrong_ex[StrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setex_using_timedelta_raises_wrong_ex[FakeStrictRedis] PASSED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_succeeds_despite_unwatched_key_changed[StrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_succeeds_despite_unwatched_key_changed[FakeStrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setnx[StrictRedis] FAILED [ 93%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setnx[FakeStrictRedis] PASSED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_succeeds_when_watching_nonexistent_key[StrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_pipeline_succeeds_when_watching_nonexistent_key[FakeStrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_nx[StrictRedis] FAILED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_nx[FakeStrictRedis] PASSED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_watch_state_is_cleared_across_multiple_watches[StrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_watch_state_is_cleared_across_multiple_watches[FakeStrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_xx[StrictRedis] FAILED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_xx[FakeStrictRedis] PASSED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_get[StrictRedis] SKIPPED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_get[FakeStrictRedis] SKIPPED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_get_xx[StrictRedis] SKIPPED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_get_xx[FakeStrictRedis] SKIPPED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_get_nx_redis6[StrictRedis] SKIPPED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_get_nx_redis6[FakeStrictRedis] SKIPPED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_get_nx_redis7[StrictRedis] SKIPPED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_set_get_nx_redis7[FakeStrictRedis] SKIPPED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_substr[StrictRedis] PASSED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_substr[FakeStrictRedis] PASSED [ 94%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py::test_socket_cleanup_watch PASSED [100%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | =================================== FAILURES ===================================\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ___________________ test_scan_iter_single_page[StrictRedis] ____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_scan_iter_single_page(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.set('foo1', 'bar1')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.set('foo2', 'bar2')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert set(r.scan_iter(match=\"foo*\")) == {b'foo1', b'foo2'}\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert set(r.scan_iter()) == {b'foo1', b'foo2'}\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert set(r.scan_iter(match=\"\")) == set()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert set(r.scan_iter(match=\"foo1\", _type=\"string\")) == {b'foo1', }\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_scan.py:154: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:2922: in scan_iter\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     cursor=cursor, match=match, count=count, _type=_type, **kwargs\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:2896: in scan\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"SCAN\", *pieces, **kwargs)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ____________ test_zadd_with_gt_and_ch[StrictRedis-param0-0-state0] _____________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | param = {'four': 2.0, 'three': 1.0}, return_value = 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | state = [(b'three', 3.0), (b'four', 4.0)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     @pytest.mark.parametrize(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         'param,return_value,state',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             ({'four': 2.0, 'three': 1.0}, 0, [(b'three', 3.0), (b'four', 4.0)]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             ({'four': 5.0, 'three': 1.0, 'zero': 0.0}, 2, [(b'zero', 0.0), (b'three', 3.0), (b'four', 5.0), ]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             ({'two': 2.0, 'one': 1.0}, 2, [(b'one', 1.0), (b'two', 2.0), (b'three', 3.0), (b'four', 4.0)])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zadd_with_gt_and_ch(r, param, return_value, state):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'four': 4.0, 'three': 3.0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.zadd('foo', param, gt=True, ch=True) == return_value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py:81: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4008: in zadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"ZADD\", name, *pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ____________ test_zadd_with_gt_and_ch[StrictRedis-param1-2-state1] _____________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | param = {'four': 5.0, 'three': 1.0, 'zero': 0.0}, return_value = 2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | state = [(b'zero', 0.0), (b'three', 3.0), (b'four', 5.0)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     @pytest.mark.parametrize(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         'param,return_value,state',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             ({'four': 2.0, 'three': 1.0}, 0, [(b'three', 3.0), (b'four', 4.0)]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             ({'four': 5.0, 'three': 1.0, 'zero': 0.0}, 2, [(b'zero', 0.0), (b'three', 3.0), (b'four', 5.0), ]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             ({'two': 2.0, 'one': 1.0}, 2, [(b'one', 1.0), (b'two', 2.0), (b'three', 3.0), (b'four', 4.0)])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zadd_with_gt_and_ch(r, param, return_value, state):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'four': 4.0, 'three': 3.0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.zadd('foo', param, gt=True, ch=True) == return_value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py:81: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4008: in zadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"ZADD\", name, *pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ____________ test_zadd_with_gt_and_ch[StrictRedis-param2-2-state2] _____________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | param = {'one': 1.0, 'two': 2.0}, return_value = 2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | state = [(b'one', 1.0), (b'two', 2.0), (b'three', 3.0), (b'four', 4.0)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     @pytest.mark.parametrize(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         'param,return_value,state',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             ({'four': 2.0, 'three': 1.0}, 0, [(b'three', 3.0), (b'four', 4.0)]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             ({'four': 5.0, 'three': 1.0, 'zero': 0.0}, 2, [(b'zero', 0.0), (b'three', 3.0), (b'four', 5.0), ]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             ({'two': 2.0, 'one': 1.0}, 2, [(b'one', 1.0), (b'two', 2.0), (b'three', 3.0), (b'four', 4.0)])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zadd_with_gt_and_ch(r, param, return_value, state):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'four': 4.0, 'three': 3.0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.zadd('foo', param, gt=True, ch=True) == return_value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py:81: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4008: in zadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"ZADD\", name, *pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ________________ test_zadd_with_gt[StrictRedis-param0-0-state0] ________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | param = {'four': 2.0, 'three': 1.0}, return_value = 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | state = [(b'three', 3.0), (b'four', 4.0)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     @pytest.mark.parametrize(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         'param,return_value,state',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             ({'four': 2.0, 'three': 1.0}, 0, [(b'three', 3.0), (b'four', 4.0)]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             ({'four': 5.0, 'three': 1.0, 'zero': 0.0}, 1, [(b'zero', 0.0), (b'three', 3.0), (b'four', 5.0)]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             ({'two': 2.0, 'one': 1.0}, 2, [(b'one', 1.0), (b'two', 2.0), (b'three', 3.0), (b'four', 4.0)])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zadd_with_gt(r, param, return_value, state):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'four': 4.0, 'three': 3.0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.zadd('foo', param, gt=True) == return_value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py:95: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4008: in zadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"ZADD\", name, *pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ________________ test_zadd_with_gt[StrictRedis-param1-1-state1] ________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | param = {'four': 5.0, 'three': 1.0, 'zero': 0.0}, return_value = 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | state = [(b'zero', 0.0), (b'three', 3.0), (b'four', 5.0)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     @pytest.mark.parametrize(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         'param,return_value,state',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             ({'four': 2.0, 'three': 1.0}, 0, [(b'three', 3.0), (b'four', 4.0)]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             ({'four': 5.0, 'three': 1.0, 'zero': 0.0}, 1, [(b'zero', 0.0), (b'three', 3.0), (b'four', 5.0)]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             ({'two': 2.0, 'one': 1.0}, 2, [(b'one', 1.0), (b'two', 2.0), (b'three', 3.0), (b'four', 4.0)])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zadd_with_gt(r, param, return_value, state):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'four': 4.0, 'three': 3.0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.zadd('foo', param, gt=True) == return_value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py:95: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4008: in zadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"ZADD\", name, *pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ________________ test_zadd_with_gt[StrictRedis-param2-2-state2] ________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | param = {'one': 1.0, 'two': 2.0}, return_value = 2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | state = [(b'one', 1.0), (b'two', 2.0), (b'three', 3.0), (b'four', 4.0)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     @pytest.mark.parametrize(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         'param,return_value,state',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             ({'four': 2.0, 'three': 1.0}, 0, [(b'three', 3.0), (b'four', 4.0)]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             ({'four': 5.0, 'three': 1.0, 'zero': 0.0}, 1, [(b'zero', 0.0), (b'three', 3.0), (b'four', 5.0)]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             ({'two': 2.0, 'one': 1.0}, 2, [(b'one', 1.0), (b'two', 2.0), (b'three', 3.0), (b'four', 4.0)])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zadd_with_gt(r, param, return_value, state):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'four': 4.0, 'three': 3.0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.zadd('foo', param, gt=True) == return_value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py:95: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4008: in zadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"ZADD\", name, *pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _________________ test_zadd_with_xx_and_gt_and_ch[StrictRedis] _________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zadd_with_xx_and_gt_and_ch(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('test', {\"one\": 1})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.zscore(\"test\", \"one\") == 1.0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert None == 1.0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +  where None = <bound method SortedSetCommands.zscore of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('test', 'one')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +    where <bound method SortedSetCommands.zscore of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.zscore\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_zadd.py:147: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ___________________________ test_getbit[StrictRedis] ___________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_getbit(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.setbit('foo', 3, 1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.getbit('foo', 0) == 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.getbit('foo', 1) == 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.getbit('foo', 2) == 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.getbit('foo', 3) == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert 0 == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +  where 0 = <bound method BasicKeyCommands.getbit of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +    where <bound method BasicKeyCommands.getbit of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.getbit\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py:13: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_substr_noexist_key[StrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ________________________ test_bitop_errors[StrictRedis] ________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_bitop_errors(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.set('key1', 'foobar')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.set('key2', 'abcdef')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.sadd('key-set', 'member1')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         with pytest.raises(redis.ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             r.bitop('not', 'dest', 'key1', 'key2')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         with pytest.raises(redis.ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             r.bitop('badop', 'dest', 'key1', 'key2')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         with pytest.raises(redis.ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           r.bitop('and', 'dest', 'key1', 'key-set')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           Failed: DID NOT RAISE <class 'redis.exceptions.ResponseError'>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_bitmap_commands.py:165: Failed\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | __________________ test_sort_range_offset_range[StrictRedis] ___________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_sort_range_offset_range(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.rpush('foo', '2')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.rpush('foo', '1')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.rpush('foo', '4')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.rpush('foo', '3')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.sort('foo', start=0, num=2) == [b'1', b'2']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert [b'1', b'3'] == [b'1', b'2']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         At index 1 diff: b'3' != b'2'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         - [b'1', b'2']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         ?          ^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         + [b'1', b'3']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         ?          ^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py:68: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ______________ test_sort_range_offset_range_and_desc[StrictRedis] ______________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_sort_range_offset_range_and_desc(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.rpush('foo', '2')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.rpush('foo', '1')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.rpush('foo', '4')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.rpush('foo', '3')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.sort(\"foo\", start=0, num=1, desc=True) == [b\"4\"]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py:77: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:2820: in sort\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"SORT\", *pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ______________________ test_sort_descending[StrictRedis] _______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_sort_descending(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.rpush('foo', '1')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.rpush('foo', '2')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.rpush('foo', '3')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.sort('foo', desc=True) == [b'3', b'2', b'1']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert [] == [b'3', b'2', b'1']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         Right contains 3 more items, first extra item: b'3'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         - [b'3', b'2', b'1']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         + []\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py:98: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _______________________ test_watch_persist[StrictRedis] ________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_watch_persist(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"PERSIST should mark a variable as changed.\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.set('foo', 'bar', ex=10000)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         with r.pipeline() as p:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             p.watch('foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             r.persist('foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             p.multi()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             p.get('foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             with pytest.raises(redis.exceptions.WatchError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >               p.execute()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E               Failed: DID NOT RAISE <class 'redis.exceptions.WatchError'>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py:454: Failed\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _______________________ test_get_float_type[StrictRedis] _______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_get_float_type(r: redis.Redis):  # Test for issue #58\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.set('key', 123)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.get('key') == b'123'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert None == b'123'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +  where None = <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('key')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +    where <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.get\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_generic_commands.py:477: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _________________________ test_geoadd_ch[StrictRedis] __________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_geoadd_ch(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         values = (2.1909389952632, 41.433791470673, \"place1\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.geoadd(\"a\", values) == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         values = (2.1909389952632, 31.433791470673, \"place1\",\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |                   2.1873744593677, 41.406342043777, \"place2\",)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.geoadd(\"a\", values, ch=True) == 2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py:14: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:5235: in geoadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"GEOADD\", *pieces)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_substr_noexist_key[FakeStrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: syntax error. Try GEOADD key [x1] [y1] [name1] [x2] [y2] [name2] ...\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _________________________ test_geoadd_xx[StrictRedis] __________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_geoadd_xx(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         values = (2.1909389952632, 41.433791470673, \"place1\",\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |                   2.1873744593677, 41.406342043777, \"place2\",)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.geoadd(\"a\", values) == 2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         values = (\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             2.1909389952632, 41.433791470673, b\"place1\",\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             2.1873744593677, 41.406342043777, b\"place2\",\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             2.1804738294738, 41.405647879212, b\"place3\",\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.geoadd(\"a\", values, nx=True) == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py:46: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:5235: in geoadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"GEOADD\", *pieces)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: syntax error. Try GEOADD key [x1] [y1] [name1] [x2] [y2] [name2] ...\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ________ test_georadiusbymember[StrictRedis-place1-1-extra2-expected2] _________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | member = 'place1', radius = 1, extra = {'unit': 'km'}, expected = [b'place1']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     @pytest.mark.parametrize(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"member,radius,extra,expected\", [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             ('place1', 1000, {}, [b\"place1\"]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             ('place2', 1000, {}, [b\"place2\"]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             ('place1', 1, {\"unit\": \"km\"}, [b\"place1\"]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             ('place1', 3000, {\"count\": 1}, [b\"place1\"]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         ])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_georadiusbymember(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             r: redis.Redis, member: str, radius: float,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             extra: Dict[str, Any],\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             expected):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         values = (2.1909389952632, 41.433791470673, \"place1\",\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |                   2.1873744593677, 41.406342043777, b\"place2\",)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.geoadd(\"barcelona\", values)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.georadiusbymember(\"barcelona\", member, radius, **extra) == expected\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert [] == [b'place1']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         Right contains one more item: b'place1'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         - [b'place1']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         + []\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py:129: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ______________________ test_georadius_count[StrictRedis] _______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_georadius_count(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         values = (2.1909389952632, 41.433791470673, \"place1\",\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |                   2.1873744593677, 41.406342043777, \"place2\",)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.geoadd(\"barcelona\", values)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.georadius(\"barcelona\", 2.191, 41.433, 3000, count=1, store='barcelona') == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.georadius(\"barcelona\", 2.191, 41.433, 3000, store_dist='extract') == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert [] == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +  where [] = <bound method GeoCommands.georadius of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('barcelona', 2.191, 41.433, 3000, store_dist='extract')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +    where <bound method GeoCommands.georadius of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.georadius\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py:160: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _________________________ test_geosearch[StrictRedis] __________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_geosearch(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         values = (\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             2.1909389952632, 41.433791470673, b\"place1\",\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             2.1873744593677, 41.406342043777, b\"place2\",\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             2.583333, 41.316667, b\"place3\",\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.geoadd(\"barcelona\", values)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.geosearch(\"barcelona\", longitude=2.191, latitude=41.433, radius=1000) == [b\"place1\"]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_geo_commands.py:203: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:5491: in geosearch\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     store_dist=None,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:5605: in _geosearchgeneric\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(command, *pieces, **kwargs)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: unknown command `GEOSEARCH`, with args beginning with: `barcelona`, `FROMLONLAT`, `2.191`, `41.433`, `BYRADIUS`, `1000`, `m`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ______________________ test_hstrlen_missing[StrictRedis] _______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_hstrlen_missing(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.hstrlen('foo', 'doesnotexist') == 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py:11: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4896: in hstrlen\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"HSTRLEN\", name, key)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _____________________ test_hgetall_empty_key[StrictRedis] ______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_hgetall_empty_key(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.hgetall('foo') == {}\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py:50: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4776: in hgetall\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"HGETALL\", name)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ___________________________ test_hvals[StrictRedis] ____________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_hvals(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       r.hset('foo', 'k1', 'v1')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py:98: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4841: in hset\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"HSET\", name, *items)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_substr_wrong_type[StrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_substr_wrong_type[FakeStrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ___________________________ test_hmget[StrictRedis] ____________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_hmget(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.hset('foo', 'k1', 'v1')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.hset('foo', 'k2', 'v2')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.hset('foo', 'k3', 'v3')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         # Normal case.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.hmget('foo', ['k1', 'k3']) == [b'v1', b'v3']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.hmget('foo', 'k1', 'k3') == [b'v1', b'v3']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         # Key does not exist.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.hmget('bar', ['k1', 'k3']) == [None, None]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.hmget('bar', 'k1', 'k3') == [None, None]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         # Some keys in the hash do not exist.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.hmget('foo', ['k1', 'k500']) == [b'v1', None]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert [None, None] == [b'v1', None]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         At index 0 diff: None != b'v1'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         - [b'v1', None]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         + [None, None]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py:121: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _________________________ test_hrandfield[StrictRedis] _________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_hrandfield(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.hrandfield(\"key\") is None\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py:298: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:2061: in hrandfield\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"HRANDFIELD\", key, *params)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: unknown command `HRANDFIELD`, with args beginning with: `key`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ___________________ test_lpush_with_nonstr_key[StrictRedis] ____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_lpush_with_nonstr_key(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.lpush(1, 'one')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.lpush(1, 'two')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.lpush(1, 'three')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.lrange(1, 0, 2) == [b'three', b'two', b'one']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert [b'three', b'two'] == [b'three', b'two', b'one']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         Right contains one more item: b'one'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         - [b'three', b'two', b'one']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         ?                  --------\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         + [b'three', b'two']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py:41: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ____________________ test_lrem_positive_count[StrictRedis] _____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_lrem_positive_count(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.lpush('foo', 'same')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.lpush('foo', 'same')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.lpush('foo', 'different')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.lrem('foo', 2, 'same')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.lrange('foo', 0, -1) == [b'different']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert [] == [b'different']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         Right contains one more item: b'different'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         - [b'different']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         + []\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py:73: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ____________________________ test_lpop[StrictRedis] ____________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_lpop(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.rpush('foo', 'one') == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.rpush('foo', 'two') == 2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.rpush('foo', 'three') == 3\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.lpop('foo') == b'one'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert None == b'one'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +  where None = <bound method ListCommands.lpop of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +    where <bound method ListCommands.lpop of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.lpop\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py:143: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _______________________ test_lpop_zero_elem[StrictRedis] _______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_lpop_zero_elem(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.rpush(b'\\x00', b'')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.lpop(b'\\x00', 0) == []\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py:159: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:2599: in lpop\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"LPOP\", name, count)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: wrong number of arguments for 'lpop' command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ________________ test_lpop_zero_non_existing_list[StrictRedis] _________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_lpop_zero_non_existing_list(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.lpop(b'', 0) is None\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py:163: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:2599: in lpop\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"LPOP\", name, count)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: wrong number of arguments for 'lpop' command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ____________________________ test_lset[StrictRedis] ____________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_lset(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       r.rpush('foo', 'one')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py:196: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:2695: in rpush\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"RPUSH\", name, *values)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ___________________________ test_lpushx[StrictRedis] ___________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_lpushx(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       r.lpush('foo', 'two')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py:274: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:2609: in lpush\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"LPUSH\", name, *values)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_strlen[StrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_strlen[FakeStrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _________________________ test_rpoplpush[StrictRedis] __________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_rpoplpush(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.rpoplpush('foo', 'bar') is None\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.lpop('bar') is None\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.rpush('foo', 'one')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.rpush('foo', 'two')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.rpush('bar', 'one')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.rpoplpush('foo', 'bar') == b'two'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.lrange('foo', 0, -1) == [b'one']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert [b'bar', b'one'] == [b'one']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         At index 0 diff: b'bar' != b'one'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         Left contains one more item: b'one'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         - [b'one']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         + [b'bar', b'one']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py:360: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ____________ test_rpoplpush_to_nonexistent_destination[StrictRedis] ____________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_rpoplpush_to_nonexistent_destination(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.rpush('foo', 'one')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.rpoplpush('foo', 'bar') == b'one'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert None == b'one'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +  where None = <bound method ListCommands.rpoplpush of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 'bar')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +    where <bound method ListCommands.rpoplpush of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.rpoplpush\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py:370: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ______________ test_lmove_to_nonexistent_destination[StrictRedis] ______________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_lmove_to_nonexistent_destination(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.rpush('foo', 'one')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.lmove('foo', 'bar', 'RIGHT', 'LEFT') == b'one'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py:547: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:1863: in lmove\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"LMOVE\", *params)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: unknown command `LMOVE`, with args beginning with: `foo`, `bar`, `RIGHT`, `LEFT`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ________________________ test_lmove_expiry[StrictRedis] ________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_lmove_expiry(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.rpush('foo', 'one')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.rpush('bar', 'two')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.expire('bar', 10)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       r.lmove('foo', 'bar', 'RIGHT', 'LEFT')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py:555: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:1863: in lmove\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"LMOVE\", *params)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: unknown command `LMOVE`, with args beginning with: `foo`, `bar`, `RIGHT`, `LEFT`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ___________________________ test_lmove[StrictRedis] ____________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_lmove(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.lmove('foo', 'bar', 'RIGHT', 'LEFT') is None\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py:578: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:1863: in lmove\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"LMOVE\", *params)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: unknown command `LMOVE`, with args beginning with: `foo`, `bar`, `RIGHT`, `LEFT`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ___________________________ test_blmove[StrictRedis] ___________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_blmove(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.rpush(\"a\", \"one\", \"two\", \"three\", \"four\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.blmove(\"a\", \"b\", 5)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_list_commands.py:608: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:1879: in blmove\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"BLMOVE\", *params)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: unknown command `BLMOVE`, with args beginning with: `a`, `b`, `LEFT`, `RIGHT`, `5`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _____________________ test_pubsub_help_redis6[StrictRedis] _____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     @pytest.mark.max_server('6.2.7')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_pubsub_help_redis6(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert raw_command(r, \"PUBSUB HELP\") == [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'PUBSUB <subcommand> [<arg> [value] [opt] ...]. Subcommands are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'CHANNELS [<pattern>]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b\"    Return the currently active channels matching a <pattern> (default: '*')\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'NUMPAT',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'    Return number of subscriptions to patterns.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'NUMSUB [<channel> ...]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'    Return the number of subscribers for the specified channels, excluding',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'    pattern subscriptions(default: no channels).',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'HELP',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'    Prints this help.'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       assert [b'PUBSUB <su...ault: none).'] == [b'PUBSUB <su...l> ...]', ...]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         At index 0 diff: b'PUBSUB <subcommand> arg arg ... arg. Subcommands are:' != b'PUBSUB <subcommand> [<arg> [value] [opt] ...]. Subcommands are:'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         Right contains 6 more items, first extra item: b'    Return number of subscriptions to patterns.'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'PUBSUB <subcommand> [<arg> [value] [opt] ...]. Subcommands are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         ?                        --   ^^^^ ^^^^^^^^^^    ^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'PUBSUB <subcommand> arg arg ... arg. Subcommands are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         ?                           ^ ^^    ^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'CHANNELS [<pattern>] -- Return the currently active channels matching a patt'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_strlen_wrong_type[StrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'ern (default: all).',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'CHANNELS [<pattern>]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b\"    Return the currently active channels matching a <pattern> (default: '*')\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'NUMPAT',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'    Return number of subscriptions to patterns.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         ?    ^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'NUMPAT -- Return number of subscriptions to patterns.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         ?    ^^^^^^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'NUMSUB [channel-1 .. channel-N] -- Returns the number of subscribers for the'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b' specified channels (excluding patterns, default: none).',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'NUMSUB [<channel> ...]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'    Return the number of subscribers for the specified channels, excluding',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'    pattern subscriptions(default: no channels).',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'HELP',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'    Prints this help.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_pubsub_commands.py:404: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ________________________ test_script_help[StrictRedis] _________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     @pytest.mark.max_server('7')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_script_help(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert raw_command(r, \"SCRIPT HELP\") == [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'SCRIPT <subcommand> [<arg> [value] [opt] ...]. Subcommands are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'DEBUG (YES|SYNC|NO)',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'    Set the debug mode for subsequent scripts executed.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'EXISTS <sha1> [<sha1> ...]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'    Return information about the existence of the scripts in the script cach'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'e.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'FLUSH [ASYNC|SYNC]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'    Flush the Lua scripts cache. Very dangerous on replicas.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'    When called without the optional mode argument, the behavior is determin'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'ed by the',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'    lazyfree-lazy-user-flush configuration directive. Valid modes are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'    * ASYNC: Asynchronously flush the scripts cache.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'    * SYNC: Synchronously flush the scripts cache.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'KILL',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'    Kill the currently executing Lua script.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'LOAD <script>',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'    Load a script into the scripts cache without executing it.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'HELP',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             b'    Prints this help.'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert [b'SCRIPT <su...xecuting it.'] == [b'SCRIPT <su...C|SYNC]', ...]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         At index 0 diff: b'SCRIPT <subcommand> arg arg ... arg. Subcommands are:' != b'SCRIPT <subcommand> [<arg> [value] [opt] ...]. Subcommands are:'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         Right contains 11 more items, first extra item: b'    Flush the Lua scripts cache. Very dangerous on replicas.'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'SCRIPT <subcommand> [<arg> [value] [opt] ...]. Subcommands are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         ?                        --   ^^^^ ^^^^^^^^^^    ^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'SCRIPT <subcommand> arg arg ... arg. Subcommands are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         ?                           ^ ^^    ^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'DEBUG (YES|SYNC|NO)',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'    Set the debug mode for subsequent scripts executed.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         ?    ^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'DEBUG (yes|sync|no) -- Set the debug mode for subsequent scripts executed.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         ?    ^^^^^^^^^^^^^^^^^^^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'EXISTS <sha1> [<sha1> ...] -- Return information about the existence of the '\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'scripts in the script cache.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'EXISTS <sha1> [<sha1> ...]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'    Return information about the existence of the scripts in the script cach'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'e.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'FLUSH [ASYNC|SYNC]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'    Flush the Lua scripts cache. Very dangerous on replicas.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         ?    ^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'FLUSH -- Flush the Lua scripts cache. Very dangerous on replicas.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         ?    ^^^^^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'    When called without the optional mode argument, the behavior is determin'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'ed by the',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'    lazyfree-lazy-user-flush configuration directive. Valid modes are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'    * ASYNC: Asynchronously flush the scripts cache.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'    * SYNC: Synchronously flush the scripts cache.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'KILL',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'    Kill the currently executing Lua script.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         ?    ^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'KILL -- Kill the currently executing Lua script.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         ?    ^^^^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'LOAD <script>',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'    Load a script into the scripts cache without executing it.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         ?    ---- ^^^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'LOAD <script> -- Load a script into the scripts cache, without executing it.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         ?     ^^^^^      ++++++++++++++++++                       +\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'HELP',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         -  b'    Prints this help.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_scripting.py:80: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ___________________________ test_swapdb[StrictRedis] ___________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | create_redis = <function _create_redis.<locals>.factory at 0x7f8d13fbe320>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_swapdb(r, create_redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r1 = create_redis(1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.set('foo', 'abc')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.set('bar', 'xyz')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r1.set('foo', 'foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r1.set('baz', 'baz')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.swapdb(0, 1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.get('foo') == b'foo'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert None == b'foo'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +  where None = <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +    where <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.get\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_server_commands.py:18: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ___________________________ test_sdiff[StrictRedis] ____________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_sdiff(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       r.sadd('foo', 'member1')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py:48: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:3185: in sadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"SADD\", name, *values)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_strlen_wrong_type[FakeStrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ___________________________ test_sinter[StrictRedis] ___________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_sinter(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       r.sadd('foo', 'member1')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py:91: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:3185: in sadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"SADD\", name, *values)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _________________________ test_smismember[StrictRedis] _________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_smismember(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.smismember('foo', ['member1', 'member2', 'member3']) == [0, 0, 0]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py:139: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:3278: in smismember\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"SMISMEMBER\", name, *args)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: unknown command `SMISMEMBER`, with args beginning with: `foo`, `member1`, `member2`, `member3`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ____________________ test_sismember_wrong_type[StrictRedis] ____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_sismember_wrong_type(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'member': 1})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         with pytest.raises(redis.ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           r.sismember('foo', 'member')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           Failed: DID NOT RAISE <class 'redis.exceptions.ResponseError'>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py:163: Failed\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _____________________ test_sunion_wrong_type[StrictRedis] ______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_sunion_wrong_type(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       r.zadd('foo', {'member': 1})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py:280: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4008: in zadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"ZADD\", name, *pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ___________________________ test_sscan[StrictRedis] ____________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_sscan(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         # Set up the data\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         name = 'sscan-test'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         for ix in range(20):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             k = 'sscan-test:%s' % ix\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             r.sadd(name, k)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         expected = r.smembers(name)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert len(expected) == 20  # Ensure we know what we're testing\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert 7 == 20\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +  where 7 = len({b'sscan-test:13', b'sscan-test:14', b'sscan-test:15', b'sscan-test:16', b'sscan-test:17', b'sscan-test:18', ...})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_set_commands.py:315: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _________________ test_zrange_with_rev_and_bylex[StrictRedis] __________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zrange_with_rev_and_bylex(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'one_a': 0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'two_a': 0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'two_b': 0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'three_a': 0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.zrange('foo', b'+', b'(t', desc=True, bylex=True) == [b'two_b', b'two_a', b'three_a']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py:72: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4359: in zrange\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     num,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4299: in _zrange\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(*pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: value is not an integer or out of range\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _____________________ test_zrange_with_bylex[StrictRedis] ______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zrange_with_bylex(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'one_a': 0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'two_a': 0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'two_b': 0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'three_a': 0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.zrange('foo', b'(t', b'+', bylex=True) == [b'three_a', b'two_a', b'two_b']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py:97: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4359: in zrange\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     num,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4299: in _zrange\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(*pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: value is not an integer or out of range\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ____________________ test_zrange_with_byscore[StrictRedis] _____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zrange_with_byscore(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'zero': 0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'two': 2})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'two_a_also': 2})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'two_b_also': 2})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'four': 4})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.zrange('foo', 1, 3, byscore=True) == [b'two', b'two_a_also', b'two_b_also']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py:120: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4359: in zrange\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     num,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4299: in _zrange\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(*pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ___________________________ test_zcard[StrictRedis] ____________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zcard(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'one': 1})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'two': 2})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.zcard('foo') == 2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert 6 == 2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +  where 6 = <bound method SortedSetCommands.zcard of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +    where <bound method SortedSetCommands.zcard of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.zcard\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py:140: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ___________________________ test_zcount[StrictRedis] ___________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zcount(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'one': 1})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'three': 2})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'five': 5})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.zcount('foo', 2, 4) == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.zcount('foo', 1, 4) == 2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.zcount('foo', 0, 5) == 3\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.zcount('foo', 4, '+inf') == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.zcount('foo', '-inf', 4) == 2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert 3 == 2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +  where 3 = <bound method SortedSetCommands.zcount of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', '-inf', 4)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +    where <bound method SortedSetCommands.zcount of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.zcount\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py:161: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ____________________ test_zrem_numeric_member[StrictRedis] _____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zrem_numeric_member(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'128': 13.0, '129': 12.0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.zrem('foo', 128) == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.zrange('foo', 0, -1) == [b'129']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert [b'one', b'th...five', b'129'] == [b'129']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         At index 0 diff: b'one' != b'129'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         Left contains 3 more items, first extra item: b'three'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         - [b'129']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         + [b'one', b'three', b'five', b'129']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py:280: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | __________________________ test_zmscore[StrictRedis] ___________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zmscore(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"When all the requested sorted-set members are in the cache, a valid\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         float value should be returned for each requested member.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         The order of the returned scores should always match the order in\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         which the set members were supplied.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         cache_key: str = \"scored-set-members\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         members: Tuple[str, ...] = (\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         scores: Tuple[float, ...] = (1.1, 2.2, 3.3, 4.4, 5.5, 6.6)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd(cache_key, dict(zip(members, scores)))\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         cached_scores: List[Optional[float]] = r.zmscore(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             cache_key,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           list(members),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py:318: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4667: in zmscore\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"ZMSCORE\", *pieces)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: unknown command `ZMSCORE`, with args beginning with: `scored-set-members`, `one`, `two`, `three`, `four`, `five`, `six`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | __________________ test_zmscore_missing_members[StrictRedis] ___________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zmscore_missing_members(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"When none of the requested sorted-set members are in the cache, a value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         of `None` should be returned once for each requested member.\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         cache_key: str = \"scored-set-members\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         members: Tuple[str, ...] = (\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd(cache_key, {\"eight\": 8.8})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         cached_scores: List[Optional[float]] = r.zmscore(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             cache_key,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           list(members),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py:333: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4667: in zmscore\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"ZMSCORE\", *pieces)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: unknown command `ZMSCORE`, with args beginning with: `scored-set-members`, `one`, `two`, `three`, `four`, `five`, `six`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | __________________ test_zmscore_mixed_membership[StrictRedis] __________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zmscore_mixed_membership(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"When only some requested sorted-set members are in the cache, a\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         valid float value should be returned for each present member and `None` for\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         each missing member.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         The order of the returned scores should always match the order in\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         which the set members were supplied.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         cache_key: str = \"scored-set-members\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         members: Tuple[str, ...] = (\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         scores: Tuple[float, ...] = (1.1, 2.2, 3.3, 4.4, 5.5, 6.6)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             cache_key,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             dict((member, scores[idx]) for (idx, member) in enumerate(members) if idx % 2 != 0),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       cached_scores: List[Optional[float]] = r.zmscore(cache_key, list(members))\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py:356: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4667: in zmscore\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"ZMSCORE\", *pieces)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: unknown command `ZMSCORE`, with args beginning with: `scored-set-members`, `one`, `two`, `three`, `four`, `five`, `six`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _________________________ test_zlexcount[StrictRedis] __________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zlexcount(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'one_a': 0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'two_a': 0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'two_b': 0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd('foo', {'three_a': 0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.zlexcount('foo', b'(t', b'+') == 3\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert 0 == 3\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +  where 0 = <bound method SortedSetCommands.zlexcount of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', b'(t', b'+')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +    where <bound method SortedSetCommands.zlexcount of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.zlexcount\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py:595: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ____________________ test_zlexcount_wrong_type[StrictRedis] ____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zlexcount_wrong_type(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.sadd('foo', 'bar')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         with pytest.raises(redis.ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           r.zlexcount('foo', b'-', b'+')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           Failed: DID NOT RAISE <class 'redis.exceptions.ResponseError'>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py:612: Failed\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | __________________ test_zremrangebyscore_badkey[StrictRedis] ___________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zremrangebyscore_badkey(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.zremrangebyscore('foo', 0, 2) == 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert 2 == 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +  where 2 = <bound method SortedSetCommands.zremrangebyscore of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 0, 2)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +    where <bound method SortedSetCommands.zremrangebyscore of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.zremrangebyscore\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py:797: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | __________________ test_zunionstore_nan_to_zero[StrictRedis] ___________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zunionstore_nan_to_zero(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       r.zadd('foo', {'x': math.inf})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py:911: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4008: in zadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"ZADD\", name, *pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | __________________________ test_bzpopmin[StrictRedis] __________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_bzpopmin(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       r.zadd('foo', {'one': 1, 'two': 2, 'three': 3})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py:1038: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4008: in zadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"ZADD\", name, *pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ________________________ test_zrandemember[StrictRedis] ________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zrandemember(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd(\"a\", {\"a1\": 1, \"a2\": 2, \"a3\": 3, \"a4\": 4, \"a5\": 5})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.zrandmember(\"a\") is not None\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py:1079: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4162: in zrandmember\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"ZRANDMEMBER\", key, *params)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: unknown command `ZRANDMEMBER`, with args beginning with: `a`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _________________________ test_zdiffstore[StrictRedis] _________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zdiffstore(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd(\"a\", {\"a1\": 1, \"a2\": 2, \"a3\": 3})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd(\"b\", {\"a1\": 1, \"a2\": 2})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.zdiffstore(\"out\", [\"a\", \"b\"])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py:1092: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4047: in zdiffstore\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"ZDIFFSTORE\", dest, *pieces)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: unknown command `ZDIFFSTORE`, with args beginning with: `out`, `2`, `a`, `b`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ___________________________ test_zdiff[StrictRedis] ____________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zdiff(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd(\"a\", {\"a1\": 1, \"a2\": 2, \"a3\": 3})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd(\"b\", {\"a1\": 1, \"a2\": 2})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.zdiff([\"a\", \"b\"]) == [b\"a3\"]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py:1100: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4037: in zdiff\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"ZDIFF\", *pieces)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: unknown command `ZDIFF`, with args beginning with: `2`, `a`, `b`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ___________________________ test_zunion[StrictRedis] ___________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zunion(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd(\"a\", {\"a1\": 1, \"a2\": 1, \"a3\": 1})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd(\"b\", {\"a1\": 2, \"a2\": 2, \"a3\": 2})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd(\"c\", {\"a1\": 6, \"a3\": 5, \"a4\": 4})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         # sum\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.zunion([\"a\", \"b\", \"c\"]) == [b\"a2\", b\"a4\", b\"a3\", b\"a1\"]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py:1109: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4636: in zunion\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self._zaggregate(\"ZUNION\", None, keys, aggregate, withscores=withscores)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4697: in _zaggregate\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(*pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: unknown command `ZUNION`, with args beginning with: `3`, `a`, `b`, `c`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ___________________________ test_zinter[StrictRedis] ___________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zinter(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd(\"a\", {\"a1\": 1, \"a2\": 2, \"a3\": 1})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd(\"b\", {\"a1\": 2, \"a2\": 2, \"a3\": 2})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd(\"c\", {\"a1\": 6, \"a3\": 5, \"a4\": 4})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.zinter([\"a\", \"b\", \"c\"]) == [b\"a3\", b\"a1\"]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py:1127: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4071: in zinter\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self._zaggregate(\"ZINTER\", None, keys, aggregate, withscores=withscores)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4697: in _zaggregate\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(*pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: unknown command `ZINTER`, with args beginning with: `3`, `a`, `b`, `c`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ________________________ test_zrangestore[StrictRedis] _________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_zrangestore(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.zadd(\"a\", {\"a1\": 1, \"a2\": 2, \"a3\": 3})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.zrangestore(\"b\", \"a\", 0, 1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_sortedset_commands.py:1155: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4436: in zrangestore\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     num,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:4299: in _zrange\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(*pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: unknown command `ZRANGESTORE`, with args beginning with: `b`, `a`, `0`, `1`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _________________________ test_xadd_minid[StrictRedis] _________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_xadd_minid(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         stream = \"stream\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         id_list = add_items(r, stream, 10)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         minid = id_list[6]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       id_list.append(r.xadd(stream, {'k': 'new'}, minid=minid, approximate=False))\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py:116: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setrange[StrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:3415: in xadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"XADD\", name, *pieces)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: Invalid stream ID specified as stream command argument\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ______________________ test_xadd_nomkstream[StrictRedis] _______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_xadd_nomkstream(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       r.xadd('stream2', {\"some\": \"other\"}, nomkstream=True)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py:168: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:3415: in xadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"XADD\", name, *pieces)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: Invalid stream ID specified as stream command argument\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _________________________ test_xrevrange[StrictRedis] __________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_xrevrange(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         stream = \"stream\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         m1, m2, m3, m4 = _add_to_stream(r, stream, 4)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         results = r.xrevrange(stream, max=m4)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert get_ids(results) == [m4, m3, m2, m1]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         results = r.xrevrange(stream, max=m3, min=m2)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert get_ids(results) == [m3, m2]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         results = r.xrevrange(stream, min=m3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert get_ids(results) == [m4, m3]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert [b'1688233075...8233075106-2'] == [b'1688233075...8233075106-2']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         At index 0 diff: b'1688233075107-2' != b'1688233075106-3'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         Left contains 3 more items, first extra item: b'1688233075107-0'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'1688233075107-2',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'1688233075107-1',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'1688233075107-0',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E            b'1688233075106-3',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E            b'1688233075106-2',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py:197: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ___________________________ test_xrange[StrictRedis] ___________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_xrange(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         m = r.xadd('stream1', {\"foo\": \"bar\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.xrange('stream1') == [(m, {b\"foo\": b\"bar\"}), ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         stream = 'stream2'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         m = testtools.raw_command(r, 'xadd', stream, '*', b'field', b'value', b'foo', b'bar')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.xrevrange(stream) == [(m, {b'field': b'value', b'foo': b'bar'}), ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         stream = \"stream\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         m1, m2, m3, m4 = _add_to_stream(r, stream, 4)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         results = r.xrange(stream, min=m1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert get_ids(results) == [m1, m2, m3, m4]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         results = r.xrange(stream, min=m2, max=m3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert get_ids(results) == [m2, m3]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         results = r.xrange(stream, max=m3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert get_ids(results) == [m1, m2, m3]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert [b'1688233075...75400-4', ...] == [b'1688233075...8233075401-4']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         At index 0 diff: b'1688233075399-0' != b'1688233075401-2'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         Left contains 10 more items, first extra item: b'1688233075400-2'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'1688233075399-0',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'1688233075400-0',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'1688233075400-1',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'1688233075400-2',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'1688233075400-3',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'1688233075400-4',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'1688233075400-5',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'1688233075400-6',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'1688233075401-0',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         +  b'1688233075401-1',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E            b'1688233075401-2',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E            b'1688233075401-3',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E            b'1688233075401-4',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py:222: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ___________________ test_xgroup_createconsumer[StrictRedis] ____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_xgroup_createconsumer(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setrange[FakeStrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         stream, group, consumer = \"stream\", \"group\", \"consumer\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.xadd(stream, {\"foo\": \"bar\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.xadd(stream, {\"foo\": \"bar\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.xgroup_create(stream, group, 0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.xgroup_createconsumer(stream, group, consumer) == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py:370: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:3614: in xgroup_createconsumer\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \"XGROUP CREATECONSUMER\", name, groupname, consumername\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: Unknown subcommand or wrong number of arguments for 'CREATECONSUMER'. Try XGROUP HELP.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _________________________ test_xreadgroup[StrictRedis] _________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_xreadgroup(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         stream, group, consumer = \"stream\", \"group\", \"consumer1\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         with pytest.raises(redis.exceptions.ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             r.xreadgroup(group, consumer, streams={stream: \">\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         m1 = r.xadd(stream, {\"foo\": \"bar\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         m2 = r.xadd(stream, {\"bing\": \"baz\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.xgroup_create(stream, group, 0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         expected = [[\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             stream.encode(),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           [get_stream_message(r, stream, m1), get_stream_message(r, stream, m2)],\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         ]]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py:415: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | client = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | stream = 'stream', message_id = b'1688233077558-1'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def get_stream_message(client, stream, message_id):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Fetch a stream message and format it as a (message_id, fields) pair\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         response = client.xrange(stream, min=message_id, max=message_id)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert len(response) == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       assert 0 == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +  where 0 = len([])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py:231: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ____________________________ test_xack[StrictRedis] ____________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_xack(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         stream, group, consumer = \"stream\", \"group\", \"consumer\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         # xack on a stream that doesn't exist\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.xack(stream, group, \"0-0\") == 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         m1 = r.xadd(stream, {\"one\": \"one\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         m2 = r.xadd(stream, {\"two\": \"two\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         m3 = r.xadd(stream, {\"three\": \"three\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         # xack on a group that doesn't exist\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.xack(stream, group, m1) == 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.xgroup_create(stream, group, 0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.xreadgroup(group, consumer, streams={stream: \">\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert_consumer_info(r, stream, group, [{'name': b'consumer', 'pending': 3}])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py:494: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | stream = 'stream', group = 'group'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | equal_keys = [{'name': b'consumer', 'pending': 3}]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def assert_consumer_info(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             r: redis.Redis, stream: str, group: str, equal_keys: List) -> List:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         res = r.xinfo_consumers(stream, group)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert len(res) == len(equal_keys)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         for i in range(len(equal_keys)):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             for k in res[i]:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |                 if k in equal_keys[i]:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >                   assert res[i][k] == equal_keys[i][k], f'res[{i}][{k}] mismatch, {res}!={equal_keys}'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E                   AssertionError: res[0][pending] mismatch, [{'name': b'consumer', 'pending': 5, 'idle': 0}]!=[{'name': b'consumer', 'pending': 3}]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E                   assert 5 == 3\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py:474: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _____________________ test_xinfo_stream_full[StrictRedis] ______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_xinfo_stream_full(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         stream, group = \"stream\", \"group\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         m1 = r.xadd(stream, {\"foo\": \"bar\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.xgroup_create(stream, group, 0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       info = r.xinfo_stream(stream, full=True)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py:533: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:3669: in xinfo_stream\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"XINFO STREAM\", *pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: Unknown subcommand or wrong number of arguments for 'STREAM'. Try XINFO HELP.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ____________________ test_xpending_range_idle[StrictRedis] _____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_xpending_range_idle(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         stream, group, consumer1, consumer2 = \"stream\", \"group\", \"consumer1\", \"consumer2\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.xadd(stream, {\"foo\": \"bar\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.xadd(stream, {\"foo\": \"bar\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.xgroup_create(stream, group, 0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         # read 1 message from the group with each consumer\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.xreadgroup(group, consumer1, streams={stream: \">\"}, count=1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.xreadgroup(group, consumer2, streams={stream: \">\"}, count=1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         response = r.xpending_range(stream, group, min=\"-\", max=\"+\", count=5)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert len(response) == 2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       response = r.xpending_range(stream, group, min=\"-\", max=\"+\", count=5, idle=1000)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_streams_commands.py:604: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:3744: in xpending_range\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"XPENDING\", *pieces, parse_detail=True)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ___________________________ test_getdel[StrictRedis] ___________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_getdel(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r['foo'] = 'bar'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.getdel('foo') == b'bar'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py:89: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:1716: in getdel\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"GETDEL\", name)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: unknown command `GETDEL`, with args beginning with: `foo`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ____________________ test_getdel_doesnt_exist[StrictRedis] _____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_getdel_doesnt_exist(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.getdel('foo') is None\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py:94: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/commands/core.py:1716: in getdel\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.execute_command(\"GETDEL\", name)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1242: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1240: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     conn, command_name, *args, **options\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1215: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1254: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def read_response(self, disable_decoding=False):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = f\"{self.host}:{self.port}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except AttributeError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             hosterr = \"connection\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise TimeoutError(f\"Timeout reading from {hosterr}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise ConnectionError(f\"Error while reading from {hosterr}\" f\" : {e.args}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.ResponseError: unknown command `GETDEL`, with args beginning with: `foo`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/connection.py:839: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _______________________ test_setex_redispy4[StrictRedis] _______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     @testtools.run_test_if_redispy_ver('below', '4.6')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_setex_redispy4(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.setex('foo', 100, 'bar') is True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.get('foo') == b'bar'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert None == b'bar'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +  where None = <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +    where <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.get\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py:226: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _______________ test_setex_using_timedelta_redispy4[StrictRedis] _______________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     @testtools.run_test_if_redispy_ver('below', '4.6')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_setex_using_timedelta_redispy4(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         assert r.setex('foo', timedelta(seconds=100), 'bar') is True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.get('foo') == b'bar'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert None == b'bar'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +  where None = <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E        +    where <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.get\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py:232: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ______________________ test_set_ex_overflow[StrictRedis] _______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_set_ex_overflow(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         with pytest.raises(ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           r.set('foo', 'bar', ex=18446744073709561)  # Overflows longlong in ms\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           Failed: DID NOT RAISE <class 'redis.exceptions.ResponseError'>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py:264: Failed\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ______________________ test_set_px_overflow[StrictRedis] _______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_set_px_overflow(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         with pytest.raises(ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           r.set('foo', 'bar', px=2 ** 63 - 2)  # Overflows after adding current time\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           Failed: DID NOT RAISE <class 'redis.exceptions.ResponseError'>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_string_commands.py:269: Failed\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | ______________ test_multiple_successful_watch_calls[StrictRedis] _______________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_multiple_successful_watch_calls(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         p = r.pipeline()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         p.watch('bam')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         p.multi()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         p.set('foo', 'bar')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         # Check that the watched keys buffer has been emptied.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         p.execute()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         # bam is no longer being watched, so it's ok to modify\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         # it now.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         p.watch('foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.set('bam', 'boo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         p.multi()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         p.set('foo', 'bats')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert p.execute() == [True]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py:25: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:2080: in execute\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda error: self._disconnect_raise_reset(conn, error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:2079: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     lambda: execute(conn, stack, raise_on_error),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | self = Pipeline<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | connection = Connection<host=localhost,port=6379,db=0>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | commands = [(('SET', 'foo', 'bats'), {})], raise_on_error = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def _execute_transaction(self, connection, commands, raise_on_error):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         cmds = chain([((\"MULTI\",), {})], commands, [((\"EXEC\",), {})])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         all_cmds = connection.pack_commands(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             [args for args, options in cmds if EMPTY_RESPONSE not in options]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         connection.send_packed_command(all_cmds)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         errors = []\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         # parse off the response for MULTI\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         # NOTE: we need to handle ResponseErrors here and continue\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         # so that we read all the additional command messages from\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         # the socket\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             self.parse_response(connection, \"_\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except ResponseError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             errors.append((0, e))\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         # and all the other commands\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         for i, command in enumerate(commands):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             if EMPTY_RESPONSE in command[1]:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |                 errors.append((i, command[1][EMPTY_RESPONSE]))\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             else:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |                 try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |                     self.parse_response(connection, \"_\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |                 except ResponseError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |                     self.annotate_exception(e, i + 1, command[0])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |                     errors.append((i, e))\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         # parse the EXEC.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             response = self.parse_response(connection, \"_\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         except ExecAbortError:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             if errors:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |                 raise errors[0][1]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         # EXEC clears any watched keys\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         self.watching = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         if response is None:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >           raise WatchError(\"Watched variable changed.\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E           redis.exceptions.WatchError: Watched variable changed.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1960: WatchError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _______________ test_pipeline_transaction_shortcut[StrictRedis] ________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_pipeline_transaction_shortcut(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         # This example taken pretty much from the redis-py documentation.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.set('OUR-SEQUENCE-KEY', 13)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         calls = []\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         def client_side_incr(pipe):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             calls.append((pipe,))\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             current_value = pipe.get('OUR-SEQUENCE-KEY')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             next_value = int(current_value) + 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             if len(calls) < 3:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |                 # Simulate a change from another thread.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |                 r.set('OUR-SEQUENCE-KEY', next_value)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             pipe.multi()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |             pipe.set('OUR-SEQUENCE-KEY', next_value)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       res = r.transaction(client_side_incr, 'OUR-SEQUENCE-KEY')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py:63: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.7/lib/python3.7/site-packages/redis/client.py:1091: in transaction\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     func_value = func(pipe)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | pipe = Pipeline<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def client_side_incr(pipe):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         calls.append((pipe,))\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         current_value = pipe.get('OUR-SEQUENCE-KEY')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       next_value = int(current_value) + 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py:54: TypeError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | __________________ test_pipeline_srem_no_change[StrictRedis] ___________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     def test_pipeline_srem_no_change(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         # A regression test for a case picked up by hypothesis tests.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         p = r.pipeline()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         p.watch('foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         r.srem('foo', 'bar')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         p.multi()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         p.set('foo', 'baz')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |         p.execute()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | >       assert r.get('foo') == b'baz'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E       AssertionError: assert b'bar' == b'baz'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         At index 2 diff: b'r' != b'z'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         - b'baz'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         ?     ^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         + b'bar'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | E         ?     ^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_transactions_commands.py:122: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | =============================== warnings summary ===============================\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hmset[FakeStrictRedis]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py/test/test_connection.py:266: DeprecationWarning: FakeStrictRedis.hmset() is deprecated. Use FakeStrictRedis.hset() instead.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     r.hmset('name', {'key': 1})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hmset_empty_raises_error[StrictRedis]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py/test/test_mixins/test_hash_commands.py:227: DeprecationWarning: Redis.hmset() is deprecated. Use Redis.hset() instead.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     r.hmset('foo', {})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hmset_empty_raises_error[FakeStrictRedis]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py/test/test_mixins/test_hash_commands.py:227: DeprecationWarning: FakeStrictRedis.hmset() is deprecated. Use FakeStrictRedis.hset() instead.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     r.hmset('foo', {})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hmset_redispy4[StrictRedis]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py/test/test_mixins/test_hash_commands.py:233: DeprecationWarning: Redis.hmset() is deprecated. Use Redis.hset() instead.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     assert r.hmset('foo', {'k2': 'v2', 'k3': 'v3'}) is True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hmset_redispy4[FakeStrictRedis]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py/test/test_mixins/test_hash_commands.py:233: DeprecationWarning: FakeStrictRedis.hmset() is deprecated. Use FakeStrictRedis.hset() instead.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     assert r.hmset('foo', {'k2': 'v2', 'k3': 'v3'}) is True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hmset_wrong_type[StrictRedis]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py/test/test_mixins/test_hash_commands.py:239: DeprecationWarning: Redis.hmset() is deprecated. Use Redis.hset() instead.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     r.hmset('foo', {'key': 'value'})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | test/test_mixins/test_hash_commands.py::test_hmset_wrong_type[FakeStrictRedis]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py/test/test_mixins/test_hash_commands.py:239: DeprecationWarning: FakeStrictRedis.hmset() is deprecated. Use FakeStrictRedis.hset() instead.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     r.hmset('foo', {'key': 'value'})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | - generated xml file: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py/report.xml -\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | =========================== short test summary info ============================\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_scan.py::test_scan_iter_single_page[StrictRedis] - redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_zadd.py::test_zadd_with_gt_and_ch[StrictRedis-param0-0-state0] - redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_zadd.py::test_zadd_with_gt_and_ch[StrictRedis-param1-2-state1] - redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_zadd.py::test_zadd_with_gt_and_ch[StrictRedis-param2-2-state2] - redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_zadd.py::test_zadd_with_gt[StrictRedis-param0-0-state0] - redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_zadd.py::test_zadd_with_gt[StrictRedis-param1-1-state1] - redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_zadd.py::test_zadd_with_gt[StrictRedis-param2-2-state2] - redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_zadd.py::test_zadd_with_xx_and_gt_and_ch[StrictRedis] - AssertionError: assert None == 1.0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +  where None = <bound method SortedSetCommands.zscore of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('test', 'one')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +    where <bound method SortedSetCommands.zscore of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.zscore\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_bitmap_commands.py::test_getbit[StrictRedis] - AssertionError: assert 0 == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +  where 0 = <bound method BasicKeyCommands.getbit of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 3)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +    where <bound method BasicKeyCommands.getbit of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.getbit\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_bitmap_commands.py::test_bitop_errors[StrictRedis] - Failed: DID NOT RAISE <class 'redis.exceptions.ResponseError'>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_generic_commands.py::test_sort_range_offset_range[StrictRedis] - AssertionError: assert [b'1', b'3'] == [b'1', b'2']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   At index 1 diff: b'3' != b'2'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   - [b'1', b'2']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   ?          ^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   + [b'1', b'3']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   ?          ^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_generic_commands.py::test_sort_range_offset_range_and_desc[StrictRedis] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_generic_commands.py::test_sort_descending[StrictRedis] - AssertionError: assert [] == [b'3', b'2', b'1']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Right contains 3 more items, first extra item: b'3'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   - [b'3', b'2', b'1']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   + []\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_generic_commands.py::test_watch_persist[StrictRedis] - Failed: DID NOT RAISE <class 'redis.exceptions.WatchError'>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_generic_commands.py::test_get_float_type[StrictRedis] - AssertionError: assert None == b'123'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +  where None = <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('key')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +    where <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.get\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_geo_commands.py::test_geoadd_ch[StrictRedis] - redis.exceptions.ResponseError: syntax error. Try GEOADD key [x1] [y1] [name1] [x2] [y2] [name2] ...\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_geo_commands.py::test_geoadd_xx[StrictRedis] - redis.exceptions.ResponseError: syntax error. Try GEOADD key [x1] [y1] [name1] [x2] [y2] [name2] ...\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_geo_commands.py::test_georadiusbymember[StrictRedis-place1-1-extra2-expected2] - AssertionError: assert [] == [b'place1']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Right contains one more item: b'place1'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   - [b'place1']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   + []\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_geo_commands.py::test_georadius_count[StrictRedis] - AssertionError: assert [] == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +  where [] = <bound method GeoCommands.georadius of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('barcelona', 2.191, 41.433, 3000, store_dist='extract')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +    where <bound method GeoCommands.georadius of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.georadius\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_geo_commands.py::test_geosearch[StrictRedis] - redis.exceptions.ResponseError: unknown command `GEOSEARCH`, with args beginning with: `barcelona`, `FROMLONLAT`, `2.191`, `41.433`, `BYRADIUS`, `1000`, `m`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_hash_commands.py::test_hstrlen_missing[StrictRedis] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_hash_commands.py::test_hgetall_empty_key[StrictRedis] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_hash_commands.py::test_hvals[StrictRedis] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_hash_commands.py::test_hmget[StrictRedis] - AssertionError: assert [None, None] == [b'v1', None]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   At index 0 diff: None != b'v1'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   - [b'v1', None]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   + [None, None]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_hash_commands.py::test_hrandfield[StrictRedis] - redis.exceptions.ResponseError: unknown command `HRANDFIELD`, with args beginning with: `key`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_list_commands.py::test_lpush_with_nonstr_key[StrictRedis] - AssertionError: assert [b'three', b'two'] == [b'three', b'two', b'one']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Right contains one more item: b'one'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   - [b'three', b'two', b'one']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   ?                  --------\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   + [b'three', b'two']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_list_commands.py::test_lrem_positive_count[StrictRedis] - AssertionError: assert [] == [b'different']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Right contains one more item: b'different'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   - [b'different']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   + []\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_list_commands.py::test_lpop[StrictRedis] - AssertionError: assert None == b'one'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +  where None = <bound method ListCommands.lpop of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +    where <bound method ListCommands.lpop of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.lpop\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_list_commands.py::test_lpop_zero_elem[StrictRedis] - redis.exceptions.ResponseError: wrong number of arguments for 'lpop' command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_list_commands.py::test_lpop_zero_non_existing_list[StrictRedis] - redis.exceptions.ResponseError: wrong number of arguments for 'lpop' command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_list_commands.py::test_lset[StrictRedis] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_list_commands.py::test_lpushx[StrictRedis] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_list_commands.py::test_rpoplpush[StrictRedis] - AssertionError: assert [b'bar', b'one'] == [b'one']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   At index 0 diff: b'bar' != b'one'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Left contains one more item: b'one'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   - [b'one']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   + [b'bar', b'one']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_list_commands.py::test_rpoplpush_to_nonexistent_destination[StrictRedis] - AssertionError: assert None == b'one'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +  where None = <bound method ListCommands.rpoplpush of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 'bar')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +    where <bound method ListCommands.rpoplpush of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.rpoplpush\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_list_commands.py::test_lmove_to_nonexistent_destination[StrictRedis] - redis.exceptions.ResponseError: unknown command `LMOVE`, with args beginning with: `foo`, `bar`, `RIGHT`, `LEFT`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_list_commands.py::test_lmove_expiry[StrictRedis] - redis.exceptions.ResponseError: unknown command `LMOVE`, with args beginning with: `foo`, `bar`, `RIGHT`, `LEFT`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_list_commands.py::test_lmove[StrictRedis] - redis.exceptions.ResponseError: unknown command `LMOVE`, with args beginning with: `foo`, `bar`, `RIGHT`, `LEFT`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_list_commands.py::test_blmove[StrictRedis] - redis.exceptions.ResponseError: unknown command `BLMOVE`, with args beginning with: `a`, `b`, `LEFT`, `RIGHT`, `5`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_pubsub_commands.py::test_pubsub_help_redis6[StrictRedis] - assert [b'PUBSUB <su...ault: none).'] == [b'PUBSUB <su...l> ...]', ...]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   At index 0 diff: b'PUBSUB <subcommand> arg arg ... arg. Subcommands are:' != b'PUBSUB <subcommand> [<arg> [value] [opt] ...]. Subcommands are:'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Right contains 6 more items, first extra item: b'    Return number of subscriptions to patterns.'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'PUBSUB <subcommand> [<arg> [value] [opt] ...]. Subcommands are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   ?                        --   ^^^^ ^^^^^^^^^^    ^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'PUBSUB <subcommand> arg arg ... arg. Subcommands are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   ?                           ^ ^^    ^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'CHANNELS [<pattern>] -- Return the currently active channels matching a patt'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'ern (default: all).',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'CHANNELS [<pattern>]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b\"    Return the currently active channels matching a <pattern> (default: '*')\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'NUMPAT',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'    Return number of subscriptions to patterns.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   ?    ^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'NUMPAT -- Return number of subscriptions to patterns.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   ?    ^^^^^^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'NUMSUB [channel-1 .. channel-N] -- Returns the number of subscribers for the'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b' specified channels (excluding patterns, default: none).',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'NUMSUB [<channel> ...]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'    Return the number of subscribers for the specified channels, excluding',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'    pattern subscriptions(default: no channels).',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'HELP',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'    Prints this help.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_scripting.py::test_script_help[StrictRedis] - AssertionError: assert [b'SCRIPT <su...xecuting it.'] == [b'SCRIPT <su...C|SYNC]', ...]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   At index 0 diff: b'SCRIPT <subcommand> arg arg ... arg. Subcommands are:' != b'SCRIPT <subcommand> [<arg> [value] [opt] ...]. Subcommands are:'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Right contains 11 more items, first extra item: b'    Flush the Lua scripts cache. Very dangerous on replicas.'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'SCRIPT <subcommand> [<arg> [value] [opt] ...]. Subcommands are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   ?                        --   ^^^^ ^^^^^^^^^^    ^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'SCRIPT <subcommand> arg arg ... arg. Subcommands are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   ?                           ^ ^^    ^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'DEBUG (YES|SYNC|NO)',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'    Set the debug mode for subsequent scripts executed.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   ?    ^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'DEBUG (yes|sync|no) -- Set the debug mode for subsequent scripts executed.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   ?    ^^^^^^^^^^^^^^^^^^^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'EXISTS <sha1> [<sha1> ...] -- Return information about the existence of the '\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'scripts in the script cache.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'EXISTS <sha1> [<sha1> ...]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'    Return information about the existence of the scripts in the script cach'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'e.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'FLUSH [ASYNC|SYNC]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'    Flush the Lua scripts cache. Very dangerous on replicas.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   ?    ^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'FLUSH -- Flush the Lua scripts cache. Very dangerous on replicas.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   ?    ^^^^^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'    When called without the optional mode argument, the behavior is determin'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'ed by the',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'    lazyfree-lazy-user-flush configuration directive. Valid modes are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'    * ASYNC: Asynchronously flush the scripts cache.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'    * SYNC: Synchronously flush the scripts cache.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'KILL',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'    Kill the currently executing Lua script.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   ?    ^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'KILL -- Kill the currently executing Lua script.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   ?    ^^^^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'LOAD <script>',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'    Load a script into the scripts cache without executing it.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   ?    ---- ^^^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'LOAD <script> -- Load a script into the scripts cache, without executing it.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   ?     ^^^^^      ++++++++++++++++++                       +\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'HELP',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   -  b'    Prints this help.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_server_commands.py::test_swapdb[StrictRedis] - AssertionError: assert None == b'foo'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +  where None = <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +    where <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.get\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_set_commands.py::test_sdiff[StrictRedis] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_set_commands.py::test_sinter[StrictRedis] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_set_commands.py::test_smismember[StrictRedis] - redis.exceptions.ResponseError: unknown command `SMISMEMBER`, with args beginning with: `foo`, `member1`, `member2`, `member3`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_set_commands.py::test_sismember_wrong_type[StrictRedis] - Failed: DID NOT RAISE <class 'redis.exceptions.ResponseError'>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_set_commands.py::test_sunion_wrong_type[StrictRedis] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_set_commands.py::test_sscan[StrictRedis] - AssertionError: assert 7 == 20\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +  where 7 = len({b'sscan-test:13', b'sscan-test:14', b'sscan-test:15', b'sscan-test:16', b'sscan-test:17', b'sscan-test:18', ...})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zrange_with_rev_and_bylex[StrictRedis] - redis.exceptions.ResponseError: value is not an integer or out of range\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zrange_with_bylex[StrictRedis] - redis.exceptions.ResponseError: value is not an integer or out of range\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zrange_with_byscore[StrictRedis] - redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zcard[StrictRedis] - AssertionError: assert 6 == 2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +  where 6 = <bound method SortedSetCommands.zcard of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +    where <bound method SortedSetCommands.zcard of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.zcard\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zcount[StrictRedis] - AssertionError: assert 3 == 2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +  where 3 = <bound method SortedSetCommands.zcount of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', '-inf', 4)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +    where <bound method SortedSetCommands.zcount of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.zcount\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zrem_numeric_member[StrictRedis] - AssertionError: assert [b'one', b'th...five', b'129'] == [b'129']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   At index 0 diff: b'one' != b'129'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Left contains 3 more items, first extra item: b'three'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   - [b'129']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   + [b'one', b'three', b'five', b'129']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zmscore[StrictRedis] - redis.exceptions.ResponseError: unknown command `ZMSCORE`, with args beginning with: `scored-set-members`, `one`, `two`, `three`, `four`, `five`, `six`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zmscore_missing_members[StrictRedis] - redis.exceptions.ResponseError: unknown command `ZMSCORE`, with args beginning with: `scored-set-members`, `one`, `two`, `three`, `four`, `five`, `six`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zmscore_mixed_membership[StrictRedis] - redis.exceptions.ResponseError: unknown command `ZMSCORE`, with args beginning with: `scored-set-members`, `one`, `two`, `three`, `four`, `five`, `six`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zlexcount[StrictRedis] - AssertionError: assert 0 == 3\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +  where 0 = <bound method SortedSetCommands.zlexcount of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', b'(t', b'+')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +    where <bound method SortedSetCommands.zlexcount of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.zlexcount\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zlexcount_wrong_type[StrictRedis] - Failed: DID NOT RAISE <class 'redis.exceptions.ResponseError'>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zremrangebyscore_badkey[StrictRedis] - AssertionError: assert 2 == 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +  where 2 = <bound method SortedSetCommands.zremrangebyscore of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 0, 2)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +    where <bound method SortedSetCommands.zremrangebyscore of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.zremrangebyscore\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zunionstore_nan_to_zero[StrictRedis] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_sortedset_commands.py::test_bzpopmin[StrictRedis] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zrandemember[StrictRedis] - redis.exceptions.ResponseError: unknown command `ZRANDMEMBER`, with args beginning with: `a`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zdiffstore[StrictRedis] - redis.exceptions.ResponseError: unknown command `ZDIFFSTORE`, with args beginning with: `out`, `2`, `a`, `b`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zdiff[StrictRedis] - redis.exceptions.ResponseError: unknown command `ZDIFF`, with args beginning with: `2`, `a`, `b`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zunion[StrictRedis] - redis.exceptions.ResponseError: unknown command `ZUNION`, with args beginning with: `3`, `a`, `b`, `c`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zinter[StrictRedis] - redis.exceptions.ResponseError: unknown command `ZINTER`, with args beginning with: `3`, `a`, `b`, `c`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zrangestore[StrictRedis] - redis.exceptions.ResponseError: unknown command `ZRANGESTORE`, with args beginning with: `b`, `a`, `0`, `1`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_streams_commands.py::test_xadd_minid[StrictRedis] - redis.exceptions.ResponseError: Invalid stream ID specified as stream command argument\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_streams_commands.py::test_xadd_nomkstream[StrictRedis] - redis.exceptions.ResponseError: Invalid stream ID specified as stream command argument\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_streams_commands.py::test_xrevrange[StrictRedis] - AssertionError: assert [b'1688233075...8233075106-2'] == [b'1688233075...8233075106-2']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   At index 0 diff: b'1688233075107-2' != b'1688233075106-3'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Left contains 3 more items, first extra item: b'1688233075107-0'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'1688233075107-2',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'1688233075107-1',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'1688233075107-0',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |      b'1688233075106-3',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |      b'1688233075106-2',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_streams_commands.py::test_xrange[StrictRedis] - AssertionError: assert [b'1688233075...75400-4', ...] == [b'1688233075...8233075401-4']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   At index 0 diff: b'1688233075399-0' != b'1688233075401-2'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Left contains 10 more items, first extra item: b'1688233075400-2'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'1688233075399-0',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'1688233075400-0',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'1688233075400-1',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'1688233075400-2',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'1688233075400-3',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'1688233075400-4',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'1688233075400-5',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'1688233075400-6',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'1688233075401-0',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   +  b'1688233075401-1',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |      b'1688233075401-2',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |      b'1688233075401-3',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |      b'1688233075401-4',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |     ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_streams_commands.py::test_xgroup_createconsumer[StrictRedis] - redis.exceptions.ResponseError: Unknown subcommand or wrong number of arguments for 'CREATECONSUMER'. Try XGROUP HELP.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_streams_commands.py::test_xreadgroup[StrictRedis] - assert 0 == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +  where 0 = len([])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_streams_commands.py::test_xack[StrictRedis] - AssertionError: res[0][pending] mismatch, [{'name': b'consumer', 'pending': 5, 'idle': 0}]!=[{'name': b'consumer', 'pending': 3}]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | assert 5 == 3\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_streams_commands.py::test_xinfo_stream_full[StrictRedis] - redis.exceptions.ResponseError: Unknown subcommand or wrong number of arguments for 'STREAM'. Try XINFO HELP.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_streams_commands.py::test_xpending_range_idle[StrictRedis] - redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_string_commands.py::test_getdel[StrictRedis] - redis.exceptions.ResponseError: unknown command `GETDEL`, with args beginning with: `foo`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_string_commands.py::test_getdel_doesnt_exist[StrictRedis] - redis.exceptions.ResponseError: unknown command `GETDEL`, with args beginning with: `foo`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_string_commands.py::test_setex_redispy4[StrictRedis] - AssertionError: assert None == b'bar'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +  where None = <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +    where <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.get\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_string_commands.py::test_setex_using_timedelta_redispy4[StrictRedis] - AssertionError: assert None == b'bar'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +  where None = <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |  +    where <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.get\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_string_commands.py::test_set_ex_overflow[StrictRedis] - Failed: DID NOT RAISE <class 'redis.exceptions.ResponseError'>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_string_commands.py::test_set_px_overflow[StrictRedis] - Failed: DID NOT RAISE <class 'redis.exceptions.ResponseError'>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_transactions_commands.py::test_multiple_successful_watch_calls[StrictRedis] - redis.exceptions.WatchError: Watched variable changed.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_transactions_commands.py::test_pipeline_transaction_shortcut[StrictRedis] - TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | FAILED test/test_mixins/test_transactions_commands.py::test_pipeline_srem_no_change[StrictRedis] - AssertionError: assert b'bar' == b'baz'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   At index 2 diff: b'r' != b'z'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   - b'baz'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   ?     ^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   + b'bar'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   |   ?     ^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   | = 85 failed, 1139 passed, 96 skipped, 83 deselected, 1 xfailed, 1 xpassed, 7 warnings in 74.75s (0:01:14) =\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setrange_expiry[StrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setrange_expiry[FakeStrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_large_command[StrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_large_command[FakeStrictRedis] PASSED [ 95%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ]   \u274c  Failure - Main Test without coverage\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_saving_non_ascii_chars_as_value[StrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_saving_non_ascii_chars_as_value[FakeStrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_saving_unicode_type_as_value[StrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_saving_unicode_type_as_value[FakeStrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_saving_non_ascii_chars_as_key[StrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_saving_non_ascii_chars_as_key[FakeStrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_saving_unicode_type_as_key[StrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_saving_unicode_type_as_key[FakeStrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_future_newbytes[StrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_future_newbytes[FakeStrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_future_newstr[StrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_future_newstr[FakeStrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setitem_getitem[StrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_setitem_getitem[FakeStrictRedis] PASSED [ 96%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ] exitcode '1': failure\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_getitem_non_existent_key[StrictRedis] PASSED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_getitem_non_existent_key[FakeStrictRedis] PASSED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_lcs[StrictRedis] SKIPPED  [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py::test_lcs[FakeStrictRedis] SKIPPED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_multiple_successful_watch_calls[StrictRedis] PASSED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_multiple_successful_watch_calls[FakeStrictRedis] PASSED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_watch_state_is_cleared_after_abort[StrictRedis] PASSED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_watch_state_is_cleared_after_abort[FakeStrictRedis] PASSED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_transaction_shortcut[StrictRedis] PASSED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_transaction_shortcut[FakeStrictRedis] PASSED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_transaction_value_from_callable[StrictRedis] PASSED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_transaction_value_from_callable[FakeStrictRedis] PASSED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_empty[StrictRedis] PASSED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_empty[FakeStrictRedis] PASSED [ 97%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_length[StrictRedis] PASSED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_length[FakeStrictRedis] PASSED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_no_commands[StrictRedis] PASSED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_no_commands[FakeStrictRedis] PASSED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_failed_transaction[StrictRedis] PASSED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_failed_transaction[FakeStrictRedis] PASSED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_srem_no_change[StrictRedis] PASSED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_srem_no_change[FakeStrictRedis] PASSED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_move[StrictRedis] SKIPPED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_move[FakeStrictRedis] SKIPPED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_exec_bad_arguments[StrictRedis] SKIPPED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_exec_bad_arguments[FakeStrictRedis] SKIPPED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_exec_bad_arguments_abort[StrictRedis] SKIPPED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_exec_bad_arguments_abort[FakeStrictRedis] SKIPPED [ 98%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline[StrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline[FakeStrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_ignore_errors[StrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_ignore_errors[FakeStrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_non_transactional[StrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_non_transactional[FakeStrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_raises_when_watched_key_changed[StrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_raises_when_watched_key_changed[FakeStrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_succeeds_despite_unwatched_key_changed[StrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_succeeds_despite_unwatched_key_changed[FakeStrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_succeeds_when_watching_nonexistent_key[StrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_pipeline_succeeds_when_watching_nonexistent_key[FakeStrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_watch_state_is_cleared_across_multiple_watches[StrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_watch_state_is_cleared_across_multiple_watches[FakeStrictRedis] PASSED [ 99%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_transactions_commands.py::test_socket_cleanup_watch PASSED [100%]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | =================================== FAILURES ===================================\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _______________ TestDecodeResponses.test_decode_set[StrictRedis] _______________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = <test.test_connection.TestDecodeResponses object at 0x7f24a3903e10>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_decode_set(self, r):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       r.sadd('foo', 'member1')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py:41: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:3286: in sadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"SADD\", name, *values)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ___________________ test_scan_iter_single_page[StrictRedis] ____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_scan_iter_single_page(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.set('foo1', 'bar1')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.set('foo2', 'bar2')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert set(r.scan_iter(match=\"foo*\")) == {b'foo1', b'foo2'}\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert set(r.scan_iter()) == {b'foo1', b'foo2'}\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert set(r.scan_iter(match=\"\")) == set()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert set(r.scan_iter(match=\"foo1\", _type=\"string\")) == {b'foo1', }\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py:154: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:3022: in scan_iter\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     cursor, data = self.scan(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:2997: in scan\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"SCAN\", *pieces, **kwargs)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | __________________ test_scan_iter_multiple_pages[StrictRedis] __________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_scan_iter_multiple_pages(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         all_keys = key_val_dict(size=100)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert all(r.set(k, v) for k, v in all_keys.items())\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert set(r.scan_iter()) == set(all_keys)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert {b'key:88', b...'key:93', ...} == {b'key:0', b'...'key:13', ...}\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Extra items in the right set:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:48'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:25'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:34'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:17'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:26'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:32'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:5'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:43'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:58'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:45'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:8'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:51'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:44'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:54'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:29'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:65'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:57'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:77'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:15'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:22'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:33'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:3'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:36'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:0'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:50'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:40'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:87'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:42'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:64'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:66'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:71'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:1'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:79'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:86'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:63'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:61'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:70'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:69'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:19'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:21'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:75'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:68'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:74'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:2'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:82'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:12'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:41'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:4'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:56'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:83'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:49'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:84'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:30'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:10'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:76'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:39'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:81'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:80'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:14'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:55'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:73'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:23'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:72'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:31'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:18'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:53'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:9'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:7'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:38'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:13'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:24'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:28'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:46'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:59'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:60'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:11'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:37'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:16'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:47'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:35'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:85'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:67'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:62'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:78'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:20'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:52'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:27'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:6'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           {\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:0',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:1',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:10',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:11',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:12',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:13',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:14',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:15',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:16',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:17',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:18',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:19',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:2',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:20',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:21',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:22',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:23',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:24',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:25',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:26',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:27',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:28',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:29',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:3',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:30',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:31',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:32',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:33',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:34',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:35',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:36',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:37',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:38',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:39',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:4',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:40',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:41',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:42',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:43',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:44',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:45',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:46',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:47',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:48',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:49',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:5',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:50',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:51',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:52',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:53',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:54',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:55',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:56',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:57',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:58',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:59',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:6',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:60',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:61',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:62',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:63',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:64',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:65',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:66',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:67',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:68',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:69',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:7',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:70',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:71',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:72',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:73',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:74',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:75',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:76',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:77',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:78',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:79',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:8',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:80',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:81',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:82',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:83',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:84',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:85',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:86',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:87',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:88',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:89',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:9',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:90',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:91',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:92',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:93',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:94',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:95',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:96',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:97',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:98',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:99',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           }\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py:160: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ____________ test_scan_iter_multiple_pages_with_match[StrictRedis] _____________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_scan_iter_multiple_pages_with_match(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         all_keys = key_val_dict(size=100)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert all(r.set(k, v) for k, v in all_keys.items())\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         # Now add a few keys that don't match the key:<number> pattern.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.set('otherkey', 'foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.set('andanother', 'bar')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         actual = set(r.scan_iter(match='key:*'))\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert actual == set(all_keys)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert {b'key:97', b...8', b'key:99'} == {b'key:0', b'...'key:13', ...}\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Extra items in the right set:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:92'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:90'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:48'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:88'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:25'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:34'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:17'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:26'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:32'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:5'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:43'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:58'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:45'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:8'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:51'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:44'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:54'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:29'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:65'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:57'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:77'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:15'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:22'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:33'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:3'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:89'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:36'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:0'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:50'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:40'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:87'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:42'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:64'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:66'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:71'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:1'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:79'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:86'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:96'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:63'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:61'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:70'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:69'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:19'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:21'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:75'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:95'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:68'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:91'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:74'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:2'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:82'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:12'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:94'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:41'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:4'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:56'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:83'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:93'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:49'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:84'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:30'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:10'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:76'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:39'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:81'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:80'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:14'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:55'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:73'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:23'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:72'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:31'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:18'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:53'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:9'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:7'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:38'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:13'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:24'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:28'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:46'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:59'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:60'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:11'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:37'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:16'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:47'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:35'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:85'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:67'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:62'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:78'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:20'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:52'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:27'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:6'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           {\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:0',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:1',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:10',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:11',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:12',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:13',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:14',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:15',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:16',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:17',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:18',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:19',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:2',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:20',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:21',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:22',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:23',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:24',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:25',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:26',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:27',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:28',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:29',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:3',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:30',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:31',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:32',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:33',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:34',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:35',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:36',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:37',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:38',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:39',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:4',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:40',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:41',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:42',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:43',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:44',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:45',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:46',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:47',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:48',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:49',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:5',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:50',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:51',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:52',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:53',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:54',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:55',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:56',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:57',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:58',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:59',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:6',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:60',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:61',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:62',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:63',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:64',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:65',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:66',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:67',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:68',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:69',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:7',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:70',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:71',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:72',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:73',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:74',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:75',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:76',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:77',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:78',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:79',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:8',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:80',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:81',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:82',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:83',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:84',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:85',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:86',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:87',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:88',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:89',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:9',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:90',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:91',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:92',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:93',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:94',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:95',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:96',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:97',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:98',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:99',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           }\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py:170: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _____________ test_scan_multiple_pages_with_count_arg[StrictRedis] _____________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_scan_multiple_pages_with_count_arg(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         all_keys = key_val_dict(size=100)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert all(r.set(k, v) for k, v in all_keys.items())\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert set(r.scan_iter(count=1000)) == set(all_keys)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert {b'key:65', b...'key:70', ...} == {b'key:0', b'...'key:13', ...}\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Extra items in the right set:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:48'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:49'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:30'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:25'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:34'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:17'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:10'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:26'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:39'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:14'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:32'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:55'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:5'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:43'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:58'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:45'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:23'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:8'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:51'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:44'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:54'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:31'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:29'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:18'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:57'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:53'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:15'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:22'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:33'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:3'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:56'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:36'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:9'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:7'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:0'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:50'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:38'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:40'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:42'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:64'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:1'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:13'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:24'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:28'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:63'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:61'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:46'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:59'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:60'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:11'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:37'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:19'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:21'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:16'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:47'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:35'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:62'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:2'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:20'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:52'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:12'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:27'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:41'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:4'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:6'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           {\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:0',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:1',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:10',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:11',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:12',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:13',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:14',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:15',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:16',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:17',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:18',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:19',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:2',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:20',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:21',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:22',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:23',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:24',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:25',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:26',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:27',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:28',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:29',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:3',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:30',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:31',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:32',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:33',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:34',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:35',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:36',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:37',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:38',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:39',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:4',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:40',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:41',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:42',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:43',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:44',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:45',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:46',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:47',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:48',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:49',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:5',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:50',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:51',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:52',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:53',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:54',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:55',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:56',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:57',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:58',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:59',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:6',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:60',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:61',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:62',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:63',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:64',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:65',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:66',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:67',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:68',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:69',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:7',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:70',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:71',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:72',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:73',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:74',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:75',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:76',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:77',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:78',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:79',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:8',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:80',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:81',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:82',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:83',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:84',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:85',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:86',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:87',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:88',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:89',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:9',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:90',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:91',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:92',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:93',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:94',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:95',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:96',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:97',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:98',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:99',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           }\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py:176: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | __________________ test_scan_all_in_single_call[StrictRedis] ___________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_scan_all_in_single_call(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         all_keys = key_val_dict(size=100)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert all(r.set(k, v) for k, v in all_keys.items())\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         # Specify way more than the 100 keys we've added.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         actual = r.scan(count=1000)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert set(actual[1]) == set(all_keys)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert {b'key:10', b...'key:15', ...} == {b'key:0', b'...'key:13', ...}\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Extra items in the right set:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:1'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:2'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:3'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:4'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         b'key:0'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           {\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:0',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:1',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:10',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:11',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:12',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:13',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:14',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:15',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:16',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:17',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:18',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:19',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:2',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:20',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:21',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:22',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:23',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:24',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:25',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:26',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:27',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:28',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:29',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:3',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:30',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:31',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:32',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:33',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:34',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:35',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:36',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:37',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:38',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:39',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'key:4',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:40',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:41',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:42',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:43',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:44',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:45',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:46',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:47',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:48',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:49',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:5',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:50',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:51',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:52',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:53',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:54',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:55',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:56',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:57',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:58',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:59',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:6',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:60',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:61',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:62',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:63',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:64',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:65',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:66',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:67',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:68',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:69',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:7',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:70',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:71',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:72',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:73',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:74',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:75',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:76',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:77',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:78',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:79',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:8',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:80',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:81',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:82',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:83',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:84',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:85',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:86',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:87',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:88',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:89',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:9',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:90',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:91',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:92',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:93',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:94',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:95',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:96',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:97',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:98',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E            b'key:99',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           }\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_scan.py:184: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _____________ test_zadd_with_nx[StrictRedis-True-param1-1-state1] ______________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | param = {'four': 2.0, 'three': 1.0, 'zero': 0.0}, return_value = 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | state = [(b'zero', 0.0), (b'three', 3.0), (b'four', 4.0)], ch = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     @pytest.mark.parametrize(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         'param,return_value,state',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'four': 2.0, 'three': 1.0}, 0, [(b'three', 3.0), (b'four', 4.0)]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'four': 2.0, 'three': 1.0, 'zero': 0.0}, 1, [(b'zero', 0.0), (b'three', 3.0), (b'four', 4.0)]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'two': 2.0, 'one': 1.0}, 2, [(b'one', 1.0), (b'two', 2.0), (b'three', 3.0), (b'four', 4.0)])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     @pytest.mark.parametrize('ch', [False, True])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zadd_with_nx(r, param, return_value, state, ch):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       r.zadd('foo', {'four': 4.0, 'three': 3.0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py:66: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4112: in zadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"ZADD\", name, *pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _____________ test_zadd_with_nx[StrictRedis-True-param2-2-state2] ______________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | param = {'one': 1.0, 'two': 2.0}, return_value = 2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | state = [(b'one', 1.0), (b'two', 2.0), (b'three', 3.0), (b'four', 4.0)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ch = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     @pytest.mark.parametrize(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         'param,return_value,state',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'four': 2.0, 'three': 1.0}, 0, [(b'three', 3.0), (b'four', 4.0)]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'four': 2.0, 'three': 1.0, 'zero': 0.0}, 1, [(b'zero', 0.0), (b'three', 3.0), (b'four', 4.0)]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'two': 2.0, 'one': 1.0}, 2, [(b'one', 1.0), (b'two', 2.0), (b'three', 3.0), (b'four', 4.0)])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     @pytest.mark.parametrize('ch', [False, True])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zadd_with_nx(r, param, return_value, state, ch):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'four': 4.0, 'three': 3.0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert r.zadd('foo', param, nx=True, ch=ch) == return_value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.zrange('foo', 0, -1, withscores=True) == state\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert [(b'one', 1.0), (b'two', 2.0)] == [(b'one', 1.0...b'four', 4.0)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Right contains 2 more items, first extra item: (b'three', 3.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         - [(b'one', 1.0), (b'two', 2.0), (b'three', 3.0), (b'four', 4.0)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         + [(b'one', 1.0), (b'two', 2.0)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py:68: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ____________ test_zadd_with_gt_and_ch[StrictRedis-param0-0-state0] _____________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | param = {'four': 2.0, 'three': 1.0}, return_value = 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | state = [(b'three', 3.0), (b'four', 4.0)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     @pytest.mark.parametrize(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         'param,return_value,state',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'four': 2.0, 'three': 1.0}, 0, [(b'three', 3.0), (b'four', 4.0)]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'four': 5.0, 'three': 1.0, 'zero': 0.0}, 2, [(b'zero', 0.0), (b'three', 3.0), (b'four', 5.0), ]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'two': 2.0, 'one': 1.0}, 2, [(b'one', 1.0), (b'two', 2.0), (b'three', 3.0), (b'four', 4.0)])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zadd_with_gt_and_ch(r, param, return_value, state):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       r.zadd('foo', {'four': 4.0, 'three': 3.0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py:80: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4112: in zadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"ZADD\", name, *pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ____________ test_zadd_with_gt_and_ch[StrictRedis-param1-2-state1] _____________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | param = {'four': 5.0, 'three': 1.0, 'zero': 0.0}, return_value = 2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | state = [(b'zero', 0.0), (b'three', 3.0), (b'four', 5.0)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     @pytest.mark.parametrize(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         'param,return_value,state',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'four': 2.0, 'three': 1.0}, 0, [(b'three', 3.0), (b'four', 4.0)]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'four': 5.0, 'three': 1.0, 'zero': 0.0}, 2, [(b'zero', 0.0), (b'three', 3.0), (b'four', 5.0), ]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'two': 2.0, 'one': 1.0}, 2, [(b'one', 1.0), (b'two', 2.0), (b'three', 3.0), (b'four', 4.0)])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zadd_with_gt_and_ch(r, param, return_value, state):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       r.zadd('foo', {'four': 4.0, 'three': 3.0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py:80: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4112: in zadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"ZADD\", name, *pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ____________ test_zadd_with_gt_and_ch[StrictRedis-param2-2-state2] _____________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | param = {'one': 1.0, 'two': 2.0}, return_value = 2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | state = [(b'one', 1.0), (b'two', 2.0), (b'three', 3.0), (b'four', 4.0)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     @pytest.mark.parametrize(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         'param,return_value,state',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'four': 2.0, 'three': 1.0}, 0, [(b'three', 3.0), (b'four', 4.0)]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'four': 5.0, 'three': 1.0, 'zero': 0.0}, 2, [(b'zero', 0.0), (b'three', 3.0), (b'four', 5.0), ]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'two': 2.0, 'one': 1.0}, 2, [(b'one', 1.0), (b'two', 2.0), (b'three', 3.0), (b'four', 4.0)])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zadd_with_gt_and_ch(r, param, return_value, state):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'four': 4.0, 'three': 3.0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.zadd('foo', param, gt=True, ch=True) == return_value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py:81: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4112: in zadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"ZADD\", name, *pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ________________ test_zadd_with_gt[StrictRedis-param0-0-state0] ________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | param = {'four': 2.0, 'three': 1.0}, return_value = 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | state = [(b'three', 3.0), (b'four', 4.0)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     @pytest.mark.parametrize(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         'param,return_value,state',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'four': 2.0, 'three': 1.0}, 0, [(b'three', 3.0), (b'four', 4.0)]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'four': 5.0, 'three': 1.0, 'zero': 0.0}, 1, [(b'zero', 0.0), (b'three', 3.0), (b'four', 5.0)]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'two': 2.0, 'one': 1.0}, 2, [(b'one', 1.0), (b'two', 2.0), (b'three', 3.0), (b'four', 4.0)])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zadd_with_gt(r, param, return_value, state):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'four': 4.0, 'three': 3.0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.zadd('foo', param, gt=True) == return_value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py:95: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4112: in zadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"ZADD\", name, *pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ________________ test_zadd_with_gt[StrictRedis-param1-1-state1] ________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | param = {'four': 5.0, 'three': 1.0, 'zero': 0.0}, return_value = 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | state = [(b'zero', 0.0), (b'three', 3.0), (b'four', 5.0)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     @pytest.mark.parametrize(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         'param,return_value,state',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'four': 2.0, 'three': 1.0}, 0, [(b'three', 3.0), (b'four', 4.0)]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'four': 5.0, 'three': 1.0, 'zero': 0.0}, 1, [(b'zero', 0.0), (b'three', 3.0), (b'four', 5.0)]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'two': 2.0, 'one': 1.0}, 2, [(b'one', 1.0), (b'two', 2.0), (b'three', 3.0), (b'four', 4.0)])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zadd_with_gt(r, param, return_value, state):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'four': 4.0, 'three': 3.0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.zadd('foo', param, gt=True) == return_value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py:95: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4112: in zadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"ZADD\", name, *pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ________________ test_zadd_with_gt[StrictRedis-param2-2-state2] ________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | param = {'one': 1.0, 'two': 2.0}, return_value = 2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | state = [(b'one', 1.0), (b'two', 2.0), (b'three', 3.0), (b'four', 4.0)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     @pytest.mark.parametrize(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         'param,return_value,state',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'four': 2.0, 'three': 1.0}, 0, [(b'three', 3.0), (b'four', 4.0)]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'four': 5.0, 'three': 1.0, 'zero': 0.0}, 1, [(b'zero', 0.0), (b'three', 3.0), (b'four', 5.0)]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ({'two': 2.0, 'one': 1.0}, 2, [(b'one', 1.0), (b'two', 2.0), (b'three', 3.0), (b'four', 4.0)])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zadd_with_gt(r, param, return_value, state):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'four': 4.0, 'three': 3.0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.zadd('foo', param, gt=True) == return_value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py:95: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4112: in zadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"ZADD\", name, *pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _________________ test_zadd_with_xx_and_gt_and_ch[StrictRedis] _________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zadd_with_xx_and_gt_and_ch(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('test', {\"one\": 1})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert r.zscore(\"test\", \"one\") == 1.0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.zadd(\"test\", {\"one\": 4}, xx=True, gt=True, ch=True) == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_zadd.py:148: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4112: in zadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"ZADD\", name, *pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _____________________ test_multiple_bits_set[StrictRedis] ______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_multiple_bits_set(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.setbit('foo', 1, 1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.setbit('foo', 3, 1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.setbit('foo', 5, 1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert r.getbit('foo', 0) == 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.getbit('foo', 1) == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert 0 == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +  where 0 = <bound method BasicKeyCommands.getbit of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +    where <bound method BasicKeyCommands.getbit of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.getbit\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_bitmap_commands.py:30: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _______________________ test_sort_with_hash[StrictRedis] _______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_sort_with_hash(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.rpush('foo', 'middle')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.rpush('foo', 'eldest')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.rpush('foo', 'youngest')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.hset('record_youngest', 'age', 1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.hset('record_youngest', 'name', 'baby')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.hset('record_middle', 'age', 10)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.hset('record_middle', 'name', 'teen')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.hset('record_eldest', 'age', 20)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.hset('record_eldest', 'name', 'adult')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.sort('foo', by='record_*->age') == [b'youngest', b'middle', b'eldest']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert [b'youngest', b'eldest'] == [b'youngest',...e', b'eldest']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         At index 1 diff: b'eldest' != b'middle'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Right contains one more item: b'eldest'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         - [b'youngest', b'middle', b'eldest']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         ?               -----------\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         + [b'youngest', b'eldest']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py:185: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ____________________________ test_type[StrictRedis] ____________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_type(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.set('string_key', \"value\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.lpush(\"list_key\", \"value\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.sadd(\"set_key\", \"value\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd(\"zset_key\", {\"value\": 1})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.hset('hset_key', 'key', 'value')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.type('string_key') == b'string'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert b'none' == b'string'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         At index 0 diff: b'n' != b's'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         - b'string'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         + b'none'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py:211: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _______________________ test_watch_persist[StrictRedis] ________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_watch_persist(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"PERSIST should mark a variable as changed.\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.set('foo', 'bar', ex=10000)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         with r.pipeline() as p:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             p.watch('foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             r.persist('foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             p.multi()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             p.get('foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           with pytest.raises(redis.exceptions.WatchError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           Failed: DID NOT RAISE <class 'redis.exceptions.WatchError'>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py:453: Failed\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _________________________ test_basic_sort[StrictRedis] _________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_basic_sort(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       r.rpush('foo', '2')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py:632: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:2796: in rpush\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"RPUSH\", name, *values)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ___________________ test_from_hypothesis_redis7[StrictRedis] ___________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_from_hypothesis_redis7(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.set('foo', b'0')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert r.setbit('foo', 0, 0) == 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert r.append('foo', b'') == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.set(b'', b'')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert r.setbit(b'', 0, 0) == 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.get(b'') == b'\\x00'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert None == b'\\x00'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +  where None = <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>(b'')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +    where <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.get\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_generic_commands.py:666: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _________________________ test_geoadd_ch[StrictRedis] __________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_geoadd_ch(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         values = (2.1909389952632, 41.433791470673, \"place1\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert r.geoadd(\"a\", values) == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         values = (2.1909389952632, 31.433791470673, \"place1\",\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                   2.1873744593677, 41.406342043777, \"place2\",)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.geoadd(\"a\", values, ch=True) == 2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py:14: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:5354: in geoadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"GEOADD\", *pieces)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: syntax error. Try GEOADD key [x1] [y1] [name1] [x2] [y2] [name2] ...\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _________________________ test_geoadd_xx[StrictRedis] __________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_geoadd_xx(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         values = (2.1909389952632, 41.433791470673, \"place1\",\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                   2.1873744593677, 41.406342043777, \"place2\",)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert r.geoadd(\"a\", values) == 2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         values = (\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             2.1909389952632, 41.433791470673, b\"place1\",\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             2.1873744593677, 41.406342043777, b\"place2\",\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             2.1804738294738, 41.405647879212, b\"place3\",\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.geoadd(\"a\", values, nx=True) == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py:46: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:5354: in geoadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"GEOADD\", *pieces)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: syntax error. Try GEOADD key [x1] [y1] [name1] [x2] [y2] [name2] ...\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ________ test_georadius[StrictRedis-2.187-41.406-1000-extra1-expected1] ________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | long = 2.187, lat = 41.406, radius = 1000, extra = {}, expected = [b'place2']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     @pytest.mark.parametrize(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"long,lat,radius,extra,expected\", [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             (2.191, 41.433, 1000, {}, [b\"place1\"]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             (2.187, 41.406, 1000, {}, [b\"place2\"]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             (1, 2, 1000, {}, []),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             (2.191, 41.433, 1, {\"unit\": \"km\"}, [b\"place1\"]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             (2.191, 41.433, 3000, {\"count\": 1}, [b\"place1\"]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         ])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_georadius(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             r: redis.Redis, long: float, lat: float, radius: float,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             extra: Dict[str, Any],\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             expected):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         values = (2.1909389952632, 41.433791470673, \"place1\",\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                   2.1873744593677, 41.406342043777, \"place2\",)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.geoadd(\"barcelona\", values)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.georadius(\"barcelona\", long, lat, radius, **extra) == expected\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert [] == [b'place2']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Right contains one more item: b'place2'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         - [b'place2']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         + []\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py:112: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _______ test_georadiusbymember[StrictRedis-place2-1000-extra1-expected1] _______\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | member = 'place2', radius = 1000, extra = {}, expected = [b'place2']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     @pytest.mark.parametrize(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"member,radius,extra,expected\", [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ('place1', 1000, {}, [b\"place1\"]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ('place2', 1000, {}, [b\"place2\"]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ('place1', 1, {\"unit\": \"km\"}, [b\"place1\"]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             ('place1', 3000, {\"count\": 1}, [b\"place1\"]),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         ])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_georadiusbymember(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             r: redis.Redis, member: str, radius: float,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             extra: Dict[str, Any],\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             expected):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         values = (2.1909389952632, 41.433791470673, \"place1\",\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                   2.1873744593677, 41.406342043777, b\"place2\",)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.geoadd(\"barcelona\", values)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.georadiusbymember(\"barcelona\", member, radius, **extra) == expected\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert [] == [b'place2']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Right contains one more item: b'place2'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         - [b'place2']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         + []\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py:129: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ______________________ test_georadius_count[StrictRedis] _______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_georadius_count(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         values = (2.1909389952632, 41.433791470673, \"place1\",\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                   2.1873744593677, 41.406342043777, \"place2\",)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.geoadd(\"barcelona\", values)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert r.georadius(\"barcelona\", 2.191, 41.433, 3000, count=1, store='barcelona') == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert r.georadius(\"barcelona\", 2.191, 41.433, 3000, store_dist='extract') == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.zcard(\"extract\") == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert 0 == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +  where 0 = <bound method SortedSetCommands.zcard of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('extract')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +    where <bound method SortedSetCommands.zcard of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.zcard\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py:161: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _________________________ test_geosearch[StrictRedis] __________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_geosearch(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         values = (\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             2.1909389952632, 41.433791470673, b\"place1\",\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             2.1873744593677, 41.406342043777, b\"place2\",\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             2.583333, 41.316667, b\"place3\",\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.geoadd(\"barcelona\", values)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.geosearch(\"barcelona\", longitude=2.191, latitude=41.433, radius=1000) == [b\"place1\"]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_geo_commands.py:203: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:5593: in geosearch\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self._geosearchgeneric(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:5722: in _geosearchgeneric\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(command, *pieces, **kwargs)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: unknown command `GEOSEARCH`, with args beginning with: `barcelona`, `FROMLONLAT`, `2.191`, `41.433`, `BYRADIUS`, `1000`, `m`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ________________________ test_hincrbyfloat[StrictRedis] ________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_hincrbyfloat(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       r.hset('foo', 'counter', 0.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py:178: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4952: in hset\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"HSET\", name, *items)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ___________________________ test_hscan[StrictRedis] ____________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_hscan(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         # Set up the data\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         name = 'hscan-test'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         for ix in range(20):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             k = 'key:%s' % ix\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             v = 'result:%s' % ix\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             r.hset(name, k, v)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         expected = r.hgetall(name)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert len(expected) == 20  # Ensure we know what we're testing\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert 3 == 20\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +  where 3 = len({b'key:17': b'result:17', b'key:18': b'result:18', b'key:19': b'result:19'})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py:262: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _________________________ test_hrandfield[StrictRedis] _________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_hrandfield(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.hrandfield(\"key\") is None\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py:298: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:2154: in hrandfield\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"HRANDFIELD\", key, *params)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: unknown command `HRANDFIELD`, with args beginning with: `key`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ___________________ test_lpush_then_lrange_all[StrictRedis] ____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_lpush_then_lrange_all(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.lpush('foo', 'bar') == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert 2 == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +  where 2 = <bound method ListCommands.lpush of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 'bar')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +    where <bound method ListCommands.lpush of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.lpush\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py:12: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ____________________________ test_llen[StrictRedis] ____________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_llen(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       r.lpush('foo', 'one')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py:52: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:2706: in lpush\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"LPUSH\", name, *values)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ____________________ test_lrem_negative_count[StrictRedis] _____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_lrem_negative_count(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.lpush('foo', 'removeme')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.lpush('foo', 'three')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.lpush('foo', 'two')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.lpush('foo', 'one')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.lpush('foo', 'removeme')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.lrem('foo', -1, 'removeme')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         # Should remove it from the end of the list,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         # leaving the 'removeme' from the front of the list alone.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.lrange('foo', 0, -1) == [b'removeme', b'one', b'two', b'three']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert [b'one', b'two', b'three'] == [b'removeme',...wo', b'three']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         At index 0 diff: b'one' != b'removeme'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Right contains one more item: b'three'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         - [b'removeme', b'one', b'two', b'three']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         ?  -------------\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         + [b'one', b'two', b'three']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py:85: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _______________________ test_lpop_zero_elem[StrictRedis] _______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_lpop_zero_elem(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.rpush(b'\\x00', b'')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.lpop(b'\\x00', 0) == []\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py:159: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:2696: in lpop\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"LPOP\", name, count)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: wrong number of arguments for 'lpop' command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ________________ test_lpop_zero_non_existing_list[StrictRedis] _________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_lpop_zero_non_existing_list(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.lpop(b'', 0) is None\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py:163: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:2696: in lpop\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"LPOP\", name, count)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: wrong number of arguments for 'lpop' command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ______________________ test_brpop_single_key[StrictRedis] ______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_brpop_single_key(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       r.rpush('foo', 'one')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py:476: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:2796: in rpush\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"RPUSH\", name, *values)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ______________ test_lmove_to_nonexistent_destination[StrictRedis] ______________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_lmove_to_nonexistent_destination(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.rpush('foo', 'one')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.lmove('foo', 'bar', 'RIGHT', 'LEFT') == b'one'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py:547: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:1957: in lmove\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"LMOVE\", *params)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: unknown command `LMOVE`, with args beginning with: `foo`, `bar`, `RIGHT`, `LEFT`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ________________________ test_lmove_expiry[StrictRedis] ________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_lmove_expiry(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       r.rpush('foo', 'one')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py:552: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:2796: in rpush\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"RPUSH\", name, *values)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ___________________________ test_lmove[StrictRedis] ____________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_lmove(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.lmove('foo', 'bar', 'RIGHT', 'LEFT') is None\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py:578: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:1957: in lmove\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"LMOVE\", *params)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: unknown command `LMOVE`, with args beginning with: `foo`, `bar`, `RIGHT`, `LEFT`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ___________________________ test_blmove[StrictRedis] ___________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_blmove(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.rpush(\"a\", \"one\", \"two\", \"three\", \"four\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.blmove(\"a\", \"b\", 5)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_list_commands.py:608: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:1973: in blmove\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"BLMOVE\", *params)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: unknown command `BLMOVE`, with args beginning with: `a`, `b`, `LEFT`, `RIGHT`, `5`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _____________________ test_pubsub_help_redis6[StrictRedis] _____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     @pytest.mark.max_server('6.2.7')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_pubsub_help_redis6(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert raw_command(r, \"PUBSUB HELP\") == [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'PUBSUB <subcommand> [<arg> [value] [opt] ...]. Subcommands are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'CHANNELS [<pattern>]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b\"    Return the currently active channels matching a <pattern> (default: '*')\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'NUMPAT',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'    Return number of subscriptions to patterns.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'NUMSUB [<channel> ...]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'    Return the number of subscribers for the specified channels, excluding',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'    pattern subscriptions(default: no channels).',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'HELP',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'    Prints this help.'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       assert [b'PUBSUB <su...ault: none).'] == [b'PUBSUB <su...l> ...]', ...]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         At index 0 diff: b'PUBSUB <subcommand> arg arg ... arg. Subcommands are:' != b'PUBSUB <subcommand> [<arg> [value] [opt] ...]. Subcommands are:'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Right contains 6 more items, first extra item: b'    Return number of subscriptions to patterns.'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'PUBSUB <subcommand> [<arg> [value] [opt] ...]. Subcommands are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         ?                        --   ^^^^ ^^^^^^^^^^    ^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         +  b'PUBSUB <subcommand> arg arg ... arg. Subcommands are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         ?                           ^ ^^    ^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         +  b'CHANNELS [<pattern>] -- Return the currently active channels matching a patt'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         +  b'ern (default: all).',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'CHANNELS [<pattern>]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b\"    Return the currently active channels matching a <pattern> (default: '*')\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'NUMPAT',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'    Return number of subscriptions to patterns.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         ?    ^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         +  b'NUMPAT -- Return number of subscriptions to patterns.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         ?    ^^^^^^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         +  b'NUMSUB [channel-1 .. channel-N] -- Returns the number of subscribers for the'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         +  b' specified channels (excluding patterns, default: none).',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'NUMSUB [<channel> ...]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'    Return the number of subscribers for the specified channels, excluding',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'    pattern subscriptions(default: no channels).',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'HELP',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'    Prints this help.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_pubsub_commands.py:404: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ________________________ test_script_help[StrictRedis] _________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     @pytest.mark.max_server('7')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_script_help(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert raw_command(r, \"SCRIPT HELP\") == [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'SCRIPT <subcommand> [<arg> [value] [opt] ...]. Subcommands are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'DEBUG (YES|SYNC|NO)',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'    Set the debug mode for subsequent scripts executed.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'EXISTS <sha1> [<sha1> ...]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'    Return information about the existence of the scripts in the script cach'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'e.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'FLUSH [ASYNC|SYNC]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'    Flush the Lua scripts cache. Very dangerous on replicas.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'    When called without the optional mode argument, the behavior is determin'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'ed by the',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'    lazyfree-lazy-user-flush configuration directive. Valid modes are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'    * ASYNC: Asynchronously flush the scripts cache.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'    * SYNC: Synchronously flush the scripts cache.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'KILL',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'    Kill the currently executing Lua script.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'LOAD <script>',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'    Load a script into the scripts cache without executing it.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'HELP',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             b'    Prints this help.'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert [b'SCRIPT <su...xecuting it.'] == [b'SCRIPT <su...C|SYNC]', ...]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         At index 0 diff: b'SCRIPT <subcommand> arg arg ... arg. Subcommands are:' != b'SCRIPT <subcommand> [<arg> [value] [opt] ...]. Subcommands are:'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Right contains 11 more items, first extra item: b'    Flush the Lua scripts cache. Very dangerous on replicas.'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'SCRIPT <subcommand> [<arg> [value] [opt] ...]. Subcommands are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         ?                        --   ^^^^ ^^^^^^^^^^    ^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         +  b'SCRIPT <subcommand> arg arg ... arg. Subcommands are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         ?                           ^ ^^    ^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'DEBUG (YES|SYNC|NO)',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'    Set the debug mode for subsequent scripts executed.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         ?    ^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         +  b'DEBUG (yes|sync|no) -- Set the debug mode for subsequent scripts executed.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         ?    ^^^^^^^^^^^^^^^^^^^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         +  b'EXISTS <sha1> [<sha1> ...] -- Return information about the existence of the '\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         +  b'scripts in the script cache.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'EXISTS <sha1> [<sha1> ...]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'    Return information about the existence of the scripts in the script cach'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'e.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'FLUSH [ASYNC|SYNC]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'    Flush the Lua scripts cache. Very dangerous on replicas.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         ?    ^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         +  b'FLUSH -- Flush the Lua scripts cache. Very dangerous on replicas.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         ?    ^^^^^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'    When called without the optional mode argument, the behavior is determin'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'ed by the',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'    lazyfree-lazy-user-flush configuration directive. Valid modes are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'    * ASYNC: Asynchronously flush the scripts cache.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'    * SYNC: Synchronously flush the scripts cache.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'KILL',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'    Kill the currently executing Lua script.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         ?    ^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         +  b'KILL -- Kill the currently executing Lua script.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         ?    ^^^^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'LOAD <script>',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'    Load a script into the scripts cache without executing it.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         ?    ---- ^^^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         +  b'LOAD <script> -- Load a script into the scripts cache, without executing it.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         ?     ^^^^^      ++++++++++++++++++                       +\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'HELP',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         -  b'    Prints this help.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_scripting.py:80: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ___________________________ test_swapdb[StrictRedis] ___________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | create_redis = <function _create_redis.<locals>.factory at 0x7f24a2dfbc40>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_swapdb(r, create_redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r1 = create_redis(1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.set('foo', 'abc')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.set('bar', 'xyz')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r1.set('foo', 'foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r1.set('baz', 'baz')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert r.swapdb(0, 1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert r.get('foo') == b'foo'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert r.get('bar') is None\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert r.get('baz') == b'baz'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r1.get('foo') == b'abc'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert None == b'abc'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +  where None = <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=1>>>>('foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +    where <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=1>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=1>>>.get\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_server_commands.py:21: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ___________________________ test_dbsize[StrictRedis] ___________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_dbsize(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.dbsize() == 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       assert 1 == 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +  where 1 = <bound method ManagementCommands.dbsize of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +    where <bound method ManagementCommands.dbsize of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.dbsize\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_server_commands.py:66: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _________________________ test_smismember[StrictRedis] _________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_smismember(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.smismember('foo', ['member1', 'member2', 'member3']) == [0, 0, 0]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_set_commands.py:139: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:3384: in smismember\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"SMISMEMBER\", name, *args)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: unknown command `SMISMEMBER`, with args beginning with: `foo`, `member1`, `member2`, `member3`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _________________ test_zrange_with_rev_and_bylex[StrictRedis] __________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zrange_with_rev_and_bylex(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'one_a': 0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'two_a': 0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'two_b': 0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'three_a': 0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.zrange('foo', b'+', b'(t', desc=True, bylex=True) == [b'two_b', b'two_a', b'three_a']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py:72: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4449: in zrange\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self._zrange(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4401: in _zrange\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(*pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: value is not an integer or out of range\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _____________________ test_zrange_with_bylex[StrictRedis] ______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zrange_with_bylex(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'one_a': 0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'two_a': 0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'two_b': 0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'three_a': 0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.zrange('foo', b'(t', b'+', bylex=True) == [b'three_a', b'two_a', b'two_b']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py:97: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4449: in zrange\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self._zrange(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4401: in _zrange\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(*pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: value is not an integer or out of range\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ____________________ test_zrange_with_byscore[StrictRedis] _____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zrange_with_byscore(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'zero': 0})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'two': 2})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'two_a_also': 2})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'two_b_also': 2})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'four': 4})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.zrange('foo', 1, 3, byscore=True) == [b'two', b'two_a_also', b'two_b_also']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py:120: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4449: in zrange\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self._zrange(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4401: in _zrange\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(*pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ___________________ test_zcard_non_existent_key[StrictRedis] ___________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zcard_non_existent_key(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.zcard('foo') == 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert 2 == 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +  where 2 = <bound method SortedSetCommands.zcard of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +    where <bound method SortedSetCommands.zcard of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.zcard\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py:144: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ______________________ test_zcard_wrong_type[StrictRedis] ______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zcard_wrong_type(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.sadd('foo', 'bar')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       with pytest.raises(redis.ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       Failed: DID NOT RAISE <class 'redis.exceptions.ResponseError'>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py:149: Failed\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | __________________________ test_zmscore[StrictRedis] ___________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zmscore(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"When all the requested sorted-set members are in the cache, a valid\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         float value should be returned for each requested member.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         The order of the returned scores should always match the order in\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         which the set members were supplied.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         cache_key: str = \"scored-set-members\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         members: Tuple[str, ...] = (\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         scores: Tuple[float, ...] = (1.1, 2.2, 3.3, 4.4, 5.5, 6.6)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd(cache_key, dict(zip(members, scores)))\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       cached_scores: List[Optional[float]] = r.zmscore(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             cache_key,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             list(members),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py:316: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4778: in zmscore\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"ZMSCORE\", *pieces)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: unknown command `ZMSCORE`, with args beginning with: `scored-set-members`, `one`, `two`, `three`, `four`, `five`, `six`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | __________________ test_zmscore_missing_members[StrictRedis] ___________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zmscore_missing_members(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"When none of the requested sorted-set members are in the cache, a value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         of `None` should be returned once for each requested member.\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         cache_key: str = \"scored-set-members\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         members: Tuple[str, ...] = (\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd(cache_key, {\"eight\": 8.8})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       cached_scores: List[Optional[float]] = r.zmscore(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             cache_key,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             list(members),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py:331: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4778: in zmscore\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"ZMSCORE\", *pieces)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: unknown command `ZMSCORE`, with args beginning with: `scored-set-members`, `one`, `two`, `three`, `four`, `five`, `six`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | __________________ test_zmscore_mixed_membership[StrictRedis] __________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zmscore_mixed_membership(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"When only some requested sorted-set members are in the cache, a\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         valid float value should be returned for each present member and `None` for\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         each missing member.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         The order of the returned scores should always match the order in\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         which the set members were supplied.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         cache_key: str = \"scored-set-members\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         members: Tuple[str, ...] = (\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         scores: Tuple[float, ...] = (1.1, 2.2, 3.3, 4.4, 5.5, 6.6)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             cache_key,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             dict((member, scores[idx]) for (idx, member) in enumerate(members) if idx % 2 != 0),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       cached_scores: List[Optional[float]] = r.zmscore(cache_key, list(members))\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py:356: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4778: in zmscore\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"ZMSCORE\", *pieces)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: unknown command `ZMSCORE`, with args beginning with: `scored-set-members`, `one`, `two`, `three`, `four`, `five`, `six`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ____________________ test_zrevrange_score_cast[StrictRedis] ____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zrevrange_score_cast(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'one': 1.2})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'two': 2.2})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         expected_without_cast_round = [(b'two', 2.2), (b'one', 1.2)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         expected_with_cast_round = [(b'two', 2.0), (b'one', 1.0)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.zrevrange('foo', 0, 2, withscores=True) == expected_without_cast_round\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert [(b'two', 2.2...'two_b', 0.0)] == [(b'two', 2.2), (b'one', 1.2)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Left contains one more item: (b'two_b', 0.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         - [(b'two', 2.2), (b'one', 1.2)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         + [(b'two', 2.2), (b'one', 1.2), (b'two_b', 0.0)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         ?                              +++++++++++++++++\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py:410: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ____________________ test_zrangebyscore_slice[StrictRedis] _____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zrangebyscore_slice(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'two_a': 2})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'two_b': 2})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'two_c': 2})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd('foo', {'two_d': 2})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.zrangebyscore('foo', 0, 4, 0, 2) == [b'two_a', b'two_b']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert [b'one_a', b'three_a'] == [b'two_a', b'two_b']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         At index 0 diff: b'one_a' != b'two_a'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         - [b'two_a', b'two_b']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E         + [b'one_a', b'three_a']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py:482: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _________________ test_zrangebyscore_cast_scores[StrictRedis] __________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zrangebyscore_cast_scores(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       r.zadd('foo', {'two': 2})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py:494: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4112: in zadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"ZADD\", name, *pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _______________ test_zrevrangebyscore_raises_error[StrictRedis] ________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zrevrangebyscore_raises_error(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       r.zadd('foo', {'one': 1})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py:533: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4112: in zadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"ZADD\", name, *pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ____________________ test_zlexcount_wrong_type[StrictRedis] ____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zlexcount_wrong_type(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       r.sadd('foo', 'bar')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py:610: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:3286: in sadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"SADD\", name, *values)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ________________________ test_zrandemember[StrictRedis] ________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zrandemember(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd(\"a\", {\"a1\": 1, \"a2\": 2, \"a3\": 3, \"a4\": 4, \"a5\": 5})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.zrandmember(\"a\") is not None\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py:1079: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4266: in zrandmember\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"ZRANDMEMBER\", key, *params)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: unknown command `ZRANDMEMBER`, with args beginning with: `a`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _________________________ test_zdiffstore[StrictRedis] _________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zdiffstore(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd(\"a\", {\"a1\": 1, \"a2\": 2, \"a3\": 3})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd(\"b\", {\"a1\": 1, \"a2\": 2})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.zdiffstore(\"out\", [\"a\", \"b\"])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py:1092: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4151: in zdiffstore\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"ZDIFFSTORE\", dest, *pieces)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: unknown command `ZDIFFSTORE`, with args beginning with: `out`, `2`, `a`, `b`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ___________________________ test_zdiff[StrictRedis] ____________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zdiff(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd(\"a\", {\"a1\": 1, \"a2\": 2, \"a3\": 3})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd(\"b\", {\"a1\": 1, \"a2\": 2})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.zdiff([\"a\", \"b\"]) == [b\"a3\"]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py:1100: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4141: in zdiff\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"ZDIFF\", *pieces)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: unknown command `ZDIFF`, with args beginning with: `2`, `a`, `b`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ___________________________ test_zunion[StrictRedis] ___________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zunion(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd(\"a\", {\"a1\": 1, \"a2\": 1, \"a3\": 1})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd(\"b\", {\"a1\": 2, \"a2\": 2, \"a3\": 2})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd(\"c\", {\"a1\": 6, \"a3\": 5, \"a4\": 4})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         # sum\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.zunion([\"a\", \"b\", \"c\"]) == [b\"a2\", b\"a4\", b\"a3\", b\"a1\"]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py:1109: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4747: in zunion\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self._zaggregate(\"ZUNION\", None, keys, aggregate, withscores=withscores)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4808: in _zaggregate\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(*pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: unknown command `ZUNION`, with args beginning with: `3`, `a`, `b`, `c`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ___________________________ test_zinter[StrictRedis] ___________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zinter(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd(\"a\", {\"a1\": 1, \"a2\": 2, \"a3\": 1})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd(\"b\", {\"a1\": 2, \"a2\": 2, \"a3\": 2})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd(\"c\", {\"a1\": 6, \"a3\": 5, \"a4\": 4})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.zinter([\"a\", \"b\", \"c\"]) == [b\"a3\", b\"a1\"]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py:1127: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4175: in zinter\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self._zaggregate(\"ZINTER\", None, keys, aggregate, withscores=withscores)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4808: in _zaggregate\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(*pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: unknown command `ZINTER`, with args beginning with: `3`, `a`, `b`, `c`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ________________________ test_zrangestore[StrictRedis] _________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_zrangestore(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.zadd(\"a\", {\"a1\": 1, \"a2\": 2, \"a3\": 3})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.zrangestore(\"b\", \"a\", 0, 1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_sortedset_commands.py:1155: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4526: in zrangestore\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self._zrange(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:4401: in _zrange\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(*pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: unknown command `ZRANGESTORE`, with args beginning with: `b`, `a`, `0`, `1`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _________________________ test_xadd_minid[StrictRedis] _________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_xadd_minid(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         stream = \"stream\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         id_list = add_items(r, stream, 10)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         minid = id_list[6]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       id_list.append(r.xadd(stream, {'k': 'new'}, minid=minid, approximate=False))\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py:116: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:3519: in xadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"XADD\", name, *pieces)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: Invalid stream ID specified as stream command argument\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ______________________ test_xadd_nomkstream[StrictRedis] _______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_xadd_nomkstream(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       r.xadd('stream2', {\"some\": \"other\"}, nomkstream=True)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py:168: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:3519: in xadd\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"XADD\", name, *pieces)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: Invalid stream ID specified as stream command argument\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _____________________ test_xgroup_delconsumer[StrictRedis] _____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_xgroup_delconsumer(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         stream, group, consumer = \"stream\", \"group\", \"consumer\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.xadd(stream, {\"foo\": \"bar\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.xadd(stream, {\"foo\": \"bar\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       r.xgroup_create(stream, group, 0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py:353: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:3677: in xgroup_create\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(*pieces)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: BUSYGROUP Consumer Group name already exists\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ___________________ test_xgroup_createconsumer[StrictRedis] ____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_xgroup_createconsumer(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         stream, group, consumer = \"stream\", \"group\", \"consumer\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.xadd(stream, {\"foo\": \"bar\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.xadd(stream, {\"foo\": \"bar\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.xgroup_create(stream, group, 0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.xgroup_createconsumer(stream, group, consumer) == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py:370: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:3717: in xgroup_createconsumer\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: Unknown subcommand or wrong number of arguments for 'CREATECONSUMER'. Try XGROUP HELP.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ______________________ test_xinfo_consumers[StrictRedis] _______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_xinfo_consumers(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         stream, group, consumer1, consumer2 = \"stream\", \"group\", \"consumer1\", \"consumer2\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.xadd(stream, {\"foo\": \"bar\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.xadd(stream, {\"foo\": \"bar\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.xadd(stream, {\"foo\": \"bar\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       r.xgroup_create(stream, group, 0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py:387: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:3677: in xgroup_create\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(*pieces)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: BUSYGROUP Consumer Group name already exists\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _________________________ test_xreadgroup[StrictRedis] _________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_xreadgroup(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         stream, group, consumer = \"stream\", \"group\", \"consumer1\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         with pytest.raises(redis.exceptions.ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             r.xreadgroup(group, consumer, streams={stream: \">\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         m1 = r.xadd(stream, {\"foo\": \"bar\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         m2 = r.xadd(stream, {\"bing\": \"baz\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.xgroup_create(stream, group, 0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         expected = [[\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             stream.encode(),\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           [get_stream_message(r, stream, m1), get_stream_message(r, stream, m2)],\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         ]]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py:415: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | client = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | stream = 'stream', message_id = b'1688233079970-0'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def get_stream_message(client, stream, message_id):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Fetch a stream message and format it as a (message_id, fields) pair\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         response = client.xrange(stream, min=message_id, max=message_id)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert len(response) == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       assert 0 == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +  where 0 = len([])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py:231: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ____________________________ test_xack[StrictRedis] ____________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_xack(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         stream, group, consumer = \"stream\", \"group\", \"consumer\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         # xack on a stream that doesn't exist\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert r.xack(stream, group, \"0-0\") == 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         m1 = r.xadd(stream, {\"one\": \"one\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         m2 = r.xadd(stream, {\"two\": \"two\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         m3 = r.xadd(stream, {\"three\": \"three\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         # xack on a group that doesn't exist\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert r.xack(stream, group, m1) == 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.xgroup_create(stream, group, 0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.xreadgroup(group, consumer, streams={stream: \">\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert_consumer_info(r, stream, group, [{'name': b'consumer', 'pending': 3}])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert r.xack(stream, group, m1) == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         time.sleep(0.01)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       res = assert_consumer_info(r, stream, group, [{'name': b'consumer', 'pending': 2}])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py:497: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py:469: in assert_consumer_info\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     res = r.xinfo_consumers(stream, group)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:3749: in xinfo_consumers\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"XINFO CONSUMERS\", name, groupname)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: no such key\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ----------------------------- Captured stdout call -----------------------------\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | res[0][idle]=0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _____________________ test_xinfo_stream_full[StrictRedis] ______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_xinfo_stream_full(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         stream, group = \"stream\", \"group\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         m1 = r.xadd(stream, {\"foo\": \"bar\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.xgroup_create(stream, group, 0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       info = r.xinfo_stream(stream, full=True)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py:533: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:3773: in xinfo_stream\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"XINFO STREAM\", *pieces, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: Unknown subcommand or wrong number of arguments for 'STREAM'. Try XINFO HELP.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ____________________ test_xpending_range_idle[StrictRedis] _____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_xpending_range_idle(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         stream, group, consumer1, consumer2 = \"stream\", \"group\", \"consumer1\", \"consumer2\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.xadd(stream, {\"foo\": \"bar\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.xadd(stream, {\"foo\": \"bar\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.xgroup_create(stream, group, 0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         # read 1 message from the group with each consumer\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.xreadgroup(group, consumer1, streams={stream: \">\"}, count=1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.xreadgroup(group, consumer2, streams={stream: \">\"}, count=1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         response = r.xpending_range(stream, group, min=\"-\", max=\"+\", count=5)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert len(response) == 2\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       response = r.xpending_range(stream, group, min=\"-\", max=\"+\", count=5, idle=1000)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py:604: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:3848: in xpending_range\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"XPENDING\", *pieces, parse_detail=True)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _____________________ test_xautoclaim_redis6[StrictRedis] ______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     @pytest.mark.max_server('6.3')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     @testtools.run_test_if_redispy_ver('above', '4.4')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_xautoclaim_redis6(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         stream, group, consumer1, consumer2 = \"stream\", \"group\", \"consumer1\", \"consumer2\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         message_id1 = r.xadd(stream, {\"john\": \"wick\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         message_id2 = r.xadd(stream, {\"johny\": \"deff\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         message = get_stream_message(r, stream, message_id1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.xgroup_create(stream, group, 0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         # trying to claim a message that isn't already pending doesn't\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         # do anything\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.xautoclaim(stream, group, consumer2, min_idle_time=0) == [b\"0-0\", []]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py:640: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:3570: in xautoclaim\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"XAUTOCLAIM\", *pieces, **kwargs)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: unknown command `XAUTOCLAIM`, with args beginning with: `stream`, `group`, `consumer2`, `0`, `0-0`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ___________________________ test_xclaim[StrictRedis] ___________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_xclaim(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         stream, group, consumer1, consumer2 = \"stream\", \"group\", \"consumer1\", \"consumer2\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         message_id = r.xadd(stream, {\"john\": \"wick\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         message = get_stream_message(r, stream, message_id)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r.xgroup_create(stream, group, 0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         # trying to claim a message that isn't already pending doesn't\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         # do anything\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         assert r.xclaim(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             stream, group, consumer2, min_idle_time=0, message_ids=(message_id,)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         ) == []\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         # read the group as consumer1 to initially claim the messages\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       r.xreadgroup(group, consumer1, streams={stream: \">\"})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_streams_commands.py:722: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:3953: in xreadgroup\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"XREADGROUP\", *pieces)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: NOGROUP No such key 'stream' or consumer group 'group' in XREADGROUP with GROUP option\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _______________ test_append_with_no_preexisting_key[StrictRedis] _______________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_append_with_no_preexisting_key(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.append('foo', 'bar') == 3\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert 4 == 3\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +  where 4 = <bound method BasicKeyCommands.append of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 'bar')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +    where <bound method BasicKeyCommands.append of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.append\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py:22: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ________________________ test_decr_newkey[StrictRedis] _________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_decr_newkey(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       r.decr('foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py:39: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:1676: in decrby\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"DECRBY\", name, amount)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: value is not an integer or out of range\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ___________________________ test_getdel[StrictRedis] ___________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_getdel(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         r['foo'] = 'bar'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.getdel('foo') == b'bar'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py:89: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:1812: in getdel\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"GETDEL\", name)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: unknown command `GETDEL`, with args beginning with: `foo`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ____________________ test_getdel_doesnt_exist[StrictRedis] _____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_getdel_doesnt_exist(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.getdel('foo') is None\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py:94: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:1812: in getdel\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"GETDEL\", name)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: unknown command `GETDEL`, with args beginning with: `foo`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ___________________ test_incrbyfloat_precision[StrictRedis] ____________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_incrbyfloat_precision(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         x = 1.23456789123456789\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.incrbyfloat('foo', x) == x\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py:172: \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/commands/core.py:1936: in incrbyfloat\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.execute_command(\"INCRBYFLOAT\", name, amount)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1269: in execute_command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return conn.retry.call_with_retry(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/retry.py:46: in call_with_retry\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return do()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1270: in <lambda>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     lambda: self._send_command_parse_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1246: in _send_command_parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     return self.parse_response(conn, command_name, **options)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/client.py:1286: in parse_response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     response = connection.read_response()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | self = Connection<host=localhost,port=6379,db=0>, disable_decoding = False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def read_response(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         self, disable_decoding=False, *, disconnect_on_error: bool = True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         \"\"\"Read the response from a previously sent command\"\"\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         host_error = self._host_error()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         try:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             response = self._parser.read_response(disable_decoding=disable_decoding)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except socket.timeout:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise TimeoutError(f\"Timeout reading from {host_error}\")\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except OSError as e:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise ConnectionError(\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 f\"Error while reading from {host_error}\" f\" : {e.args}\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             )\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         except BaseException:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # Also by default close in case of BaseException.  A lot of code\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # relies on this behaviour when doing Command/Response pairs.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             # See #1128.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             if disconnect_on_error:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |                 self.disconnect()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             raise\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if self.health_check_interval:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |             self.next_health_check = time() + self.health_check_interval\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |         if isinstance(response, ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >           raise response\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E           redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | /home/runneradmin/.cache/pypoetry/virtualenvs/fakeredis-tyrOQ6-o-py3.11/lib/python3.11/site-packages/redis/connection.py:897: ResponseError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ______________________ test_set_ex_overflow[StrictRedis] _______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_set_ex_overflow(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       with pytest.raises(ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       Failed: DID NOT RAISE <class 'redis.exceptions.ResponseError'>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py:263: Failed\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ______________________ test_set_px_overflow[StrictRedis] _______________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_set_px_overflow(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       with pytest.raises(ResponseError):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       Failed: DID NOT RAISE <class 'redis.exceptions.ResponseError'>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py:268: Failed\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ___________________________ test_setnx[StrictRedis] ____________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_setnx(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.setnx('foo', 'bar')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +  where False = <bound method BasicKeyCommands.setnx of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 'bar')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +    where <bound method BasicKeyCommands.setnx of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.setnx\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py:336: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ___________________________ test_set_nx[StrictRedis] ___________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_set_nx(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.set('foo', 'bar', nx=True) is True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert None is True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +  where None = <bound method BasicKeyCommands.set of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 'bar', nx=True)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +    where <bound method BasicKeyCommands.set of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.set\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py:343: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | ___________________________ test_set_xx[StrictRedis] ___________________________\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | r = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     def test_set_xx(r: redis.Redis):\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | >       assert r.set('foo', 'bar', xx=True) is None\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E       AssertionError: assert True is None\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +  where True = <bound method BasicKeyCommands.set of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 'bar', xx=True)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | E        +    where <bound method BasicKeyCommands.set of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.set\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_string_commands.py:350: AssertionError\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | =============================== warnings summary ===============================\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_connection.py::TestFakeStrictRedisConnectionErrors::test_hmset[FakeStrictRedis]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py/test/test_connection.py:266: DeprecationWarning: FakeStrictRedis.hmset() is deprecated. Use FakeStrictRedis.hset() instead.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     r.hmset('name', {'key': 1})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hmset_empty_raises_error[StrictRedis]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py/test/test_mixins/test_hash_commands.py:227: DeprecationWarning: Redis.hmset() is deprecated. Use Redis.hset() instead.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     r.hmset('foo', {})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hmset_empty_raises_error[FakeStrictRedis]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py/test/test_mixins/test_hash_commands.py:227: DeprecationWarning: FakeStrictRedis.hmset() is deprecated. Use FakeStrictRedis.hset() instead.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     r.hmset('foo', {})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hmset_redispy4[StrictRedis]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py/test/test_mixins/test_hash_commands.py:233: DeprecationWarning: Redis.hmset() is deprecated. Use Redis.hset() instead.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     assert r.hmset('foo', {'k2': 'v2', 'k3': 'v3'}) is True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hmset_redispy4[FakeStrictRedis]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py/test/test_mixins/test_hash_commands.py:233: DeprecationWarning: FakeStrictRedis.hmset() is deprecated. Use FakeStrictRedis.hset() instead.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     assert r.hmset('foo', {'k2': 'v2', 'k3': 'v3'}) is True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hmset_wrong_type[StrictRedis]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py/test/test_mixins/test_hash_commands.py:239: DeprecationWarning: Redis.hmset() is deprecated. Use Redis.hset() instead.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     r.hmset('foo', {'key': 'value'})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | test/test_mixins/test_hash_commands.py::test_hmset_wrong_type[FakeStrictRedis]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py/test/test_mixins/test_hash_commands.py:239: DeprecationWarning: FakeStrictRedis.hmset() is deprecated. Use FakeStrictRedis.hset() instead.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     r.hmset('foo', {'key': 'value'})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | \n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | - generated xml file: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py/report.xml -\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | =========================== short test summary info ============================\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_connection.py::TestDecodeResponses::test_decode_set[StrictRedis] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_scan.py::test_scan_iter_single_page[StrictRedis] - redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_scan.py::test_scan_iter_multiple_pages[StrictRedis] - AssertionError: assert {b'key:88', b...'key:93', ...} == {b'key:0', b'...'key:13', ...}\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Extra items in the right set:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:48'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:25'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:34'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:17'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:26'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:32'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:5'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:43'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:58'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:45'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:8'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:51'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:44'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:54'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:29'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:65'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:57'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:77'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:15'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:22'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:33'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:3'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:36'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:0'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:50'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:40'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:87'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:42'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:64'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:66'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:71'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:1'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:79'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:86'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:63'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:61'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:70'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:69'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:19'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:21'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:75'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:68'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:74'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:2'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:82'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:12'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:41'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:4'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:56'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:83'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:49'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:84'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:30'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:10'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:76'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:39'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:81'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:80'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:14'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:55'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:73'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:23'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:72'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:31'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:18'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:53'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:9'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:7'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:38'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:13'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:24'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:28'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:46'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:59'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:60'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:11'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:37'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:16'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:47'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:35'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:85'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:67'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:62'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:78'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:20'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:52'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:27'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:6'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     {\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:0',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:1',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:10',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:11',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:12',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:13',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:14',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:15',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:16',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:17',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:18',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:19',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:2',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:20',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:21',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:22',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:23',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:24',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:25',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:26',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:27',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:28',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:29',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:3',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:30',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:31',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:32',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:33',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:34',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:35',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:36',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:37',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:38',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:39',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:4',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:40',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:41',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:42',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:43',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:44',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:45',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:46',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:47',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:48',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:49',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:5',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:50',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:51',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:52',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:53',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:54',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:55',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:56',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:57',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:58',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:59',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:6',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:60',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:61',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:62',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:63',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:64',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:65',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:66',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:67',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:68',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:69',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:7',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:70',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:71',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:72',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:73',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:74',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:75',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:76',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:77',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:78',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:79',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:8',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:80',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:81',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:82',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:83',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:84',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:85',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:86',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:87',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:88',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:89',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:9',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:90',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:91',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:92',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:93',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:94',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:95',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:96',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:97',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:98',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:99',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     }\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_scan.py::test_scan_iter_multiple_pages_with_match[StrictRedis] - AssertionError: assert {b'key:97', b...8', b'key:99'} == {b'key:0', b'...'key:13', ...}\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Extra items in the right set:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:92'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:90'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:48'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:88'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:25'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:34'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:17'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:26'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:32'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:5'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:43'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:58'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:45'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:8'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:51'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:44'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:54'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:29'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:65'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:57'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:77'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:15'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:22'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:33'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:3'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:89'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:36'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:0'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:50'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:40'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:87'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:42'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:64'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:66'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:71'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:1'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:79'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:86'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:96'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:63'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:61'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:70'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:69'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:19'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:21'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:75'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:95'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:68'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:91'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:74'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:2'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:82'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:12'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:94'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:41'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:4'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:56'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:83'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:93'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:49'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:84'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:30'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:10'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:76'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:39'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:81'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:80'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:14'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:55'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:73'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:23'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:72'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:31'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:18'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:53'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:9'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:7'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:38'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:13'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:24'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:28'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:46'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:59'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:60'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:11'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:37'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:16'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:47'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:35'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:85'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:67'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:62'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:78'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:20'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:52'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:27'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:6'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     {\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:0',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:1',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:10',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:11',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:12',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:13',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:14',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:15',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:16',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:17',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:18',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:19',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:2',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:20',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:21',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:22',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:23',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:24',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:25',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:26',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:27',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:28',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:29',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:3',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:30',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:31',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:32',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:33',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:34',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:35',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:36',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:37',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:38',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:39',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:4',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:40',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:41',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:42',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:43',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:44',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:45',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:46',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:47',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:48',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:49',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:5',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:50',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:51',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:52',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:53',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:54',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:55',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:56',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:57',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:58',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:59',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:6',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:60',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:61',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:62',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:63',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:64',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:65',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:66',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:67',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:68',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:69',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:7',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:70',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:71',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:72',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:73',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:74',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:75',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:76',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:77',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:78',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:79',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:8',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:80',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:81',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:82',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:83',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:84',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:85',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:86',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:87',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:88',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:89',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:9',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:90',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:91',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:92',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:93',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:94',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:95',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:96',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:97',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:98',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:99',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     }\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_scan.py::test_scan_multiple_pages_with_count_arg[StrictRedis] - AssertionError: assert {b'key:65', b...'key:70', ...} == {b'key:0', b'...'key:13', ...}\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Extra items in the right set:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:48'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:49'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:30'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:25'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:34'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:17'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:10'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:26'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:39'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:14'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:32'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:55'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:5'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:43'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:58'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:45'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:23'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:8'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:51'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:44'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:54'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:31'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:29'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:18'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:57'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:53'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:15'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:22'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:33'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:3'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:56'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:36'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:9'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:7'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:0'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:50'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:38'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:40'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:42'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:64'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:1'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:13'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:24'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:28'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:63'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:61'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:46'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:59'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:60'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:11'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:37'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:19'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:21'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:16'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:47'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:35'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:62'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:2'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:20'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:52'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:12'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:27'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:41'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:4'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:6'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     {\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:0',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:1',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:10',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:11',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:12',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:13',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:14',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:15',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:16',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:17',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:18',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:19',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:2',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:20',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:21',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:22',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:23',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:24',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:25',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:26',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:27',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:28',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:29',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:3',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:30',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:31',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:32',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:33',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:34',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:35',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:36',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:37',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:38',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:39',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:4',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:40',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:41',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:42',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:43',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:44',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:45',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:46',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:47',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:48',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:49',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:5',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:50',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:51',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:52',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:53',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:54',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:55',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:56',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:57',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:58',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:59',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:6',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:60',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:61',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:62',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:63',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:64',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:65',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:66',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:67',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:68',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:69',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:7',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:70',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:71',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:72',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:73',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:74',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:75',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:76',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:77',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:78',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:79',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:8',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:80',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:81',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:82',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:83',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:84',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:85',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:86',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:87',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:88',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:89',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:9',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:90',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:91',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:92',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:93',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:94',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:95',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:96',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:97',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:98',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:99',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     }\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_scan.py::test_scan_all_in_single_call[StrictRedis] - AssertionError: assert {b'key:10', b...'key:15', ...} == {b'key:0', b'...'key:13', ...}\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Extra items in the right set:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:1'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:2'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:3'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:4'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   b'key:0'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     {\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:0',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:1',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:10',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:11',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:12',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:13',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:14',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:15',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:16',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:17',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:18',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:19',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:2',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:20',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:21',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:22',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:23',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:24',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:25',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:26',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:27',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:28',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:29',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:3',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:30',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:31',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:32',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:33',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:34',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:35',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:36',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:37',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:38',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:39',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'key:4',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:40',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:41',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:42',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:43',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:44',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:45',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:46',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:47',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:48',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:49',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:5',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:50',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:51',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:52',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:53',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:54',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:55',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:56',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:57',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:58',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:59',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:6',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:60',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:61',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:62',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:63',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:64',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:65',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:66',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:67',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:68',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:69',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:7',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:70',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:71',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:72',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:73',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:74',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:75',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:76',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:77',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:78',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:79',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:8',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:80',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:81',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:82',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:83',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:84',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:85',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:86',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:87',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:88',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:89',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:9',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:90',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:91',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:92',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:93',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:94',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:95',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:96',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:97',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:98',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |      b'key:99',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     }\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_zadd.py::test_zadd_with_nx[StrictRedis-True-param1-1-state1] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_zadd.py::test_zadd_with_nx[StrictRedis-True-param2-2-state2] - AssertionError: assert [(b'one', 1.0), (b'two', 2.0)] == [(b'one', 1.0...b'four', 4.0)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Right contains 2 more items, first extra item: (b'three', 3.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   - [(b'one', 1.0), (b'two', 2.0), (b'three', 3.0), (b'four', 4.0)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   + [(b'one', 1.0), (b'two', 2.0)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_zadd.py::test_zadd_with_gt_and_ch[StrictRedis-param0-0-state0] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_zadd.py::test_zadd_with_gt_and_ch[StrictRedis-param1-2-state1] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_zadd.py::test_zadd_with_gt_and_ch[StrictRedis-param2-2-state2] - redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_zadd.py::test_zadd_with_gt[StrictRedis-param0-0-state0] - redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_zadd.py::test_zadd_with_gt[StrictRedis-param1-1-state1] - redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_zadd.py::test_zadd_with_gt[StrictRedis-param2-2-state2] - redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_zadd.py::test_zadd_with_xx_and_gt_and_ch[StrictRedis] - redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_bitmap_commands.py::test_multiple_bits_set[StrictRedis] - AssertionError: assert 0 == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +  where 0 = <bound method BasicKeyCommands.getbit of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 1)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +    where <bound method BasicKeyCommands.getbit of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.getbit\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_generic_commands.py::test_sort_with_hash[StrictRedis] - AssertionError: assert [b'youngest', b'eldest'] == [b'youngest',...e', b'eldest']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   At index 1 diff: b'eldest' != b'middle'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Right contains one more item: b'eldest'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   - [b'youngest', b'middle', b'eldest']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   ?               -----------\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   + [b'youngest', b'eldest']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_generic_commands.py::test_type[StrictRedis] - AssertionError: assert b'none' == b'string'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   At index 0 diff: b'n' != b's'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   - b'string'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   + b'none'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_generic_commands.py::test_watch_persist[StrictRedis] - Failed: DID NOT RAISE <class 'redis.exceptions.WatchError'>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_generic_commands.py::test_basic_sort[StrictRedis] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_generic_commands.py::test_from_hypothesis_redis7[StrictRedis] - AssertionError: assert None == b'\\x00'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +  where None = <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>(b'')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +    where <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.get\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_geo_commands.py::test_geoadd_ch[StrictRedis] - redis.exceptions.ResponseError: syntax error. Try GEOADD key [x1] [y1] [name1] [x2] [y2] [name2] ...\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_geo_commands.py::test_geoadd_xx[StrictRedis] - redis.exceptions.ResponseError: syntax error. Try GEOADD key [x1] [y1] [name1] [x2] [y2] [name2] ...\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_geo_commands.py::test_georadius[StrictRedis-2.187-41.406-1000-extra1-expected1] - AssertionError: assert [] == [b'place2']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Right contains one more item: b'place2'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   - [b'place2']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   + []\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_geo_commands.py::test_georadiusbymember[StrictRedis-place2-1000-extra1-expected1] - AssertionError: assert [] == [b'place2']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Right contains one more item: b'place2'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   - [b'place2']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   + []\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_geo_commands.py::test_georadius_count[StrictRedis] - AssertionError: assert 0 == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +  where 0 = <bound method SortedSetCommands.zcard of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('extract')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +    where <bound method SortedSetCommands.zcard of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.zcard\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_geo_commands.py::test_geosearch[StrictRedis] - redis.exceptions.ResponseError: unknown command `GEOSEARCH`, with args beginning with: `barcelona`, `FROMLONLAT`, `2.191`, `41.433`, `BYRADIUS`, `1000`, `m`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_hash_commands.py::test_hincrbyfloat[StrictRedis] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_hash_commands.py::test_hscan[StrictRedis] - AssertionError: assert 3 == 20\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +  where 3 = len({b'key:17': b'result:17', b'key:18': b'result:18', b'key:19': b'result:19'})\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_hash_commands.py::test_hrandfield[StrictRedis] - redis.exceptions.ResponseError: unknown command `HRANDFIELD`, with args beginning with: `key`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_list_commands.py::test_lpush_then_lrange_all[StrictRedis] - AssertionError: assert 2 == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +  where 2 = <bound method ListCommands.lpush of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 'bar')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +    where <bound method ListCommands.lpush of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.lpush\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_list_commands.py::test_llen[StrictRedis] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_list_commands.py::test_lrem_negative_count[StrictRedis] - AssertionError: assert [b'one', b'two', b'three'] == [b'removeme',...wo', b'three']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   At index 0 diff: b'one' != b'removeme'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Right contains one more item: b'three'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   - [b'removeme', b'one', b'two', b'three']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   ?  -------------\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   + [b'one', b'two', b'three']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_list_commands.py::test_lpop_zero_elem[StrictRedis] - redis.exceptions.ResponseError: wrong number of arguments for 'lpop' command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_list_commands.py::test_lpop_zero_non_existing_list[StrictRedis] - redis.exceptions.ResponseError: wrong number of arguments for 'lpop' command\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_list_commands.py::test_brpop_single_key[StrictRedis] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_list_commands.py::test_lmove_to_nonexistent_destination[StrictRedis] - redis.exceptions.ResponseError: unknown command `LMOVE`, with args beginning with: `foo`, `bar`, `RIGHT`, `LEFT`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_list_commands.py::test_lmove_expiry[StrictRedis] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_list_commands.py::test_lmove[StrictRedis] - redis.exceptions.ResponseError: unknown command `LMOVE`, with args beginning with: `foo`, `bar`, `RIGHT`, `LEFT`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_list_commands.py::test_blmove[StrictRedis] - redis.exceptions.ResponseError: unknown command `BLMOVE`, with args beginning with: `a`, `b`, `LEFT`, `RIGHT`, `5`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_pubsub_commands.py::test_pubsub_help_redis6[StrictRedis] - assert [b'PUBSUB <su...ault: none).'] == [b'PUBSUB <su...l> ...]', ...]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   At index 0 diff: b'PUBSUB <subcommand> arg arg ... arg. Subcommands are:' != b'PUBSUB <subcommand> [<arg> [value] [opt] ...]. Subcommands are:'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Right contains 6 more items, first extra item: b'    Return number of subscriptions to patterns.'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'PUBSUB <subcommand> [<arg> [value] [opt] ...]. Subcommands are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   ?                        --   ^^^^ ^^^^^^^^^^    ^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   +  b'PUBSUB <subcommand> arg arg ... arg. Subcommands are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   ?                           ^ ^^    ^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   +  b'CHANNELS [<pattern>] -- Return the currently active channels matching a patt'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   +  b'ern (default: all).',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'CHANNELS [<pattern>]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b\"    Return the currently active channels matching a <pattern> (default: '*')\"\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'NUMPAT',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'    Return number of subscriptions to patterns.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   ?    ^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   +  b'NUMPAT -- Return number of subscriptions to patterns.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   ?    ^^^^^^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   +  b'NUMSUB [channel-1 .. channel-N] -- Returns the number of subscribers for the'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   +  b' specified channels (excluding patterns, default: none).',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'NUMSUB [<channel> ...]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'    Return the number of subscribers for the specified channels, excluding',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'    pattern subscriptions(default: no channels).',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'HELP',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'    Prints this help.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_scripting.py::test_script_help[StrictRedis] - AssertionError: assert [b'SCRIPT <su...xecuting it.'] == [b'SCRIPT <su...C|SYNC]', ...]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   At index 0 diff: b'SCRIPT <subcommand> arg arg ... arg. Subcommands are:' != b'SCRIPT <subcommand> [<arg> [value] [opt] ...]. Subcommands are:'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Right contains 11 more items, first extra item: b'    Flush the Lua scripts cache. Very dangerous on replicas.'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     [\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'SCRIPT <subcommand> [<arg> [value] [opt] ...]. Subcommands are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   ?                        --   ^^^^ ^^^^^^^^^^    ^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   +  b'SCRIPT <subcommand> arg arg ... arg. Subcommands are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   ?                           ^ ^^    ^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'DEBUG (YES|SYNC|NO)',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'    Set the debug mode for subsequent scripts executed.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   ?    ^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   +  b'DEBUG (yes|sync|no) -- Set the debug mode for subsequent scripts executed.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   ?    ^^^^^^^^^^^^^^^^^^^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   +  b'EXISTS <sha1> [<sha1> ...] -- Return information about the existence of the '\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   +  b'scripts in the script cache.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'EXISTS <sha1> [<sha1> ...]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'    Return information about the existence of the scripts in the script cach'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'e.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'FLUSH [ASYNC|SYNC]',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'    Flush the Lua scripts cache. Very dangerous on replicas.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   ?    ^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   +  b'FLUSH -- Flush the Lua scripts cache. Very dangerous on replicas.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   ?    ^^^^^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'    When called without the optional mode argument, the behavior is determin'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'ed by the',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'    lazyfree-lazy-user-flush configuration directive. Valid modes are:',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'    * ASYNC: Asynchronously flush the scripts cache.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'    * SYNC: Synchronously flush the scripts cache.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'KILL',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'    Kill the currently executing Lua script.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   ?    ^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   +  b'KILL -- Kill the currently executing Lua script.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   ?    ^^^^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'LOAD <script>',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'    Load a script into the scripts cache without executing it.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   ?    ---- ^^^^^^\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   +  b'LOAD <script> -- Load a script into the scripts cache, without executing it.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   ?     ^^^^^      ++++++++++++++++++                       +\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'HELP',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   -  b'    Prints this help.',\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |     ]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_server_commands.py::test_swapdb[StrictRedis] - AssertionError: assert None == b'abc'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +  where None = <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=1>>>>('foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +    where <bound method BasicKeyCommands.get of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=1>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=1>>>.get\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_server_commands.py::test_dbsize[StrictRedis] - assert 1 == 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +  where 1 = <bound method ManagementCommands.dbsize of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>()\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +    where <bound method ManagementCommands.dbsize of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.dbsize\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_set_commands.py::test_smismember[StrictRedis] - redis.exceptions.ResponseError: unknown command `SMISMEMBER`, with args beginning with: `foo`, `member1`, `member2`, `member3`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zrange_with_rev_and_bylex[StrictRedis] - redis.exceptions.ResponseError: value is not an integer or out of range\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zrange_with_bylex[StrictRedis] - redis.exceptions.ResponseError: value is not an integer or out of range\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zrange_with_byscore[StrictRedis] - redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zcard_non_existent_key[StrictRedis] - AssertionError: assert 2 == 0\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +  where 2 = <bound method SortedSetCommands.zcard of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +    where <bound method SortedSetCommands.zcard of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.zcard\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zcard_wrong_type[StrictRedis] - Failed: DID NOT RAISE <class 'redis.exceptions.ResponseError'>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zmscore[StrictRedis] - redis.exceptions.ResponseError: unknown command `ZMSCORE`, with args beginning with: `scored-set-members`, `one`, `two`, `three`, `four`, `five`, `six`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zmscore_missing_members[StrictRedis] - redis.exceptions.ResponseError: unknown command `ZMSCORE`, with args beginning with: `scored-set-members`, `one`, `two`, `three`, `four`, `five`, `six`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zmscore_mixed_membership[StrictRedis] - redis.exceptions.ResponseError: unknown command `ZMSCORE`, with args beginning with: `scored-set-members`, `one`, `two`, `three`, `four`, `five`, `six`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zrevrange_score_cast[StrictRedis] - AssertionError: assert [(b'two', 2.2...'two_b', 0.0)] == [(b'two', 2.2), (b'one', 1.2)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Left contains one more item: (b'two_b', 0.0)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   - [(b'two', 2.2), (b'one', 1.2)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   + [(b'two', 2.2), (b'one', 1.2), (b'two_b', 0.0)]\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   ?                              +++++++++++++++++\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zrangebyscore_slice[StrictRedis] - AssertionError: assert [b'one_a', b'three_a'] == [b'two_a', b'two_b']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   At index 0 diff: b'one_a' != b'two_a'\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   Full diff:\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   - [b'two_a', b'two_b']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |   + [b'one_a', b'three_a']\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zrangebyscore_cast_scores[StrictRedis] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zrevrangebyscore_raises_error[StrictRedis] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zlexcount_wrong_type[StrictRedis] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zrandemember[StrictRedis] - redis.exceptions.ResponseError: unknown command `ZRANDMEMBER`, with args beginning with: `a`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zdiffstore[StrictRedis] - redis.exceptions.ResponseError: unknown command `ZDIFFSTORE`, with args beginning with: `out`, `2`, `a`, `b`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zdiff[StrictRedis] - redis.exceptions.ResponseError: unknown command `ZDIFF`, with args beginning with: `2`, `a`, `b`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zunion[StrictRedis] - redis.exceptions.ResponseError: unknown command `ZUNION`, with args beginning with: `3`, `a`, `b`, `c`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zinter[StrictRedis] - redis.exceptions.ResponseError: unknown command `ZINTER`, with args beginning with: `3`, `a`, `b`, `c`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_sortedset_commands.py::test_zrangestore[StrictRedis] - redis.exceptions.ResponseError: unknown command `ZRANGESTORE`, with args beginning with: `b`, `a`, `0`, `1`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_streams_commands.py::test_xadd_minid[StrictRedis] - redis.exceptions.ResponseError: Invalid stream ID specified as stream command argument\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_streams_commands.py::test_xadd_nomkstream[StrictRedis] - redis.exceptions.ResponseError: Invalid stream ID specified as stream command argument\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_streams_commands.py::test_xgroup_delconsumer[StrictRedis] - redis.exceptions.ResponseError: BUSYGROUP Consumer Group name already exists\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_streams_commands.py::test_xgroup_createconsumer[StrictRedis] - redis.exceptions.ResponseError: Unknown subcommand or wrong number of arguments for 'CREATECONSUMER'. Try XGROUP HELP.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_streams_commands.py::test_xinfo_consumers[StrictRedis] - redis.exceptions.ResponseError: BUSYGROUP Consumer Group name already exists\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_streams_commands.py::test_xreadgroup[StrictRedis] - assert 0 == 1\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +  where 0 = len([])\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_streams_commands.py::test_xack[StrictRedis] - redis.exceptions.ResponseError: no such key\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_streams_commands.py::test_xinfo_stream_full[StrictRedis] - redis.exceptions.ResponseError: Unknown subcommand or wrong number of arguments for 'STREAM'. Try XINFO HELP.\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_streams_commands.py::test_xpending_range_idle[StrictRedis] - redis.exceptions.ResponseError: syntax error\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_streams_commands.py::test_xautoclaim_redis6[StrictRedis] - redis.exceptions.ResponseError: unknown command `XAUTOCLAIM`, with args beginning with: `stream`, `group`, `consumer2`, `0`, `0-0`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_streams_commands.py::test_xclaim[StrictRedis] - redis.exceptions.ResponseError: NOGROUP No such key 'stream' or consumer group 'group' in XREADGROUP with GROUP option\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_string_commands.py::test_append_with_no_preexisting_key[StrictRedis] - AssertionError: assert 4 == 3\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +  where 4 = <bound method BasicKeyCommands.append of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 'bar')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +    where <bound method BasicKeyCommands.append of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.append\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_string_commands.py::test_decr_newkey[StrictRedis] - redis.exceptions.ResponseError: value is not an integer or out of range\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_string_commands.py::test_getdel[StrictRedis] - redis.exceptions.ResponseError: unknown command `GETDEL`, with args beginning with: `foo`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_string_commands.py::test_getdel_doesnt_exist[StrictRedis] - redis.exceptions.ResponseError: unknown command `GETDEL`, with args beginning with: `foo`,\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_string_commands.py::test_incrbyfloat_precision[StrictRedis] - redis.exceptions.ResponseError: WRONGTYPE Operation against a key holding the wrong kind of value\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_string_commands.py::test_set_ex_overflow[StrictRedis] - Failed: DID NOT RAISE <class 'redis.exceptions.ResponseError'>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_string_commands.py::test_set_px_overflow[StrictRedis] - Failed: DID NOT RAISE <class 'redis.exceptions.ResponseError'>\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_string_commands.py::test_setnx[StrictRedis] - AssertionError: assert False\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +  where False = <bound method BasicKeyCommands.setnx of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 'bar')\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +    where <bound method BasicKeyCommands.setnx of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.setnx\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_string_commands.py::test_set_nx[StrictRedis] - AssertionError: assert None is True\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +  where None = <bound method BasicKeyCommands.set of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 'bar', nx=True)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +    where <bound method BasicKeyCommands.set of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.set\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | FAILED test/test_mixins/test_string_commands.py::test_set_xx[StrictRedis] - AssertionError: assert True is None\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +  where True = <bound method BasicKeyCommands.set of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>>('foo', 'bar', xx=True)\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   |  +    where <bound method BasicKeyCommands.set of Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>> = Redis<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>.set\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   | = 85 failed, 1240 passed, 91 skipped, 83 deselected, 2 xfailed, 2 xpassed, 7 warnings in 72.83s (0:01:12) =\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2]   \u274c  Failure - Main Test without coverage\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2] exitcode '1': failure\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ] failed to remove container: Delete \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/b6dff7b5f0afc35380d5634d50963a8b0b86ba0a5210f210f814137aca7d832a?force=1&v=1\": context deadline exceeded\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.7,redis:6.2.12, redis-py:4.3.6,cov:, lupa:, json:\n-1     ] \ud83c\udfc1  Job failed\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2] failed to remove container: Delete \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/d048c502e1ed3f72fd530be6182f6657443bc32570f45b1b1d716ed593e124c7?force=1&v=1\": context deadline exceeded\n[eb2a2a62-a33b-4ff4-8736-e561d932321a/py:3.11,redis:6.2.12, redis-py:4.5.5,cov:, lupa:true, json:\n-2] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Error occurred running finally: Error occurred running finally: context deadline exceeded (original error: <nil>) (original error: <nil>)\n",
        "workflow": {
            "path": "/tmp/558156d8-17ed-11ee-8a50-bb14de238602/cunla-fakeredis-py/.github/workflows/test-crawler.yml",
            "type": "pytest"
        },
        "workflow_name": "eb2a2a62-a33b-4ff4-8736-e561d932321a",
        "build_tool": "pytest",
        "elapsed_time": 520.2656197547913
    }
}