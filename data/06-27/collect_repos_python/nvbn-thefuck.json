{
    "repository": "nvbn/thefuck",
    "stars": 78003,
    "language": "python",
    "size": 4031,
    "clone_url": "https://github.com/nvbn/thefuck.git",
    "timestamp": "2023-07-01T10:19:50.103202Z",
    "clone_success": true,
    "number_of_actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "tests.test_argument_parser",
                "name": "test_parse[argv0-result0]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_argument_parser",
                "name": "test_parse[argv1-result1]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_argument_parser",
                "name": "test_parse[argv2-result2]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_argument_parser",
                "name": "test_parse[argv3-result3]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_argument_parser",
                "name": "test_parse[argv4-result4]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_argument_parser",
                "name": "test_parse[argv5-result5]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_argument_parser",
                "name": "test_parse[argv6-result6]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_argument_parser",
                "name": "test_parse[argv7-result7]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_argument_parser",
                "name": "test_parse[argv8-result8]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_argument_parser",
                "name": "test_parse[argv9-result9]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_argument_parser",
                "name": "test_parse[argv10-result10]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_argument_parser",
                "name": "test_parse[argv11-result11]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_conf",
                "name": "test_settings_defaults",
                "time": 0.101,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_conf.TestSettingsFromFile",
                "name": "test_from_file",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_conf.TestSettingsFromFile",
                "name": "test_from_file_with_DEFAULT",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_conf.TestSettingsFromEnv",
                "name": "test_from_env",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_conf.TestSettingsFromEnv",
                "name": "test_from_env_with_DEFAULT",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_conf",
                "name": "test_settings_from_args",
                "time": 0.026,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_conf.TestInitializeSettingsFile",
                "name": "test_ignore_if_exists",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_conf.TestInitializeSettingsFile",
                "name": "test_create_if_doesnt_exists",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_conf",
                "name": "test_get_user_dir_path[False-~/.config-~/.config/thefuck]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_conf",
                "name": "test_get_user_dir_path[False-/user/test/config/-/user/test/config/thefuck]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_conf",
                "name": "test_get_user_dir_path[True-~/.config-~/.thefuck]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_conf",
                "name": "test_get_user_dir_path[True-/user/test/config/-~/.thefuck]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_corrector.TestGetRules",
                "name": "test_get_rules[paths0-conf_rules0-exclude_rules0-loaded_rules0]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_corrector.TestGetRules",
                "name": "test_get_rules[paths1-conf_rules1-exclude_rules1-loaded_rules1]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_corrector.TestGetRules",
                "name": "test_get_rules[paths2-conf_rules2-exclude_rules2-loaded_rules2]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_corrector.TestGetRules",
                "name": "test_get_rules[paths3-conf_rules3-exclude_rules3-loaded_rules3]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_corrector",
                "name": "test_get_rules_rule_exception",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": "#x1B[41m#x1B[37m#x1B[1m[WARN] Rule git failed to load:#x1B[0m\nTraceback (most recent call last):\n  File \"/tmp/558156d8-17ed-11ee-8a50-bb14de238602/nvbn-thefuck/thefuck/types.py\", line 144, in from_path\n    rule_module = load_source(name, str(path))\n  File \"/opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages/mock/mock.py\", line 1092, in __call__\n    return _mock_self._mock_call(*args, **kwargs)\n  File \"/opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages/mock/mock.py\", line 1143, in _mock_call\n    raise effect\nImportError: No module named foo...\n#x1B[41m#x1B[37m#x1B[1m----------------------------#x1B[0m\n\n"
            },
            {
                "classname": "tests.test_corrector",
                "name": "test_get_corrected_commands",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_corrector",
                "name": "test_organize_commands",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_logs",
                "name": "test_color",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_logs",
                "name": "test_debug[True-DEBUG: test\\n]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_logs",
                "name": "test_debug[False-]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme",
                "name": "test_readme",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestCorrectedCommand",
                "name": "test_equality",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestCorrectedCommand",
                "name": "test_hashable",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestCorrectedCommand",
                "name": "test_representable",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestCorrectedCommand",
                "name": "test_run[git branch-git branch-override_settings0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestCorrectedCommand",
                "name": "test_run[git brunch-git brunch || fuck --repeat --force-command 'git brunch'-override_settings1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestCorrectedCommand",
                "name": "test_run[git brunch-git brunch || fuck --repeat --debug --force-command 'git brunch'-override_settings2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestRule",
                "name": "test_from_path_rule_exception",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": "#x1B[41m#x1B[37m#x1B[1m[WARN] Rule git failed to load:#x1B[0m\nTraceback (most recent call last):\n  File \"/tmp/558156d8-17ed-11ee-8a50-bb14de238602/nvbn-thefuck/thefuck/types.py\", line 144, in from_path\n    rule_module = load_source(name, str(path))\n  File \"/opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages/mock/mock.py\", line 1092, in __call__\n    return _mock_self._mock_call(*args, **kwargs)\n  File \"/opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages/mock/mock.py\", line 1143, in _mock_call\n    raise effect\nImportError: No module named foo...\n#x1B[41m#x1B[37m#x1B[1m----------------------------#x1B[0m\n\n"
            },
            {
                "classname": "tests.test_types.TestRule",
                "name": "test_from_path",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestRule",
                "name": "test_from_path_excluded_rule",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestRule",
                "name": "test_is_enabled[rules0-rule0-True]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestRule",
                "name": "test_is_enabled[rules1-rule1-False]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestRule",
                "name": "test_is_enabled[rules2-rule2-False]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestRule",
                "name": "test_is_enabled[rules3-rule3-False]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestRule",
                "name": "test_is_enabled[rules4-rule4-True]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestRule",
                "name": "test_is_enabled[rules5-rule5-True]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestRule",
                "name": "test_isnt_match",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestRule",
                "name": "test_is_match",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestRule",
                "name": "test_isnt_match_when_rule_failed",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestRule",
                "name": "test_get_corrected_commands_with_rule_returns_list",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestRule",
                "name": "test_get_corrected_commands_with_rule_returns_command",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestCommand",
                "name": "test_from_script_calls",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestCommand",
                "name": "test_from_script[script0-None]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestCommand",
                "name": "test_from_script[script1-None]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestCommand",
                "name": "test_from_script[script2-None]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestCommand",
                "name": "test_from_script[script3-ls -la]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestCommand",
                "name": "test_from_script[script4-ls]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestCommand",
                "name": "test_from_script[script5-echo \\ ]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_types.TestCommand",
                "name": "test_from_script[script6-echo \\\\n]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ui",
                "name": "test_read_actions",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ui",
                "name": "test_command_selector",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ui.TestSelectCommand",
                "name": "test_without_commands",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ui.TestSelectCommand",
                "name": "test_without_confirmation",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ui.TestSelectCommand",
                "name": "test_without_confirmation_with_side_effects",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ui.TestSelectCommand",
                "name": "test_with_confirmation",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ui.TestSelectCommand",
                "name": "test_with_confirmation_abort",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ui.TestSelectCommand",
                "name": "test_with_confirmation_with_side_effct",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ui.TestSelectCommand",
                "name": "test_with_confirmation_select_second",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_default_settings[override0-old0-new0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_default_settings[override1-old1-new1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_default_settings[override2-old2-new2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_memoize",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_no_memoize",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils.TestGetClosest",
                "name": "test_when_can_match",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils.TestGetClosest",
                "name": "test_when_cant_match",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils.TestGetClosest",
                "name": "test_without_fallback",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils.TestGetCloseMatches",
                "name": "test_call_with_n",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils.TestGetCloseMatches",
                "name": "test_call_without_n",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_get_all_executables",
                "time": 0.106,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_get_all_executables_pathsep[/foo:/bar:/baz:/foo/bar-:]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_get_all_executables_pathsep[C:\\\\foo;C:\\\\bar;C:\\\\baz;C:\\\\foo\\\\bar-;]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_get_all_executables_exclude_paths[/foo:/bar:/baz:/foo/bar:/mnt/foo-:-/mnt/foo]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_get_all_executables_exclude_paths[C:\\\\foo;C:\\\\bar;C:\\\\baz;C:\\\\foo\\\\bar;Z:\\\\foo-;-Z:\\\\foo]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_replace_argument[args0-apt-get install vim]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_replace_argument[args1-git branch]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_get_all_matched_commands[git: 'cone' is not a git command. See 'git --help'.\\n\\nDid you mean one of these?\\n\\tclone-result0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_get_all_matched_commands[git: 're' is not a git command. See 'git --help'.\\n\\nDid you mean one of these?\\n\\trebase\\n\\treset\\n\\tgrep\\n\\trm-result1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_get_all_matched_commands[tsuru: \"target\" is not a tsuru command. See \"tsuru help\".\\n\\nDid you mean one of these?\\n\\tservice-add\\n\\tservice-bind\\n\\tservice-doc\\n\\tservice-info\\n\\tservice-list\\n\\tservice-remove\\n\\tservice-status\\n\\tservice-unbind-result2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_is_app[/usr/bin/git diff-names0-True]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_is_app[/bin/hdfs dfs -rm foo-names1-True]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_is_app[git diff-names2-True]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_is_app[hub diff-names3-True]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_is_app[hg diff-names4-False]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_for_app[/usr/bin/git diff-names0-True]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_for_app[/bin/hdfs dfs -rm foo-names1-True]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_for_app[git diff-names2-True]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_for_app[hub diff-names3-True]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_for_app[hg diff-names4-False]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils.TestCache",
                "name": "test_with_blank_cache",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils.TestCache",
                "name": "test_with_filled_cache",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils.TestCache",
                "name": "test_when_etag_changed",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils.TestGetValidHistoryWithoutCurrent",
                "name": "test_get_valid_history_without_current[le cat-result0]",
                "time": 0.024,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils.TestGetValidHistoryWithoutCurrent",
                "name": "test_get_valid_history_without_current[diff x-result1]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils.TestGetValidHistoryWithoutCurrent",
                "name": "test_get_valid_history_without_current[fuck-result2]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils.TestGetValidHistoryWithoutCurrent",
                "name": "test_get_valid_history_without_current[cafe \\xf4-result3]",
                "time": 0.024,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.entrypoints.test_alias",
                "name": "test_get_alias[False-True-True-True]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.entrypoints.test_alias",
                "name": "test_get_alias[False-False-True-False]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.entrypoints.test_alias",
                "name": "test_get_alias[False-True-False-False]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": "#x1B[41m#x1B[37m#x1B[1m[WARN] Instant mode requires `script` app#x1B[0m\n"
            },
            {
                "classname": "tests.entrypoints.test_alias",
                "name": "test_get_alias[True-True-True-False]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": "#x1B[41m#x1B[37m#x1B[1m[WARN] The Fuck will drop Python 2 support soon, more details https://github.com/nvbn/thefuck/issues/685#x1B[0m\n#x1B[41m#x1B[37m#x1B[1m[WARN] Instant mode requires Python 3#x1B[0m\n"
            },
            {
                "classname": "tests.entrypoints.test_alias",
                "name": "test_get_alias[True-True-False-False]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": "#x1B[41m#x1B[37m#x1B[1m[WARN] The Fuck will drop Python 2 support soon, more details https://github.com/nvbn/thefuck/issues/685#x1B[0m\n#x1B[41m#x1B[37m#x1B[1m[WARN] Instant mode requires Python 3#x1B[0m\n"
            },
            {
                "classname": "tests.entrypoints.test_alias",
                "name": "test_get_alias[True-False-True-False]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": "#x1B[41m#x1B[37m#x1B[1m[WARN] The Fuck will drop Python 2 support soon, more details https://github.com/nvbn/thefuck/issues/685#x1B[0m\n"
            },
            {
                "classname": "tests.entrypoints.test_alias",
                "name": "test_print_alias",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": "<MagicMock name='_get_alias()' id='139970633147984'>\n",
                "stderr": null
            },
            {
                "classname": "tests.entrypoints.test_fix_command.TestGetRawCommand",
                "name": "test_from_force_command_argument",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.entrypoints.test_fix_command.TestGetRawCommand",
                "name": "test_from_command_argument",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.entrypoints.test_fix_command.TestGetRawCommand",
                "name": "test_from_history[git br-git br]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.entrypoints.test_fix_command.TestGetRawCommand",
                "name": "test_from_history[git br\\nfcuk-git br]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.entrypoints.test_fix_command.TestGetRawCommand",
                "name": "test_from_history[git br\\nfcuk\\nls-ls]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.entrypoints.test_fix_command.TestGetRawCommand",
                "name": "test_from_history[git br\\nfcuk\\nls\\nfuk-ls]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.entrypoints.test_not_configured",
                "name": "test_for_generic_shell",
                "time": 0.048,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.entrypoints.test_not_configured",
                "name": "test_on_first_run",
                "time": 0.036,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.entrypoints.test_not_configured",
                "name": "test_on_run_after_other_commands",
                "time": 0.043,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.entrypoints.test_not_configured",
                "name": "test_on_first_run_from_current_shell",
                "time": 0.046,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.entrypoints.test_not_configured",
                "name": "test_when_cant_configure_automatically",
                "time": 0.044,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.entrypoints.test_not_configured",
                "name": "test_when_already_configured",
                "time": 0.04,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.entrypoints.test_not_configured",
                "name": "test_when_successfully_configured",
                "time": 0.044,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_bash",
                "name": "test_with_confirmation[proc0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_bash",
                "name": "test_with_confirmation[proc1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_bash",
                "name": "test_with_confirmation[proc2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_bash",
                "name": "test_select_command_with_arrows[proc0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_bash",
                "name": "test_select_command_with_arrows[proc1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_bash",
                "name": "test_select_command_with_arrows[proc2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_bash",
                "name": "test_refuse_with_confirmation[proc0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_bash",
                "name": "test_refuse_with_confirmation[proc1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_bash",
                "name": "test_refuse_with_confirmation[proc2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_bash",
                "name": "test_without_confirmation[proc0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_bash",
                "name": "test_without_confirmation[proc1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_bash",
                "name": "test_without_confirmation[proc2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_bash",
                "name": "test_how_to_configure_alias[proc0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_bash",
                "name": "test_how_to_configure_alias[proc1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_bash",
                "name": "test_how_to_configure_alias[proc2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_fish",
                "name": "test_with_confirmation[proc0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_fish",
                "name": "test_with_confirmation[proc1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_fish",
                "name": "test_select_command_with_arrows[proc0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_fish",
                "name": "test_select_command_with_arrows[proc1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_fish",
                "name": "test_refuse_with_confirmation[proc0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_fish",
                "name": "test_refuse_with_confirmation[proc1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_fish",
                "name": "test_without_confirmation[proc0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_fish",
                "name": "test_without_confirmation[proc1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_tcsh",
                "name": "test_with_confirmation[proc0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_tcsh",
                "name": "test_with_confirmation[proc1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_tcsh",
                "name": "test_select_command_with_arrows[proc0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_tcsh",
                "name": "test_select_command_with_arrows[proc1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_tcsh",
                "name": "test_refuse_with_confirmation[proc0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_tcsh",
                "name": "test_refuse_with_confirmation[proc1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_tcsh",
                "name": "test_without_confirmation[proc0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_tcsh",
                "name": "test_without_confirmation[proc1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_zsh",
                "name": "test_with_confirmation[proc0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_zsh",
                "name": "test_with_confirmation[proc1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_zsh",
                "name": "test_with_confirmation[proc2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_zsh",
                "name": "test_select_command_with_arrows[proc0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_zsh",
                "name": "test_select_command_with_arrows[proc1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_zsh",
                "name": "test_select_command_with_arrows[proc2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_zsh",
                "name": "test_refuse_with_confirmation[proc0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_zsh",
                "name": "test_refuse_with_confirmation[proc1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_zsh",
                "name": "test_refuse_with_confirmation[proc2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_zsh",
                "name": "test_without_confirmation[proc0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_zsh",
                "name": "test_without_confirmation[proc1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_zsh",
                "name": "test_without_confirmation[proc2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_zsh",
                "name": "test_how_to_configure_alias[proc0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_zsh",
                "name": "test_how_to_configure_alias[proc1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.functional.test_zsh",
                "name": "test_how_to_configure_alias[proc2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "functional tests are disabled",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.output_readers.test_rerun.TestRerun",
                "name": "test_get_output",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.output_readers.test_rerun.TestRerun",
                "name": "test_get_output_invalid_continuation_byte",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.output_readers.test_rerun.TestRerun",
                "name": "test_get_output_unicode_misspell",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.output_readers.test_rerun.TestRerun",
                "name": "test_wait_output_is_slow",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.output_readers.test_rerun.TestRerun",
                "name": "test_wait_output_is_not_slow",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.output_readers.test_rerun.TestRerun",
                "name": "test_wait_output_timeout",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.output_readers.test_rerun.TestRerun",
                "name": "test_wait_output_timeout_children",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.output_readers.test_rerun.TestRerun",
                "name": "test_kill_process",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.output_readers.test_rerun.TestRerun",
                "name": "test_kill_process_access_denied",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_adb_unknown_command",
                "name": "test_match[adb lgcat]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_adb_unknown_command",
                "name": "test_match[adb puhs]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_adb_unknown_command",
                "name": "test_not_match[git branch foo]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_adb_unknown_command",
                "name": "test_not_match[abd push]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_adb_unknown_command",
                "name": "test_get_new_command[adb puhs test.bin /sdcard/test.bin-adb push test.bin /sdcard/test.bin]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_adb_unknown_command",
                "name": "test_get_new_command[adb -s 1111 logcta-adb -s 1111 logcat]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_adb_unknown_command",
                "name": "test_get_new_command[adb -P 666 pulll /sdcard/test.bin-adb -P 666 pull /sdcard/test.bin]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_adb_unknown_command",
                "name": "test_get_new_command[adb -d logcatt-adb -d logcat]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_adb_unknown_command",
                "name": "test_get_new_command[adb -e reboott-adb -e reboot]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ag_literal",
                "name": "test_match[ag \\(]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ag_literal",
                "name": "test_not_match[ag foo]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ag_literal",
                "name": "test_get_new_command[ag \\(-ag -Q \\(]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_get",
                "name": "test_match[command0-packages0]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_get",
                "name": "test_match[command1-packages1]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_get",
                "name": "test_match[command2-packages2]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_get",
                "name": "test_not_match[command0-packages0-None]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_get",
                "name": "test_not_match[command1-packages1-None]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_get",
                "name": "test_not_match[command2-packages2-None]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_get",
                "name": "test_not_match[command3-packages3-/usr/bin/vim]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_get",
                "name": "test_not_match[command4-packages4-/usr/bin/vim]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_get",
                "name": "test_get_new_command[command0-sudo apt-get install vim && vim-packages0]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_get",
                "name": "test_get_new_command[command1-sudo apt-get install imagemagick && convert-packages1]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_get",
                "name": "test_get_new_command[command2-sudo apt-get install vim && sudo vim-packages2]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_get",
                "name": "test_get_new_command[command3-sudo apt-get install imagemagick && sudo convert-packages3]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_get_search",
                "name": "test_match",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_get_search",
                "name": "test_not_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_get_search",
                "name": "test_not_match[command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_get_search",
                "name": "test_not_match[command2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_get_search",
                "name": "test_not_match[command3]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_get_search",
                "name": "test_not_match[command4]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_get_search",
                "name": "test_not_match[command5]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_get_search",
                "name": "test_not_match[command6]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_get_search",
                "name": "test_not_match[command7]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_get_search",
                "name": "test_get_new_command",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_invalid_operation",
                "name": "test_match[apt-E: Invalid operation saerch]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_invalid_operation",
                "name": "test_match[apt-get-E: Invalid operation isntall]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_invalid_operation",
                "name": "test_match[apt-cache-E: Invalid operation rumove]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_invalid_operation",
                "name": "test_not_match[vim-E: Invalid operation vim]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_invalid_operation",
                "name": "test_not_match[apt-get-]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_invalid_operation",
                "name": "test_get_operations[apt-apt 1.0.10.2ubuntu1 for amd64 compiled on Oct  5 2015 15:55:05\\nUsage: apt [options] command\\n\\nCLI for apt.\\nBasic commands:\\n list - list packages based on package names\\n search - search in package descriptions\\n show - show package details\\n\\n update - update list of available packages\\n\\n install - install packages\\n remove  - remove packages\\n\\n upgrade - upgrade the system by installing/upgrading packages\\n full-upgrade - upgrade the system by removing/installing/upgrading packages\\n\\n edit-sources - edit the source information file\\n-operations0]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_invalid_operation",
                "name": "test_get_operations[apt-get-apt 1.0.10.2ubuntu1 for amd64 compiled on Oct  5 2015 15:55:05\\nUsage: apt-get [options] command\\n       apt-get [options] install|remove pkg1 [pkg2 ...]\\n       apt-get [options] source pkg1 [pkg2 ...]\\n\\napt-get is a simple command line interface for downloading and\\ninstalling packages. The most frequently used commands are update\\nand install.\\n\\nCommands:\\n   update - Retrieve new lists of packages\\n   upgrade - Perform an upgrade\\n   install - Install new packages (pkg is libc6 not libc6.deb)\\n   remove - Remove packages\\n   autoremove - Remove automatically all unused packages\\n   purge - Remove packages and config files\\n   source - Download source archives\\n   build-dep - Configure build-dependencies for source packages\\n   dist-upgrade - Distribution upgrade, see apt-get(8)\\n   dselect-upgrade - Follow dselect selections\\n   clean - Erase downloaded archive files\\n   autoclean - Erase old downloaded archive files\\n   check - Verify that there are no broken dependencies\\n   changelog - Download and display the changelog for the given package\\n   download - Download the binary package into the current directory\\n\\nOptions:\\n  -h  This help text.\\n  -q  Loggable output - no progress indicator\\n  -qq No output except for errors\\n  -d  Download only - do NOT install or unpack archives\\n  -s  No-act. Perform ordering simulation\\n  -y  Assume Yes to all queries and do not prompt\\n  -f  Attempt to correct a system with broken dependencies in place\\n  -m  Attempt to continue if archives are unlocatable\\n  -u  Show a list of upgraded packages as well\\n  -b  Build the source package after fetching it\\n  -V  Show verbose version numbers\\n  -c=? Read this configuration file\\n  -o=? Set an arbitrary configuration option, eg -o dir::cache=/tmp\\nSee the apt-get(8), sources.list(5) and apt.conf(5) manual\\npages for more information and options.\\n                       This APT has Super Cow Powers.\\n-operations1]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_invalid_operation",
                "name": "test_get_operations[apt-get-apt 1.6.12 (amd64)\\nUsage: apt-get [options] command\\n       apt-get [options] install|remove pkg1 [pkg2 ...]\\n       apt-get [options] source pkg1 [pkg2 ...]\\n\\napt-get is a command line interface for retrieval of packages\\nand information about them from authenticated sources and\\nfor installation, upgrade and removal of packages together\\nwith their dependencies.\\n\\nMost used commands:\\n  update - Retrieve new lists of packages\\n  upgrade - Perform an upgrade\\n  install - Install new packages (pkg is libc6 not libc6.deb)\\n  remove - Remove packages\\n  purge - Remove packages and config files\\n  autoremove - Remove automatically all unused packages\\n  dist-upgrade - Distribution upgrade, see apt-get(8)\\n  dselect-upgrade - Follow dselect selections\\n  build-dep - Configure build-dependencies for source packages\\n  clean - Erase downloaded archive files\\n  autoclean - Erase old downloaded archive files\\n  check - Verify that there are no broken dependencies\\n  source - Download source archives\\n  download - Download the binary package into the current directory\\n  changelog - Download and display the changelog for the given package\\n\\nSee apt-get(8) for more information about the available commands.\\nConfiguration options and syntax is detailed in apt.conf(5).\\nInformation about how to configure sources can be found in sources.list(5).\\nPackage and version choices can be expressed via apt_preferences(5).\\nSecurity details are available in apt-secure(8).\\n                                        This APT has Super Cow Powers.\\n-operations2]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_invalid_operation",
                "name": "test_get_new_command[apt-get isntall vim-E: Invalid operation isntall-apt 1.0.10.2ubuntu1 for amd64 compiled on Oct  5 2015 15:55:05\\nUsage: apt-get [options] command\\n       apt-get [options] install|remove pkg1 [pkg2 ...]\\n       apt-get [options] source pkg1 [pkg2 ...]\\n\\napt-get is a simple command line interface for downloading and\\ninstalling packages. The most frequently used commands are update\\nand install.\\n\\nCommands:\\n   update - Retrieve new lists of packages\\n   upgrade - Perform an upgrade\\n   install - Install new packages (pkg is libc6 not libc6.deb)\\n   remove - Remove packages\\n   autoremove - Remove automatically all unused packages\\n   purge - Remove packages and config files\\n   source - Download source archives\\n   build-dep - Configure build-dependencies for source packages\\n   dist-upgrade - Distribution upgrade, see apt-get(8)\\n   dselect-upgrade - Follow dselect selections\\n   clean - Erase downloaded archive files\\n   autoclean - Erase old downloaded archive files\\n   check - Verify that there are no broken dependencies\\n   changelog - Download and display the changelog for the given package\\n   download - Download the binary package into the current directory\\n\\nOptions:\\n  -h  This help text.\\n  -q  Loggable output - no progress indicator\\n  -qq No output except for errors\\n  -d  Download only - do NOT install or unpack archives\\n  -s  No-act. Perform ordering simulation\\n  -y  Assume Yes to all queries and do not prompt\\n  -f  Attempt to correct a system with broken dependencies in place\\n  -m  Attempt to continue if archives are unlocatable\\n  -u  Show a list of upgraded packages as well\\n  -b  Build the source package after fetching it\\n  -V  Show verbose version numbers\\n  -c=? Read this configuration file\\n  -o=? Set an arbitrary configuration option, eg -o dir::cache=/tmp\\nSee the apt-get(8), sources.list(5) and apt.conf(5) manual\\npages for more information and options.\\n                       This APT has Super Cow Powers.\\n-apt-get install vim]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_invalid_operation",
                "name": "test_get_new_command[apt saerch vim-E: Invalid operation saerch-apt 1.0.10.2ubuntu1 for amd64 compiled on Oct  5 2015 15:55:05\\nUsage: apt [options] command\\n\\nCLI for apt.\\nBasic commands:\\n list - list packages based on package names\\n search - search in package descriptions\\n show - show package details\\n\\n update - update list of available packages\\n\\n install - install packages\\n remove  - remove packages\\n\\n upgrade - upgrade the system by installing/upgrading packages\\n full-upgrade - upgrade the system by removing/installing/upgrading packages\\n\\n edit-sources - edit the source information file\\n-apt search vim]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_invalid_operation",
                "name": "test_get_new_command[apt uninstall vim-E: Invalid operation uninstall-apt 1.0.10.2ubuntu1 for amd64 compiled on Oct  5 2015 15:55:05\\nUsage: apt [options] command\\n\\nCLI for apt.\\nBasic commands:\\n list - list packages based on package names\\n search - search in package descriptions\\n show - show package details\\n\\n update - update list of available packages\\n\\n install - install packages\\n remove  - remove packages\\n\\n upgrade - upgrade the system by installing/upgrading packages\\n full-upgrade - upgrade the system by removing/installing/upgrading packages\\n\\n edit-sources - edit the source information file\\n-apt remove vim]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_list_upgradable",
                "name": "test_match[\\nHit:1 http://us.archive.ubuntu.com/ubuntu zesty InRelease\\nHit:2 http://us.archive.ubuntu.com/ubuntu zesty-updates InRelease\\nGet:3 http://us.archive.ubuntu.com/ubuntu zesty-backports InRelease [89.2 kB]\\nHit:4 http://security.ubuntu.com/ubuntu zesty-security InRelease\\nHit:5 http://ppa.launchpad.net/ubuntu-mozilla-daily/ppa/ubuntu zesty InRelease\\nHit:6 https://download.docker.com/linux/ubuntu zesty InRelease\\nHit:7 https://cli-assets.heroku.com/branches/stable/apt ./ InRelease\\nFetched 89.2 kB in 0s (122 kB/s)\\nReading package lists... Done\\nBuilding dependency tree\\nReading state information... Done\\n8 packages can be upgraded. Run 'apt list --upgradable' to see them.\\n]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_list_upgradable",
                "name": "test_match[F\\xc3\\xbchren Sie \\xc2\\xbbapt list --upgradable\\xc2\\xab aus, um sie anzuzeigen.]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_list_upgradable",
                "name": "test_not_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_list_upgradable",
                "name": "test_not_match[command1]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_list_upgradable",
                "name": "test_not_match[command2]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_list_upgradable",
                "name": "test_not_match[command3]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_list_upgradable",
                "name": "test_not_match[command4]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_list_upgradable",
                "name": "test_not_match[command5]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_list_upgradable",
                "name": "test_not_match[command6]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_list_upgradable",
                "name": "test_not_match[command7]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_list_upgradable",
                "name": "test_not_match[command8]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_list_upgradable",
                "name": "test_get_new_command[\\nHit:1 http://us.archive.ubuntu.com/ubuntu zesty InRelease\\nHit:2 http://us.archive.ubuntu.com/ubuntu zesty-updates InRelease\\nGet:3 http://us.archive.ubuntu.com/ubuntu zesty-backports InRelease [89.2 kB]\\nHit:4 http://security.ubuntu.com/ubuntu zesty-security InRelease\\nHit:5 http://ppa.launchpad.net/ubuntu-mozilla-daily/ppa/ubuntu zesty InRelease\\nHit:6 https://download.docker.com/linux/ubuntu zesty InRelease\\nHit:7 https://cli-assets.heroku.com/branches/stable/apt ./ InRelease\\nFetched 89.2 kB in 0s (122 kB/s)\\nReading package lists... Done\\nBuilding dependency tree\\nReading state information... Done\\n8 packages can be upgraded. Run 'apt list --upgradable' to see them.\\n]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_list_upgradable",
                "name": "test_get_new_command[F\\xc3\\xbchren Sie \\xc2\\xbbapt list --upgradable\\xc2\\xab aus, um sie anzuzeigen.]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_upgrade",
                "name": "test_match",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_upgrade",
                "name": "test_not_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_upgrade",
                "name": "test_not_match[command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_apt_upgrade",
                "name": "test_get_new_command",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_aws_cli",
                "name": "test_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_aws_cli",
                "name": "test_match[command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_aws_cli",
                "name": "test_match[command2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_aws_cli",
                "name": "test_not_match",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_aws_cli",
                "name": "test_get_new_command[command0-result0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_aws_cli",
                "name": "test_get_new_command[command1-result1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_aws_cli",
                "name": "test_get_new_command[command2-result2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_az_cli",
                "name": "test_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_az_cli",
                "name": "test_match[command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_az_cli",
                "name": "test_not_match",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_az_cli",
                "name": "test_get_new_command[command0-result0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_az_cli",
                "name": "test_get_new_command[command1-result1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_cask_dependency",
                "name": "test_match",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_cask_dependency",
                "name": "test_not_match[brew link sshfs-sshfs: OsxfuseRequirement unsatisfied!\\n\\nYou can install with Homebrew-Cask:\\n  brew cask install osxfuse\\n\\nYou can download from:\\n  https://osxfuse.github.io/\\nError: An unsatisfied requirement failed this build.]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_cask_dependency",
                "name": "test_not_match[cat output-sshfs: OsxfuseRequirement unsatisfied!\\n\\nYou can install with Homebrew-Cask:\\n  brew cask install osxfuse\\n\\nYou can download from:\\n  https://osxfuse.github.io/\\nError: An unsatisfied requirement failed this build.]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_cask_dependency",
                "name": "test_not_match[brew install sshfs-]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_cask_dependency",
                "name": "test_get_new_command[brew install sshfs-brew cask install osxfuse && brew install sshfs]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_install",
                "name": "test_suggestions",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_install",
                "name": "test_match",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_install",
                "name": "test_get_new_command",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_link",
                "name": "test_match[brew link coreutils]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_link",
                "name": "test_match[brew ln coreutils]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_link",
                "name": "test_not_match[brew link coreutils]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_link",
                "name": "test_get_new_command[brew link coreutils-coreutils]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_reinstall",
                "name": "test_match",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_reinstall",
                "name": "test_not_match[brew reinstall thefuck]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_reinstall",
                "name": "test_not_match[brew install foo]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_reinstall",
                "name": "test_get_new_command[brew install foo-foo]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_reinstall",
                "name": "test_get_new_command[brew install bar zap-bar zap]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_uninstall",
                "name": "test_match[brew uninstall tbb]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_uninstall",
                "name": "test_match[brew rm tbb]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_uninstall",
                "name": "test_match[brew remove tbb]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_uninstall",
                "name": "test_not_match[brew remove gnuplot]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_uninstall",
                "name": "test_get_new_command[brew uninstall tbb-tbb]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_unknown_command",
                "name": "test_match",
                "time": 0.039,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_unknown_command",
                "name": "test_get_new_command",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_update_formula",
                "name": "test_match",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_update_formula",
                "name": "test_not_match[brew upgrade foo]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_update_formula",
                "name": "test_not_match[brew update]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_update_formula",
                "name": "test_get_new_command[brew update foo-foo]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_brew_update_formula",
                "name": "test_get_new_command[brew update bar zap-bar zap]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cargo_no_command",
                "name": "test_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cargo_no_command",
                "name": "test_match[command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cargo_no_command",
                "name": "test_get_new_command[command0-cargo build]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cargo_no_command",
                "name": "test_get_new_command[command1-cargo build]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cat_dir",
                "name": "test_match[command0]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cat_dir",
                "name": "test_match[command1]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cat_dir",
                "name": "test_match[command2]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cat_dir",
                "name": "test_not_match[command0]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cat_dir",
                "name": "test_not_match[command1]",
                "time": 0.11,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cat_dir",
                "name": "test_not_match[command2]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cat_dir",
                "name": "test_get_new_command[command0-ls foo]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cat_dir",
                "name": "test_get_new_command[command1-ls /foo/bar/]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cat_dir",
                "name": "test_get_new_command[command2-ls cat]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cd_correction",
                "name": "test_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cd_correction",
                "name": "test_match[command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cd_correction",
                "name": "test_match[command2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cd_correction",
                "name": "test_match[command3]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cd_correction",
                "name": "test_not_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cd_correction",
                "name": "test_not_match[command1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cd_cs",
                "name": "test_match",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cd_cs",
                "name": "test_get_new_command",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cd_mkdir",
                "name": "test_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cd_mkdir",
                "name": "test_match[command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cd_mkdir",
                "name": "test_match[command2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cd_mkdir",
                "name": "test_match[command3]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cd_mkdir",
                "name": "test_not_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cd_mkdir",
                "name": "test_not_match[command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cd_mkdir",
                "name": "test_get_new_command[command0-mkdir -p foo && cd foo]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cd_mkdir",
                "name": "test_get_new_command[command1-mkdir -p foo/bar/baz && cd foo/bar/baz]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cd_parent",
                "name": "test_match",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cd_parent",
                "name": "test_get_new_command",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_chmod_x",
                "name": "test_match[./gradlew build-gradlew: Permission denied]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_chmod_x",
                "name": "test_match[./install.sh --help-install.sh: permission denied]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_chmod_x",
                "name": "test_not_match[./gradlew build-gradlew: Permission denied-True-True]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_chmod_x",
                "name": "test_not_match[./gradlew build-gradlew: Permission denied-False-False]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_chmod_x",
                "name": "test_not_match[./gradlew build-gradlew: error-True-False]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_chmod_x",
                "name": "test_not_match[gradlew build-gradlew: Permission denied-True-False]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_chmod_x",
                "name": "test_get_new_command[./gradlew build-chmod +x gradlew && ./gradlew build]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_chmod_x",
                "name": "test_get_new_command[./install.sh --help-chmod +x install.sh && ./install.sh --help]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_choco_install",
                "name": "test_match[command0]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_choco_install",
                "name": "test_match[command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_choco_install",
                "name": "test_match[command2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_choco_install",
                "name": "test_match[command3]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_choco_install",
                "name": "test_match[command4]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_choco_install",
                "name": "test_match[command5]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_choco_install",
                "name": "test_match[command6]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_choco_install",
                "name": "test_match[command7]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_choco_install",
                "name": "test_match[command8]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_choco_install",
                "name": "test_match[command9]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_choco_install",
                "name": "test_get_new_command[choco install logstitcher-choco install logstitcher.install]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_choco_install",
                "name": "test_get_new_command[cinst logstitcher-cinst logstitcher.install]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_choco_install",
                "name": "test_get_new_command[choco install logstitcher -y-choco install logstitcher.install -y]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_choco_install",
                "name": "test_get_new_command[cinst logstitcher -y-cinst logstitcher.install -y]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_choco_install",
                "name": "test_get_new_command[choco install logstitcher -y -n=test-choco install logstitcher.install -y -n=test]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_choco_install",
                "name": "test_get_new_command[cinst logstitcher -y -n=test-cinst logstitcher.install -y -n=test]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_choco_install",
                "name": "test_get_new_command[choco install logstitcher -y -n=test /env-choco install logstitcher.install -y -n=test /env]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_choco_install",
                "name": "test_get_new_command[cinst logstitcher -y -n=test /env-cinst logstitcher.install -y -n=test /env]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_choco_install",
                "name": "test_get_new_command[choco install chocolatey -y-choco install chocolatey.install -y]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_choco_install",
                "name": "test_get_new_command[cinst chocolatey -y-cinst chocolatey.install -y]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_composer_not_command",
                "name": "test_match",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_composer_not_command",
                "name": "test_get_new_command",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_conda_mistype",
                "name": "test_match",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_conda_mistype",
                "name": "test_get_new_command",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cp_create_destination",
                "name": "test_match[cp-cp: directory foo does not exist\\n]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cp_create_destination",
                "name": "test_match[mv-No such file or directory]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cp_create_destination",
                "name": "test_not_match[cp-]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cp_create_destination",
                "name": "test_not_match[mv-]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cp_create_destination",
                "name": "test_not_match[ls-No such file or directory]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cp_create_destination",
                "name": "test_get_new_command[cp foo bar/-cp: directory foo does not exist\\n-mkdir -p bar/ && cp foo bar/]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cp_create_destination",
                "name": "test_get_new_command[mv foo bar/-No such file or directory-mkdir -p bar/ && mv foo bar/]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cp_create_destination",
                "name": "test_get_new_command[cp foo bar/baz/-cp: directory foo does not exist\\n-mkdir -p bar/baz/ && cp foo bar/baz/]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cp_omitting_directory",
                "name": "test_match[cp dir-cp: dor: is a directory]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cp_omitting_directory",
                "name": "test_match[cp dir-cp: omitting directory 'dir']",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cp_omitting_directory",
                "name": "test_not_match[some dir-cp: dor: is a directory]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cp_omitting_directory",
                "name": "test_not_match[some dir-cp: omitting directory 'dir']",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cp_omitting_directory",
                "name": "test_not_match[cp dir-]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_cp_omitting_directory",
                "name": "test_get_new_command",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.Z]",
                "time": 0.028,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.bz2]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.gz]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lz]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lzma]",
                "time": 0.03,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.xz]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.taz]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tb2]",
                "time": 0.047,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz2]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tgz]",
                "time": 0.05,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tlz]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.txz]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tz]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.Z]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.bz2]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.gz]",
                "time": 0.026,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lz]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lzma]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.xz]",
                "time": 0.03,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.taz]",
                "time": 0.03,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tb2]",
                "time": 0.032,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz2]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tgz]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tlz]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.txz]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tz]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.Z]",
                "time": 0.041,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.bz2]",
                "time": 0.044,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.gz]",
                "time": 0.048,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lz]",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lzma]",
                "time": 0.025,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.xz]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.taz]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tb2]",
                "time": 0.04,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz2]",
                "time": 0.021,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tgz]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tlz]",
                "time": 0.039,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.txz]",
                "time": 0.084,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tz]",
                "time": 0.034,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.Z]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.bz2]",
                "time": 0.073,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.gz]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lz]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lzma]",
                "time": 0.031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.xz]",
                "time": 0.021,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.taz]",
                "time": 0.029,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tb2]",
                "time": 0.062,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz2]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tgz]",
                "time": 0.098,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tlz]",
                "time": 0.03,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.txz]",
                "time": 0.027,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tz]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar]",
                "time": 0.048,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.Z]",
                "time": 0.06,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.bz2]",
                "time": 0.066,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.gz]",
                "time": 0.029,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lz]",
                "time": 0.088,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lzma]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.xz]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.taz]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tb2]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz2]",
                "time": 0.074,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tgz]",
                "time": 0.051,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tlz]",
                "time": 0.059,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.txz]",
                "time": 0.032,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tz]",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.Z]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.bz2]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.gz]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lz]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lzma]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.xz]",
                "time": 0.064,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.taz]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tb2]",
                "time": 0.032,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz2]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tgz]",
                "time": 0.075,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tlz]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.txz]",
                "time": 0.039,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tz]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.Z]",
                "time": 0.053,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.bz2]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.gz]",
                "time": 0.025,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lz]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lzma]",
                "time": 0.057,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.xz]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.taz]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tb2]",
                "time": 0.074,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz]",
                "time": 0.061,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz2]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tgz]",
                "time": 0.049,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tlz]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.txz]",
                "time": 0.078,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tz]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.Z]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.bz2]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.gz]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lz]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lzma]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.xz]",
                "time": 0.029,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.taz]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tb2]",
                "time": 0.037,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz2]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tgz]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tlz]",
                "time": 0.05,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.txz]",
                "time": 0.029,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tz]",
                "time": 0.056,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar]",
                "time": 0.035,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.Z]",
                "time": 0.043,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.bz2]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.gz]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lz]",
                "time": 0.038,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lzma]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.xz]",
                "time": 0.036,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.taz]",
                "time": 0.058,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tb2]",
                "time": 0.045,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz]",
                "time": 0.035,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz2]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tgz]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tlz]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.txz]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tz]",
                "time": 0.039,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar]",
                "time": 0.032,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.Z]",
                "time": 0.051,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.bz2]",
                "time": 0.021,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.gz]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lz]",
                "time": 0.04,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lzma]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.xz]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.taz]",
                "time": 0.045,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tb2]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz2]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tgz]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tlz]",
                "time": 0.049,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.txz]",
                "time": 0.024,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tz]",
                "time": 0.085,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar]",
                "time": 0.048,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.Z]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.bz2]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.gz]",
                "time": 0.039,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lz]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lzma]",
                "time": 0.061,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.xz]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.taz]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tb2]",
                "time": 0.079,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz]",
                "time": 0.067,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz2]",
                "time": 0.06,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tgz]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tlz]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.txz]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tz]",
                "time": 0.075,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar]",
                "time": 0.026,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.Z]",
                "time": 0.076,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.bz2]",
                "time": 0.033,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.gz]",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lz]",
                "time": 0.021,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lzma]",
                "time": 0.039,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.xz]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.taz]",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tb2]",
                "time": 0.027,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz2]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tgz]",
                "time": 0.034,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tlz]",
                "time": 0.028,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.txz]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tz]",
                "time": 0.032,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar]",
                "time": 0.056,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.Z]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.bz2]",
                "time": 0.049,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.gz]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lz]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lzma]",
                "time": 0.039,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.xz]",
                "time": 0.049,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.taz]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tb2]",
                "time": 0.043,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz2]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tgz]",
                "time": 0.037,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tlz]",
                "time": 0.036,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.txz]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tz]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.Z]",
                "time": 0.043,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.bz2]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.gz]",
                "time": 0.048,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lz]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lzma]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.xz]",
                "time": 0.034,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.taz]",
                "time": 0.031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tb2]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz2]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tgz]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tlz]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.txz]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tz]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar]",
                "time": 0.073,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.Z]",
                "time": 0.035,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.bz2]",
                "time": 0.031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.gz]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lz]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lzma]",
                "time": 0.028,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.xz]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.taz]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tb2]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz2]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tgz]",
                "time": 0.044,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tlz]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.txz]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tz]",
                "time": 0.049,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.Z]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.bz2]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.gz]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lz]",
                "time": 0.031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lzma]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.xz]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.taz]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tb2]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz2]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tgz]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tlz]",
                "time": 0.058,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.txz]",
                "time": 0.072,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tz]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.Z]",
                "time": 0.035,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.bz2]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.gz]",
                "time": 0.058,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lz]",
                "time": 0.031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lzma]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.xz]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.taz]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tb2]",
                "time": 0.032,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz2]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tgz]",
                "time": 0.033,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tlz]",
                "time": 0.049,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.txz]",
                "time": 0.066,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tz]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar]",
                "time": 0.024,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.Z]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.bz2]",
                "time": 0.024,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.gz]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lz]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lzma]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.xz]",
                "time": 0.024,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.taz]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tb2]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz2]",
                "time": 0.041,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tgz]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tlz]",
                "time": 0.06,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.txz]",
                "time": 0.034,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_untar",
                "name": "test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tz]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_unzip",
                "name": "test_match[unzip caf\\xe9-caf\\xe9.zip]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_unzip",
                "name": "test_match[unzip caf\\xe9.zip-caf\\xe9.zip]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_unzip",
                "name": "test_match[unzip foo-foo.zip]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_unzip",
                "name": "test_match[unzip foo.zip-foo.zip]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_unzip",
                "name": "test_side_effect[unzip caf\\xe9-caf\\xe9.zip]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_unzip",
                "name": "test_side_effect[unzip caf\\xe9.zip-caf\\xe9.zip]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_unzip",
                "name": "test_side_effect[unzip foo-foo.zip]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_unzip",
                "name": "test_side_effect[unzip foo.zip-foo.zip]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_unzip",
                "name": "test_get_new_command[unzip caf\\xe9-unzip caf\\xe9 -d 'caf\\xe9'-caf\\xe9.zip]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_unzip",
                "name": "test_get_new_command[unzip foo-unzip foo -d foo-foo.zip]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_unzip",
                "name": "test_get_new_command[unzip 'foo bar.zip'-unzip 'foo bar.zip' -d 'foo bar'-foo.zip]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dirty_unzip",
                "name": "test_get_new_command[unzip foo.zip-unzip foo.zip -d foo-foo.zip]",
                "time": 0.038,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_django_south_ghost",
                "name": "test_match",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_django_south_ghost",
                "name": "test_get_new_command",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_django_south_merge",
                "name": "test_match",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_django_south_merge",
                "name": "test_get_new_command",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dnf_no_such_command",
                "name": "test_match[No such command: saerch. Please use /usr/bin/dnf --help\\nIt could be a DNF plugin command, try: \"dnf install 'dnf-command(saerch)'\"\\n]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dnf_no_such_command",
                "name": "test_match[No such command: isntall. Please use /usr/bin/dnf --help\\nIt could be a DNF plugin command, try: \"dnf install 'dnf-command(isntall)'\"\\n]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dnf_no_such_command",
                "name": "test_not_match[pip-No such command: isntall. Please use /usr/bin/dnf --help\\nIt could be a DNF plugin command, try: \"dnf install 'dnf-command(isntall)'\"\\n]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dnf_no_such_command",
                "name": "test_not_match[vim-]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dnf_no_such_command",
                "name": "test_get_operations",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dnf_no_such_command",
                "name": "test_get_new_command[dnf isntall vim-No such command: isntall. Please use /usr/bin/dnf --help\\nIt could be a DNF plugin command, try: \"dnf install 'dnf-command(isntall)'\"\\n-dnf install vim]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dnf_no_such_command",
                "name": "test_get_new_command[dnf saerch vim-No such command: saerch. Please use /usr/bin/dnf --help\\nIt could be a DNF plugin command, try: \"dnf install 'dnf-command(saerch)'\"\\n-dnf search vim]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_docker_image_being_used_by_container",
                "name": "test_match",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_docker_image_being_used_by_container",
                "name": "test_not_match",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_docker_image_being_used_by_container",
                "name": "test_not_docker_command",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_docker_image_being_used_by_container",
                "name": "test_get_new_command",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_docker_login",
                "name": "test_match",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_docker_login",
                "name": "test_get_new_command",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_docker_not_command",
                "name": "test_match",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_docker_not_command",
                "name": "test_match_management_cmd[docker swarn-docker: 'swarn' is not a docker command.\\nSee 'docker --help'.]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_docker_not_command",
                "name": "test_match_management_cmd[docker imge-docker: 'imge' is not a docker command.\\nSee 'docker --help'.]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_docker_not_command",
                "name": "test_match_management_subcmd[docker swarm int-\\nUsage:\\tdocker swarm COMMAND\\n\\nManage Swarm\\n\\nCommands:\\n  ca          Display and rotate the root CA\\n  init        Initialize a swarm\\n  join        Join a swarm as a node and/or manager\\n  join-token  Manage join tokens\\n  leave       Leave the swarm\\n  unlock      Unlock swarm\\n  unlock-key  Manage the unlock key\\n  update      Update the swarm\\n\\nRun 'docker swarm COMMAND --help' for more information on a command.\\n]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_docker_not_command",
                "name": "test_match_management_subcmd[docker image la-\\nUsage:\\tdocker image COMMAND\\n\\nManage images\\n\\nCommands:\\n  build       Build an image from a Dockerfile\\n  history     Show the history of an image\\n  import      Import the contents from a tarball to create a filesystem image\\n  inspect     Display detailed information on one or more images\\n  load        Load an image from a tar archive or STDIN\\n  ls          List images\\n  prune       Remove unused images\\n  pull        Pull an image or a repository from a registry\\n  push        Push an image or a repository to a registry\\n  rm          Remove one or more images\\n  save        Save one or more images to a tar archive (streamed to STDOUT by default)\\n  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE\\n\\nRun 'docker image COMMAND --help' for more information on a command.\\n]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_docker_not_command",
                "name": "test_not_match[docker ps-]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_docker_not_command",
                "name": "test_not_match[cat pes-docker: 'pes' is not a docker command.\\nSee 'docker --help'.]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_docker_not_command",
                "name": "test_get_new_command[pes-fixed0]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_docker_not_command",
                "name": "test_get_new_command[tags-fixed1]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_docker_not_command",
                "name": "test_get_new_management_command[swarn-fixed0]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_docker_not_command",
                "name": "test_get_new_management_command[inage-fixed1]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_docker_not_command",
                "name": "test_get_new_management_command_subcommand[swarm int-fixed0-\\nUsage:\\tdocker swarm COMMAND\\n\\nManage Swarm\\n\\nCommands:\\n  ca          Display and rotate the root CA\\n  init        Initialize a swarm\\n  join        Join a swarm as a node and/or manager\\n  join-token  Manage join tokens\\n  leave       Leave the swarm\\n  unlock      Unlock swarm\\n  unlock-key  Manage the unlock key\\n  update      Update the swarm\\n\\nRun 'docker swarm COMMAND --help' for more information on a command.\\n]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_docker_not_command",
                "name": "test_get_new_management_command_subcommand[image la-fixed1-\\nUsage:\\tdocker image COMMAND\\n\\nManage images\\n\\nCommands:\\n  build       Build an image from a Dockerfile\\n  history     Show the history of an image\\n  import      Import the contents from a tarball to create a filesystem image\\n  inspect     Display detailed information on one or more images\\n  load        Load an image from a tar archive or STDIN\\n  ls          List images\\n  prune       Remove unused images\\n  pull        Pull an image or a repository from a registry\\n  push        Push an image or a repository to a registry\\n  rm          Remove one or more images\\n  save        Save one or more images to a tar archive (streamed to STDOUT by default)\\n  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE\\n\\nRun 'docker image COMMAND --help' for more information on a command.\\n]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dry",
                "name": "test_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dry",
                "name": "test_match[command1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dry",
                "name": "test_get_new_command[command0-cd foo]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_dry",
                "name": "test_get_new_command[command1-git push origin/master]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fab_command_not_found",
                "name": "test_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fab_command_not_found",
                "name": "test_match[command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fab_command_not_found",
                "name": "test_match[command2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fab_command_not_found",
                "name": "test_not_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fab_command_not_found",
                "name": "test_not_match[command1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fab_command_not_found",
                "name": "test_get_new_command[fab extenson-fab prepare_extension]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fab_command_not_found",
                "name": "test_get_new_command[fab extenson:version=2016-fab prepare_extension:version=2016]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fab_command_not_found",
                "name": "test_get_new_command[fab extenson:version=2016 install_web set_version:val=0.5.0-fab prepare_extension:version=2016 install_web set_version:val=0.5.0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fab_command_not_found",
                "name": "test_get_new_command[fab extenson:version=2016 deloyp:beta=true -H the.fuck-fab prepare_extension:version=2016 deploy:beta=true -H the.fuck]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_alt_space",
                "name": "test_match",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_alt_space",
                "name": "test_get_new_command",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_match[test0]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_match[test1]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_match[test2]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_match[test3]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_match[test4]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_match[test5]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_match[test6]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_match[test7]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_match[test8]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_match[test9]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_match[test10]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_match[test11]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_match[test12]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_match[test13]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_match[test14]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_match[test15]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_match[test16]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_match[test17]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_match[test18]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_match[test19]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_match[test20]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_match[test21]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_match[test22]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_no_editor[test0]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_no_editor[test1]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_no_editor[test2]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_no_editor[test3]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_no_editor[test4]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_no_editor[test5]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_no_editor[test6]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_no_editor[test7]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_no_editor[test8]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_no_editor[test9]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_no_editor[test10]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_no_editor[test11]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_no_editor[test12]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_no_editor[test13]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_no_editor[test14]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_no_editor[test15]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_no_editor[test16]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_no_editor[test17]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_no_editor[test18]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_no_editor[test19]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_no_editor[test20]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_no_editor[test21]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_no_editor[test22]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_not_file[test0]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_not_file[test1]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_not_file[test2]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_not_file[test3]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_not_file[test4]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_not_file[test5]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_not_file[test6]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_not_file[test7]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_not_file[test8]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_not_file[test9]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_not_file[test10]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_not_file[test11]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_not_file[test12]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_not_file[test13]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_not_file[test14]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_not_file[test15]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_not_file[test16]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_not_file[test17]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_not_file[test18]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_not_file[test19]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_not_file[test20]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_not_file[test21]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_not_file[test22]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command[test0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command[test1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command[test2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command[test3]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command[test4]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command[test5]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command[test6]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command[test7]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command[test8]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command[test9]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command[test10]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command[test11]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command[test12]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command[test13]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command[test14]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command[test15]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command[test16]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command[test17]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command[test18]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command[test19]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command[test20]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command[test21]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command[test22]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command_with_settings[test0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command_with_settings[test1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command_with_settings[test2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command_with_settings[test3]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command_with_settings[test4]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command_with_settings[test5]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command_with_settings[test6]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command_with_settings[test7]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command_with_settings[test8]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command_with_settings[test9]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command_with_settings[test10]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command_with_settings[test11]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command_with_settings[test12]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command_with_settings[test13]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command_with_settings[test14]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command_with_settings[test15]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command_with_settings[test16]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command_with_settings[test17]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command_with_settings[test18]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command_with_settings[test19]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command_with_settings[test20]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command_with_settings[test21]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_fix_file",
                "name": "test_get_new_command_with_settings[test22]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gem_unknown_command",
                "name": "test_match[gem isntall jekyll-isntall]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gem_unknown_command",
                "name": "test_match[gem last --local-last]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gem_unknown_command",
                "name": "test_not_match[gem install jekyll-]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gem_unknown_command",
                "name": "test_not_match[git log-\\nERROR:  While executing gem ... (Gem::CommandLineError)\\n    Unknown command log\\n]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gem_unknown_command",
                "name": "test_get_new_command[gem isntall jekyll-\\nERROR:  While executing gem ... (Gem::CommandLineError)\\n    Unknown command isntall\\n-gem install jekyll]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gem_unknown_command",
                "name": "test_get_new_command[gem last --local-\\nERROR:  While executing gem ... (Gem::CommandLineError)\\n    Unknown command last\\n-gem list --local]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_add",
                "name": "test_match[git submodule update unknown-unknown]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_add",
                "name": "test_match[git commit unknown-unknown]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_add",
                "name": "test_not_match[git submodule update known--True]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_add",
                "name": "test_not_match[git commit known--True]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_add",
                "name": "test_not_match[git submodule update known-output-False]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_add",
                "name": "test_get_new_command[git submodule update unknown-unknown-git add -- unknown && git submodule update unknown]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_add",
                "name": "test_get_new_command[git commit unknown-unknown-git add -- unknown && git commit unknown]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_add_force",
                "name": "test_match",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_add_force",
                "name": "test_get_new_command",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_bisect_usage",
                "name": "test_match[git bisect strt]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_bisect_usage",
                "name": "test_match[git bisect rset]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_bisect_usage",
                "name": "test_match[git bisect goood]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_bisect_usage",
                "name": "test_not_match[git bisect]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_bisect_usage",
                "name": "test_not_match[git bisect start]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_bisect_usage",
                "name": "test_not_match[git bisect good]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_bisect_usage",
                "name": "test_get_new_command[git bisect goood-new_cmd0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_bisect_usage",
                "name": "test_get_new_command[git bisect strt-new_cmd1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_bisect_usage",
                "name": "test_get_new_command[git bisect rset-new_cmd2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_0flag",
                "name": "test_match[git branch 0a]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_0flag",
                "name": "test_match[git branch 0d]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_0flag",
                "name": "test_match[git branch 0f]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_0flag",
                "name": "test_match[git branch 0r]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_0flag",
                "name": "test_match[git branch 0v]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_0flag",
                "name": "test_match[git branch 0d foo]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_0flag",
                "name": "test_match[git branch 0D foo]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_0flag",
                "name": "test_not_match[git branch -a]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_0flag",
                "name": "test_not_match[git branch -r]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_0flag",
                "name": "test_not_match[git branch -v]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_0flag",
                "name": "test_not_match[git branch -d foo]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_0flag",
                "name": "test_not_match[git branch -D foo]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_0flag",
                "name": "test_get_new_command_branch_exists[git branch 0a-git branch -D 0a && git branch -a]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_0flag",
                "name": "test_get_new_command_branch_exists[git branch 0v-git branch -D 0v && git branch -v]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_0flag",
                "name": "test_get_new_command_branch_exists[git branch 0d foo-git branch -D 0d && git branch -d foo]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_0flag",
                "name": "test_get_new_command_branch_exists[git branch 0D foo-git branch -D 0D && git branch -D foo]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_0flag",
                "name": "test_get_new_command_branch_exists[git branch 0l 'maint-*'-git branch -D 0l && git branch -l 'maint-*']",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_0flag",
                "name": "test_get_new_command_branch_exists[git branch 0u upstream-git branch -D 0u && git branch -u upstream]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_0flag",
                "name": "test_get_new_command_not_valid_object[git branch 0l 'maint-*'-git branch -l 'maint-*']",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_0flag",
                "name": "test_get_new_command_not_valid_object[git branch 0u upstream-git branch -u upstream]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_delete",
                "name": "test_match",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_delete",
                "name": "test_get_new_command",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_delete_checked_out",
                "name": "test_match[git branch -d foo]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_delete_checked_out",
                "name": "test_match[git branch -D foo]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_delete_checked_out",
                "name": "test_not_match[git branch -d foo]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_delete_checked_out",
                "name": "test_not_match[git branch -D foo]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_delete_checked_out",
                "name": "test_get_new_command[git branch -d foo-git checkout master && git branch -D foo]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_delete_checked_out",
                "name": "test_get_new_command[git branch -D foo-git checkout master && git branch -D foo]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_exists",
                "name": "test_match[git branch foo-foo-foo]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_exists",
                "name": "test_match[git checkout bar-bar-bar]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_exists",
                "name": "test_match[git checkout -b \"let's-push-this\"-\"let's-push-this\"-\"let's-push-this\"]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_exists",
                "name": "test_not_match[git branch foo]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_exists",
                "name": "test_not_match[git checkout bar]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_exists",
                "name": "test_not_match[git checkout -b \"let's-push-this\"]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_exists",
                "name": "test_get_new_command[git branch foo-foo-foo]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_exists",
                "name": "test_get_new_command[git checkout bar-bar-bar]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_exists",
                "name": "test_get_new_command[git checkout -b \"let's-push-this\"-let's-push-this-let\\'s-push-this]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_list",
                "name": "test_match",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_list",
                "name": "test_not_match",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_branch_list",
                "name": "test_get_new_command",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_checkout",
                "name": "test_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_checkout",
                "name": "test_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_checkout",
                "name": "test_not_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_checkout",
                "name": "test_not_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_checkout",
                "name": "test_not_match[command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_checkout",
                "name": "test_get_branches[-branch_list0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_checkout",
                "name": "test_get_branches[* master-branch_list1]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_checkout",
                "name": "test_get_branches[  remotes/origin/master-branch_list2]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_checkout",
                "name": "test_get_branches[  remotes/origin/test/1-branch_list3]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_checkout",
                "name": "test_get_branches[  remotes/origin/test/1/2/3-branch_list4]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_checkout",
                "name": "test_get_branches[  test/1-branch_list5]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_checkout",
                "name": "test_get_branches[  test/1/2/3-branch_list6]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_checkout",
                "name": "test_get_branches[  remotes/origin/HEAD -> origin/master-branch_list7]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_checkout",
                "name": "test_get_branches[  just-another-branch-branch_list8]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_checkout",
                "name": "test_get_branches[* master\\n  just-another-branch-branch_list9]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_checkout",
                "name": "test_get_branches[* master\\n  remotes/origin/master\\n  just-another-branch-branch_list10]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_checkout",
                "name": "test_get_new_command[-command0-new_command0]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_checkout",
                "name": "test_get_new_command[-command1-new_command1]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_checkout",
                "name": "test_get_new_command[  test-random-branch-123-command2-new_command2]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_checkout",
                "name": "test_get_new_command[  test-random-branch-123-command3-new_command3]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_git_clone",
                "name": "test_match",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_git_clone",
                "name": "test_not_match",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_git_clone",
                "name": "test_get_new_command",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_match[No such file or directory-https://github.com/nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_match[No such file or directory-https://github.com/nvbn/thefuck]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_match[No such file or directory-http://github.com/nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_match[No such file or directory-git@github.com:nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_match[No such file or directory-git@github.com:nvbn/thefuck]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_match[No such file or directory-ssh://git@github.com:nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_match[not found-https://github.com/nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_match[not found-https://github.com/nvbn/thefuck]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_match[not found-http://github.com/nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_match[not found-git@github.com:nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_match[not found-git@github.com:nvbn/thefuck]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_match[not found-ssh://git@github.com:nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_match[is not recognised as-https://github.com/nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_match[is not recognised as-https://github.com/nvbn/thefuck]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_match[is not recognised as-http://github.com/nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_match[is not recognised as-git@github.com:nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_match[is not recognised as-git@github.com:nvbn/thefuck]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_match[is not recognised as-ssh://git@github.com:nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[No such file or directory]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[No such file or directory-notacommand]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[No such file or directory-ssh git@github.com:nvbn/thefrick.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[No such file or directory-git clone foo]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[No such file or directory-git clone https://github.com/nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[No such file or directory-github.com/nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[No such file or directory-github.com:nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[No such file or directory-git clone git clone ssh://git@github.com:nvbn/thefrick.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[No such file or directory-https:/github.com/nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[not found]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[not found-notacommand]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[not found-ssh git@github.com:nvbn/thefrick.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[not found-git clone foo]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[not found-git clone https://github.com/nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[not found-github.com/nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[not found-github.com:nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[not found-git clone git clone ssh://git@github.com:nvbn/thefrick.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[not found-https:/github.com/nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[is not recognised as]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[is not recognised as-notacommand]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[is not recognised as-ssh git@github.com:nvbn/thefrick.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[is not recognised as-git clone foo]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[is not recognised as-git clone https://github.com/nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[is not recognised as-github.com/nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[is not recognised as-github.com:nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[is not recognised as-git clone git clone ssh://git@github.com:nvbn/thefrick.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[is not recognised as-https:/github.com/nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[some other output]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[some other output-notacommand]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[some other output-ssh git@github.com:nvbn/thefrick.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[some other output-git clone foo]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[some other output-git clone https://github.com/nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[some other output-github.com/nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[some other output-github.com:nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[some other output-git clone git clone ssh://git@github.com:nvbn/thefrick.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_not_match[some other output-https:/github.com/nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_get_new_command[No such file or directory-https://github.com/nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_get_new_command[No such file or directory-https://github.com/nvbn/thefuck]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_get_new_command[No such file or directory-http://github.com/nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_get_new_command[No such file or directory-git@github.com:nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_get_new_command[No such file or directory-git@github.com:nvbn/thefuck]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_get_new_command[No such file or directory-ssh://git@github.com:nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_get_new_command[not found-https://github.com/nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_get_new_command[not found-https://github.com/nvbn/thefuck]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_get_new_command[not found-http://github.com/nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_get_new_command[not found-git@github.com:nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_get_new_command[not found-git@github.com:nvbn/thefuck]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_get_new_command[not found-ssh://git@github.com:nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_get_new_command[is not recognised as-https://github.com/nvbn/thefuck.git]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_get_new_command[is not recognised as-https://github.com/nvbn/thefuck]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_get_new_command[is not recognised as-http://github.com/nvbn/thefuck.git]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_get_new_command[is not recognised as-git@github.com:nvbn/thefuck.git]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_get_new_command[is not recognised as-git@github.com:nvbn/thefuck]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_clone_missing",
                "name": "test_get_new_command[is not recognised as-ssh://git@github.com:nvbn/thefuck.git]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_commit_add",
                "name": "test_match[git commit -m \"test\"-no changes added to commit]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_commit_add",
                "name": "test_match[git commit-no changes added to commit]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_commit_add",
                "name": "test_not_match[git commit -m \"test\"- 1 file changed, 15 insertions(+), 14 deletions(-)]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_commit_add",
                "name": "test_not_match[git branch foo-]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_commit_add",
                "name": "test_not_match[git checkout feature/test_commit-]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_commit_add",
                "name": "test_not_match[git push-]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_commit_add",
                "name": "test_get_new_command[git commit-new_command0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_commit_add",
                "name": "test_get_new_command[git commit -m \"foo\"-new_command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_commit_amend",
                "name": "test_match[git commit -m \"test\"-test output]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_commit_amend",
                "name": "test_match[git commit-]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_commit_amend",
                "name": "test_not_match[git branch foo]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_commit_amend",
                "name": "test_not_match[git checkout feature/test_commit]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_commit_amend",
                "name": "test_not_match[git push]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_commit_amend",
                "name": "test_get_new_command[git commit -m \"test commit\"]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_commit_amend",
                "name": "test_get_new_command[git commit]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_commit_reset",
                "name": "test_match[git commit -m \"test\"-test output]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_commit_reset",
                "name": "test_match[git commit-]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_commit_reset",
                "name": "test_not_match[git branch foo]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_commit_reset",
                "name": "test_not_match[git checkout feature/test_commit]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_commit_reset",
                "name": "test_not_match[git push]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_commit_reset",
                "name": "test_get_new_command[git commit -m \"test commit\"]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_commit_reset",
                "name": "test_get_new_command[git commit]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_diff_no_index",
                "name": "test_match[command0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_diff_no_index",
                "name": "test_not_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_diff_no_index",
                "name": "test_not_match[command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_diff_no_index",
                "name": "test_not_match[command2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_diff_no_index",
                "name": "test_get_new_command[command0-git diff --no-index foo bar]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_diff_staged",
                "name": "test_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_diff_staged",
                "name": "test_match[command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_diff_staged",
                "name": "test_not_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_diff_staged",
                "name": "test_not_match[command1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_diff_staged",
                "name": "test_not_match[command2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_diff_staged",
                "name": "test_not_match[command3]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_diff_staged",
                "name": "test_get_new_command[command0-git diff --staged]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_diff_staged",
                "name": "test_get_new_command[command1-git diff --staged foo]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_fix_stash",
                "name": "test_match[git stash opp]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_fix_stash",
                "name": "test_match[git stash Some message]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_fix_stash",
                "name": "test_match[git stash saev Some message]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_fix_stash",
                "name": "test_not_match",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_fix_stash",
                "name": "test_get_new_command[git stash opp-git stash pop]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_fix_stash",
                "name": "test_get_new_command[git stash Some message-git stash save Some message]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_fix_stash",
                "name": "test_get_new_command[git stash saev Some message-git stash save Some message]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_flag_after_filename",
                "name": "test_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_flag_after_filename",
                "name": "test_match[command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_flag_after_filename",
                "name": "test_match[command2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_flag_after_filename",
                "name": "test_match[command3]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_flag_after_filename",
                "name": "test_match[command4]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_flag_after_filename",
                "name": "test_match[command5]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_flag_after_filename",
                "name": "test_not_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_flag_after_filename",
                "name": "test_not_match[command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_flag_after_filename",
                "name": "test_get_new_command[command0-git log -p README.md]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_flag_after_filename",
                "name": "test_get_new_command[command1-git log -p README.md CONTRIBUTING.md]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_flag_after_filename",
                "name": "test_get_new_command[command2-git log -p --name-only README.md]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_flag_after_filename",
                "name": "test_get_new_command[command3-git log -p README.md]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_flag_after_filename",
                "name": "test_get_new_command[command4-git log -p README.md CONTRIBUTING.md]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_flag_after_filename",
                "name": "test_get_new_command[command5-git log -p --name-only README.md]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_help_aliased",
                "name": "test_match[git help st-`git st' is aliased to `status']",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_help_aliased",
                "name": "test_match[git help ds-`git ds' is aliased to `diff --staged']",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_help_aliased",
                "name": "test_not_match[git help status-GIT-STATUS(1)...Git Manual...GIT-STATUS(1)]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_help_aliased",
                "name": "test_not_match[git help diff-GIT-DIFF(1)...Git Manual...GIT-DIFF(1)]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_help_aliased",
                "name": "test_get_new_command[git help st-`git st' is aliased to `status'-git help status]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_help_aliased",
                "name": "test_get_new_command[git help ds-`git ds' is aliased to `diff --staged'-git help diff]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_hook_bypass",
                "name": "test_match[command0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_hook_bypass",
                "name": "test_match[command1]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_hook_bypass",
                "name": "test_match[command2]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_hook_bypass",
                "name": "test_match[command3]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_hook_bypass",
                "name": "test_match[command4]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_hook_bypass",
                "name": "test_not_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_hook_bypass",
                "name": "test_not_match[command1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_hook_bypass",
                "name": "test_not_match[command2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_hook_bypass",
                "name": "test_get_new_command[command0-git am --no-verify]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_hook_bypass",
                "name": "test_get_new_command[command1-git commit --no-verify]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_hook_bypass",
                "name": "test_get_new_command[command2-git commit --no-verify -m 'foo bar']",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_hook_bypass",
                "name": "test_get_new_command[command3-git push --no-verify]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_hook_bypass",
                "name": "test_get_new_command[command4-git push --no-verify -p]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_lfs_mistype",
                "name": "test_match",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_lfs_mistype",
                "name": "test_get_new_command",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_main_master",
                "name": "test_match[git checkout main-main]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_main_master",
                "name": "test_match[git checkout master-master]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_main_master",
                "name": "test_match[git show main-main]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_main_master",
                "name": "test_not_match[git checkout master-]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_main_master",
                "name": "test_not_match[git checkout main-]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_main_master",
                "name": "test_not_match[git checkout wibble-wibble]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_main_master",
                "name": "test_get_new_command[git checkout main-main-git checkout master]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_main_master",
                "name": "test_get_new_command[git checkout master-master-git checkout main]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_main_master",
                "name": "test_get_new_command[git checkout wibble-wibble-git checkout wibble]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_merge",
                "name": "test_match",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_merge",
                "name": "test_get_new_command[command0-git merge remote/local]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_merge",
                "name": "test_get_new_command[command1-git merge -m \"test\" remote/local]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_merge",
                "name": "test_get_new_command[command2-git merge -m \"test local\" remote/local]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_merge_unrelated",
                "name": "test_match",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_merge_unrelated",
                "name": "test_get_new_command[command0-git merge local --allow-unrelated-histories]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_merge_unrelated",
                "name": "test_get_new_command[command1-git merge -m \"test\" local --allow-unrelated-histories]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_merge_unrelated",
                "name": "test_get_new_command[command2-git merge -m \"test local\" local --allow-unrelated-histories]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_not_command",
                "name": "test_match",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_not_command",
                "name": "test_get_new_command",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_pull",
                "name": "test_match",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_pull",
                "name": "test_get_new_command",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_pull_clone",
                "name": "test_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_pull_clone",
                "name": "test_get_new_command[command0-git clone git@github.com:mcarton/thefuck.git]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_pull_uncommitted_changes",
                "name": "test_match",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_pull_uncommitted_changes",
                "name": "test_get_new_command",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_pull_unstaged_changes",
                "name": "test_match",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_pull_unstaged_changes",
                "name": "test_get_new_command",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push",
                "name": "test_match[git push-master]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push",
                "name": "test_match[git push origin-master]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push",
                "name": "test_match_bitbucket",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push",
                "name": "test_not_match[git push master-None]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push",
                "name": "test_not_match[ls-master]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push",
                "name": "test_get_new_command[git push-master-git push --set-upstream origin master]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push",
                "name": "test_get_new_command[git push master-master-git push --set-upstream origin master]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push",
                "name": "test_get_new_command[git push -u-master-git push --set-upstream origin master]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push",
                "name": "test_get_new_command[git push -u origin-master-git push --set-upstream origin master]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push",
                "name": "test_get_new_command[git push origin-master-git push --set-upstream origin master]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push",
                "name": "test_get_new_command[git push --set-upstream origin-master-git push --set-upstream origin master]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push",
                "name": "test_get_new_command[git push --quiet-master-git push --set-upstream origin master --quiet]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push",
                "name": "test_get_new_command[git push --quiet origin-master-git push --set-upstream origin master --quiet]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push",
                "name": "test_get_new_command[git -c test=test push --quiet origin-master-git -c test=test push --set-upstream origin master --quiet]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push",
                "name": "test_get_new_command[git push-test's-git push --set-upstream origin test\\'s]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push",
                "name": "test_get_new_command[git push --force-master-git push --set-upstream origin master --force]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push",
                "name": "test_get_new_command[git push --force-with-lease-master-git push --set-upstream origin master --force-with-lease]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_different_branch_names",
                "name": "test_match",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_different_branch_names",
                "name": "test_not_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_different_branch_names",
                "name": "test_not_match[command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_different_branch_names",
                "name": "test_not_match[command2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_different_branch_names",
                "name": "test_get_new_command",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_force",
                "name": "test_match[command0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_force",
                "name": "test_match[command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_force",
                "name": "test_match[command2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_force",
                "name": "test_not_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_force",
                "name": "test_not_match[command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_force",
                "name": "test_not_match[command2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_force",
                "name": "test_not_match[command3]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_force",
                "name": "test_not_match[command4]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_force",
                "name": "test_not_match[command5]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_force",
                "name": "test_get_new_command[command0-git push --force-with-lease]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_force",
                "name": "test_get_new_command[command1-git push --force-with-lease nvbn]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_force",
                "name": "test_get_new_command[command2-git push --force-with-lease nvbn master]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_pull",
                "name": "test_match[command0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_pull",
                "name": "test_match[command1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_pull",
                "name": "test_match[command2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_pull",
                "name": "test_match[command3]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_pull",
                "name": "test_match[command4]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_pull",
                "name": "test_match[command5]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_pull",
                "name": "test_not_match[command0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_pull",
                "name": "test_not_match[command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_pull",
                "name": "test_not_match[command2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_pull",
                "name": "test_not_match[command3]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_pull",
                "name": "test_not_match[command4]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_pull",
                "name": "test_not_match[command5]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_pull",
                "name": "test_get_new_command[command0-git pull && git push]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_pull",
                "name": "test_get_new_command[command1-git pull nvbn && git push nvbn]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_pull",
                "name": "test_get_new_command[command2-git pull nvbn master && git push nvbn master]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_pull",
                "name": "test_get_new_command[command3-git pull && git push]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_pull",
                "name": "test_get_new_command[command4-git pull nvbn && git push nvbn]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_pull",
                "name": "test_get_new_command[command5-git pull nvbn master && git push nvbn master]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_without_commits",
                "name": "test_match",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_without_commits",
                "name": "test_not_match",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_push_without_commits",
                "name": "test_get_new_command",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rebase_merge_dir",
                "name": "test_match[git rebase master]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rebase_merge_dir",
                "name": "test_match[git rebase -skip]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rebase_merge_dir",
                "name": "test_match[git rebase]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rebase_merge_dir",
                "name": "test_not_match[git rebase master]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rebase_merge_dir",
                "name": "test_not_match[git rebase -abort]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rebase_merge_dir",
                "name": "test_get_new_command[git rebase master-result0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rebase_merge_dir",
                "name": "test_get_new_command[git rebase -skip-result1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rebase_merge_dir",
                "name": "test_get_new_command[git rebase-result2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rebase_no_changes",
                "name": "test_match",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rebase_no_changes",
                "name": "test_get_new_command",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_remote_delete",
                "name": "test_match",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_remote_delete",
                "name": "test_not_match[command0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_remote_delete",
                "name": "test_not_match[command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_remote_delete",
                "name": "test_not_match[command2]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_remote_delete",
                "name": "test_get_new_command[command0-git remote remove foo]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_remote_delete",
                "name": "test_get_new_command[command1-git remote remove delete]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_remote_seturl_add",
                "name": "test_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_remote_seturl_add",
                "name": "test_not_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_remote_seturl_add",
                "name": "test_not_match[command1]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_remote_seturl_add",
                "name": "test_not_match[command2]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_remote_seturl_add",
                "name": "test_not_match[command3]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_remote_seturl_add",
                "name": "test_not_match[command4]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_remote_seturl_add",
                "name": "test_get_new_command[command0-git remote add origin git@github.com:nvbn/thefuck.git]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rm_local_modifications",
                "name": "test_match[git rm foo-foo]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rm_local_modifications",
                "name": "test_match[git rm foo bar-bar]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rm_local_modifications",
                "name": "test_not_match[git rm foo]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rm_local_modifications",
                "name": "test_not_match[git rm foo bar]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rm_local_modifications",
                "name": "test_not_match[git rm]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rm_local_modifications",
                "name": "test_get_new_command[git rm foo-foo-new_command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rm_local_modifications",
                "name": "test_get_new_command[git rm foo bar-bar-new_command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rm_recursive",
                "name": "test_match[git rm foo-foo]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rm_recursive",
                "name": "test_match[git rm foo bar-foo bar]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rm_recursive",
                "name": "test_not_match[git rm foo]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rm_recursive",
                "name": "test_not_match[git rm foo bar]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rm_recursive",
                "name": "test_get_new_command[git rm foo-foo-git rm -r foo]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rm_recursive",
                "name": "test_get_new_command[git rm foo bar-foo bar-git rm -r foo bar]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rm_staged",
                "name": "test_match[git rm foo-foo]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rm_staged",
                "name": "test_match[git rm foo bar-bar]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rm_staged",
                "name": "test_not_match[git rm foo]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rm_staged",
                "name": "test_not_match[git rm foo bar]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rm_staged",
                "name": "test_not_match[git rm]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rm_staged",
                "name": "test_get_new_command[git rm foo-foo-new_command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_rm_staged",
                "name": "test_get_new_command[git rm foo bar-bar-new_command1]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_stash",
                "name": "test_match[command0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_stash",
                "name": "test_match[command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_stash",
                "name": "test_not_match[command0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_stash",
                "name": "test_not_match[command1]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_stash",
                "name": "test_get_new_command[command0-git stash && git cherry-pick a1b2c3d]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_stash",
                "name": "test_get_new_command[command1-git stash && git rebase -i HEAD~7]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_stash_pop",
                "name": "test_match",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_stash_pop",
                "name": "test_get_new_command",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_tag_force",
                "name": "test_match",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_tag_force",
                "name": "test_get_new_command",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_two_dashes",
                "name": "test_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_two_dashes",
                "name": "test_match[command1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_two_dashes",
                "name": "test_match[command2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_two_dashes",
                "name": "test_match[command3]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_two_dashes",
                "name": "test_match[command4]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_two_dashes",
                "name": "test_not_match[command0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_two_dashes",
                "name": "test_not_match[command1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_two_dashes",
                "name": "test_not_match[command2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_two_dashes",
                "name": "test_not_match[command3]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_two_dashes",
                "name": "test_not_match[command4]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_two_dashes",
                "name": "test_get_new_command[command0-git add --patch]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_two_dashes",
                "name": "test_get_new_command[command1-git checkout --patch]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_two_dashes",
                "name": "test_get_new_command[command2-git checkout --patch]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_two_dashes",
                "name": "test_get_new_command[command3-git init --bare]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_two_dashes",
                "name": "test_get_new_command[command4-git commit --amend]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_two_dashes",
                "name": "test_get_new_command[command5-git push --tags]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_git_two_dashes",
                "name": "test_get_new_command[command6-git rebase --continue]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_go_run",
                "name": "test_match[command0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_go_run",
                "name": "test_match[command1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_go_run",
                "name": "test_get_new_command[command0-go run foo.go]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_go_run",
                "name": "test_get_new_command[command1-go run bar.go]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_go_unknown_command",
                "name": "test_match",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_go_unknown_command",
                "name": "test_not_match",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_go_unknown_command",
                "name": "test_get_new_command",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gradle_not_task",
                "name": "test_match[command0]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gradle_not_task",
                "name": "test_match[command1]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gradle_not_task",
                "name": "test_match[command2]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gradle_not_task",
                "name": "test_match[command3]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gradle_not_task",
                "name": "test_not_match[command0]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gradle_not_task",
                "name": "test_not_match[command1]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gradle_not_task",
                "name": "test_not_match[command2]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gradle_not_task",
                "name": "test_not_match[command3]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gradle_not_task",
                "name": "test_get_new_command[command0-./gradlew assemble]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gradle_not_task",
                "name": "test_get_new_command[command1-./gradlew installDebug]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gradle_not_task",
                "name": "test_get_new_command[command2-gradle assemble]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gradle_not_task",
                "name": "test_get_new_command[command3-gradle installDebug]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gradle_wrapper",
                "name": "test_match[command0]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gradle_wrapper",
                "name": "test_match[command1]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gradle_wrapper",
                "name": "test_not_match[command0-False-None]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gradle_wrapper",
                "name": "test_not_match[command1-True-/usr/bin/gradle]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gradle_wrapper",
                "name": "test_not_match[command2-True-None]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gradle_wrapper",
                "name": "test_get_new_command[gradle assemble-./gradlew assemble]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gradle_wrapper",
                "name": "test_get_new_command[gradle --help-./gradlew --help]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gradle_wrapper",
                "name": "test_get_new_command[gradle build -c-./gradlew build -c]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grep_arguments_order",
                "name": "test_match[grep test.py test-test]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grep_arguments_order",
                "name": "test_match[grep -lir . test-test]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grep_arguments_order",
                "name": "test_match[egrep test.py test-test]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grep_arguments_order",
                "name": "test_match[egrep -lir . test-test]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grep_arguments_order",
                "name": "test_not_match[cat test.py-grep: test: No such file or directory]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grep_arguments_order",
                "name": "test_not_match[grep test test.py-]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grep_arguments_order",
                "name": "test_not_match[grep -lir test .-]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grep_arguments_order",
                "name": "test_not_match[egrep test test.py-]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grep_arguments_order",
                "name": "test_not_match[egrep -lir test .-]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grep_arguments_order",
                "name": "test_get_new_command[grep test.py test-grep: test: No such file or directory-grep test test.py]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grep_arguments_order",
                "name": "test_get_new_command[grep -lir . test-grep: test: No such file or directory-grep -lir test .]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grep_arguments_order",
                "name": "test_get_new_command[grep . test -lir-grep: test: No such file or directory-grep test -lir .]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grep_arguments_order",
                "name": "test_get_new_command[egrep test.py test-grep: test: No such file or directory-egrep test test.py]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grep_arguments_order",
                "name": "test_get_new_command[egrep -lir . test-grep: test: No such file or directory-egrep -lir test .]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grep_arguments_order",
                "name": "test_get_new_command[egrep . test -lir-grep: test: No such file or directory-egrep test -lir .]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grep_recursive",
                "name": "test_match",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grep_recursive",
                "name": "test_get_new_command",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grunt_task_not_found",
                "name": "test_match[command0]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grunt_task_not_found",
                "name": "test_match[command1]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grunt_task_not_found",
                "name": "test_not_match[command0]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grunt_task_not_found",
                "name": "test_not_match[command1]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grunt_task_not_found",
                "name": "test_get_new_command[command0-grunt default]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grunt_task_not_found",
                "name": "test_get_new_command[command1-grunt compass:all]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_grunt_task_not_found",
                "name": "test_get_new_command[command2-grunt compass:all --color]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gulp_not_task",
                "name": "test_match",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gulp_not_task",
                "name": "test_not_march[gulp serve-]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gulp_not_task",
                "name": "test_not_march[cat srve-[00:41:11] Using gulpfile gulpfile.js\\n[00:41:11] Task 'srve' is not in your gulpfile\\n[00:41:11] Please check the documentation for proper gulpfile formatting\\n]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_gulp_not_task",
                "name": "test_get_new_command",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_has_exists_script",
                "name": "test_match",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_has_exists_script",
                "name": "test_get_new_command",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_heroku_multiple_apps",
                "name": "test_match[pg]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_heroku_multiple_apps",
                "name": "test_not_match[heroku pg-\\n=== HEROKU_POSTGRESQL_TEAL_URL, DATABASE_URL\\nPlan:                  Hobby-basic\\nStatus:                Available\\nConnections:           20/20\\nPG Version:            9.6.4\\nCreated:               2017-01-01 00:00 UTC\\nData Size:             99.9 MB\\nTables:                99\\nRows:                  12345/10000000 (In compliance)\\nFork/Follow:           Unsupported\\nRollback:              Unsupported\\nContinuous Protection: Off\\nAdd-on:                postgresql-round-12345\\n]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_heroku_multiple_apps",
                "name": "test_get_new_command[pg-result0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_heroku_not_command",
                "name": "test_match[log]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_heroku_not_command",
                "name": "test_not_match[cat log-\\n \\xe2\\x96\\xb8    log is not a heroku command.\\n \\xe2\\x96\\xb8    Perhaps you meant logs?\\n \\xe2\\x96\\xb8    Run heroku _ to run heroku logs.\\n \\xe2\\x96\\xb8    Run heroku help for a list of available commands.]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_heroku_not_command",
                "name": "test_get_new_command[log-heroku logs]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_history",
                "name": "test_match[ls cet]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_history",
                "name": "test_match[daff x]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_history",
                "name": "test_not_match[apt-get]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_history",
                "name": "test_not_match[nocommand y]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_history",
                "name": "test_get_new_command[ls cet-ls cat]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_history",
                "name": "test_get_new_command[daff x-diff x]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_hostscli",
                "name": "test_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_hostscli",
                "name": "test_get_new_command[command0-result0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ifconfig_device_not_found",
                "name": "test_match[ifconfig wlan0-wlan0: error fetching interface information: Device not found]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ifconfig_device_not_found",
                "name": "test_match[ifconfig -s eth0-eth0: error fetching interface information: Device not found]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ifconfig_device_not_found",
                "name": "test_not_match[config wlan0-wlan0: error fetching interface information: Device not found]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ifconfig_device_not_found",
                "name": "test_not_match[ifconfig eth0-]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ifconfig_device_not_found",
                "name": "test_get_new_comman[ifconfig wlan0-result0]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ifconfig_device_not_found",
                "name": "test_get_new_comman[ifconfig -s wlan0-result1]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_java",
                "name": "test_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_java",
                "name": "test_match[command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_java",
                "name": "test_get_new_command[command0-java foo]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_java",
                "name": "test_get_new_command[command1-java bar]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_javac",
                "name": "test_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_javac",
                "name": "test_match[command1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_javac",
                "name": "test_get_new_command[command0-javac foo.java]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_javac",
                "name": "test_get_new_command[command1-javac bar.java]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_lein_not_task",
                "name": "test_match",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_lein_not_task",
                "name": "test_get_new_command",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ln_no_hard_link",
                "name": "test_match[ln barDir barLink-ln: \\xe2\\x80\\x98barDir\\xe2\\x80\\x99: {}]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ln_no_hard_link",
                "name": "test_match[sudo ln a b-ln: \\xe2\\x80\\x98a\\xe2\\x80\\x99: {}]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ln_no_hard_link",
                "name": "test_match[sudo ln -nbi a b-ln: \\xe2\\x80\\x98a\\xe2\\x80\\x99: {}]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ln_no_hard_link",
                "name": "test_not_match[-]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ln_no_hard_link",
                "name": "test_not_match[ln a b-... hard link]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ln_no_hard_link",
                "name": "test_not_match[sudo ln a b-... hard link]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ln_no_hard_link",
                "name": "test_not_match[a b-hard link not allowed for directory]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ln_no_hard_link",
                "name": "test_get_new_command[ln barDir barLink-ln -s barDir barLink]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ln_no_hard_link",
                "name": "test_get_new_command[sudo ln barDir barLink-sudo ln -s barDir barLink]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ln_no_hard_link",
                "name": "test_get_new_command[sudo ln -nbi a b-sudo ln -s -nbi a b]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ln_no_hard_link",
                "name": "test_get_new_command[ln -nbi a b && ls-ln -s -nbi a b && ls]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ln_no_hard_link",
                "name": "test_get_new_command[ln a ln-ln -s a ln]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ln_no_hard_link",
                "name": "test_get_new_command[sudo ln a ln-sudo ln -s a ln]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ln_s_order",
                "name": "test_not_match[ln dest source-ln: failed to create symbolic link 'source': File exists-True]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ln_s_order",
                "name": "test_not_match[ls -s dest source-ln: failed to create symbolic link 'source': File exists-True]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ln_s_order",
                "name": "test_not_match[ln -s dest source--True]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ln_s_order",
                "name": "test_not_match[ln -s dest source-ln: failed to create symbolic link 'source': File exists-False]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ln_s_order",
                "name": "test_match[ln -s dest source-ln -s source dest]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ln_s_order",
                "name": "test_match[ln dest -s source-ln -s source dest]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ln_s_order",
                "name": "test_match[ln dest source -s-ln source -s dest]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_long_form_help",
                "name": "test_match[Try 'grep --help' for more information.]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_long_form_help",
                "name": "test_not_match",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_long_form_help",
                "name": "test_get_new_command[grep -h-grep --help]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_long_form_help",
                "name": "test_get_new_command[tar -h-tar --help]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_long_form_help",
                "name": "test_get_new_command[docker run -h-docker run --help]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_long_form_help",
                "name": "test_get_new_command[cut -h-cut --help]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ls_all",
                "name": "test_match",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ls_all",
                "name": "test_get_new_command",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ls_lah",
                "name": "test_match",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ls_lah",
                "name": "test_get_new_command",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_man",
                "name": "test_match[command0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_man",
                "name": "test_match[command1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_man",
                "name": "test_match[command2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_man",
                "name": "test_match[command3]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_man",
                "name": "test_match[command4]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_man",
                "name": "test_match[command5]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_man",
                "name": "test_match[command6]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_man",
                "name": "test_not_match[command0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_man",
                "name": "test_not_match[command1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_man",
                "name": "test_get_new_command[command0-new_command0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_man",
                "name": "test_get_new_command[command1-new_command1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_man",
                "name": "test_get_new_command[command2-man 3 read]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_man",
                "name": "test_get_new_command[command3-man 2 read]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_man",
                "name": "test_get_new_command[command4-man -s3 read]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_man",
                "name": "test_get_new_command[command5-man -s2 read]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_man",
                "name": "test_get_new_command[command6-man -s 3 read]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_man",
                "name": "test_get_new_command[command7-man -s 2 read]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_man_no_space",
                "name": "test_match",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_man_no_space",
                "name": "test_get_new_command",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_match[command0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_match[command1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_match[command2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_match[command3]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_match[command4]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_match[command5]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_match[command6]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_not_match[command0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_not_match[command1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_not_match[command2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_not_match[command3]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_not_match[command4]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_not_match[command5]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_extract_possibilities[command0-possibilities0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_extract_possibilities[command1-possibilities1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_extract_possibilities[command2-possibilities2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_extract_possibilities[command3-possibilities3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_extract_possibilities[command4-possibilities4]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_extract_possibilities[command5-possibilities5]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_extract_possibilities[command6-possibilities6]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_get_new_command[command0-hg rebase]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_get_new_command[command1-hg branch]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_get_new_command[command2-hg revert]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_get_new_command[command3-hg log -r tip]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_get_new_command[command4-hg revert]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_get_new_command[command5-hg rebase]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mercurial",
                "name": "test_get_new_command[command6-hg rebase re]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_missing_space_before_subcommand",
                "name": "test_match[gitbranch]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_missing_space_before_subcommand",
                "name": "test_match[ls-la]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_missing_space_before_subcommand",
                "name": "test_match[npminstall]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_missing_space_before_subcommand",
                "name": "test_match[watchls]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_missing_space_before_subcommand",
                "name": "test_not_match[git branch]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_missing_space_before_subcommand",
                "name": "test_not_match[vimfile]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_missing_space_before_subcommand",
                "name": "test_get_new_command[gitbranch-git branch]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_missing_space_before_subcommand",
                "name": "test_get_new_command[ls-la-ls -la]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_missing_space_before_subcommand",
                "name": "test_get_new_command[npminstall webpack-npm install webpack]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_missing_space_before_subcommand",
                "name": "test_get_new_command[watchls-watch ls]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mkdir_p",
                "name": "test_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mkdir_p",
                "name": "test_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mkdir_p",
                "name": "test_match[command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mkdir_p",
                "name": "test_not_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mkdir_p",
                "name": "test_not_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mkdir_p",
                "name": "test_not_match[command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mkdir_p",
                "name": "test_not_match[command3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mkdir_p",
                "name": "test_not_match[command4]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mkdir_p",
                "name": "test_get_new_command[command0-mkdir -p foo/bar/baz]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mkdir_p",
                "name": "test_get_new_command[command1-hdfs dfs -mkdir -p foo/bar/baz]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mkdir_p",
                "name": "test_get_new_command[command2-./bin/hdfs dfs -mkdir -p foo/bar/baz]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mvn_no_command",
                "name": "test_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mvn_no_command",
                "name": "test_not_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mvn_no_command",
                "name": "test_not_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mvn_no_command",
                "name": "test_not_match[command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mvn_no_command",
                "name": "test_get_new_command[command0-new_command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mvn_no_command",
                "name": "test_get_new_command[command1-new_command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mvn_unknown_lifecycle_phase",
                "name": "test_match[command0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mvn_unknown_lifecycle_phase",
                "name": "test_not_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mvn_unknown_lifecycle_phase",
                "name": "test_not_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mvn_unknown_lifecycle_phase",
                "name": "test_not_match[command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mvn_unknown_lifecycle_phase",
                "name": "test_get_new_command[command0-new_command0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_mvn_unknown_lifecycle_phase",
                "name": "test_get_new_command[command1-new_command1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_nixos_cmd_not_found",
                "name": "test_match[command0]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_nixos_cmd_not_found",
                "name": "test_not_match[command0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_nixos_cmd_not_found",
                "name": "test_not_match[command1]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_nixos_cmd_not_found",
                "name": "test_get_new_command[command0-nix-env -iA nixos.vim && vim]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_nixos_cmd_not_found",
                "name": "test_get_new_command[command1-nix-env -iA nixos.pacman && pacman]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_no_command",
                "name": "test_match[vom file.py-vom: not found]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_no_command",
                "name": "test_match[fucck-fucck: not found]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_no_command",
                "name": "test_match[puthon-'puthon' is not recognized as an internal or external command]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_no_command",
                "name": "test_match[got commit-got: command not found]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_no_command",
                "name": "test_match[gti commit -m \"new commit\"-gti: command not found]",
                "time": 0.136,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_no_command",
                "name": "test_not_match[qweqwe-qweqwe: not found-None]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_no_command",
                "name": "test_not_match[vom file.py-some text-None]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_no_command",
                "name": "test_not_match[vim file.py-vim: not found-vim]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_no_command",
                "name": "test_get_new_command[vom file.py-result0]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_no_command",
                "name": "test_get_new_command[fucck-result1]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_no_command",
                "name": "test_get_new_command[got commit-result2]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_no_command",
                "name": "test_get_new_command[gti commit -m \"new commit\"-result3]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_no_such_file",
                "name": "test_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_no_such_file",
                "name": "test_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_no_such_file",
                "name": "test_not_match[command0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_no_such_file",
                "name": "test_not_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_no_such_file",
                "name": "test_get_new_command[command0-mkdir -p bar && mv foo bar/foo]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_no_such_file",
                "name": "test_get_new_command[command1-mkdir -p bar && mv foo bar/]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_missing_script",
                "name": "test_match[command0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_missing_script",
                "name": "test_match[command1]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_missing_script",
                "name": "test_match[command2]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_missing_script",
                "name": "test_not_match[command0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_missing_script",
                "name": "test_not_match[command1]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_missing_script",
                "name": "test_not_match[command2]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_missing_script",
                "name": "test_get_new_command[npm ru wach-tests-\\nnpm ERR! Linux 4.4.0-31-generic\\nnpm ERR! argv \"/opt/node/bin/node\" \"/opt/node/bin/npm\" \"run\" \"dvelop\"\\nnpm ERR! node v4.4.7\\nnpm ERR! npm  v2.15.8\\n\\nnpm ERR! missing script: wach-tests\\nnpm ERR!\\nnpm ERR! If you need help, you may report this error at:\\nnpm ERR!     <https://github.com/npm/npm/issues>\\n\\nnpm ERR! Please include the following file with any support request:\\nnpm ERR!     /home/nvbn/exp/code_view/client_web/npm-debug.log\\n-npm ru watch-test]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_missing_script",
                "name": "test_get_new_command[npm -i run-script dvelop-\\nnpm ERR! Linux 4.4.0-31-generic\\nnpm ERR! argv \"/opt/node/bin/node\" \"/opt/node/bin/npm\" \"run\" \"dvelop\"\\nnpm ERR! node v4.4.7\\nnpm ERR! npm  v2.15.8\\n\\nnpm ERR! missing script: dvelop\\nnpm ERR!\\nnpm ERR! If you need help, you may report this error at:\\nnpm ERR!     <https://github.com/npm/npm/issues>\\n\\nnpm ERR! Please include the following file with any support request:\\nnpm ERR!     /home/nvbn/exp/code_view/client_web/npm-debug.log\\n-npm -i run-script develop]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_missing_script",
                "name": "test_get_new_command[npm -i run-script buld -X POST-\\nnpm ERR! Linux 4.4.0-31-generic\\nnpm ERR! argv \"/opt/node/bin/node\" \"/opt/node/bin/npm\" \"run\" \"dvelop\"\\nnpm ERR! node v4.4.7\\nnpm ERR! npm  v2.15.8\\n\\nnpm ERR! missing script: buld\\nnpm ERR!\\nnpm ERR! If you need help, you may report this error at:\\nnpm ERR!     <https://github.com/npm/npm/issues>\\n\\nnpm ERR! Please include the following file with any support request:\\nnpm ERR!     /home/nvbn/exp/code_view/client_web/npm-debug.log\\n-npm -i run-script build -X POST]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_run_script",
                "name": "test_match[npm watch-test]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_run_script",
                "name": "test_match[npm develop]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_run_script",
                "name": "test_not_match[command0-\\nLifecycle scripts included in code-view-web:\\n  test\\n    jest\\n\\navailable via `npm run-script`:\\n  build\\n    cp node_modules/ace-builds/src-min/ -a resources/ace/ && webpack --progress --colors -p --config ./webpack.production.config.js\\n  develop\\n    cp node_modules/ace-builds/src/ -a resources/ace/ && webpack-dev-server --progress --colors\\n  watch-test\\n    jest --verbose --watch\\n\\n]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_run_script",
                "name": "test_not_match[command1-\\nLifecycle scripts included in code-view-web:\\n  test\\n    jest\\n\\navailable via `npm run-script`:\\n  build\\n    cp node_modules/ace-builds/src-min/ -a resources/ace/ && webpack --progress --colors -p --config ./webpack.production.config.js\\n  develop\\n    cp node_modules/ace-builds/src/ -a resources/ace/ && webpack-dev-server --progress --colors\\n  watch-test\\n    jest --verbose --watch\\n\\n]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_run_script",
                "name": "test_not_match[command2-\\nLifecycle scripts included in code-view-web:\\n  test\\n    jest\\n\\navailable via `npm run-script`:\\n  build\\n    cp node_modules/ace-builds/src-min/ -a resources/ace/ && webpack --progress --colors -p --config ./webpack.production.config.js\\n  develop\\n    cp node_modules/ace-builds/src/ -a resources/ace/ && webpack-dev-server --progress --colors\\n  watch-test\\n    jest --verbose --watch\\n\\n]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_run_script",
                "name": "test_not_match[command3-\\nLifecycle scripts included in code-view-web:\\n  test\\n    jest\\n\\navailable via `npm run-script`:\\n  build\\n    cp node_modules/ace-builds/src-min/ -a resources/ace/ && webpack --progress --colors -p --config ./webpack.production.config.js\\n  develop\\n    cp node_modules/ace-builds/src/ -a resources/ace/ && webpack-dev-server --progress --colors\\n  watch-test\\n    jest --verbose --watch\\n\\n]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_run_script",
                "name": "test_get_new_command[npm watch-test-npm run-script watch-test]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_run_script",
                "name": "test_get_new_command[npm -i develop-npm run-script -i develop]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_run_script",
                "name": "test_get_new_command[npm -i watch-script --path ..-npm run-script -i watch-script --path ..]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_wrong_command",
                "name": "test_match[npm urgrdae]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_wrong_command",
                "name": "test_match[npm urgrade -g]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_wrong_command",
                "name": "test_match[npm -f urgrade -g]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_wrong_command",
                "name": "test_match[npm urg]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_wrong_command",
                "name": "test_not_match[npm urgrade-]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_wrong_command",
                "name": "test_not_match[npm-\\nUsage: npm <command>\\n\\nwhere <command> is one of:\\n    access, add-user, adduser, apihelp, author, bin, bugs, c,\\n    cache, completion, config, ddp, dedupe, deprecate, dist-tag,\\n    dist-tags, docs, edit, explore, faq, find, find-dupes, get,\\n    help, help-search, home, i, info, init, install, issues, la,\\n    link, list, ll, ln, login, logout, ls, outdated, owner,\\n    pack, ping, prefix, prune, publish, r, rb, rebuild, remove,\\n    repo, restart, rm, root, run-script, s, se, search, set,\\n    show, shrinkwrap, star, stars, start, stop, t, tag, team,\\n    test, tst, un, uninstall, unlink, unpublish, unstar, up,\\n    update, upgrade, v, verison, version, view, whoami\\n\\nnpm <cmd> -h     quick help on <cmd>\\nnpm -l           display full usage info\\nnpm faq          commonly asked questions\\nnpm help <term>  search for help on <term>\\nnpm help npm     involved overview\\n\\nSpecify configs in the ini-formatted file:\\n    /home/nvbn/.npmrc\\nor on the command line via: npm <command> --key value\\nConfig info can be viewed via: npm help config\\n\\nnpm@2.14.7 /opt/node/lib/node_modules/npm\\n]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_wrong_command",
                "name": "test_not_match[test urgrade-\\nUsage: npm <command>\\n\\nwhere <command> is one of:\\n    access, add-user, adduser, apihelp, author, bin, bugs, c,\\n    cache, completion, config, ddp, dedupe, deprecate, dist-tag,\\n    dist-tags, docs, edit, explore, faq, find, find-dupes, get,\\n    help, help-search, home, i, info, init, install, issues, la,\\n    link, list, ll, ln, login, logout, ls, outdated, owner,\\n    pack, ping, prefix, prune, publish, r, rb, rebuild, remove,\\n    repo, restart, rm, root, run-script, s, se, search, set,\\n    show, shrinkwrap, star, stars, start, stop, t, tag, team,\\n    test, tst, un, uninstall, unlink, unpublish, unstar, up,\\n    update, upgrade, v, verison, version, view, whoami\\n\\nnpm <cmd> -h     quick help on <cmd>\\nnpm -l           display full usage info\\nnpm faq          commonly asked questions\\nnpm help <term>  search for help on <term>\\nnpm help npm     involved overview\\n\\nSpecify configs in the ini-formatted file:\\n    /home/nvbn/.npmrc\\nor on the command line via: npm <command> --key value\\nConfig info can be viewed via: npm help config\\n\\nnpm@2.14.7 /opt/node/lib/node_modules/npm\\n]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_wrong_command",
                "name": "test_not_match[npm -e-\\nUsage: npm <command>\\n\\nwhere <command> is one of:\\n    access, add-user, adduser, apihelp, author, bin, bugs, c,\\n    cache, completion, config, ddp, dedupe, deprecate, dist-tag,\\n    dist-tags, docs, edit, explore, faq, find, find-dupes, get,\\n    help, help-search, home, i, info, init, install, issues, la,\\n    link, list, ll, ln, login, logout, ls, outdated, owner,\\n    pack, ping, prefix, prune, publish, r, rb, rebuild, remove,\\n    repo, restart, rm, root, run-script, s, se, search, set,\\n    show, shrinkwrap, star, stars, start, stop, t, tag, team,\\n    test, tst, un, uninstall, unlink, unpublish, unstar, up,\\n    update, upgrade, v, verison, version, view, whoami\\n\\nnpm <cmd> -h     quick help on <cmd>\\nnpm -l           display full usage info\\nnpm faq          commonly asked questions\\nnpm help <term>  search for help on <term>\\nnpm help npm     involved overview\\n\\nSpecify configs in the ini-formatted file:\\n    /home/nvbn/.npmrc\\nor on the command line via: npm <command> --key value\\nConfig info can be viewed via: npm help config\\n\\nnpm@2.14.7 /opt/node/lib/node_modules/npm\\n]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_wrong_command",
                "name": "test_get_new_command[npm urgrade-npm upgrade]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_wrong_command",
                "name": "test_get_new_command[npm -g isntall gulp-npm -g install gulp]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_npm_wrong_command",
                "name": "test_get_new_command[npm isntall -g gulp-npm install -g gulp]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_omnienv_no_such_command",
                "name": "test_match[pyenv globe-globe]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_omnienv_no_such_command",
                "name": "test_match[pyenv intall 3.8.0-intall]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_omnienv_no_such_command",
                "name": "test_match[pyenv list-list]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_omnienv_no_such_command",
                "name": "test_match_goenv_output_quote",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_omnienv_no_such_command",
                "name": "test_not_match[pyenv global-system]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_omnienv_no_such_command",
                "name": "test_not_match[pyenv versions-  3.7.0\\n  3.7.1\\n* 3.7.2\\n]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_omnienv_no_such_command",
                "name": "test_not_match[pyenv install --list-  3.7.0\\n  3.7.1\\n  3.7.2\\n]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_omnienv_no_such_command",
                "name": "test_get_new_command[pyenv globe-globe-pyenv global]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_omnienv_no_such_command",
                "name": "test_get_new_command[pyenv intall 3.8.0-intall-pyenv install 3.8.0]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_omnienv_no_such_command",
                "name": "test_get_new_command[pyenv list-list-pyenv install --list]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_omnienv_no_such_command",
                "name": "test_get_new_command[pyenv remove 3.8.0-remove-pyenv uninstall 3.8.0]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_open",
                "name": "test_is_arg_url[open foo.com]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_open",
                "name": "test_is_arg_url[open foo.edu]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_open",
                "name": "test_is_arg_url[open foo.info]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_open",
                "name": "test_is_arg_url[open foo.io]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_open",
                "name": "test_is_arg_url[open foo.ly]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_open",
                "name": "test_is_arg_url[open foo.me]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_open",
                "name": "test_is_arg_url[open foo.net]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_open",
                "name": "test_is_arg_url[open foo.org]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_open",
                "name": "test_is_arg_url[open foo.se]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_open",
                "name": "test_is_arg_url[open www.foo.ru]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_open",
                "name": "test_not_is_arg_url[open foo]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_open",
                "name": "test_not_is_arg_url[open bar.txt]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_open",
                "name": "test_not_is_arg_url[open egg.doc]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_open",
                "name": "test_match[open foo.com]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_open",
                "name": "test_match[xdg-open foo.com]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_open",
                "name": "test_match[gnome-open foo.com]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_open",
                "name": "test_match[kde-open foo.com]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_open",
                "name": "test_match[open nonest]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_open",
                "name": "test_get_new_command[open foo.io-new_command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_open",
                "name": "test_get_new_command[xdg-open foo.io-new_command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_open",
                "name": "test_get_new_command[gnome-open foo.io-new_command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_open",
                "name": "test_get_new_command[kde-open foo.io-new_command3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_open",
                "name": "test_get_new_command[open nonest-new_command4]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman",
                "name": "test_match[command0]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Skip if pacman is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman",
                "name": "test_match[command1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Skip if pacman is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman",
                "name": "test_match_mocked[command0-extra/gvim 7.4.712-1        \\t/usr/bin/vim\\nextra/gvim-python3 7.4.712-1\\t/usr/bin/vim\\nextra/vim 7.4.712-1         \\t/usr/bin/vim\\nextra/vim-minimal 7.4.712-1 \\t/usr/bin/vim\\nextra/vim-python3 7.4.712-1 \\t/usr/bin/vim]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman",
                "name": "test_match_mocked[command1-extra/gvim 7.4.712-1        \\t/usr/bin/vim\\nextra/gvim-python3 7.4.712-1\\t/usr/bin/vim\\nextra/vim 7.4.712-1         \\t/usr/bin/vim\\nextra/vim-minimal 7.4.712-1 \\t/usr/bin/vim\\nextra/vim-python3 7.4.712-1 \\t/usr/bin/vim]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman",
                "name": "test_not_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman",
                "name": "test_not_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman",
                "name": "test_not_match[command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman",
                "name": "test_not_match[command3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman",
                "name": "test_get_new_command[command0-new_command0]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Skip if pacman is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman",
                "name": "test_get_new_command[command1-new_command1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Skip if pacman is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman",
                "name": "test_get_new_command[command2-new_command2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Skip if pacman is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman",
                "name": "test_get_new_command[command3-new_command3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Skip if pacman is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman",
                "name": "test_get_new_command_mocked[command0-new_command0-extra/gvim 7.4.712-1        \\t/usr/bin/vim\\nextra/gvim-python3 7.4.712-1\\t/usr/bin/vim\\nextra/vim 7.4.712-1         \\t/usr/bin/vim\\nextra/vim-minimal 7.4.712-1 \\t/usr/bin/vim\\nextra/vim-python3 7.4.712-1 \\t/usr/bin/vim]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman",
                "name": "test_get_new_command_mocked[command1-new_command1-extra/gvim 7.4.712-1        \\t/usr/bin/vim\\nextra/gvim-python3 7.4.712-1\\t/usr/bin/vim\\nextra/vim 7.4.712-1         \\t/usr/bin/vim\\nextra/vim-minimal 7.4.712-1 \\t/usr/bin/vim\\nextra/vim-python3 7.4.712-1 \\t/usr/bin/vim]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman",
                "name": "test_get_new_command_mocked[command2-new_command2-extra/imagemagick 6.9.1.0-1\\t/usr/bin/convert]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman",
                "name": "test_get_new_command_mocked[command3-new_command3-core/sudo 1.8.13-13/usr/bin/sudo]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman",
                "name": "test_get_new_command_mocked[command4-new_command4-extra/imagemagick 6.9.1.0-1\\t/usr/bin/convert]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_not_match_good_output[S]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_not_match_good_output[U]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_not_match_good_output[R]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_not_match_good_output[Q]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_not_match_good_output[F]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_not_match_good_output[D]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_not_match_good_output[V]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_not_match_good_output[T]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_not_match_bad_output[a]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_not_match_bad_output[z]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_not_match_bad_output[x]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_not_match_bad_output[c]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_not_match_bad_output[b]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_not_match_bad_output[n]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_not_match_bad_output[m]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_match[s]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_match[u]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_match[r]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_match[q]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_match[f]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_match[d]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_match[v]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_match[t]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_get_new_command[s]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_get_new_command[u]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_get_new_command[r]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_get_new_command[q]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_get_new_command[f]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_get_new_command[d]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_get_new_command[v]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_invalid_option",
                "name": "test_get_new_command[t]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_not_found",
                "name": "test_match[command0]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Skip if pacman is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_not_found",
                "name": "test_match[command1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Skip if pacman is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_not_found",
                "name": "test_match[command2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Skip if pacman is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_not_found",
                "name": "test_match[command3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Skip if pacman is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_not_found",
                "name": "test_match[command4]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Skip if pacman is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_not_found",
                "name": "test_match_mocked[command0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_not_found",
                "name": "test_match_mocked[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_not_found",
                "name": "test_match_mocked[command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_not_found",
                "name": "test_match_mocked[command3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_not_found",
                "name": "test_match_mocked[command4]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_not_found",
                "name": "test_get_new_command[command0-fixed0]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Skip if pacman is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_not_found",
                "name": "test_get_new_command[command1-fixed1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Skip if pacman is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_not_found",
                "name": "test_get_new_command[command2-fixed2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Skip if pacman is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_not_found",
                "name": "test_get_new_command[command3-fixed3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Skip if pacman is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_not_found",
                "name": "test_get_new_command[command4-fixed4]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Skip if pacman is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_not_found",
                "name": "test_get_new_command_mocked[command0-fixed0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_not_found",
                "name": "test_get_new_command_mocked[command1-fixed1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_not_found",
                "name": "test_get_new_command_mocked[command2-fixed2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_not_found",
                "name": "test_get_new_command_mocked[command3-fixed3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pacman_not_found",
                "name": "test_get_new_command_mocked[command4-fixed4]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_path_from_history",
                "name": "test_match[ls project-no such file or directory: project]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_path_from_history",
                "name": "test_match[cd project-can't cd to project]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_path_from_history",
                "name": "test_not_match[myapp cats-no such file or directory: project]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_path_from_history",
                "name": "test_not_match[cd project-]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_path_from_history",
                "name": "test_get_new_command[ls project-no such file or directory: project-ls ~/work/project]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_path_from_history",
                "name": "test_get_new_command[cd java-can't cd to java-cd /opt/java]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_php_s",
                "name": "test_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_php_s",
                "name": "test_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_php_s",
                "name": "test_not_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_php_s",
                "name": "test_not_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_php_s",
                "name": "test_get_new_command[command0-php -S localhost:8000]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_php_s",
                "name": "test_get_new_command[command1-php -t pub -S 0.0.0.0:8080]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pip_install",
                "name": "test_match",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pip_install",
                "name": "test_get_new_command",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pip_unknown_command",
                "name": "test_match",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pip_unknown_command",
                "name": "test_get_new_command[pip un+install thefuck-un+install-uninstall-pip uninstall thefuck]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_pip_unknown_command",
                "name": "test_get_new_command[pip instatl-instatl-install-pip install]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_port_already_in_use",
                "name": "test_match[command0]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_port_already_in_use",
                "name": "test_match[command1]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_port_already_in_use",
                "name": "test_match[command2]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_port_already_in_use",
                "name": "test_match[command3]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_port_already_in_use",
                "name": "test_match[command4]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_port_already_in_use",
                "name": "test_match[command5]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_port_already_in_use",
                "name": "test_not_match[command0-COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\\nnode    18233 nvbn   16u  IPv4 557134      0t0  TCP localhost:http-alt (LISTEN)\\n]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_port_already_in_use",
                "name": "test_not_match[command1-]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_port_already_in_use",
                "name": "test_not_match[command2-]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_port_already_in_use",
                "name": "test_get_new_command[command0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_port_already_in_use",
                "name": "test_get_new_command[command1]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_port_already_in_use",
                "name": "test_get_new_command[command2]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_port_already_in_use",
                "name": "test_get_new_command[command3]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_port_already_in_use",
                "name": "test_get_new_command[command4]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_port_already_in_use",
                "name": "test_get_new_command[command5]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_prove_recursively",
                "name": "test_match[prove -lv t-Files=0, Tests=0,  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)\\nResult: NOTESTS]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_prove_recursively",
                "name": "test_match[prove app/t-Files=0, Tests=0,  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)\\nResult: NOTESTS]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_prove_recursively",
                "name": "test_not_match[prove -lv t-Files=0, Tests=0,  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)\\nResult: NOTESTS-False]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_prove_recursively",
                "name": "test_not_match[prove -r t-Files=0, Tests=0,  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)\\nResult: NOTESTS-True]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_prove_recursively",
                "name": "test_not_match[prove --recurse t-Files=0, Tests=0,  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)\\nResult: NOTESTS-True]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_prove_recursively",
                "name": "test_get_new_command[prove -lv t-prove -r -lv t]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_prove_recursively",
                "name": "test_get_new_command[prove t-prove -r t]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_python_command",
                "name": "test_match",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_python_command",
                "name": "test_get_new_command",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_python_execute",
                "name": "test_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_python_execute",
                "name": "test_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_python_execute",
                "name": "test_get_new_command[command0-python foo.py]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_python_execute",
                "name": "test_get_new_command[command1-python bar.py]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_python_module_error",
                "name": "test_not_match[test0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_python_module_error",
                "name": "test_not_match[test1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_python_module_error",
                "name": "test_match[python some_script.py-some_script.py-more_itertools-pip install more_itertools && python some_script.py]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_python_module_error",
                "name": "test_match[./some_other_script.py-some_other_script.py-a_module-pip install a_module && ./some_other_script.py]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_python_module_error",
                "name": "test_get_new_command[python some_script.py-some_script.py-more_itertools-pip install more_itertools && python some_script.py]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_python_module_error",
                "name": "test_get_new_command[./some_other_script.py-some_other_script.py-a_module-pip install a_module && ./some_other_script.py]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_quotation_marks",
                "name": "test_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_quotation_marks",
                "name": "test_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_quotation_marks",
                "name": "test_match[command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_quotation_marks",
                "name": "test_get_new_command[command0-git commit -m \"My Message\"]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_quotation_marks",
                "name": "test_get_new_command[command1-git commit -am \"Mismatched Quotation Marks\"]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_quotation_marks",
                "name": "test_get_new_command[command2-echo \"hello\"]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_rails_migrations_pending",
                "name": "test_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_rails_migrations_pending",
                "name": "test_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_rails_migrations_pending",
                "name": "test_not_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_rails_migrations_pending",
                "name": "test_get_new_command[command0-rails db:migrate RAILS_ENV=development && bin/rspec]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_rails_migrations_pending",
                "name": "test_get_new_command[command1-bin/rails db:migrate RAILS_ENV=test && bin/rspec]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_react_native_command_unrecognized",
                "name": "test_match[command0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_react_native_command_unrecognized",
                "name": "test_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_react_native_command_unrecognized",
                "name": "test_not_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_react_native_command_unrecognized",
                "name": "test_not_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_react_native_command_unrecognized",
                "name": "test_get_new_command[command0-react-native start]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_react_native_command_unrecognized",
                "name": "test_get_new_command[command1-react-native log-android -f]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_remove_shell_prompt_literal",
                "name": "test_match[$ cd newdir]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_remove_shell_prompt_literal",
                "name": "test_match[ $ cd newdir]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_remove_shell_prompt_literal",
                "name": "test_match[$ $ cd newdir]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_remove_shell_prompt_literal",
                "name": "test_match[ $ $ cd newdir]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_remove_shell_prompt_literal",
                "name": "test_not_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_remove_shell_prompt_literal",
                "name": "test_not_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_remove_shell_prompt_literal",
                "name": "test_not_match[command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_remove_shell_prompt_literal",
                "name": "test_not_match[command3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_remove_shell_prompt_literal",
                "name": "test_not_match[command4]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_remove_shell_prompt_literal",
                "name": "test_get_new_command[$ cd newdir-cd newdir]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_remove_shell_prompt_literal",
                "name": "test_get_new_command[$ $ cd newdir-cd newdir]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_remove_shell_prompt_literal",
                "name": "test_get_new_command[$ python3 -m virtualenv env-python3 -m virtualenv env]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_remove_shell_prompt_literal",
                "name": "test_get_new_command[ $ $ $ python3 -m virtualenv env-python3 -m virtualenv env]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_remove_trailing_cedilla",
                "name": "test_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_remove_trailing_cedilla",
                "name": "test_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_remove_trailing_cedilla",
                "name": "test_get_new_command[command0-wrong]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_remove_trailing_cedilla",
                "name": "test_get_new_command[command1-wrong with args]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_rm_dir",
                "name": "test_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_rm_dir",
                "name": "test_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_rm_dir",
                "name": "test_match[command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_rm_dir",
                "name": "test_match[command3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_rm_dir",
                "name": "test_not_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_rm_dir",
                "name": "test_not_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_rm_dir",
                "name": "test_not_match[command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_rm_dir",
                "name": "test_not_match[command3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_rm_dir",
                "name": "test_get_new_command[command0-rm -rf foo]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_rm_dir",
                "name": "test_get_new_command[command1-hdfs dfs -rm -r foo]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_rm_root",
                "name": "test_match",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_rm_root",
                "name": "test_not_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_rm_root",
                "name": "test_not_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_rm_root",
                "name": "test_not_match[command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_rm_root",
                "name": "test_get_new_command",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_scm_correction",
                "name": "test_match[git log-fatal: Not a git repository (or any of the parent directories): .git-hg]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_scm_correction",
                "name": "test_match[hg log-abort: no repository found in '/home/nvbn/exp/thefuck' (.hg not found)!-git]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_scm_correction",
                "name": "test_not_match[git log--hg]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_scm_correction",
                "name": "test_not_match[git log-fatal: Not a git repository (or any of the parent directories): .git-None]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_scm_correction",
                "name": "test_not_match[hg log-abort: no repository found in '/home/nvbn/exp/thefuck' (.hg not found)!-None]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_scm_correction",
                "name": "test_not_match[not-scm log-abort: no repository found in '/home/nvbn/exp/thefuck' (.hg not found)!-git]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_scm_correction",
                "name": "test_get_new_command[git log-hg-hg log]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_scm_correction",
                "name": "test_get_new_command[hg log-git-git log]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sed_unterminated_s",
                "name": "test_match",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sed_unterminated_s",
                "name": "test_get_new_command",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sl_ls",
                "name": "test_match",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sl_ls",
                "name": "test_get_new_command",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ssh_known_host",
                "name": "test_match",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ssh_known_host",
                "name": "test_side_effect",
                "time": 0.071,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_ssh_known_host",
                "name": "test_get_new_command",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo",
                "name": "test_match[Permission denied]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo",
                "name": "test_match[permission denied]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo",
                "name": "test_match[npm ERR! Error: EACCES, unlink]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo",
                "name": "test_match[requested operation requires superuser privilege]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo",
                "name": "test_match[need to be root]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo",
                "name": "test_match[need root]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo",
                "name": "test_match[shutdown: NOT super-user]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo",
                "name": "test_match[Error: This command has to be run with superuser privileges (under the root user on most systems).]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo",
                "name": "test_match[updatedb: can not open a temporary file for `/var/lib/mlocate/mlocate.db]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo",
                "name": "test_match[must be root]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo",
                "name": "test_match[You don't have access to the history DB.]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo",
                "name": "test_match[error: [Errno 13] Permission denied: '/usr/local/lib/python2.7/dist-packages/ipaddr.py']",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo",
                "name": "test_not_match",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo",
                "name": "test_get_new_command[ls-sudo ls]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo",
                "name": "test_get_new_command[echo a > b-sudo sh -c \"echo a > b\"]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo",
                "name": "test_get_new_command[echo \"a\" >> b-sudo sh -c \"echo \\\"a\\\" >> b\"]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo",
                "name": "test_get_new_command[mkdir && touch a-sudo sh -c \"mkdir && touch a\"]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo_command_from_user_path",
                "name": "test_match[sudo npm install -g react-native-cli-sudo: npm: command not found]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo_command_from_user_path",
                "name": "test_match[sudo -u app appcfg update .-sudo: appcfg: command not found]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo_command_from_user_path",
                "name": "test_not_match[npm --version-sudo: npm: command not found-/usr/bin/npm]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo_command_from_user_path",
                "name": "test_not_match[sudo npm --version--/usr/bin/npm]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo_command_from_user_path",
                "name": "test_not_match[sudo npm --version-sudo: npm: command not found-None]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo_command_from_user_path",
                "name": "test_get_new_command[sudo npm install -g react-native-cli-sudo: npm: command not found-sudo env \"PATH=$PATH\" npm install -g react-native-cli]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_sudo_command_from_user_path",
                "name": "test_get_new_command[sudo -u app appcfg update .-sudo: appcfg: command not found-sudo -u app env \"PATH=$PATH\" appcfg update .]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_switch_lang",
                "name": "test_match[command0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_switch_lang",
                "name": "test_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_switch_lang",
                "name": "test_match[command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_switch_lang",
                "name": "test_match[command3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_switch_lang",
                "name": "test_match[command4]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_switch_lang",
                "name": "test_not_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_switch_lang",
                "name": "test_not_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_switch_lang",
                "name": "test_not_match[command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_switch_lang",
                "name": "test_not_match[command3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_switch_lang",
                "name": "test_not_match[command4]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_switch_lang",
                "name": "test_not_match[command5]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_switch_lang",
                "name": "test_get_new_command[command0-apt-get install vim]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_switch_lang",
                "name": "test_get_new_command[command1-ls -la]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_switch_lang",
                "name": "test_get_new_command[command2-apt-get install vim]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_switch_lang",
                "name": "test_get_new_command[command3-ls -la]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_switch_lang",
                "name": "test_get_new_command[command4-apt-get install vim]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_switch_lang",
                "name": "test_get_new_command[command5-ls -la]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_switch_lang",
                "name": "test_get_new_command[command6-patchk]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_systemctl",
                "name": "test_match",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_systemctl",
                "name": "test_get_new_command",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_terraform_init",
                "name": "test_match[terraform plan-Error: Initialization required. Please see the error message above.]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_terraform_init",
                "name": "test_match[terraform plan-This module is not yet installed. Run \"terraform init\" to install all modules required by this configuration.]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_terraform_init",
                "name": "test_match[terraform apply-Error: Initialization required. Please see the error message above.]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_terraform_init",
                "name": "test_match[terraform apply-This module is not yet installed. Run \"terraform init\" to install all modules required by this configuration.]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_terraform_init",
                "name": "test_not_match[terraform --version-Terraform v0.12.2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_terraform_init",
                "name": "test_not_match[terraform plan-No changes. Infrastructure is up-to-date.]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_terraform_init",
                "name": "test_not_match[terraform apply-Apply complete! Resources: 0 added, 0 changed, 0 destroyed.]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_terraform_init",
                "name": "test_get_new_command[command0-terraform init && terraform plan]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_terraform_init",
                "name": "test_get_new_command[command1-terraform init && terraform apply]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_terraform_no_command",
                "name": "test_match[terraform appyl-Terraform has no command named \"appyl\". Did you mean \"apply\"?]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_terraform_no_command",
                "name": "test_match[terraform destory-Terraform has no command named \"destory\". Did you mean \"destroy\"?]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_terraform_no_command",
                "name": "test_not_match[terraform --version-Terraform v0.12.2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_terraform_no_command",
                "name": "test_not_match[terraform plan-No changes. Infrastructure is up-to-date.]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_terraform_no_command",
                "name": "test_not_match[terraform apply-Apply complete! Resources: 0 added, 0 changed, 0 destroyed.]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_terraform_no_command",
                "name": "test_get_new_command[terraform appyl-Terraform has no command named \"appyl\". Did you mean \"apply\"?-terraform apply]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_terraform_no_command",
                "name": "test_get_new_command[terraform destory --some-other-option-Terraform has no command named \"destory\". Did you mean \"destroy\"?-terraform destroy --some-other-option]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_tmux",
                "name": "test_match",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_tmux",
                "name": "test_get_new_command",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_touch",
                "name": "test_match[touch /a/b/c-False]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_touch",
                "name": "test_match[touch /a/b/c-True]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_touch",
                "name": "test_not_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_touch",
                "name": "test_not_match[command1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_touch",
                "name": "test_get_new_command[touch /a/b/c-False]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_touch",
                "name": "test_get_new_command[touch /a/b/c-True]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_tsuru_login",
                "name": "test_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_tsuru_login",
                "name": "test_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_tsuru_login",
                "name": "test_not_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_tsuru_login",
                "name": "test_not_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_tsuru_login",
                "name": "test_not_match[command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_tsuru_login",
                "name": "test_get_new_command[command0-tsuru login && tsuru app-shell]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_tsuru_login",
                "name": "test_get_new_command[command1-tsuru login && tsuru app-log -f]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_tsuru_not_command",
                "name": "test_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_tsuru_not_command",
                "name": "test_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_tsuru_not_command",
                "name": "test_match[command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_tsuru_not_command",
                "name": "test_match[command3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_tsuru_not_command",
                "name": "test_not_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_tsuru_not_command",
                "name": "test_not_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_tsuru_not_command",
                "name": "test_not_match[command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_tsuru_not_command",
                "name": "test_not_match[command3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_tsuru_not_command",
                "name": "test_not_match[command4]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_tsuru_not_command",
                "name": "test_get_new_command[command0-new_commands0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_tsuru_not_command",
                "name": "test_get_new_command[command1-new_commands1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_tsuru_not_command",
                "name": "test_get_new_command[command2-new_commands2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_tsuru_not_command",
                "name": "test_get_new_command[command3-new_commands3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_unknown_command",
                "name": "test_match[command0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_unknown_command",
                "name": "test_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_unknown_command",
                "name": "test_match[command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_unknown_command",
                "name": "test_not_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_unknown_command",
                "name": "test_not_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_unknown_command",
                "name": "test_not_match[command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_unknown_command",
                "name": "test_not_match[command3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_unknown_command",
                "name": "test_get_new_command[command0-new_command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_unknown_command",
                "name": "test_get_new_command[command1-new_command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_unknown_command",
                "name": "test_get_new_command[command2-new_command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_unknown_command",
                "name": "test_get_new_command[command3-new_command3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_unsudo",
                "name": "test_match[you cannot perform this operation as root]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_unsudo",
                "name": "test_not_match",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_unsudo",
                "name": "test_get_new_command[sudo ls-ls]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_unsudo",
                "name": "test_get_new_command[sudo pacaur -S helloworld-pacaur -S helloworld]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_vagrant_up",
                "name": "test_match[command0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_vagrant_up",
                "name": "test_match[command1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_vagrant_up",
                "name": "test_match[command2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_vagrant_up",
                "name": "test_match[command3]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_vagrant_up",
                "name": "test_not_match[command0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_vagrant_up",
                "name": "test_not_match[command1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_vagrant_up",
                "name": "test_not_match[command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_vagrant_up",
                "name": "test_not_match[command3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_vagrant_up",
                "name": "test_get_new_command[command0-vagrant up && vagrant ssh]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_vagrant_up",
                "name": "test_get_new_command[command1-new_command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_vagrant_up",
                "name": "test_get_new_command[command2-vagrant up && vagrant rdp]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_vagrant_up",
                "name": "test_get_new_command[command3-new_command3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_whois",
                "name": "test_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_whois",
                "name": "test_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_whois",
                "name": "test_match[command2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_whois",
                "name": "test_not_match",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_whois",
                "name": "test_get_new_command[command0-whois en.wikipedia.org]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_whois",
                "name": "test_get_new_command[command1-whois en.wikipedia.org]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_whois",
                "name": "test_get_new_command[command2-new_command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_workon_doesnt_exists",
                "name": "test_match[workon tehfuck]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_workon_doesnt_exists",
                "name": "test_match[workon code-view]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_workon_doesnt_exists",
                "name": "test_match[workon new-env]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_workon_doesnt_exists",
                "name": "test_not_match[workon thefuck]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_workon_doesnt_exists",
                "name": "test_not_match[workon code_view]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_workon_doesnt_exists",
                "name": "test_not_match[work on tehfuck]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_workon_doesnt_exists",
                "name": "test_get_new_command[workon tehfuck-workon thefuck]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_workon_doesnt_exists",
                "name": "test_get_new_command[workon code-view-workon code_view]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_workon_doesnt_exists",
                "name": "test_get_new_command[workon zzzz-mkvirtualenv zzzz]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_wrong_hyphen_before_subcommand",
                "name": "test_match[git-log]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_wrong_hyphen_before_subcommand",
                "name": "test_match[apt-install python]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_wrong_hyphen_before_subcommand",
                "name": "test_not_match[ls -la]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_wrong_hyphen_before_subcommand",
                "name": "test_not_match[git2-make]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_wrong_hyphen_before_subcommand",
                "name": "test_not_match[apt-get install python]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_wrong_hyphen_before_subcommand",
                "name": "test_get_new_command[git-log-git log]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_wrong_hyphen_before_subcommand",
                "name": "test_get_new_command[apt-install python-apt install python]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yarn_alias",
                "name": "test_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yarn_alias",
                "name": "test_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yarn_alias",
                "name": "test_match[command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yarn_alias",
                "name": "test_get_new_command[command0-yarn remove]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yarn_alias",
                "name": "test_get_new_command[command1-yarn etl]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yarn_alias",
                "name": "test_get_new_command[command2-yarn list]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yarn_command_not_found",
                "name": "test_match[command0]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yarn_command_not_found",
                "name": "test_not_match[command0]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yarn_command_not_found",
                "name": "test_not_match[command1]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yarn_command_not_found",
                "name": "test_get_new_command[command0-yarn why webpack]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yarn_command_not_found",
                "name": "test_get_new_command[command1-yarn add lodash]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yarn_command_replaced",
                "name": "test_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yarn_command_replaced",
                "name": "test_match[command1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yarn_command_replaced",
                "name": "test_match[command2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yarn_command_replaced",
                "name": "test_not_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yarn_command_replaced",
                "name": "test_get_new_command[command0-yarn add redux]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yarn_command_replaced",
                "name": "test_get_new_command[command1-yarn add moment]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yarn_command_replaced",
                "name": "test_get_new_command[command2-yarn add lodash]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yarn_help",
                "name": "test_match[command0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yarn_help",
                "name": "test_get_new_command[command0-https://yarnpkg.com/en/docs/cli/clean]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yum_invalid_operation",
                "name": "test_match[saerch]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yum_invalid_operation",
                "name": "test_match[uninstall]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yum_invalid_operation",
                "name": "test_not_match[vim-]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yum_invalid_operation",
                "name": "test_not_match[yum-Loaded plugins: extras_suggestions, langpacks, priorities, update-motd\\nUsage: yum [options] COMMAND\\n\\nList of Commands:\\n\\ncheck          Check for problems in the rpmdb\\ncheck-update   Check for available package updates\\nclean          Remove cached data\\ndeplist        List a package's dependencies\\ndistribution-synchronization Synchronize installed packages to the latest available versions\\ndowngrade      downgrade a package\\nerase          Remove a package or packages from your system\\nfs             Acts on the filesystem data of the host, mainly for removing docs/lanuages for minimal hosts.\\nfssnapshot     Creates filesystem snapshots, or lists/deletes current snapshots.\\ngroups         Display, or use, the groups information\\nhelp           Display a helpful usage message\\nhistory        Display, or use, the transaction history\\ninfo           Display details about a package or group of packages\\ninstall        Install a package or packages on your system\\nlangavailable  Check available languages\\nlanginfo       List languages information\\nlanginstall    Install appropriate language packs for a language\\nlanglist       List installed languages\\nlangremove     Remove installed language packs for a language\\nlist           List a package or groups of packages\\nload-transaction load a saved transaction from filename\\nmakecache      Generate the metadata cache\\nprovides       Find what package provides the given value\\nreinstall      reinstall a package\\nrepo-pkgs      Treat a repo. as a group of packages, so we can install/remove all of them\\nrepolist       Display the configured software repositories\\nsearch         Search package details for the given string\\nshell          Run an interactive yum shell\\nswap           Simple way to swap packages, instead of using shell\\nupdate         Update a package or packages on your system\\nupdate-minimal Works like upgrade, but goes to the 'newest' package match which fixes a problem that affects your system\\nupdateinfo     Acts on repository update information\\nupgrade        Update packages taking obsoletes into account\\nversion        Display a version for the machine and/or available repos.\\n\\n\\nOptions:\\n  -h, --help            show this help message and exit\\n  -t, --tolerant        be tolerant of errors\\n  -C, --cacheonly       run entirely from system cache, don't update cache\\n  -c [config file], --config=[config file]\\n                        config file location\\n  -R [minutes], --randomwait=[minutes]\\n                        maximum command wait time\\n  -d [debug level], --debuglevel=[debug level]\\n                        debugging output level\\n  --showduplicates      show duplicates, in repos, in list/search commands\\n  -e [error level], --errorlevel=[error level]\\n                        error output level\\n  --rpmverbosity=[debug level name]\\n                        debugging output level for rpm\\n  -q, --quiet           quiet operation\\n  -v, --verbose         verbose operation\\n  -y, --assumeyes       answer yes for all questions\\n  --assumeno            answer no for all questions\\n  --version             show Yum version and exit\\n  --installroot=[path]  set install root\\n  --enablerepo=[repo]   enable one or more repositories (wildcards allowed)\\n  --disablerepo=[repo]  disable one or more repositories (wildcards allowed)\\n  -x [package], --exclude=[package]\\n                        exclude package(s) by name or glob\\n  --disableexcludes=[repo]\\n                        disable exclude from main, for a repo or for\\n                        everything\\n  --disableincludes=[repo]\\n                        disable includepkgs for a repo or for everything\\n  --obsoletes           enable obsoletes processing during updates\\n  --noplugins           disable Yum plugins\\n  --nogpgcheck          disable gpg signature checking\\n  --disableplugin=[plugin]\\n                        disable plugins by name\\n  --enableplugin=[plugin]\\n                        enable plugins by name\\n  --skip-broken         skip packages with depsolving problems\\n  --color=COLOR         control whether color is used\\n  --releasever=RELEASEVER\\n                        set value of $releasever in yum config and repo files\\n  --downloadonly        don't update, just download\\n  --downloaddir=DLDIR   specifies an alternate directory to store packages\\n  --setopt=SETOPTS      set arbitrary config and repo options\\n  --bugfix              Include bugfix relevant packages, in updates\\n  --security            Include security relevant packages, in updates\\n  --advisory=ADVS, --advisories=ADVS\\n                        Include packages needed to fix the given advisory, in\\n                        updates\\n  --bzs=BZS             Include packages needed to fix the given BZ, in\\n                        updates\\n  --cves=CVES           Include packages needed to fix the given CVE, in\\n                        updates\\n  --sec-severity=SEVS, --secseverity=SEVS\\n                        Include security relevant packages matching the\\n                        severity, in updates\\n\\n  Plugin Options:\\n    --samearch-priorities\\n                        Priority-exclude packages based on name + arch\\n]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yum_invalid_operation",
                "name": "test_not_match[yum help-Loaded plugins: extras_suggestions, langpacks, priorities, update-motd\\nUsage: yum [options] COMMAND\\n\\nList of Commands:\\n\\ncheck          Check for problems in the rpmdb\\ncheck-update   Check for available package updates\\nclean          Remove cached data\\ndeplist        List a package's dependencies\\ndistribution-synchronization Synchronize installed packages to the latest available versions\\ndowngrade      downgrade a package\\nerase          Remove a package or packages from your system\\nfs             Acts on the filesystem data of the host, mainly for removing docs/lanuages for minimal hosts.\\nfssnapshot     Creates filesystem snapshots, or lists/deletes current snapshots.\\ngroups         Display, or use, the groups information\\nhelp           Display a helpful usage message\\nhistory        Display, or use, the transaction history\\ninfo           Display details about a package or group of packages\\ninstall        Install a package or packages on your system\\nlangavailable  Check available languages\\nlanginfo       List languages information\\nlanginstall    Install appropriate language packs for a language\\nlanglist       List installed languages\\nlangremove     Remove installed language packs for a language\\nlist           List a package or groups of packages\\nload-transaction load a saved transaction from filename\\nmakecache      Generate the metadata cache\\nprovides       Find what package provides the given value\\nreinstall      reinstall a package\\nrepo-pkgs      Treat a repo. as a group of packages, so we can install/remove all of them\\nrepolist       Display the configured software repositories\\nsearch         Search package details for the given string\\nshell          Run an interactive yum shell\\nswap           Simple way to swap packages, instead of using shell\\nupdate         Update a package or packages on your system\\nupdate-minimal Works like upgrade, but goes to the 'newest' package match which fixes a problem that affects your system\\nupdateinfo     Acts on repository update information\\nupgrade        Update packages taking obsoletes into account\\nversion        Display a version for the machine and/or available repos.\\n\\n\\nOptions:\\n  -h, --help            show this help message and exit\\n  -t, --tolerant        be tolerant of errors\\n  -C, --cacheonly       run entirely from system cache, don't update cache\\n  -c [config file], --config=[config file]\\n                        config file location\\n  -R [minutes], --randomwait=[minutes]\\n                        maximum command wait time\\n  -d [debug level], --debuglevel=[debug level]\\n                        debugging output level\\n  --showduplicates      show duplicates, in repos, in list/search commands\\n  -e [error level], --errorlevel=[error level]\\n                        error output level\\n  --rpmverbosity=[debug level name]\\n                        debugging output level for rpm\\n  -q, --quiet           quiet operation\\n  -v, --verbose         verbose operation\\n  -y, --assumeyes       answer yes for all questions\\n  --assumeno            answer no for all questions\\n  --version             show Yum version and exit\\n  --installroot=[path]  set install root\\n  --enablerepo=[repo]   enable one or more repositories (wildcards allowed)\\n  --disablerepo=[repo]  disable one or more repositories (wildcards allowed)\\n  -x [package], --exclude=[package]\\n                        exclude package(s) by name or glob\\n  --disableexcludes=[repo]\\n                        disable exclude from main, for a repo or for\\n                        everything\\n  --disableincludes=[repo]\\n                        disable includepkgs for a repo or for everything\\n  --obsoletes           enable obsoletes processing during updates\\n  --noplugins           disable Yum plugins\\n  --nogpgcheck          disable gpg signature checking\\n  --disableplugin=[plugin]\\n                        disable plugins by name\\n  --enableplugin=[plugin]\\n                        enable plugins by name\\n  --skip-broken         skip packages with depsolving problems\\n  --color=COLOR         control whether color is used\\n  --releasever=RELEASEVER\\n                        set value of $releasever in yum config and repo files\\n  --downloadonly        don't update, just download\\n  --downloaddir=DLDIR   specifies an alternate directory to store packages\\n  --setopt=SETOPTS      set arbitrary config and repo options\\n  --bugfix              Include bugfix relevant packages, in updates\\n  --security            Include security relevant packages, in updates\\n  --advisory=ADVS, --advisories=ADVS\\n                        Include packages needed to fix the given advisory, in\\n                        updates\\n  --bzs=BZS             Include packages needed to fix the given BZ, in\\n                        updates\\n  --cves=CVES           Include packages needed to fix the given CVE, in\\n                        updates\\n  --sec-severity=SEVS, --secseverity=SEVS\\n                        Include security relevant packages matching the\\n                        severity, in updates\\n\\n  Plugin Options:\\n    --samearch-priorities\\n                        Priority-exclude packages based on name + arch\\n]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yum_invalid_operation",
                "name": "test_not_match[yum search asdf-Warning: No matches found for: asdf\\nNo matches found\\n]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yum_invalid_operation",
                "name": "test_not_match[yum search vim-================================================== N/S matched: vim ===================================================\\nprotobuf-vim.x86_64 : Vim syntax highlighting for Google Protocol Buffers descriptions\\nvim-X11.x86_64 : The VIM version of the vi editor for the X Window System - GVim\\nvim-common.x86_64 : The common files needed by any version of the VIM editor\\nvim-enhanced.x86_64 : A version of the VIM editor which includes recent enhancements\\nvim-filesystem.x86_64 : VIM filesystem layout\\nvim-filesystem.noarch : VIM filesystem layout\\nvim-minimal.x86_64 : A minimal version of the VIM editor\\n\\n  Name and summary matches only, use \"search all\" for everything.\\n]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yum_invalid_operation",
                "name": "test_get_operations",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yum_invalid_operation",
                "name": "test_get_new_command[yum uninstall-Loaded plugins: extras_suggestions, langpacks, priorities, update-motd\\nNo such command: uninstall. Please use /usr/bin/yum --help\\n-yum remove]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yum_invalid_operation",
                "name": "test_get_new_command[yum saerch asdf-Loaded plugins: extras_suggestions, langpacks, priorities, update-motd\\nNo such command: saerch. Please use /usr/bin/yum --help\\n-yum search asdf]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.rules.test_yum_invalid_operation",
                "name": "test_get_new_command[yum hlep-Loaded plugins: extras_suggestions, langpacks, priorities, update-motd\\nNo such command: hlep. Please use /usr/bin/yum --help\\n-yum help]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_bash.TestBash",
                "name": "test_from_shell[pwd-pwd]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_bash.TestBash",
                "name": "test_from_shell[fuck-eval $(thefuck $(fc -ln -1))]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_bash.TestBash",
                "name": "test_from_shell[awk-awk]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_bash.TestBash",
                "name": "test_from_shell[ll-ls -alF]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_bash.TestBash",
                "name": "test_to_shell",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_bash.TestBash",
                "name": "test_and_",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_bash.TestBash",
                "name": "test_or_",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_bash.TestBash",
                "name": "test_get_aliases",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_bash.TestBash",
                "name": "test_app_alias",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_bash.TestBash",
                "name": "test_app_alias_variables_correctly_set",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_bash.TestBash",
                "name": "test_get_history",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_bash.TestBash",
                "name": "test_split_command",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_bash.TestBash",
                "name": "test_how_to_configure",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_bash.TestBash",
                "name": "test_how_to_configure_when_config_not_found",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_bash.TestBash",
                "name": "test_info",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_bash.TestBash",
                "name": "test_get_version_error",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_get_overridden_aliases[TF_OVERRIDDEN_ALIASES-cut,git,sed]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_get_overridden_aliases[THEFUCK_OVERRIDDEN_ALIASES-cut,git,sed]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_get_overridden_aliases[THEFUCK_OVERRIDDEN_ALIASES-cut, git, sed]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_get_overridden_aliases[THEFUCK_OVERRIDDEN_ALIASES- cut,\\tgit,sed\\n]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_get_overridden_aliases[THEFUCK_OVERRIDDEN_ALIASES-\\ncut,\\n\\ngit,\\tsed\\r]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_from_shell[cd-cd]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_from_shell[pwd-pwd]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_from_shell[fuck-fish -ic \"fuck\"]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_from_shell[find-find]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_from_shell[funced-fish -ic \"funced\"]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_from_shell[grep-grep]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_from_shell[awk-awk]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_from_shell[math \"2 + 2\"-fish -ic \"math \\\"2 + 2\\\"\"]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_from_shell[man-man]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_from_shell[open-open]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_from_shell[vim-vim]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_from_shell[ll-fish -ic \"ll\"]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_from_shell[ls-ls]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_from_shell[g-git]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_to_shell",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_and_",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_or_",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_get_aliases",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_app_alias",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_app_alias_alter_history",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_get_history",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_put_to_history[ls-- cmd: ls\\n   when: 1430707243\\n]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_put_to_history[echo caf\\xe9-- cmd: echo caf\\xc3\\xa9\\n   when: 1430707243\\n]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_how_to_configure",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_how_to_configure_when_config_not_found",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_get_version",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_get_version_error[side_effect0-IndexError]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_fish.TestFish",
                "name": "test_get_version_error[side_effect1-OSError]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_generic.TestGeneric",
                "name": "test_from_shell",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_generic.TestGeneric",
                "name": "test_to_shell",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_generic.TestGeneric",
                "name": "test_and_",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_generic.TestGeneric",
                "name": "test_or_",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_generic.TestGeneric",
                "name": "test_get_aliases",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_generic.TestGeneric",
                "name": "test_app_alias",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_generic.TestGeneric",
                "name": "test_get_history",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_generic.TestGeneric",
                "name": "test_split_command",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_generic.TestGeneric",
                "name": "test_how_to_configure",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_generic.TestGeneric",
                "name": "test_info[side_effect0-Generic Shell 3.5.9-False]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_generic.TestGeneric",
                "name": "test_info[side_effect1-Generic Shell-True]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_powershell.TestPowershell",
                "name": "test_and_",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_powershell.TestPowershell",
                "name": "test_app_alias",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_powershell.TestPowershell",
                "name": "test_how_to_configure",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_powershell.TestPowershell",
                "name": "test_info[side_effect0-PowerShell 5.1.17763.316-call_args0]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_powershell.TestPowershell",
                "name": "test_info[side_effect1-PowerShell 6.1.2-call_args1]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_powershell.TestPowershell",
                "name": "test_get_version_error",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_tcsh.TestTcsh",
                "name": "test_from_shell[pwd-pwd]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_tcsh.TestTcsh",
                "name": "test_from_shell[fuck-eval $(thefuck $(fc -ln -1))]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_tcsh.TestTcsh",
                "name": "test_from_shell[awk-awk]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_tcsh.TestTcsh",
                "name": "test_from_shell[ll-ls -alF]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_tcsh.TestTcsh",
                "name": "test_to_shell",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_tcsh.TestTcsh",
                "name": "test_and_",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_tcsh.TestTcsh",
                "name": "test_or_",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_tcsh.TestTcsh",
                "name": "test_get_aliases",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_tcsh.TestTcsh",
                "name": "test_app_alias",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_tcsh.TestTcsh",
                "name": "test_get_history",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_tcsh.TestTcsh",
                "name": "test_how_to_configure",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_tcsh.TestTcsh",
                "name": "test_how_to_configure_when_config_not_found",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_tcsh.TestTcsh",
                "name": "test_info",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_tcsh.TestTcsh",
                "name": "test_get_version_error[side_effect0-IndexError]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_tcsh.TestTcsh",
                "name": "test_get_version_error[OSError-OSError]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_zsh.TestZsh",
                "name": "test_from_shell[fuck-eval $(thefuck $(fc -ln -1 | tail -n 1))]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_zsh.TestZsh",
                "name": "test_from_shell[pwd-pwd]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_zsh.TestZsh",
                "name": "test_from_shell[ll-ls -alF]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_zsh.TestZsh",
                "name": "test_to_shell",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_zsh.TestZsh",
                "name": "test_and_",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_zsh.TestZsh",
                "name": "test_or_",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_zsh.TestZsh",
                "name": "test_get_aliases",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_zsh.TestZsh",
                "name": "test_app_alias",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_zsh.TestZsh",
                "name": "test_app_alias_variables_correctly_set",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_zsh.TestZsh",
                "name": "test_get_history",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_zsh.TestZsh",
                "name": "test_how_to_configure",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_zsh.TestZsh",
                "name": "test_how_to_configure_when_config_not_found",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_zsh.TestZsh",
                "name": "test_info",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.shells.test_zsh.TestZsh",
                "name": "test_get_version_error",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_git",
                "name": "test_git_support[git co-git checkout-19:22:36.299340 git.c:282   trace: alias expansion: co => 'checkout']",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_git",
                "name": "test_git_support[git com file-git commit --verbose file-19:23:25.470911 git.c:282   trace: alias expansion: com => 'commit' '--verbose']",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_git",
                "name": "test_git_support[git com -m \"Initial commit\"-git commit -m \"Initial commit\"-19:22:36.299340 git.c:282   trace: alias expansion: com => 'commit']",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_git",
                "name": "test_git_support[git br -d some_branch-git branch -d some_branch-19:22:36.299340 git.c:282   trace: alias expansion: br => 'branch']",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_git",
                "name": "test_git_support_match[git pull-True]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_git",
                "name": "test_git_support_match[hub pull-True]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_git",
                "name": "test_git_support_match[git push --set-upstream origin foo-True]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_git",
                "name": "test_git_support_match[hub push --set-upstream origin foo-True]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_git",
                "name": "test_git_support_match[ls-False]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_git",
                "name": "test_git_support_match[cat git-False]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_git",
                "name": "test_git_support_match[cat hub-False]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_git",
                "name": "test_git_support_match[None-git pull-True]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_git",
                "name": "test_git_support_match[None-hub pull-True]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_git",
                "name": "test_git_support_match[None-git push --set-upstream origin foo-True]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_git",
                "name": "test_git_support_match[None-hub push --set-upstream origin foo-True]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_git",
                "name": "test_git_support_match[None-ls-False]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_git",
                "name": "test_git_support_match[None-cat git-False]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_git",
                "name": "test_git_support_match[None-cat hub-False]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_npm",
                "name": "test_get_scripts",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_sudo",
                "name": "test_sudo_support[ls -lah-sudo ls-ls-sudo ls -lah]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_sudo",
                "name": "test_sudo_support[ls -lah-ls-ls-ls -lah]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_sudo",
                "name": "test_sudo_support[return_value2-sudo ls-ls-result2]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_sudo",
                "name": "test_sudo_support[True-sudo ls-ls-True]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_sudo",
                "name": "test_sudo_support[True-ls-ls-True]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_sudo",
                "name": "test_sudo_support[False-sudo ls-ls-False]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.specific.test_sudo",
                "name": "test_sudo_support[False-ls-ls-False]",
                "time": 0.094,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test] \ud83d\ude80  Start image=crawlergpt:latest\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/nvbn-thefuck] user=0 workdir=\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \u2601  git clone 'https://github.com/actions/cache' # ref=v2\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test] \ud83e\uddea  Matrix: map[os:ubuntu-latest python-version:2.7]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test] \u2b50 Run Main actions/checkout@v2\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \u2705  Success - Main actions/checkout@v2\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test] \u2b50 Run Main Set up Python\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udc33  docker cp src=/tmp/act-cache/034d3979-9c9d-4df7-833e-b172e21767ca/act/actions-setup-python@v2/ dst=/var/run/act/actions/actions-setup-python@v2/\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v2/] user=0 workdir=\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/setup/index.js] user= workdir=\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udea7  ::warning::The support for python 2.7 will be removed on June 19. Related issue: https://github.com/actions/setup-python/issues/672\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Semantic version spec of 2.7 is 2.7\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::isExplicit: \n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::explicit? false\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::explicit? true\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::explicit? true\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::explicit? true\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::explicit? true\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::explicit? true\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::explicit? true\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::evaluating 6 versions\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::matched: 2.7.18\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/2.7.18/x64\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Found tool in cache Python 2.7.18 x64\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Successfully setup CPython (2.7.18)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \u2753 add-matcher /run/act/actions/actions-setup-python@v2/.github/python.json\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \u2705  Success - Main Set up Python\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/2.7.18/x64\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/2.7.18/x64/lib\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \u2699  ::set-output:: python-version=2.7.18\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/2.7.18/x64\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/2.7.18/x64/bin\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test] \u2b50 Run Main Cache dependencies\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udc33  docker cp src=/tmp/act-cache/034d3979-9c9d-4df7-833e-b172e21767ca/act/actions-cache@v2/ dst=/var/run/act/actions/actions-cache@v2/\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-cache@v2/] user=0 workdir=\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v2/dist/restore/index.js] user= workdir=\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Resolved Keys:\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::[\"Linux-pip-2.7-62c29ab99d9f93c184c7c9a1fb5ceff4ff04d75d02cc8d8ca9c5be9a781c5c16\"]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Checking zstd --version\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:41157/_apis/artifactcache/cache?keys=Linux-pip-2.7-62c29ab99d9f93c184c7c9a1fb5ceff4ff04d75d02cc8d8ca9c5be9a781c5c16&version=6b4b354ffea28c34945bafec994b13911e830fe2d47bf74aac9531e3ec3ad435\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Cache not found for input keys: Linux-pip-2.7-62c29ab99d9f93c184c7c9a1fb5ceff4ff04d75d02cc8d8ca9c5be9a781c5c16\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \u2705  Success - Main Cache dependencies\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test] \u2b50 Run Main Install The Fuck with all dependencies\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 is no longer maintained. pip 21.0 will drop support for Python 2.7 in January 2021. More details about Python 2 support in pip can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support pip 21.0 will remove support for this functionality.\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting coveralls\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading coveralls-1.11.1-py2.py3-none-any.whl (12 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting flake8\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading flake8-3.9.2-py2.py3-none-any.whl (73 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting pytest\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading pytest-4.6.11-py2.py3-none-any.whl (231 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting mock\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading mock-3.0.5-py2.py3-none-any.whl (25 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting pytest-mock\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading pytest_mock-2.0.0-py2.py3-none-any.whl (10 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting wheel\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading wheel-0.37.1-py2.py3-none-any.whl (35 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting setuptools>=17.1\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading setuptools-44.1.1-py2.py3-none-any.whl (583 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting pexpect\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading pexpect-4.8.0-py2.py3-none-any.whl (59 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting pypandoc\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading pypandoc-1.7.5.tar.gz (23.2 MB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Installing build dependencies: started\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Installing build dependencies: finished with status 'done'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Getting requirements to build wheel: started\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Getting requirements to build wheel: finished with status 'done'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |     Preparing wheel metadata: started\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |     Preparing wheel metadata: finished with status 'done'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting pytest-benchmark\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading pytest_benchmark-3.4.1-py2.py3-none-any.whl (50 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting pytest-docker-pexpect\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading pytest-docker-pexpect-0.9.tar.gz (3.3 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting twine\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading twine-1.15.0-py2.py3-none-any.whl (35 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting requests>=1.0.0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading requests-2.27.1-py2.py3-none-any.whl (63 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting docopt>=0.6.1\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading docopt-0.6.2.tar.gz (25 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting urllib3[secure]; python_version < \"3\"\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading urllib3-1.26.16-py2.py3-none-any.whl (143 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting coverage<6.0,>=3.6\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading coverage-5.5-cp27-cp27mu-manylinux2010_x86_64.whl (236 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting typing; python_version < \"3.5\"\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Using cached typing-3.10.0.0-py2-none-any.whl (26 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting configparser; python_version < \"3.2\"\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Using cached configparser-4.0.2-py2.py3-none-any.whl (22 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting functools32; python_version < \"3.2\"\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Using cached functools32-3.2.3-2.tar.gz (31 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting importlib-metadata; python_version < \"3.8\"\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading importlib_metadata-2.1.3-py2.py3-none-any.whl (10 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting enum34; python_version < \"3.4\"\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Using cached enum34-1.1.10-py2-none-any.whl (11 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting pyflakes<2.4.0,>=2.3.0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading pyflakes-2.3.1-py2.py3-none-any.whl (68 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting mccabe<0.7.0,>=0.6.0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading mccabe-0.6.1-py2.py3-none-any.whl (8.6 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting pycodestyle<2.8.0,>=2.7.0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading pycodestyle-2.7.0-py2.py3-none-any.whl (41 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting pathlib2>=2.2.0; python_version < \"3.6\"\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Using cached pathlib2-2.3.7.post1-py2.py3-none-any.whl (18 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting pluggy<1.0,>=0.12\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading pluggy-0.13.1-py2.py3-none-any.whl (18 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting packaging\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading packaging-20.9-py2.py3-none-any.whl (40 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting wcwidth\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading wcwidth-0.2.6-py2.py3-none-any.whl (29 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting six>=1.10.0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Using cached six-1.16.0-py2.py3-none-any.whl (11 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting funcsigs>=1.0; python_version < \"3.0\"\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading funcsigs-1.0.2-py2.py3-none-any.whl (17 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting atomicwrites>=1.0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading atomicwrites-1.4.1.tar.gz (14 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting attrs>=17.4.0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading attrs-21.4.0-py2.py3-none-any.whl (60 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting py>=1.5.0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading py-1.11.0-py2.py3-none-any.whl (98 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting more-itertools<6.0.0,>=4.0.0; python_version <= \"2.7\"\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading more_itertools-5.0.0-py2-none-any.whl (52 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting ptyprocess>=0.5\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading ptyprocess-0.7.0-py2.py3-none-any.whl (13 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting statistics; python_version < \"3.4\"\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading statistics-1.0.3.5.tar.gz (8.3 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting py-cpuinfo\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading py-cpuinfo-9.0.0.tar.gz (104 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Installing build dependencies: started\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Installing build dependencies: finished with status 'done'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Getting requirements to build wheel: started\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Getting requirements to build wheel: finished with status 'done'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |     Preparing wheel metadata: started\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |     Preparing wheel metadata: finished with status 'done'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting pkginfo>=1.4.2\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading pkginfo-1.8.3-py2.py3-none-any.whl (26 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting readme-renderer>=21.0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading readme_renderer-30.0-py2.py3-none-any.whl (15 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting tqdm>=4.14\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading tqdm-4.64.1-py2.py3-none-any.whl (78 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting requests-toolbelt!=0.9.0,>=0.8.0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading requests_toolbelt-1.0.0-py2.py3-none-any.whl (54 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting certifi>=2017.4.17\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading certifi-2021.10.8-py2.py3-none-any.whl (149 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting chardet<5,>=3.0.2; python_version < \"3\"\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading chardet-4.0.0-py2.py3-none-any.whl (178 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting idna<3,>=2.5; python_version < \"3\"\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading idna-2.10-py2.py3-none-any.whl (58 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting cryptography>=1.3.4; extra == \"secure\"\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading cryptography-3.3.2-cp27-cp27mu-manylinux2010_x86_64.whl (2.6 MB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting pyOpenSSL>=0.14; extra == \"secure\"\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading pyOpenSSL-21.0.0-py2.py3-none-any.whl (55 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting urllib3-secure-extra; extra == \"secure\"\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading urllib3_secure_extra-0.1.0-py2.py3-none-any.whl (1.4 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting ipaddress; python_version == \"2.7\" and extra == \"secure\"\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading ipaddress-1.0.23-py2.py3-none-any.whl (18 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting contextlib2; python_version < \"3\"\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Using cached contextlib2-0.6.0.post1-py2.py3-none-any.whl (9.8 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting zipp>=0.5\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Using cached zipp-1.2.0-py2.py3-none-any.whl (4.8 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting scandir; python_version < \"3.5\"\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Using cached scandir-1.10.0.tar.gz (33 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting pyparsing>=2.0.2\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading pyparsing-2.4.7-py2.py3-none-any.whl (67 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting backports.functools-lru-cache>=1.2.1; python_version < \"3.2\"\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading backports.functools_lru_cache-1.6.5-py2.py3-none-any.whl (6.0 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting docutils>=0.3\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading docutils-0.18.1-py2.py3-none-any.whl (570 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting Pygments>=2.5.1\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading Pygments-2.5.2-py2.py3-none-any.whl (896 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting bleach>=2.1.0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading bleach-3.3.1-py2.py3-none-any.whl (146 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting importlib-resources; python_version < \"3.7\"\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading importlib_resources-3.3.1-py2.py3-none-any.whl (26 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting cffi>=1.12\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading cffi-1.15.1-cp27-cp27mu-manylinux1_x86_64.whl (390 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting webencodings\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading webencodings-0.5.1-py2.py3-none-any.whl (11 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting singledispatch; python_version < \"3.4\"\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading singledispatch-3.7.0-py2.py3-none-any.whl (9.2 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Collecting pycparser\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Downloading pycparser-2.21-py2.py3-none-any.whl (118 kB)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Using legacy 'setup.py install' for pytest-docker-pexpect, since package 'wheel' is not installed.\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Using legacy 'setup.py install' for docopt, since package 'wheel' is not installed.\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Using legacy 'setup.py install' for functools32, since package 'wheel' is not installed.\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Using legacy 'setup.py install' for atomicwrites, since package 'wheel' is not installed.\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Using legacy 'setup.py install' for statistics, since package 'wheel' is not installed.\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Using legacy 'setup.py install' for scandir, since package 'wheel' is not installed.\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Building wheels for collected packages: pypandoc, py-cpuinfo\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Building wheel for pypandoc (PEP 517): started\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Building wheel for pypandoc (PEP 517): finished with status 'done'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Created wheel for pypandoc: filename=pypandoc-1.7.5-py2.py3-none-any.whl size=23503245 sha256=30db4c714479d602458695dd2cb69f87918fcc2d53b05b8e3b3b855879464e87\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/21/36/26/db26e1b269bf5ce7d30db5dbeb3d648de6a7397e7aa15b1e98\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Building wheel for py-cpuinfo (PEP 517): started\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Building wheel for py-cpuinfo (PEP 517): finished with status 'done'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Created wheel for py-cpuinfo: filename=py_cpuinfo-9.0.0-py2-none-any.whl size=22320 sha256=2243b3a2554ac5835758895eb4b9afb0fe0c2438eee910f41d5b21b7b92807cc\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/54/d5/7e/f687bbbfdb91a14e9eb6756d83f3ec896343c92dece05e4816\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Successfully built pypandoc py-cpuinfo\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Installing collected packages: certifi, ipaddress, six, pycparser, cffi, enum34, cryptography, idna, pyOpenSSL, urllib3-secure-extra, urllib3, chardet, requests, docopt, coverage, coveralls, typing, configparser, functools32, contextlib2, zipp, scandir, pathlib2, importlib-metadata, pyflakes, mccabe, pycodestyle, flake8, pluggy, pyparsing, packaging, backports.functools-lru-cache, wcwidth, funcsigs, atomicwrites, attrs, py, more-itertools, pytest, mock, pytest-mock, wheel, setuptools, ptyprocess, pexpect, pypandoc, docutils, statistics, py-cpuinfo, pytest-benchmark, pytest-docker-pexpect, pkginfo, Pygments, webencodings, bleach, readme-renderer, singledispatch, importlib-resources, tqdm, requests-toolbelt, twine\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |     Running setup.py install for docopt: started\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |     Running setup.py install for docopt: finished with status 'done'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |     Running setup.py install for functools32: started\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |     Running setup.py install for functools32: finished with status 'done'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |     Running setup.py install for scandir: started\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |     Running setup.py install for scandir: finished with status 'done'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |     Running setup.py install for atomicwrites: started\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |     Running setup.py install for atomicwrites: finished with status 'done'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   Attempting uninstall: setuptools\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |     Found existing installation: setuptools 41.2.0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |     Uninstalling setuptools-41.2.0:\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |       Successfully uninstalled setuptools-41.2.0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |     Running setup.py install for statistics: started\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |     Running setup.py install for statistics: finished with status 'done'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |     Running setup.py install for pytest-docker-pexpect: started\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |     Running setup.py install for pytest-docker-pexpect: finished with status 'done'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Successfully installed Pygments-2.5.2 atomicwrites-1.4.1 attrs-21.4.0 backports.functools-lru-cache-1.6.5 bleach-3.3.1 certifi-2021.10.8 cffi-1.15.1 chardet-4.0.0 configparser-4.0.2 contextlib2-0.6.0.post1 coverage-5.5 coveralls-1.11.1 cryptography-3.3.2 docopt-0.6.2 docutils-0.18.1 enum34-1.1.10 flake8-3.9.2 funcsigs-1.0.2 functools32-3.2.3.post2 idna-2.10 importlib-metadata-2.1.3 importlib-resources-3.3.1 ipaddress-1.0.23 mccabe-0.6.1 mock-3.0.5 more-itertools-5.0.0 packaging-20.9 pathlib2-2.3.7.post1 pexpect-4.8.0 pkginfo-1.8.3 pluggy-0.13.1 ptyprocess-0.7.0 py-1.11.0 py-cpuinfo-9.0.0 pyOpenSSL-21.0.0 pycodestyle-2.7.0 pycparser-2.21 pyflakes-2.3.1 pypandoc-1.7.5 pyparsing-2.4.7 pytest-4.6.11 pytest-benchmark-3.4.1 pytest-docker-pexpect-0.9 pytest-mock-2.0.0 readme-renderer-30.0 requests-2.27.1 requests-toolbelt-1.0.0 scandir-1.10.0 setuptools-44.1.1 singledispatch-3.7.0 six-1.16.0 statistics-1.0.3.5 tqdm-4.64.1 twine-1.15.0 typing-3.10.0.0 urllib3-1.26.16 urllib3-secure-extra-0.1.0 wcwidth-0.2.6 webencodings-0.5.1 wheel-0.37.1 zipp-1.2.0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | fastentrypoints\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | running develop\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | running egg_info\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | creating thefuck.egg-info\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | writing requirements to thefuck.egg-info/requires.txt\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | writing thefuck.egg-info/PKG-INFO\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | writing top-level names to thefuck.egg-info/top_level.txt\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | writing dependency_links to thefuck.egg-info/dependency_links.txt\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | writing entry points to thefuck.egg-info/entry_points.txt\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | writing manifest file 'thefuck.egg-info/SOURCES.txt'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | reading manifest file 'thefuck.egg-info/SOURCES.txt'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | reading manifest template 'MANIFEST.in'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | writing manifest file 'thefuck.egg-info/SOURCES.txt'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | running build_ext\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Creating /opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages/thefuck.egg-link (link to .)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Adding thefuck 3.32 to easy-install.pth file\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Installing thefuck script to /opt/hostedtoolcache/Python/2.7.18/x64/bin\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Installing fuck script to /opt/hostedtoolcache/Python/2.7.18/x64/bin\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | \n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Installed /tmp/558156d8-17ed-11ee-8a50-bb14de238602/nvbn-thefuck\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Processing dependencies for thefuck==3.32\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Searching for pyte<0.8.1\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Reading https://pypi.org/simple/pyte/\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Downloading https://files.pythonhosted.org/packages/d7/fa/f1c65cf79f3923569629e96134e6f648be9b866d81710a80ff7465d8a420/pyte-0.8.0-py2.py3-none-any.whl#sha256=dd16d25e4cd27642cbbe94f9e8eaa1c59b9389ce0943e971dd4786f4e52daee0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Best match: pyte 0.8.0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Processing pyte-0.8.0-py2.py3-none-any.whl\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Installing pyte-0.8.0-py2.py3-none-any.whl to /opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Adding pyte 0.8.0 to easy-install.pth file\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | \n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Installed /opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages/pyte-0.8.0-py2.7.egg\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Searching for decorator<5\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Reading https://pypi.org/simple/decorator/\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Downloading https://files.pythonhosted.org/packages/ed/1b/72a1821152d07cf1d8b6fce298aeb06a7eb90f4d6d41acec9861e7cc6df0/decorator-4.4.2-py2.py3-none-any.whl#sha256=41fa54c2a0cc4ba648be4fd43cff00aedf5b9465c9bf18d64325bc225f08f760\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Best match: decorator 4.4.2\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Processing decorator-4.4.2-py2.py3-none-any.whl\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Installing decorator-4.4.2-py2.py3-none-any.whl to /opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Adding decorator 4.4.2 to easy-install.pth file\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | \n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Installed /opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages/decorator-4.4.2-py2.7.egg\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Searching for backports.shutil_get_terminal_size\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Reading https://pypi.org/simple/backports.shutil_get_terminal_size/\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Downloading https://files.pythonhosted.org/packages/7d/cd/1750d6c35fe86d35f8562091737907f234b78fdffab42b29c72b1dd861f4/backports.shutil_get_terminal_size-1.0.0-py2.py3-none-any.whl#sha256=0975ba55054c15e346944b38956a4c9cbee9009391e41b86c68990effb8c1f64\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Best match: backports.shutil-get-terminal-size 1.0.0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Processing backports.shutil_get_terminal_size-1.0.0-py2.py3-none-any.whl\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Installing backports.shutil_get_terminal_size-1.0.0-py2.py3-none-any.whl to /opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Adding backports.shutil-get-terminal-size 1.0.0 to easy-install.pth file\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | \n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Installed /opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages/backports.shutil_get_terminal_size-1.0.0-py2.7.egg\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Searching for colorama\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Reading https://pypi.org/simple/colorama/\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Downloading https://files.pythonhosted.org/packages/d1/d6/3965ed04c63042e047cb6a3e6ed1a63a35087b6a609aa3a15ed8ac56c221/colorama-0.4.6-py2.py3-none-any.whl#sha256=4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Best match: colorama 0.4.6\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Processing colorama-0.4.6-py2.py3-none-any.whl\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Installing colorama-0.4.6-py2.py3-none-any.whl to /opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Adding colorama 0.4.6 to easy-install.pth file\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | \n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Installed /opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages/colorama-0.4.6-py2.7.egg\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Searching for psutil\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Reading https://pypi.org/simple/psutil/\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Downloading https://files.pythonhosted.org/packages/5f/da/de9d2342db0b7a96863ef84ab94ef1022eec78ece05aac253cddc494e1a7/psutil-5.9.5-cp27-cp27mu-manylinux2010_x86_64.whl#sha256=acf2aef9391710afded549ff602b5887d7a2349831ae4c26be7c807c0a39fac4\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Best match: psutil 5.9.5\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Processing psutil-5.9.5-cp27-cp27mu-manylinux2010_x86_64.whl\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Installing psutil-5.9.5-cp27-cp27mu-manylinux2010_x86_64.whl to /opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Adding psutil 5.9.5 to easy-install.pth file\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | \n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Installed /opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages/psutil-5.9.5-py2.7-linux-x86_64.egg\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Searching for pathlib2==2.3.7.post1\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Best match: pathlib2 2.3.7.post1\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Adding pathlib2 2.3.7.post1 to easy-install.pth file\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | \n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Using /opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Searching for six==1.16.0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Best match: six 1.16.0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Adding six 1.16.0 to easy-install.pth file\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | \n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Using /opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Searching for wcwidth==0.2.6\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Best match: wcwidth 0.2.6\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Adding wcwidth 0.2.6 to easy-install.pth file\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | \n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Using /opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Searching for scandir==1.10.0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Best match: scandir 1.10.0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Adding scandir 1.10.0 to easy-install.pth file\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | \n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Using /opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Searching for typing==3.10.0.0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Best match: typing 3.10.0.0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Adding typing 3.10.0.0 to easy-install.pth file\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | \n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Using /opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Searching for backports.functools-lru-cache==1.6.5\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Best match: backports.functools-lru-cache 1.6.5\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Adding backports.functools-lru-cache 1.6.5 to easy-install.pth file\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | \n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Using /opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7/site-packages\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Finished processing dependencies for thefuck==3.32\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \u2705  Success - Main Install The Fuck with all dependencies\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test] \u2b50 Run Main Run tests\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | ============================= test session starts ==============================\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | platform linux2 -- Python 2.7.18, pytest-4.6.11, py-1.11.0, pluggy-0.13.1 -- /opt/hostedtoolcache/Python/2.7.18/x64/bin/python\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | cachedir: .pytest_cache\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | benchmark: 3.4.1 (defaults: timer=time.time disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | rootdir: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/nvbn-thefuck\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | plugins: mock-2.0.0, docker-pexpect-0.9, benchmark-3.4.1\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | collecting ... collected 1949 items\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | \n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_argument_parser.py::test_parse[argv0-result0] PASSED          [  0%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_argument_parser.py::test_parse[argv1-result1] PASSED          [  0%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_argument_parser.py::test_parse[argv2-result2] PASSED          [  0%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_argument_parser.py::test_parse[argv3-result3] PASSED          [  0%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_argument_parser.py::test_parse[argv4-result4] PASSED          [  0%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_argument_parser.py::test_parse[argv5-result5] PASSED          [  0%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_argument_parser.py::test_parse[argv6-result6] PASSED          [  0%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_argument_parser.py::test_parse[argv7-result7] PASSED          [  0%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_argument_parser.py::test_parse[argv8-result8] PASSED          [  0%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_argument_parser.py::test_parse[argv9-result9] PASSED          [  0%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_argument_parser.py::test_parse[argv10-result10] PASSED        [  0%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_argument_parser.py::test_parse[argv11-result11] PASSED        [  0%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_conf.py::test_settings_defaults PASSED                        [  0%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_conf.py::TestSettingsFromFile::test_from_file PASSED          [  0%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_conf.py::TestSettingsFromFile::test_from_file_with_DEFAULT PASSED [  0%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_conf.py::TestSettingsFromEnv::test_from_env PASSED            [  0%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_conf.py::TestSettingsFromEnv::test_from_env_with_DEFAULT PASSED [  0%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_conf.py::test_settings_from_args PASSED                       [  0%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_conf.py::TestInitializeSettingsFile::test_ignore_if_exists PASSED [  0%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_conf.py::TestInitializeSettingsFile::test_create_if_doesnt_exists PASSED [  1%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_conf.py::test_get_user_dir_path[False-~/.config-~/.config/thefuck] PASSED [  1%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_conf.py::test_get_user_dir_path[False-/user/test/config/-/user/test/config/thefuck] PASSED [  1%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_conf.py::test_get_user_dir_path[True-~/.config-~/.thefuck] PASSED [  1%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_conf.py::test_get_user_dir_path[True-/user/test/config/-~/.thefuck] PASSED [  1%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_corrector.py::TestGetRules::test_get_rules[paths0-conf_rules0-exclude_rules0-loaded_rules0] PASSED [  1%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_corrector.py::TestGetRules::test_get_rules[paths1-conf_rules1-exclude_rules1-loaded_rules1] PASSED [  1%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_corrector.py::TestGetRules::test_get_rules[paths2-conf_rules2-exclude_rules2-loaded_rules2] PASSED [  1%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_corrector.py::TestGetRules::test_get_rules[paths3-conf_rules3-exclude_rules3-loaded_rules3] PASSED [  1%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_corrector.py::test_get_rules_rule_exception PASSED            [  1%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_corrector.py::test_get_corrected_commands PASSED              [  1%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_corrector.py::test_organize_commands PASSED                   [  1%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_logs.py::test_color PASSED                                    [  1%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_logs.py::test_debug[True-DEBUG: test\\n] PASSED                [  1%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_logs.py::test_debug[False-] PASSED                            [  1%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_readme.py::test_readme PASSED                                 [  1%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestCorrectedCommand::test_equality PASSED          [  1%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestCorrectedCommand::test_hashable PASSED          [  1%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestCorrectedCommand::test_representable PASSED     [  1%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestCorrectedCommand::test_run[git branch-git branch-override_settings0] PASSED [  2%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestCorrectedCommand::test_run[git brunch-git brunch || fuck --repeat --force-command 'git brunch'-override_settings1] PASSED [  2%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestCorrectedCommand::test_run[git brunch-git brunch || fuck --repeat --debug --force-command 'git brunch'-override_settings2] PASSED [  2%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestRule::test_from_path_rule_exception PASSED      [  2%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestRule::test_from_path PASSED                     [  2%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestRule::test_from_path_excluded_rule PASSED       [  2%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestRule::test_is_enabled[rules0-rule0-True] PASSED [  2%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestRule::test_is_enabled[rules1-rule1-False] PASSED [  2%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestRule::test_is_enabled[rules2-rule2-False] PASSED [  2%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestRule::test_is_enabled[rules3-rule3-False] PASSED [  2%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestRule::test_is_enabled[rules4-rule4-True] PASSED [  2%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestRule::test_is_enabled[rules5-rule5-True] PASSED [  2%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestRule::test_isnt_match PASSED                    [  2%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestRule::test_is_match PASSED                      [  2%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestRule::test_isnt_match_when_rule_failed PASSED   [  2%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestRule::test_get_corrected_commands_with_rule_returns_list PASSED [  2%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestRule::test_get_corrected_commands_with_rule_returns_command PASSED [  2%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestCommand::test_from_script_calls PASSED          [  2%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestCommand::test_from_script[script0-None] PASSED  [  2%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestCommand::test_from_script[script1-None] PASSED  [  2%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestCommand::test_from_script[script2-None] PASSED  [  3%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestCommand::test_from_script[script3-ls -la] PASSED [  3%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestCommand::test_from_script[script4-ls] PASSED    [  3%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestCommand::test_from_script[script5-echo \\ ] PASSED [  3%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_types.py::TestCommand::test_from_script[script6-echo \\\\n] PASSED [  3%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_ui.py::test_read_actions PASSED                               [  3%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_ui.py::test_command_selector PASSED                           [  3%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_ui.py::TestSelectCommand::test_without_commands PASSED        [  3%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_ui.py::TestSelectCommand::test_without_confirmation PASSED    [  3%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_ui.py::TestSelectCommand::test_without_confirmation_with_side_effects PASSED [  3%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_ui.py::TestSelectCommand::test_with_confirmation PASSED       [  3%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_ui.py::TestSelectCommand::test_with_confirmation_abort PASSED [  3%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_ui.py::TestSelectCommand::test_with_confirmation_with_side_effct PASSED [  3%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_ui.py::TestSelectCommand::test_with_confirmation_select_second PASSED [  3%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_default_settings[override0-old0-new0] PASSED   [  3%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_default_settings[override1-old1-new1] PASSED   [  3%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_default_settings[override2-old2-new2] PASSED   [  3%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_memoize PASSED                                 [  3%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_no_memoize PASSED                              [  3%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::TestGetClosest::test_when_can_match PASSED          [  4%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::TestGetClosest::test_when_cant_match PASSED         [  4%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::TestGetClosest::test_without_fallback PASSED        [  4%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::TestGetCloseMatches::test_call_with_n PASSED        [  4%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::TestGetCloseMatches::test_call_without_n PASSED     [  4%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_get_all_executables PASSED                     [  4%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_get_all_executables_pathsep[/foo:/bar:/baz:/foo/bar-:] PASSED [  4%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_get_all_executables_pathsep[C:\\\\foo;C:\\\\bar;C:\\\\baz;C:\\\\foo\\\\bar-;] PASSED [  4%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_get_all_executables_exclude_paths[/foo:/bar:/baz:/foo/bar:/mnt/foo-:-/mnt/foo] PASSED [  4%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_get_all_executables_exclude_paths[C:\\\\foo;C:\\\\bar;C:\\\\baz;C:\\\\foo\\\\bar;Z:\\\\foo-;-Z:\\\\foo] PASSED [  4%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_replace_argument[args0-apt-get install vim] PASSED [  4%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_replace_argument[args1-git branch] PASSED      [  4%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_get_all_matched_commands[git: 'cone' is not a git command. See 'git --help'.\\n\\nDid you mean one of these?\\n\\tclone-result0] PASSED [  4%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_get_all_matched_commands[git: 're' is not a git command. See 'git --help'.\\n\\nDid you mean one of these?\\n\\trebase\\n\\treset\\n\\tgrep\\n\\trm-result1] PASSED [  4%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_get_all_matched_commands[tsuru: \"target\" is not a tsuru command. See \"tsuru help\".\\n\\nDid you mean one of these?\\n\\tservice-add\\n\\tservice-bind\\n\\tservice-doc\\n\\tservice-info\\n\\tservice-list\\n\\tservice-remove\\n\\tservice-status\\n\\tservice-unbind-result2] PASSED [  4%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_is_app[/usr/bin/git diff-names0-True] PASSED   [  4%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_is_app[/bin/hdfs dfs -rm foo-names1-True] PASSED [  4%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_is_app[git diff-names2-True] PASSED            [  4%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_is_app[hub diff-names3-True] PASSED            [  4%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_is_app[hg diff-names4-False] PASSED            [  4%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_for_app[/usr/bin/git diff-names0-True] PASSED  [  5%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_for_app[/bin/hdfs dfs -rm foo-names1-True] PASSED [  5%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_for_app[git diff-names2-True] PASSED           [  5%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_for_app[hub diff-names3-True] PASSED           [  5%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::test_for_app[hg diff-names4-False] PASSED           [  5%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::TestCache::test_with_blank_cache PASSED             [  5%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::TestCache::test_with_filled_cache PASSED            [  5%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::TestCache::test_when_etag_changed PASSED            [  5%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::TestGetValidHistoryWithoutCurrent::test_get_valid_history_without_current[le cat-result0] PASSED [  5%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::TestGetValidHistoryWithoutCurrent::test_get_valid_history_without_current[diff x-result1] PASSED [  5%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::TestGetValidHistoryWithoutCurrent::test_get_valid_history_without_current[fuck-result2] PASSED [  5%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_utils.py::TestGetValidHistoryWithoutCurrent::test_get_valid_history_without_current[cafe \\xf4-result3] PASSED [  5%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/entrypoints/test_alias.py::test_get_alias[False-True-True-True] PASSED [  5%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/entrypoints/test_alias.py::test_get_alias[False-False-True-False] PASSED [  5%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/entrypoints/test_alias.py::test_get_alias[False-True-False-False] PASSED [  5%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/entrypoints/test_alias.py::test_get_alias[True-True-True-False] PASSED [  5%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/entrypoints/test_alias.py::test_get_alias[True-True-False-False] PASSED [  5%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/entrypoints/test_alias.py::test_get_alias[True-False-True-False] PASSED [  5%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/entrypoints/test_alias.py::test_print_alias PASSED                 [  5%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/entrypoints/test_fix_command.py::TestGetRawCommand::test_from_force_command_argument PASSED [  6%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/entrypoints/test_fix_command.py::TestGetRawCommand::test_from_command_argument PASSED [  6%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/entrypoints/test_fix_command.py::TestGetRawCommand::test_from_history[git br-git br] PASSED [  6%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/entrypoints/test_fix_command.py::TestGetRawCommand::test_from_history[git br\\nfcuk-git br] PASSED [  6%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/entrypoints/test_fix_command.py::TestGetRawCommand::test_from_history[git br\\nfcuk\\nls-ls] PASSED [  6%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/entrypoints/test_fix_command.py::TestGetRawCommand::test_from_history[git br\\nfcuk\\nls\\nfuk-ls] PASSED [  6%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/entrypoints/test_not_configured.py::test_for_generic_shell PASSED  [  6%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/entrypoints/test_not_configured.py::test_on_first_run PASSED       [  6%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/entrypoints/test_not_configured.py::test_on_run_after_other_commands PASSED [  6%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/entrypoints/test_not_configured.py::test_on_first_run_from_current_shell PASSED [  6%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/entrypoints/test_not_configured.py::test_when_cant_configure_automatically PASSED [  6%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/entrypoints/test_not_configured.py::test_when_already_configured PASSED [  6%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/entrypoints/test_not_configured.py::test_when_successfully_configured PASSED [  6%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_bash.py::test_with_confirmation[proc0] SKIPPED     [  6%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_bash.py::test_with_confirmation[proc1] SKIPPED     [  6%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_bash.py::test_with_confirmation[proc2] SKIPPED     [  6%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_bash.py::test_select_command_with_arrows[proc0] SKIPPED [  6%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_bash.py::test_select_command_with_arrows[proc1] SKIPPED [  6%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_bash.py::test_select_command_with_arrows[proc2] SKIPPED [  6%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_bash.py::test_refuse_with_confirmation[proc0] SKIPPED [  6%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_bash.py::test_refuse_with_confirmation[proc1] SKIPPED [  7%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_bash.py::test_refuse_with_confirmation[proc2] SKIPPED [  7%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_bash.py::test_without_confirmation[proc0] SKIPPED  [  7%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_bash.py::test_without_confirmation[proc1] SKIPPED  [  7%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_bash.py::test_without_confirmation[proc2] SKIPPED  [  7%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_bash.py::test_how_to_configure_alias[proc0] SKIPPED [  7%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_bash.py::test_how_to_configure_alias[proc1] SKIPPED [  7%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_bash.py::test_how_to_configure_alias[proc2] SKIPPED [  7%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_fish.py::test_with_confirmation[proc0] SKIPPED     [  7%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_fish.py::test_with_confirmation[proc1] SKIPPED     [  7%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_fish.py::test_select_command_with_arrows[proc0] SKIPPED [  7%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_fish.py::test_select_command_with_arrows[proc1] SKIPPED [  7%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_fish.py::test_refuse_with_confirmation[proc0] SKIPPED [  7%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_fish.py::test_refuse_with_confirmation[proc1] SKIPPED [  7%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_fish.py::test_without_confirmation[proc0] SKIPPED  [  7%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_fish.py::test_without_confirmation[proc1] SKIPPED  [  7%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_tcsh.py::test_with_confirmation[proc0] SKIPPED     [  7%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_tcsh.py::test_with_confirmation[proc1] SKIPPED     [  7%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_tcsh.py::test_select_command_with_arrows[proc0] SKIPPED [  7%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_tcsh.py::test_select_command_with_arrows[proc1] SKIPPED [  8%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_tcsh.py::test_refuse_with_confirmation[proc0] SKIPPED [  8%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_tcsh.py::test_refuse_with_confirmation[proc1] SKIPPED [  8%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_tcsh.py::test_without_confirmation[proc0] SKIPPED  [  8%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_tcsh.py::test_without_confirmation[proc1] SKIPPED  [  8%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_zsh.py::test_with_confirmation[proc0] SKIPPED      [  8%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_zsh.py::test_with_confirmation[proc1] SKIPPED      [  8%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_zsh.py::test_with_confirmation[proc2] SKIPPED      [  8%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_zsh.py::test_select_command_with_arrows[proc0] SKIPPED [  8%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_zsh.py::test_select_command_with_arrows[proc1] SKIPPED [  8%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_zsh.py::test_select_command_with_arrows[proc2] SKIPPED [  8%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_zsh.py::test_refuse_with_confirmation[proc0] SKIPPED [  8%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_zsh.py::test_refuse_with_confirmation[proc1] SKIPPED [  8%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_zsh.py::test_refuse_with_confirmation[proc2] SKIPPED [  8%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_zsh.py::test_without_confirmation[proc0] SKIPPED   [  8%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_zsh.py::test_without_confirmation[proc1] SKIPPED   [  8%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_zsh.py::test_without_confirmation[proc2] SKIPPED   [  8%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_zsh.py::test_how_to_configure_alias[proc0] SKIPPED [  8%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_zsh.py::test_how_to_configure_alias[proc1] SKIPPED [  8%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/functional/test_zsh.py::test_how_to_configure_alias[proc2] SKIPPED [  8%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/output_readers/test_rerun.py::TestRerun::test_get_output PASSED    [  9%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/output_readers/test_rerun.py::TestRerun::test_get_output_invalid_continuation_byte PASSED [  9%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/output_readers/test_rerun.py::TestRerun::test_get_output_unicode_misspell PASSED [  9%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/output_readers/test_rerun.py::TestRerun::test_wait_output_is_slow PASSED [  9%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/output_readers/test_rerun.py::TestRerun::test_wait_output_is_not_slow PASSED [  9%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/output_readers/test_rerun.py::TestRerun::test_wait_output_timeout PASSED [  9%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/output_readers/test_rerun.py::TestRerun::test_wait_output_timeout_children PASSED [  9%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/output_readers/test_rerun.py::TestRerun::test_kill_process PASSED  [  9%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/output_readers/test_rerun.py::TestRerun::test_kill_process_access_denied PASSED [  9%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_adb_unknown_command.py::test_match[adb lgcat] PASSED    [  9%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_adb_unknown_command.py::test_match[adb puhs] PASSED     [  9%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_adb_unknown_command.py::test_not_match[git branch foo] PASSED [  9%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_adb_unknown_command.py::test_not_match[abd push] PASSED [  9%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_adb_unknown_command.py::test_get_new_command[adb puhs test.bin /sdcard/test.bin-adb push test.bin /sdcard/test.bin] PASSED [  9%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_adb_unknown_command.py::test_get_new_command[adb -s 1111 logcta-adb -s 1111 logcat] PASSED [  9%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_adb_unknown_command.py::test_get_new_command[adb -P 666 pulll /sdcard/test.bin-adb -P 666 pull /sdcard/test.bin] PASSED [  9%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_adb_unknown_command.py::test_get_new_command[adb -d logcatt-adb -d logcat] PASSED [  9%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_adb_unknown_command.py::test_get_new_command[adb -e reboott-adb -e reboot] PASSED [  9%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ag_literal.py::test_match[ag \\(] PASSED                 [  9%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ag_literal.py::test_not_match[ag foo] PASSED            [ 10%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ag_literal.py::test_get_new_command[ag \\(-ag -Q \\(] PASSED [ 10%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_get.py::test_match[command0-packages0] PASSED       [ 10%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_get.py::test_match[command1-packages1] PASSED       [ 10%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_get.py::test_match[command2-packages2] PASSED       [ 10%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_get.py::test_not_match[command0-packages0-None] PASSED [ 10%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_get.py::test_not_match[command1-packages1-None] PASSED [ 10%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_get.py::test_not_match[command2-packages2-None] PASSED [ 10%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_get.py::test_not_match[command3-packages3-/usr/bin/vim] PASSED [ 10%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_get.py::test_not_match[command4-packages4-/usr/bin/vim] PASSED [ 10%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_get.py::test_get_new_command[command0-sudo apt-get install vim && vim-packages0] PASSED [ 10%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_get.py::test_get_new_command[command1-sudo apt-get install imagemagick && convert-packages1] PASSED [ 10%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_get.py::test_get_new_command[command2-sudo apt-get install vim && sudo vim-packages2] PASSED [ 10%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_get.py::test_get_new_command[command3-sudo apt-get install imagemagick && sudo convert-packages3] PASSED [ 10%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_get_search.py::test_match PASSED                    [ 10%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_get_search.py::test_not_match[command0] PASSED      [ 10%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_get_search.py::test_not_match[command1] PASSED      [ 10%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_get_search.py::test_not_match[command2] PASSED      [ 10%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_get_search.py::test_not_match[command3] PASSED      [ 10%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_get_search.py::test_not_match[command4] PASSED      [ 10%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_get_search.py::test_not_match[command5] PASSED      [ 11%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_get_search.py::test_not_match[command6] PASSED      [ 11%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_get_search.py::test_not_match[command7] PASSED      [ 11%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_get_search.py::test_get_new_command PASSED          [ 11%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_invalid_operation.py::test_match[apt-E: Invalid operation saerch] PASSED [ 11%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_invalid_operation.py::test_match[apt-get-E: Invalid operation isntall] PASSED [ 11%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_invalid_operation.py::test_match[apt-cache-E: Invalid operation rumove] PASSED [ 11%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_invalid_operation.py::test_not_match[vim-E: Invalid operation vim] PASSED [ 11%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_invalid_operation.py::test_not_match[apt-get-] PASSED [ 11%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_invalid_operation.py::test_get_operations[apt-apt 1.0.10.2ubuntu1 for amd64 compiled on Oct  5 2015 15:55:05\\nUsage: apt [options] command\\n\\nCLI for apt.\\nBasic commands:\\n list - list packages based on package names\\n search - search in package descriptions\\n show - show package details\\n\\n update - update list of available packages\\n\\n install - install packages\\n remove  - remove packages\\n\\n upgrade - upgrade the system by installing/upgrading packages\\n full-upgrade - upgrade the system by removing/installing/upgrading packages\\n\\n edit-sources - edit the source information file\\n-operations0] PASSED [ 11%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_invalid_operation.py::test_get_operations[apt-get-apt 1.0.10.2ubuntu1 for amd64 compiled on Oct  5 2015 15:55:05\\nUsage: apt-get [options] command\\n       apt-get [options] install|remove pkg1 [pkg2 ...]\\n       apt-get [options] source pkg1 [pkg2 ...]\\n\\napt-get is a simple command line interface for downloading and\\ninstalling packages. The most frequently used commands are update\\nand install.\\n\\nCommands:\\n   update - Retrieve new lists of packages\\n   upgrade - Perform an upgrade\\n   install - Install new packages (pkg is libc6 not libc6.deb)\\n   remove - Remove packages\\n   autoremove - Remove automatically all unused packages\\n   purge - Remove packages and config files\\n   source - Download source archives\\n   build-dep - Configure build-dependencies for source packages\\n   dist-upgrade - Distribution upgrade, see apt-get(8)\\n   dselect-upgrade - Follow dselect selections\\n   clean - Erase downloaded archive files\\n   autoclean - Erase old downloaded archive files\\n   check - Verify that there are no broken dependencies\\n   changelog - Download and display the changelog for the given package\\n   download - Download the binary package into the current directory\\n\\nOptions:\\n  -h  This help text.\\n  -q  Loggable output - no progress indicator\\n  -qq No output except for errors\\n  -d  Download only - do NOT install or unpack archives\\n  -s  No-act. Perform ordering simulation\\n  -y  Assume Yes to all queries and do not prompt\\n  -f  Attempt to correct a system with broken dependencies in place\\n  -m  Attempt to continue if archives are unlocatable\\n  -u  Show a list of upgraded packages as well\\n  -b  Build the source package after fetching it\\n  -V  Show verbose version numbers\\n  -c=? Read this configuration file\\n  -o=? Set an arbitrary configuration option, eg -o dir::cache=/tmp\\nSee the apt-get(8), sources.list(5) and apt.conf(5) manual\\npages for more information and options.\\n                       This APT has Super Cow Powers.\\n-operations1] PASSED [ 11%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_invalid_operation.py::test_get_operations[apt-get-apt 1.6.12 (amd64)\\nUsage: apt-get [options] command\\n       apt-get [options] install|remove pkg1 [pkg2 ...]\\n       apt-get [options] source pkg1 [pkg2 ...]\\n\\napt-get is a command line interface for retrieval of packages\\nand information about them from authenticated sources and\\nfor installation, upgrade and removal of packages together\\nwith their dependencies.\\n\\nMost used commands:\\n  update - Retrieve new lists of packages\\n  upgrade - Perform an upgrade\\n  install - Install new packages (pkg is libc6 not libc6.deb)\\n  remove - Remove packages\\n  purge - Remove packages and config files\\n  autoremove - Remove automatically all unused packages\\n  dist-upgrade - Distribution upgrade, see apt-get(8)\\n  dselect-upgrade - Follow dselect selections\\n  build-dep - Configure build-dependencies for source packages\\n  clean - Erase downloaded archive files\\n  autoclean - Erase old downloaded archive files\\n  check - Verify that there are no broken dependencies\\n  source - Download source archives\\n  download - Download the binary package into the current directory\\n  changelog - Download and display the changelog for the given package\\n\\nSee apt-get(8) for more information about the available commands.\\nConfiguration options and syntax is detailed in apt.conf(5).\\nInformation about how to configure sources can be found in sources.list(5).\\nPackage and version choices can be expressed via apt_preferences(5).\\nSecurity details are available in apt-secure(8).\\n                                        This APT has Super Cow Powers.\\n-operations2] PASSED [ 11%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_invalid_operation.py::test_get_new_command[apt-get isntall vim-E: Invalid operation isntall-apt 1.0.10.2ubuntu1 for amd64 compiled on Oct  5 2015 15:55:05\\nUsage: apt-get [options] command\\n       apt-get [options] install|remove pkg1 [pkg2 ...]\\n       apt-get [options] source pkg1 [pkg2 ...]\\n\\napt-get is a simple command line interface for downloading and\\ninstalling packages. The most frequently used commands are update\\nand install.\\n\\nCommands:\\n   update - Retrieve new lists of packages\\n   upgrade - Perform an upgrade\\n   install - Install new packages (pkg is libc6 not libc6.deb)\\n   remove - Remove packages\\n   autoremove - Remove automatically all unused packages\\n   purge - Remove packages and config files\\n   source - Download source archives\\n   build-dep - Configure build-dependencies for source packages\\n   dist-upgrade - Distribution upgrade, see apt-get(8)\\n   dselect-upgrade - Follow dselect selections\\n   clean - Erase downloaded archive files\\n   autoclean - Erase old downloaded archive files\\n   check - Verify that there are no broken dependencies\\n   changelog - Download and display the changelog for the given package\\n   download - Download the binary package into the current directory\\n\\nOptions:\\n  -h  This help text.\\n  -q  Loggable output - no progress indicator\\n  -qq No output except for errors\\n  -d  Download only - do NOT install or unpack archives\\n  -s  No-act. Perform ordering simulation\\n  -y  Assume Yes to all queries and do not prompt\\n  -f  Attempt to correct a system with broken dependencies in place\\n  -m  Attempt to continue if archives are unlocatable\\n  -u  Show a list of upgraded packages as well\\n  -b  Build the source package after fetching it\\n  -V  Show verbose version numbers\\n  -c=? Read this configuration file\\n  -o=? Set an arbitrary configuration option, eg -o dir::cache=/tmp\\nSee the apt-get(8), sources.list(5) and apt.conf(5) manual\\npages for more information and options.\\n                       This APT has Super Cow Powers.\\n-apt-get install vim] PASSED [ 11%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_invalid_operation.py::test_get_new_command[apt saerch vim-E: Invalid operation saerch-apt 1.0.10.2ubuntu1 for amd64 compiled on Oct  5 2015 15:55:05\\nUsage: apt [options] command\\n\\nCLI for apt.\\nBasic commands:\\n list - list packages based on package names\\n search - search in package descriptions\\n show - show package details\\n\\n update - update list of available packages\\n\\n install - install packages\\n remove  - remove packages\\n\\n upgrade - upgrade the system by installing/upgrading packages\\n full-upgrade - upgrade the system by removing/installing/upgrading packages\\n\\n edit-sources - edit the source information file\\n-apt search vim] PASSED [ 11%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_invalid_operation.py::test_get_new_command[apt uninstall vim-E: Invalid operation uninstall-apt 1.0.10.2ubuntu1 for amd64 compiled on Oct  5 2015 15:55:05\\nUsage: apt [options] command\\n\\nCLI for apt.\\nBasic commands:\\n list - list packages based on package names\\n search - search in package descriptions\\n show - show package details\\n\\n update - update list of available packages\\n\\n install - install packages\\n remove  - remove packages\\n\\n upgrade - upgrade the system by installing/upgrading packages\\n full-upgrade - upgrade the system by removing/installing/upgrading packages\\n\\n edit-sources - edit the source information file\\n-apt remove vim] PASSED [ 11%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_list_upgradable.py::test_match[\\nHit:1 http://us.archive.ubuntu.com/ubuntu zesty InRelease\\nHit:2 http://us.archive.ubuntu.com/ubuntu zesty-updates InRelease\\nGet:3 http://us.archive.ubuntu.com/ubuntu zesty-backports InRelease [89.2 kB]\\nHit:4 http://security.ubuntu.com/ubuntu zesty-security InRelease\\nHit:5 http://ppa.launchpad.net/ubuntu-mozilla-daily/ppa/ubuntu zesty InRelease\\nHit:6 https://download.docker.com/linux/ubuntu zesty InRelease\\nHit:7 https://cli-assets.heroku.com/branches/stable/apt ./ InRelease\\nFetched 89.2 kB in 0s (122 kB/s)\\nReading package lists... Done\\nBuilding dependency tree\\nReading state information... Done\\n8 packages can be upgraded. Run 'apt list --upgradable' to see them.\\n] PASSED [ 11%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_list_upgradable.py::test_match[F\\xc3\\xbchren Sie \\xc2\\xbbapt list --upgradable\\xc2\\xab aus, um sie anzuzeigen.] PASSED [ 11%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_list_upgradable.py::test_not_match[command0] PASSED [ 11%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_list_upgradable.py::test_not_match[command1] PASSED [ 11%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_list_upgradable.py::test_not_match[command2] PASSED [ 12%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_list_upgradable.py::test_not_match[command3] PASSED [ 12%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_list_upgradable.py::test_not_match[command4] PASSED [ 12%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_list_upgradable.py::test_not_match[command5] PASSED [ 12%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_list_upgradable.py::test_not_match[command6] PASSED [ 12%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_list_upgradable.py::test_not_match[command7] PASSED [ 12%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_list_upgradable.py::test_not_match[command8] PASSED [ 12%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_list_upgradable.py::test_get_new_command[\\nHit:1 http://us.archive.ubuntu.com/ubuntu zesty InRelease\\nHit:2 http://us.archive.ubuntu.com/ubuntu zesty-updates InRelease\\nGet:3 http://us.archive.ubuntu.com/ubuntu zesty-backports InRelease [89.2 kB]\\nHit:4 http://security.ubuntu.com/ubuntu zesty-security InRelease\\nHit:5 http://ppa.launchpad.net/ubuntu-mozilla-daily/ppa/ubuntu zesty InRelease\\nHit:6 https://download.docker.com/linux/ubuntu zesty InRelease\\nHit:7 https://cli-assets.heroku.com/branches/stable/apt ./ InRelease\\nFetched 89.2 kB in 0s (122 kB/s)\\nReading package lists... Done\\nBuilding dependency tree\\nReading state information... Done\\n8 packages can be upgraded. Run 'apt list --upgradable' to see them.\\n] PASSED [ 12%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_list_upgradable.py::test_get_new_command[F\\xc3\\xbchren Sie \\xc2\\xbbapt list --upgradable\\xc2\\xab aus, um sie anzuzeigen.] PASSED [ 12%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_upgrade.py::test_match PASSED                       [ 12%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_upgrade.py::test_not_match[command0] PASSED         [ 12%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_upgrade.py::test_not_match[command1] PASSED         [ 12%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_apt_upgrade.py::test_get_new_command PASSED             [ 12%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_aws_cli.py::test_match[command0] PASSED                 [ 12%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_aws_cli.py::test_match[command1] PASSED                 [ 12%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_aws_cli.py::test_match[command2] PASSED                 [ 12%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_aws_cli.py::test_not_match PASSED                       [ 12%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_aws_cli.py::test_get_new_command[command0-result0] PASSED [ 12%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_aws_cli.py::test_get_new_command[command1-result1] PASSED [ 12%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_aws_cli.py::test_get_new_command[command2-result2] PASSED [ 12%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_az_cli.py::test_match[command0] PASSED                  [ 13%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_az_cli.py::test_match[command1] PASSED                  [ 13%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_az_cli.py::test_not_match PASSED                        [ 13%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_az_cli.py::test_get_new_command[command0-result0] PASSED [ 13%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_az_cli.py::test_get_new_command[command1-result1] PASSED [ 13%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_cask_dependency.py::test_match PASSED              [ 13%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_cask_dependency.py::test_not_match[brew link sshfs-sshfs: OsxfuseRequirement unsatisfied!\\n\\nYou can install with Homebrew-Cask:\\n  brew cask install osxfuse\\n\\nYou can download from:\\n  https://osxfuse.github.io/\\nError: An unsatisfied requirement failed this build.] PASSED [ 13%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_cask_dependency.py::test_not_match[cat output-sshfs: OsxfuseRequirement unsatisfied!\\n\\nYou can install with Homebrew-Cask:\\n  brew cask install osxfuse\\n\\nYou can download from:\\n  https://osxfuse.github.io/\\nError: An unsatisfied requirement failed this build.] PASSED [ 13%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_cask_dependency.py::test_not_match[brew install sshfs-] PASSED [ 13%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_cask_dependency.py::test_get_new_command[brew install sshfs-brew cask install osxfuse && brew install sshfs] PASSED [ 13%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_install.py::test_suggestions PASSED                [ 13%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_install.py::test_match PASSED                      [ 13%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_install.py::test_get_new_command PASSED            [ 13%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_link.py::test_match[brew link coreutils] PASSED    [ 13%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_link.py::test_match[brew ln coreutils] PASSED      [ 13%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_link.py::test_not_match[brew link coreutils] PASSED [ 13%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_link.py::test_get_new_command[brew link coreutils-coreutils] PASSED [ 13%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_reinstall.py::test_match PASSED                    [ 13%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_reinstall.py::test_not_match[brew reinstall thefuck] PASSED [ 13%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_reinstall.py::test_not_match[brew install foo] PASSED [ 14%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_reinstall.py::test_get_new_command[brew install foo-foo] PASSED [ 14%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_reinstall.py::test_get_new_command[brew install bar zap-bar zap] PASSED [ 14%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_uninstall.py::test_match[brew uninstall tbb] PASSED [ 14%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_uninstall.py::test_match[brew rm tbb] PASSED       [ 14%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_uninstall.py::test_match[brew remove tbb] PASSED   [ 14%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_uninstall.py::test_not_match[brew remove gnuplot] PASSED [ 14%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_uninstall.py::test_get_new_command[brew uninstall tbb-tbb] PASSED [ 14%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_unknown_command.py::test_match PASSED              [ 14%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_unknown_command.py::test_get_new_command PASSED    [ 14%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_update_formula.py::test_match PASSED               [ 14%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_update_formula.py::test_not_match[brew upgrade foo] PASSED [ 14%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_update_formula.py::test_not_match[brew update] PASSED [ 14%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_update_formula.py::test_get_new_command[brew update foo-foo] PASSED [ 14%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_brew_update_formula.py::test_get_new_command[brew update bar zap-bar zap] PASSED [ 14%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cargo_no_command.py::test_match[command0] PASSED        [ 14%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cargo_no_command.py::test_match[command1] PASSED        [ 14%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cargo_no_command.py::test_get_new_command[command0-cargo build] PASSED [ 14%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cargo_no_command.py::test_get_new_command[command1-cargo build] PASSED [ 14%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cat_dir.py::test_match[command0] PASSED                 [ 14%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cat_dir.py::test_match[command1] PASSED                 [ 15%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cat_dir.py::test_match[command2] PASSED                 [ 15%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cat_dir.py::test_not_match[command0] PASSED             [ 15%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cat_dir.py::test_not_match[command1] PASSED             [ 15%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cat_dir.py::test_not_match[command2] PASSED             [ 15%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cat_dir.py::test_get_new_command[command0-ls foo] PASSED [ 15%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cat_dir.py::test_get_new_command[command1-ls /foo/bar/] PASSED [ 15%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cat_dir.py::test_get_new_command[command2-ls cat] PASSED [ 15%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cd_correction.py::test_match[command0] PASSED           [ 15%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cd_correction.py::test_match[command1] PASSED           [ 15%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cd_correction.py::test_match[command2] PASSED           [ 15%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cd_correction.py::test_match[command3] PASSED           [ 15%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cd_correction.py::test_not_match[command0] PASSED       [ 15%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cd_correction.py::test_not_match[command1] PASSED       [ 15%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cd_cs.py::test_match PASSED                             [ 15%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cd_cs.py::test_get_new_command PASSED                   [ 15%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cd_mkdir.py::test_match[command0] PASSED                [ 15%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cd_mkdir.py::test_match[command1] PASSED                [ 15%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cd_mkdir.py::test_match[command2] PASSED                [ 15%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cd_mkdir.py::test_match[command3] PASSED                [ 16%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cd_mkdir.py::test_not_match[command0] PASSED            [ 16%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cd_mkdir.py::test_not_match[command1] PASSED            [ 16%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cd_mkdir.py::test_get_new_command[command0-mkdir -p foo && cd foo] PASSED [ 16%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cd_mkdir.py::test_get_new_command[command1-mkdir -p foo/bar/baz && cd foo/bar/baz] PASSED [ 16%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cd_parent.py::test_match PASSED                         [ 16%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cd_parent.py::test_get_new_command PASSED               [ 16%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_chmod_x.py::test_match[./gradlew build-gradlew: Permission denied] PASSED [ 16%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_chmod_x.py::test_match[./install.sh --help-install.sh: permission denied] PASSED [ 16%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_chmod_x.py::test_not_match[./gradlew build-gradlew: Permission denied-True-True] PASSED [ 16%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_chmod_x.py::test_not_match[./gradlew build-gradlew: Permission denied-False-False] PASSED [ 16%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_chmod_x.py::test_not_match[./gradlew build-gradlew: error-True-False] PASSED [ 16%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_chmod_x.py::test_not_match[gradlew build-gradlew: Permission denied-True-False] PASSED [ 16%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_chmod_x.py::test_get_new_command[./gradlew build-chmod +x gradlew && ./gradlew build] PASSED [ 16%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_chmod_x.py::test_get_new_command[./install.sh --help-chmod +x install.sh && ./install.sh --help] PASSED [ 16%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_choco_install.py::test_match[command0] PASSED           [ 16%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_choco_install.py::test_match[command1] PASSED           [ 16%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_choco_install.py::test_match[command2] PASSED           [ 16%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_choco_install.py::test_match[command3] PASSED           [ 16%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_choco_install.py::test_match[command4] PASSED           [ 16%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_choco_install.py::test_match[command5] PASSED           [ 17%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_choco_install.py::test_match[command6] PASSED           [ 17%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_choco_install.py::test_match[command7] PASSED           [ 17%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_choco_install.py::test_match[command8] PASSED           [ 17%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_choco_install.py::test_match[command9] PASSED           [ 17%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_choco_install.py::test_get_new_command[choco install logstitcher-choco install logstitcher.install] PASSED [ 17%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_choco_install.py::test_get_new_command[cinst logstitcher-cinst logstitcher.install] PASSED [ 17%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_choco_install.py::test_get_new_command[choco install logstitcher -y-choco install logstitcher.install -y] PASSED [ 17%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_choco_install.py::test_get_new_command[cinst logstitcher -y-cinst logstitcher.install -y] PASSED [ 17%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_choco_install.py::test_get_new_command[choco install logstitcher -y -n=test-choco install logstitcher.install -y -n=test] PASSED [ 17%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_choco_install.py::test_get_new_command[cinst logstitcher -y -n=test-cinst logstitcher.install -y -n=test] PASSED [ 17%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_choco_install.py::test_get_new_command[choco install logstitcher -y -n=test /env-choco install logstitcher.install -y -n=test /env] PASSED [ 17%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_choco_install.py::test_get_new_command[cinst logstitcher -y -n=test /env-cinst logstitcher.install -y -n=test /env] PASSED [ 17%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_choco_install.py::test_get_new_command[choco install chocolatey -y-choco install chocolatey.install -y] PASSED [ 17%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_choco_install.py::test_get_new_command[cinst chocolatey -y-cinst chocolatey.install -y] PASSED [ 17%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_composer_not_command.py::test_match PASSED              [ 17%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_composer_not_command.py::test_get_new_command PASSED    [ 17%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_conda_mistype.py::test_match PASSED                     [ 17%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_conda_mistype.py::test_get_new_command PASSED           [ 17%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cp_create_destination.py::test_match[cp-cp: directory foo does not exist\\n] PASSED [ 18%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cp_create_destination.py::test_match[mv-No such file or directory] PASSED [ 18%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cp_create_destination.py::test_not_match[cp-] PASSED    [ 18%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cp_create_destination.py::test_not_match[mv-] PASSED    [ 18%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cp_create_destination.py::test_not_match[ls-No such file or directory] PASSED [ 18%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cp_create_destination.py::test_get_new_command[cp foo bar/-cp: directory foo does not exist\\n-mkdir -p bar/ && cp foo bar/] PASSED [ 18%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cp_create_destination.py::test_get_new_command[mv foo bar/-No such file or directory-mkdir -p bar/ && mv foo bar/] PASSED [ 18%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cp_create_destination.py::test_get_new_command[cp foo bar/baz/-cp: directory foo does not exist\\n-mkdir -p bar/baz/ && cp foo bar/baz/] PASSED [ 18%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cp_omitting_directory.py::test_match[cp dir-cp: dor: is a directory] PASSED [ 18%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cp_omitting_directory.py::test_match[cp dir-cp: omitting directory 'dir'] PASSED [ 18%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cp_omitting_directory.py::test_not_match[some dir-cp: dor: is a directory] PASSED [ 18%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cp_omitting_directory.py::test_not_match[some dir-cp: omitting directory 'dir'] PASSED [ 18%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cp_omitting_directory.py::test_not_match[cp dir-] PASSED [ 18%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_cp_omitting_directory.py::test_get_new_command PASSED   [ 18%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar] PASSED [ 18%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.Z] PASSED [ 18%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.bz2] PASSED [ 18%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.gz] PASSED [ 18%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lz] PASSED [ 18%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lzma] PASSED [ 18%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.xz] PASSED [ 19%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.taz] PASSED [ 19%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tb2] PASSED [ 19%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz] PASSED [ 19%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz2] PASSED [ 19%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tgz] PASSED [ 19%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tlz] PASSED [ 19%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.txz] PASSED [ 19%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tz] PASSED [ 19%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar] PASSED [ 19%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.Z] PASSED [ 19%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.bz2] PASSED [ 19%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.gz] PASSED [ 19%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lz] PASSED [ 19%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lzma] PASSED [ 19%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.xz] PASSED [ 19%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.taz] PASSED [ 19%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tb2] PASSED [ 19%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz] PASSED [ 19%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz2] PASSED [ 20%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tgz] PASSED [ 20%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tlz] PASSED [ 20%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.txz] PASSED [ 20%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tz] PASSED [ 20%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar] PASSED [ 20%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.Z] PASSED [ 20%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.bz2] PASSED [ 20%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.gz] PASSED [ 20%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lz] PASSED [ 20%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lzma] PASSED [ 20%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.xz] PASSED [ 20%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.taz] PASSED [ 20%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tb2] PASSED [ 20%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz] PASSED [ 20%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz2] PASSED [ 20%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tgz] PASSED [ 20%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tlz] PASSED [ 20%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.txz] PASSED [ 20%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tz] PASSED [ 20%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar] PASSED [ 21%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.Z] PASSED [ 21%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.bz2] PASSED [ 21%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.gz] PASSED [ 21%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lz] PASSED [ 21%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lzma] PASSED [ 21%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.xz] PASSED [ 21%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.taz] PASSED [ 21%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tb2] PASSED [ 21%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz] PASSED [ 21%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz2] PASSED [ 21%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tgz] PASSED [ 21%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tlz] PASSED [ 21%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.txz] PASSED [ 21%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tz] PASSED [ 21%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar] PASSED [ 21%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.Z] PASSED [ 21%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.bz2] PASSED [ 21%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.gz] PASSED [ 21%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lz] PASSED [ 22%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lzma] PASSED [ 22%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.xz] PASSED [ 22%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.taz] PASSED [ 22%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tb2] PASSED [ 22%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz] PASSED [ 22%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz2] PASSED [ 22%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tgz] PASSED [ 22%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tlz] PASSED [ 22%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.txz] PASSED [ 22%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tz] PASSED [ 22%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar] PASSED [ 22%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.Z] PASSED [ 22%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.bz2] PASSED [ 22%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.gz] PASSED [ 22%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lz] PASSED [ 22%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lzma] PASSED [ 22%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.xz] PASSED [ 22%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.taz] PASSED [ 22%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tb2] PASSED [ 22%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz] PASSED [ 23%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz2] PASSED [ 23%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tgz] PASSED [ 23%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tlz] PASSED [ 23%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.txz] PASSED [ 23%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_match[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tz] PASSED [ 23%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar] PASSED [ 23%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.Z] PASSED [ 23%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.bz2] PASSED [ 23%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.gz] PASSED [ 23%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lz] PASSED [ 23%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lzma] PASSED [ 23%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.xz] PASSED [ 23%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.taz] PASSED [ 23%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tb2] PASSED [ 23%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz] PASSED [ 23%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz2] PASSED [ 23%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tgz] PASSED [ 23%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tlz] PASSED [ 23%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.txz] PASSED [ 24%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tz] PASSED [ 24%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar] PASSED [ 24%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.Z] PASSED [ 24%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.bz2] PASSED [ 24%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.gz] PASSED [ 24%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lz] PASSED [ 24%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lzma] PASSED [ 24%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.xz] PASSED [ 24%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.taz] PASSED [ 24%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tb2] PASSED [ 24%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz] PASSED [ 24%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz2] PASSED [ 24%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tgz] PASSED [ 24%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tlz] PASSED [ 24%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.txz] PASSED [ 24%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tz] PASSED [ 24%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar] PASSED [ 24%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.Z] PASSED [ 24%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.bz2] PASSED [ 24%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.gz] PASSED [ 25%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lz] PASSED [ 25%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lzma] PASSED [ 25%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.xz] PASSED [ 25%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.taz] PASSED [ 25%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tb2] PASSED [ 25%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz] PASSED [ 25%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz2] PASSED [ 25%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tgz] PASSED [ 25%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tlz] PASSED [ 25%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.txz] PASSED [ 25%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tz] PASSED [ 25%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar] PASSED [ 25%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.Z] PASSED [ 25%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.bz2] PASSED [ 25%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.gz] PASSED [ 25%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lz] PASSED [ 25%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lzma] PASSED [ 25%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.xz] PASSED [ 25%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.taz] PASSED [ 26%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tb2] PASSED [ 26%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz] PASSED [ 26%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz2] PASSED [ 26%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tgz] PASSED [ 26%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tlz] PASSED [ 26%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.txz] PASSED [ 26%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tz] PASSED [ 26%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar] PASSED [ 26%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.Z] PASSED [ 26%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.bz2] PASSED [ 26%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.gz] PASSED [ 26%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lz] PASSED [ 26%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lzma] PASSED [ 26%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.xz] PASSED [ 26%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.taz] PASSED [ 26%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tb2] PASSED [ 26%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz] PASSED [ 26%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz2] PASSED [ 26%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tgz] PASSED [ 26%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tlz] PASSED [ 27%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.txz] PASSED [ 27%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tz] PASSED [ 27%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar] PASSED [ 27%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.Z] PASSED [ 27%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.bz2] PASSED [ 27%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.gz] PASSED [ 27%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lz] PASSED [ 27%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lzma] PASSED [ 27%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.xz] PASSED [ 27%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.taz] PASSED [ 27%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tb2] PASSED [ 27%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz] PASSED [ 27%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz2] PASSED [ 27%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tgz] PASSED [ 27%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tlz] PASSED [ 27%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.txz] PASSED [ 27%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_side_effect[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tz] PASSED [ 27%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar] PASSED [ 27%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.Z] PASSED [ 28%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.bz2] PASSED [ 28%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.gz] PASSED [ 28%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lz] PASSED [ 28%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lzma] PASSED [ 28%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.xz] PASSED [ 28%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.taz] PASSED [ 28%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tb2] PASSED [ 28%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz] PASSED [ 28%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz2] PASSED [ 28%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tgz] PASSED [ 28%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tlz] PASSED [ 28%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.txz] PASSED [ 28%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tz] PASSED [ 28%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar] PASSED [ 28%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.Z] PASSED [ 28%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.bz2] PASSED [ 28%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.gz] PASSED [ 28%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lz] PASSED [ 28%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lzma] PASSED [ 28%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.xz] PASSED [ 29%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.taz] PASSED [ 29%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tb2] PASSED [ 29%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz] PASSED [ 29%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz2] PASSED [ 29%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tgz] PASSED [ 29%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tlz] PASSED [ 29%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.txz] PASSED [ 29%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar xvf {}-mkdir -p {dir} && tar xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tz] PASSED [ 29%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar] PASSED [ 29%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.Z] PASSED [ 29%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.bz2] PASSED [ 29%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.gz] PASSED [ 29%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lz] PASSED [ 29%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lzma] PASSED [ 29%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.xz] PASSED [ 29%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.taz] PASSED [ 29%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tb2] PASSED [ 29%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz] PASSED [ 29%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz2] PASSED [ 30%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tgz] PASSED [ 30%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tlz] PASSED [ 30%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.txz] PASSED [ 30%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-foo{}-foo{}-foo{}-.tz] PASSED [ 30%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar] PASSED [ 30%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.Z] PASSED [ 30%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.bz2] PASSED [ 30%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.gz] PASSED [ 30%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lz] PASSED [ 30%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lzma] PASSED [ 30%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.xz] PASSED [ 30%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.taz] PASSED [ 30%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tb2] PASSED [ 30%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz] PASSED [ 30%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz2] PASSED [ 30%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tgz] PASSED [ 30%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tlz] PASSED [ 30%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.txz] PASSED [ 30%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar -xvf {}-mkdir -p {dir} && tar -xvf {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tz] PASSED [ 30%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar] PASSED [ 31%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.Z] PASSED [ 31%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.bz2] PASSED [ 31%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.gz] PASSED [ 31%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lz] PASSED [ 31%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.lzma] PASSED [ 31%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tar.xz] PASSED [ 31%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.taz] PASSED [ 31%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tb2] PASSED [ 31%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz] PASSED [ 31%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tbz2] PASSED [ 31%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tgz] PASSED [ 31%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tlz] PASSED [ 31%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.txz] PASSED [ 31%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-foo{}-foo{}-foo{}-.tz] PASSED [ 31%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar] PASSED [ 31%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.Z] PASSED [ 31%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.bz2] PASSED [ 31%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.gz] PASSED [ 31%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lz] PASSED [ 32%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.lzma] PASSED [ 32%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tar.xz] PASSED [ 32%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.taz] PASSED [ 32%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tb2] PASSED [ 32%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz] PASSED [ 32%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tbz2] PASSED [ 32%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tgz] PASSED [ 32%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tlz] PASSED [ 32%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.txz] PASSED [ 32%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_untar.py::test_get_new_command[tar --extract -f {}-mkdir -p {dir} && tar --extract -f {filename} -C {dir}-\"foo bar{}\"-foo bar{}-'foo bar{}'-.tz] PASSED [ 32%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_unzip.py::test_match[unzip caf\\xe9-caf\\xe9.zip] PASSED [ 32%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_unzip.py::test_match[unzip caf\\xe9.zip-caf\\xe9.zip] PASSED [ 32%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_unzip.py::test_match[unzip foo-foo.zip] PASSED    [ 32%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_unzip.py::test_match[unzip foo.zip-foo.zip] PASSED [ 32%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_unzip.py::test_side_effect[unzip caf\\xe9-caf\\xe9.zip] PASSED [ 32%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_unzip.py::test_side_effect[unzip caf\\xe9.zip-caf\\xe9.zip] PASSED [ 32%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_unzip.py::test_side_effect[unzip foo-foo.zip] PASSED [ 32%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_unzip.py::test_side_effect[unzip foo.zip-foo.zip] PASSED [ 32%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_unzip.py::test_get_new_command[unzip caf\\xe9-unzip caf\\xe9 -d 'caf\\xe9'-caf\\xe9.zip] PASSED [ 32%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_unzip.py::test_get_new_command[unzip foo-unzip foo -d foo-foo.zip] PASSED [ 33%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_unzip.py::test_get_new_command[unzip 'foo bar.zip'-unzip 'foo bar.zip' -d 'foo bar'-foo.zip] PASSED [ 33%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dirty_unzip.py::test_get_new_command[unzip foo.zip-unzip foo.zip -d foo-foo.zip] PASSED [ 33%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_django_south_ghost.py::test_match PASSED                [ 33%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_django_south_ghost.py::test_get_new_command PASSED      [ 33%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_django_south_merge.py::test_match PASSED                [ 33%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_django_south_merge.py::test_get_new_command PASSED      [ 33%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dnf_no_such_command.py::test_match[No such command: saerch. Please use /usr/bin/dnf --help\\nIt could be a DNF plugin command, try: \"dnf install 'dnf-command(saerch)'\"\\n] PASSED [ 33%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dnf_no_such_command.py::test_match[No such command: isntall. Please use /usr/bin/dnf --help\\nIt could be a DNF plugin command, try: \"dnf install 'dnf-command(isntall)'\"\\n] PASSED [ 33%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dnf_no_such_command.py::test_not_match[pip-No such command: isntall. Please use /usr/bin/dnf --help\\nIt could be a DNF plugin command, try: \"dnf install 'dnf-command(isntall)'\"\\n] PASSED [ 33%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dnf_no_such_command.py::test_not_match[vim-] PASSED     [ 33%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dnf_no_such_command.py::test_get_operations PASSED      [ 33%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dnf_no_such_command.py::test_get_new_command[dnf isntall vim-No such command: isntall. Please use /usr/bin/dnf --help\\nIt could be a DNF plugin command, try: \"dnf install 'dnf-command(isntall)'\"\\n-dnf install vim] PASSED [ 33%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dnf_no_such_command.py::test_get_new_command[dnf saerch vim-No such command: saerch. Please use /usr/bin/dnf --help\\nIt could be a DNF plugin command, try: \"dnf install 'dnf-command(saerch)'\"\\n-dnf search vim] PASSED [ 33%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_docker_image_being_used_by_container.py::test_match PASSED [ 33%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_docker_image_being_used_by_container.py::test_not_match PASSED [ 33%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_docker_image_being_used_by_container.py::test_not_docker_command PASSED [ 33%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_docker_image_being_used_by_container.py::test_get_new_command PASSED [ 33%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_docker_login.py::test_match PASSED                      [ 33%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_docker_login.py::test_get_new_command PASSED            [ 34%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_docker_not_command.py::test_match PASSED                [ 34%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_docker_not_command.py::test_match_management_cmd[docker swarn-docker: 'swarn' is not a docker command.\\nSee 'docker --help'.] PASSED [ 34%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_docker_not_command.py::test_match_management_cmd[docker imge-docker: 'imge' is not a docker command.\\nSee 'docker --help'.] PASSED [ 34%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_docker_not_command.py::test_match_management_subcmd[docker swarm int-\\nUsage:\\tdocker swarm COMMAND\\n\\nManage Swarm\\n\\nCommands:\\n  ca          Display and rotate the root CA\\n  init        Initialize a swarm\\n  join        Join a swarm as a node and/or manager\\n  join-token  Manage join tokens\\n  leave       Leave the swarm\\n  unlock      Unlock swarm\\n  unlock-key  Manage the unlock key\\n  update      Update the swarm\\n\\nRun 'docker swarm COMMAND --help' for more information on a command.\\n] PASSED [ 34%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_docker_not_command.py::test_match_management_subcmd[docker image la-\\nUsage:\\tdocker image COMMAND\\n\\nManage images\\n\\nCommands:\\n  build       Build an image from a Dockerfile\\n  history     Show the history of an image\\n  import      Import the contents from a tarball to create a filesystem image\\n  inspect     Display detailed information on one or more images\\n  load        Load an image from a tar archive or STDIN\\n  ls          List images\\n  prune       Remove unused images\\n  pull        Pull an image or a repository from a registry\\n  push        Push an image or a repository to a registry\\n  rm          Remove one or more images\\n  save        Save one or more images to a tar archive (streamed to STDOUT by default)\\n  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE\\n\\nRun 'docker image COMMAND --help' for more information on a command.\\n] PASSED [ 34%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_docker_not_command.py::test_not_match[docker ps-] PASSED [ 34%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_docker_not_command.py::test_not_match[cat pes-docker: 'pes' is not a docker command.\\nSee 'docker --help'.] PASSED [ 34%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_docker_not_command.py::test_get_new_command[pes-fixed0] PASSED [ 34%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_docker_not_command.py::test_get_new_command[tags-fixed1] PASSED [ 34%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_docker_not_command.py::test_get_new_management_command[swarn-fixed0] PASSED [ 34%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_docker_not_command.py::test_get_new_management_command[inage-fixed1] PASSED [ 34%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_docker_not_command.py::test_get_new_management_command_subcommand[swarm int-fixed0-\\nUsage:\\tdocker swarm COMMAND\\n\\nManage Swarm\\n\\nCommands:\\n  ca          Display and rotate the root CA\\n  init        Initialize a swarm\\n  join        Join a swarm as a node and/or manager\\n  join-token  Manage join tokens\\n  leave       Leave the swarm\\n  unlock      Unlock swarm\\n  unlock-key  Manage the unlock key\\n  update      Update the swarm\\n\\nRun 'docker swarm COMMAND --help' for more information on a command.\\n] PASSED [ 34%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_docker_not_command.py::test_get_new_management_command_subcommand[image la-fixed1-\\nUsage:\\tdocker image COMMAND\\n\\nManage images\\n\\nCommands:\\n  build       Build an image from a Dockerfile\\n  history     Show the history of an image\\n  import      Import the contents from a tarball to create a filesystem image\\n  inspect     Display detailed information on one or more images\\n  load        Load an image from a tar archive or STDIN\\n  ls          List images\\n  prune       Remove unused images\\n  pull        Pull an image or a repository from a registry\\n  push        Push an image or a repository to a registry\\n  rm          Remove one or more images\\n  save        Save one or more images to a tar archive (streamed to STDOUT by default)\\n  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE\\n\\nRun 'docker image COMMAND --help' for more information on a command.\\n] PASSED [ 34%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dry.py::test_match[command0] PASSED                     [ 34%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dry.py::test_match[command1] PASSED                     [ 34%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dry.py::test_get_new_command[command0-cd foo] PASSED    [ 34%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_dry.py::test_get_new_command[command1-git push origin/master] PASSED [ 34%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fab_command_not_found.py::test_match[command0] PASSED   [ 34%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fab_command_not_found.py::test_match[command1] PASSED   [ 34%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fab_command_not_found.py::test_match[command2] PASSED   [ 35%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fab_command_not_found.py::test_not_match[command0] PASSED [ 35%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fab_command_not_found.py::test_not_match[command1] PASSED [ 35%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fab_command_not_found.py::test_get_new_command[fab extenson-fab prepare_extension] PASSED [ 35%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fab_command_not_found.py::test_get_new_command[fab extenson:version=2016-fab prepare_extension:version=2016] PASSED [ 35%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fab_command_not_found.py::test_get_new_command[fab extenson:version=2016 install_web set_version:val=0.5.0-fab prepare_extension:version=2016 install_web set_version:val=0.5.0] PASSED [ 35%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fab_command_not_found.py::test_get_new_command[fab extenson:version=2016 deloyp:beta=true -H the.fuck-fab prepare_extension:version=2016 deploy:beta=true -H the.fuck] PASSED [ 35%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_alt_space.py::test_match PASSED                     [ 35%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_alt_space.py::test_get_new_command PASSED           [ 35%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_match[test0] PASSED                   [ 35%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_match[test1] PASSED                   [ 35%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_match[test2] PASSED                   [ 35%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_match[test3] PASSED                   [ 35%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_match[test4] PASSED                   [ 35%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_match[test5] PASSED                   [ 35%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_match[test6] PASSED                   [ 35%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_match[test7] PASSED                   [ 35%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_match[test8] PASSED                   [ 35%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_match[test9] PASSED                   [ 35%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_match[test10] PASSED                  [ 36%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_match[test11] PASSED                  [ 36%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_match[test12] PASSED                  [ 36%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_match[test13] PASSED                  [ 36%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_match[test14] PASSED                  [ 36%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_match[test15] PASSED                  [ 36%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_match[test16] PASSED                  [ 36%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_match[test17] PASSED                  [ 36%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_match[test18] PASSED                  [ 36%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_match[test19] PASSED                  [ 36%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_match[test20] PASSED                  [ 36%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_match[test21] PASSED                  [ 36%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_match[test22] PASSED                  [ 36%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_no_editor[test0] PASSED               [ 36%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_no_editor[test1] PASSED               [ 36%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_no_editor[test2] PASSED               [ 36%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_no_editor[test3] PASSED               [ 36%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_no_editor[test4] PASSED               [ 36%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_no_editor[test5] PASSED               [ 36%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_no_editor[test6] PASSED               [ 36%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_no_editor[test7] PASSED               [ 37%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_no_editor[test8] PASSED               [ 37%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_no_editor[test9] PASSED               [ 37%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_no_editor[test10] PASSED              [ 37%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_no_editor[test11] PASSED              [ 37%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_no_editor[test12] PASSED              [ 37%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_no_editor[test13] PASSED              [ 37%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_no_editor[test14] PASSED              [ 37%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_no_editor[test15] PASSED              [ 37%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_no_editor[test16] PASSED              [ 37%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_no_editor[test17] PASSED              [ 37%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_no_editor[test18] PASSED              [ 37%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_no_editor[test19] PASSED              [ 37%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_no_editor[test20] PASSED              [ 37%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_no_editor[test21] PASSED              [ 37%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_no_editor[test22] PASSED              [ 37%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_not_file[test0] PASSED                [ 37%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_not_file[test1] PASSED                [ 37%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_not_file[test2] PASSED                [ 37%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_not_file[test3] PASSED                [ 38%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_not_file[test4] PASSED                [ 38%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_not_file[test5] PASSED                [ 38%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_not_file[test6] PASSED                [ 38%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_not_file[test7] PASSED                [ 38%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_not_file[test8] PASSED                [ 38%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_not_file[test9] PASSED                [ 38%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_not_file[test10] PASSED               [ 38%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_not_file[test11] PASSED               [ 38%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_not_file[test12] PASSED               [ 38%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_not_file[test13] PASSED               [ 38%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_not_file[test14] PASSED               [ 38%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_not_file[test15] PASSED               [ 38%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_not_file[test16] PASSED               [ 38%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_not_file[test17] PASSED               [ 38%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_not_file[test18] PASSED               [ 38%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_not_file[test19] PASSED               [ 38%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_not_file[test20] PASSED               [ 38%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_not_file[test21] PASSED               [ 38%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_not_file[test22] PASSED               [ 38%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command[test0] PASSED         [ 39%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command[test1] PASSED         [ 39%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command[test2] PASSED         [ 39%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command[test3] PASSED         [ 39%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command[test4] PASSED         [ 39%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command[test5] PASSED         [ 39%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command[test6] PASSED         [ 39%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command[test7] PASSED         [ 39%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command[test8] PASSED         [ 39%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command[test9] PASSED         [ 39%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command[test10] PASSED        [ 39%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command[test11] PASSED        [ 39%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command[test12] PASSED        [ 39%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command[test13] PASSED        [ 39%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command[test14] PASSED        [ 39%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command[test15] PASSED        [ 39%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command[test16] PASSED        [ 39%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command[test17] PASSED        [ 39%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command[test18] PASSED        [ 39%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command[test19] PASSED        [ 40%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command[test20] PASSED        [ 40%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command[test21] PASSED        [ 40%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command[test22] PASSED        [ 40%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command_with_settings[test0] PASSED [ 40%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command_with_settings[test1] PASSED [ 40%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command_with_settings[test2] PASSED [ 40%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command_with_settings[test3] PASSED [ 40%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command_with_settings[test4] PASSED [ 40%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command_with_settings[test5] PASSED [ 40%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command_with_settings[test6] PASSED [ 40%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command_with_settings[test7] PASSED [ 40%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command_with_settings[test8] PASSED [ 40%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command_with_settings[test9] PASSED [ 40%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command_with_settings[test10] PASSED [ 40%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command_with_settings[test11] PASSED [ 40%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command_with_settings[test12] PASSED [ 40%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command_with_settings[test13] PASSED [ 40%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command_with_settings[test14] PASSED [ 40%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command_with_settings[test15] PASSED [ 40%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command_with_settings[test16] PASSED [ 41%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command_with_settings[test17] PASSED [ 41%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command_with_settings[test18] PASSED [ 41%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command_with_settings[test19] PASSED [ 41%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command_with_settings[test20] PASSED [ 41%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command_with_settings[test21] PASSED [ 41%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_fix_file.py::test_get_new_command_with_settings[test22] PASSED [ 41%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gem_unknown_command.py::test_match[gem isntall jekyll-isntall] PASSED [ 41%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gem_unknown_command.py::test_match[gem last --local-last] PASSED [ 41%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gem_unknown_command.py::test_not_match[gem install jekyll-] PASSED [ 41%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gem_unknown_command.py::test_not_match[git log-\\nERROR:  While executing gem ... (Gem::CommandLineError)\\n    Unknown command log\\n] PASSED [ 41%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gem_unknown_command.py::test_get_new_command[gem isntall jekyll-\\nERROR:  While executing gem ... (Gem::CommandLineError)\\n    Unknown command isntall\\n-gem install jekyll] PASSED [ 41%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gem_unknown_command.py::test_get_new_command[gem last --local-\\nERROR:  While executing gem ... (Gem::CommandLineError)\\n    Unknown command last\\n-gem list --local] PASSED [ 41%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_add.py::test_match[git submodule update unknown-unknown] PASSED [ 41%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_add.py::test_match[git commit unknown-unknown] PASSED [ 41%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_add.py::test_not_match[git submodule update known--True] PASSED [ 41%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_add.py::test_not_match[git commit known--True] PASSED [ 41%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_add.py::test_not_match[git submodule update known-output-False] PASSED [ 41%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_add.py::test_get_new_command[git submodule update unknown-unknown-git add -- unknown && git submodule update unknown] PASSED [ 41%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_add.py::test_get_new_command[git commit unknown-unknown-git add -- unknown && git commit unknown] PASSED [ 42%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_add_force.py::test_match PASSED                     [ 42%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_add_force.py::test_get_new_command PASSED           [ 42%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_bisect_usage.py::test_match[git bisect strt] PASSED [ 42%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_bisect_usage.py::test_match[git bisect rset] PASSED [ 42%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_bisect_usage.py::test_match[git bisect goood] PASSED [ 42%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_bisect_usage.py::test_not_match[git bisect] PASSED  [ 42%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_bisect_usage.py::test_not_match[git bisect start] PASSED [ 42%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_bisect_usage.py::test_not_match[git bisect good] PASSED [ 42%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_bisect_usage.py::test_get_new_command[git bisect goood-new_cmd0] PASSED [ 42%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_bisect_usage.py::test_get_new_command[git bisect strt-new_cmd1] PASSED [ 42%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_bisect_usage.py::test_get_new_command[git bisect rset-new_cmd2] PASSED [ 42%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_0flag.py::test_match[git branch 0a] PASSED   [ 42%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_0flag.py::test_match[git branch 0d] PASSED   [ 42%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_0flag.py::test_match[git branch 0f] PASSED   [ 42%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_0flag.py::test_match[git branch 0r] PASSED   [ 42%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_0flag.py::test_match[git branch 0v] PASSED   [ 42%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_0flag.py::test_match[git branch 0d foo] PASSED [ 42%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_0flag.py::test_match[git branch 0D foo] PASSED [ 42%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_0flag.py::test_not_match[git branch -a] PASSED [ 42%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_0flag.py::test_not_match[git branch -r] PASSED [ 43%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_0flag.py::test_not_match[git branch -v] PASSED [ 43%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_0flag.py::test_not_match[git branch -d foo] PASSED [ 43%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_0flag.py::test_not_match[git branch -D foo] PASSED [ 43%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_0flag.py::test_get_new_command_branch_exists[git branch 0a-git branch -D 0a && git branch -a] PASSED [ 43%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_0flag.py::test_get_new_command_branch_exists[git branch 0v-git branch -D 0v && git branch -v] PASSED [ 43%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_0flag.py::test_get_new_command_branch_exists[git branch 0d foo-git branch -D 0d && git branch -d foo] PASSED [ 43%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_0flag.py::test_get_new_command_branch_exists[git branch 0D foo-git branch -D 0D && git branch -D foo] PASSED [ 43%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_0flag.py::test_get_new_command_branch_exists[git branch 0l 'maint-*'-git branch -D 0l && git branch -l 'maint-*'] PASSED [ 43%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_0flag.py::test_get_new_command_branch_exists[git branch 0u upstream-git branch -D 0u && git branch -u upstream] PASSED [ 43%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_0flag.py::test_get_new_command_not_valid_object[git branch 0l 'maint-*'-git branch -l 'maint-*'] PASSED [ 43%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_0flag.py::test_get_new_command_not_valid_object[git branch 0u upstream-git branch -u upstream] PASSED [ 43%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_delete.py::test_match PASSED                 [ 43%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_delete.py::test_get_new_command PASSED       [ 43%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_delete_checked_out.py::test_match[git branch -d foo] PASSED [ 43%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_delete_checked_out.py::test_match[git branch -D foo] PASSED [ 43%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_delete_checked_out.py::test_not_match[git branch -d foo] PASSED [ 43%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_delete_checked_out.py::test_not_match[git branch -D foo] PASSED [ 43%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_delete_checked_out.py::test_get_new_command[git branch -d foo-git checkout master && git branch -D foo] PASSED [ 43%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_delete_checked_out.py::test_get_new_command[git branch -D foo-git checkout master && git branch -D foo] PASSED [ 44%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_exists.py::test_match[git branch foo-foo-foo] PASSED [ 44%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_exists.py::test_match[git checkout bar-bar-bar] PASSED [ 44%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_exists.py::test_match[git checkout -b \"let's-push-this\"-\"let's-push-this\"-\"let's-push-this\"] PASSED [ 44%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_exists.py::test_not_match[git branch foo] PASSED [ 44%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_exists.py::test_not_match[git checkout bar] PASSED [ 44%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_exists.py::test_not_match[git checkout -b \"let's-push-this\"] PASSED [ 44%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_exists.py::test_get_new_command[git branch foo-foo-foo] PASSED [ 44%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_exists.py::test_get_new_command[git checkout bar-bar-bar] PASSED [ 44%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_exists.py::test_get_new_command[git checkout -b \"let's-push-this\"-let's-push-this-let\\'s-push-this] PASSED [ 44%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_list.py::test_match PASSED                   [ 44%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_list.py::test_not_match PASSED               [ 44%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_branch_list.py::test_get_new_command PASSED         [ 44%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_checkout.py::test_match[command0] PASSED            [ 44%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_checkout.py::test_match[command1] PASSED            [ 44%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_checkout.py::test_not_match[command0] PASSED        [ 44%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_checkout.py::test_not_match[command1] PASSED        [ 44%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_checkout.py::test_not_match[command2] PASSED        [ 44%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_checkout.py::test_get_branches[-branch_list0] PASSED [ 44%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_checkout.py::test_get_branches[* master-branch_list1] PASSED [ 44%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_checkout.py::test_get_branches[  remotes/origin/master-branch_list2] PASSED [ 45%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_checkout.py::test_get_branches[  remotes/origin/test/1-branch_list3] PASSED [ 45%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_checkout.py::test_get_branches[  remotes/origin/test/1/2/3-branch_list4] PASSED [ 45%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_checkout.py::test_get_branches[  test/1-branch_list5] PASSED [ 45%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_checkout.py::test_get_branches[  test/1/2/3-branch_list6] PASSED [ 45%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_checkout.py::test_get_branches[  remotes/origin/HEAD -> origin/master-branch_list7] PASSED [ 45%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_checkout.py::test_get_branches[  just-another-branch-branch_list8] PASSED [ 45%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_checkout.py::test_get_branches[* master\\n  just-another-branch-branch_list9] PASSED [ 45%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_checkout.py::test_get_branches[* master\\n  remotes/origin/master\\n  just-another-branch-branch_list10] PASSED [ 45%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_checkout.py::test_get_new_command[-command0-new_command0] PASSED [ 45%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_checkout.py::test_get_new_command[-command1-new_command1] PASSED [ 45%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_checkout.py::test_get_new_command[  test-random-branch-123-command2-new_command2] PASSED [ 45%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_checkout.py::test_get_new_command[  test-random-branch-123-command3-new_command3] PASSED [ 45%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_git_clone.py::test_match PASSED               [ 45%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_git_clone.py::test_not_match PASSED           [ 45%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_git_clone.py::test_get_new_command PASSED     [ 45%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_match[No such file or directory-https://github.com/nvbn/thefuck.git] PASSED [ 45%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_match[No such file or directory-https://github.com/nvbn/thefuck] PASSED [ 45%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_match[No such file or directory-http://github.com/nvbn/thefuck.git] PASSED [ 45%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_match[No such file or directory-git@github.com:nvbn/thefuck.git] PASSED [ 46%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_match[No such file or directory-git@github.com:nvbn/thefuck] PASSED [ 46%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_match[No such file or directory-ssh://git@github.com:nvbn/thefuck.git] PASSED [ 46%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_match[not found-https://github.com/nvbn/thefuck.git] PASSED [ 46%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_match[not found-https://github.com/nvbn/thefuck] PASSED [ 46%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_match[not found-http://github.com/nvbn/thefuck.git] PASSED [ 46%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_match[not found-git@github.com:nvbn/thefuck.git] PASSED [ 46%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_match[not found-git@github.com:nvbn/thefuck] PASSED [ 46%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_match[not found-ssh://git@github.com:nvbn/thefuck.git] PASSED [ 46%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_match[is not recognised as-https://github.com/nvbn/thefuck.git] PASSED [ 46%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_match[is not recognised as-https://github.com/nvbn/thefuck] PASSED [ 46%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_match[is not recognised as-http://github.com/nvbn/thefuck.git] PASSED [ 46%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_match[is not recognised as-git@github.com:nvbn/thefuck.git] PASSED [ 46%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_match[is not recognised as-git@github.com:nvbn/thefuck] PASSED [ 46%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_match[is not recognised as-ssh://git@github.com:nvbn/thefuck.git] PASSED [ 46%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[No such file or directory] PASSED [ 46%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[No such file or directory-notacommand] PASSED [ 46%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[No such file or directory-ssh git@github.com:nvbn/thefrick.git] PASSED [ 46%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[No such file or directory-git clone foo] PASSED [ 46%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[No such file or directory-git clone https://github.com/nvbn/thefuck.git] PASSED [ 46%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[No such file or directory-github.com/nvbn/thefuck.git] PASSED [ 47%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[No such file or directory-github.com:nvbn/thefuck.git] PASSED [ 47%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[No such file or directory-git clone git clone ssh://git@github.com:nvbn/thefrick.git] PASSED [ 47%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[No such file or directory-https:/github.com/nvbn/thefuck.git] PASSED [ 47%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[not found] PASSED  [ 47%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[not found-notacommand] PASSED [ 47%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[not found-ssh git@github.com:nvbn/thefrick.git] PASSED [ 47%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[not found-git clone foo] PASSED [ 47%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[not found-git clone https://github.com/nvbn/thefuck.git] PASSED [ 47%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[not found-github.com/nvbn/thefuck.git] PASSED [ 47%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[not found-github.com:nvbn/thefuck.git] PASSED [ 47%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[not found-git clone git clone ssh://git@github.com:nvbn/thefrick.git] PASSED [ 47%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[not found-https:/github.com/nvbn/thefuck.git] PASSED [ 47%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[is not recognised as] PASSED [ 47%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[is not recognised as-notacommand] PASSED [ 47%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[is not recognised as-ssh git@github.com:nvbn/thefrick.git] PASSED [ 47%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[is not recognised as-git clone foo] PASSED [ 47%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[is not recognised as-git clone https://github.com/nvbn/thefuck.git] PASSED [ 47%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[is not recognised as-github.com/nvbn/thefuck.git] PASSED [ 47%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[is not recognised as-github.com:nvbn/thefuck.git] PASSED [ 48%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[is not recognised as-git clone git clone ssh://git@github.com:nvbn/thefrick.git] PASSED [ 48%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[is not recognised as-https:/github.com/nvbn/thefuck.git] PASSED [ 48%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[some other output] PASSED [ 48%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[some other output-notacommand] PASSED [ 48%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[some other output-ssh git@github.com:nvbn/thefrick.git] PASSED [ 48%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[some other output-git clone foo] PASSED [ 48%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[some other output-git clone https://github.com/nvbn/thefuck.git] PASSED [ 48%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[some other output-github.com/nvbn/thefuck.git] PASSED [ 48%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[some other output-github.com:nvbn/thefuck.git] PASSED [ 48%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[some other output-git clone git clone ssh://git@github.com:nvbn/thefrick.git] PASSED [ 48%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_not_match[some other output-https:/github.com/nvbn/thefuck.git] PASSED [ 48%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_get_new_command[No such file or directory-https://github.com/nvbn/thefuck.git] PASSED [ 48%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_get_new_command[No such file or directory-https://github.com/nvbn/thefuck] PASSED [ 48%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_get_new_command[No such file or directory-http://github.com/nvbn/thefuck.git] PASSED [ 48%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_get_new_command[No such file or directory-git@github.com:nvbn/thefuck.git] PASSED [ 48%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_get_new_command[No such file or directory-git@github.com:nvbn/thefuck] PASSED [ 48%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_get_new_command[No such file or directory-ssh://git@github.com:nvbn/thefuck.git] PASSED [ 48%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_get_new_command[not found-https://github.com/nvbn/thefuck.git] PASSED [ 48%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_get_new_command[not found-https://github.com/nvbn/thefuck] PASSED [ 48%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_get_new_command[not found-http://github.com/nvbn/thefuck.git] PASSED [ 49%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_get_new_command[not found-git@github.com:nvbn/thefuck.git] PASSED [ 49%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_get_new_command[not found-git@github.com:nvbn/thefuck] PASSED [ 49%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_get_new_command[not found-ssh://git@github.com:nvbn/thefuck.git] PASSED [ 49%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_get_new_command[is not recognised as-https://github.com/nvbn/thefuck.git] PASSED [ 49%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_get_new_command[is not recognised as-https://github.com/nvbn/thefuck] PASSED [ 49%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_get_new_command[is not recognised as-http://github.com/nvbn/thefuck.git] PASSED [ 49%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_get_new_command[is not recognised as-git@github.com:nvbn/thefuck.git] PASSED [ 49%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_get_new_command[is not recognised as-git@github.com:nvbn/thefuck] PASSED [ 49%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_clone_missing.py::test_get_new_command[is not recognised as-ssh://git@github.com:nvbn/thefuck.git] PASSED [ 49%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_commit_add.py::test_match[git commit -m \"test\"-no changes added to commit] PASSED [ 49%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_commit_add.py::test_match[git commit-no changes added to commit] PASSED [ 49%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_commit_add.py::test_not_match[git commit -m \"test\"- 1 file changed, 15 insertions(+), 14 deletions(-)] PASSED [ 49%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_commit_add.py::test_not_match[git branch foo-] PASSED [ 49%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_commit_add.py::test_not_match[git checkout feature/test_commit-] PASSED [ 49%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_commit_add.py::test_not_match[git push-] PASSED     [ 49%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_commit_add.py::test_get_new_command[git commit-new_command0] PASSED [ 49%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_commit_add.py::test_get_new_command[git commit -m \"foo\"-new_command1] PASSED [ 49%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_commit_amend.py::test_match[git commit -m \"test\"-test output] PASSED [ 49%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_commit_amend.py::test_match[git commit-] PASSED     [ 50%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_commit_amend.py::test_not_match[git branch foo] PASSED [ 50%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_commit_amend.py::test_not_match[git checkout feature/test_commit] PASSED [ 50%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_commit_amend.py::test_not_match[git push] PASSED    [ 50%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_commit_amend.py::test_get_new_command[git commit -m \"test commit\"] PASSED [ 50%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_commit_amend.py::test_get_new_command[git commit] PASSED [ 50%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_commit_reset.py::test_match[git commit -m \"test\"-test output] PASSED [ 50%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_commit_reset.py::test_match[git commit-] PASSED     [ 50%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_commit_reset.py::test_not_match[git branch foo] PASSED [ 50%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_commit_reset.py::test_not_match[git checkout feature/test_commit] PASSED [ 50%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_commit_reset.py::test_not_match[git push] PASSED    [ 50%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_commit_reset.py::test_get_new_command[git commit -m \"test commit\"] PASSED [ 50%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_commit_reset.py::test_get_new_command[git commit] PASSED [ 50%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_diff_no_index.py::test_match[command0] PASSED       [ 50%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_diff_no_index.py::test_not_match[command0] PASSED   [ 50%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_diff_no_index.py::test_not_match[command1] PASSED   [ 50%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_diff_no_index.py::test_not_match[command2] PASSED   [ 50%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_diff_no_index.py::test_get_new_command[command0-git diff --no-index foo bar] PASSED [ 50%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_diff_staged.py::test_match[command0] PASSED         [ 50%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_diff_staged.py::test_match[command1] PASSED         [ 51%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_diff_staged.py::test_not_match[command0] PASSED     [ 51%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_diff_staged.py::test_not_match[command1] PASSED     [ 51%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_diff_staged.py::test_not_match[command2] PASSED     [ 51%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_diff_staged.py::test_not_match[command3] PASSED     [ 51%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_diff_staged.py::test_get_new_command[command0-git diff --staged] PASSED [ 51%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_diff_staged.py::test_get_new_command[command1-git diff --staged foo] PASSED [ 51%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_fix_stash.py::test_match[git stash opp] PASSED      [ 51%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_fix_stash.py::test_match[git stash Some message] PASSED [ 51%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_fix_stash.py::test_match[git stash saev Some message] PASSED [ 51%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_fix_stash.py::test_not_match PASSED                 [ 51%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_fix_stash.py::test_get_new_command[git stash opp-git stash pop] PASSED [ 51%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_fix_stash.py::test_get_new_command[git stash Some message-git stash save Some message] PASSED [ 51%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_fix_stash.py::test_get_new_command[git stash saev Some message-git stash save Some message] PASSED [ 51%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_flag_after_filename.py::test_match[command0] PASSED [ 51%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_flag_after_filename.py::test_match[command1] PASSED [ 51%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_flag_after_filename.py::test_match[command2] PASSED [ 51%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_flag_after_filename.py::test_match[command3] PASSED [ 51%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_flag_after_filename.py::test_match[command4] PASSED [ 51%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_flag_after_filename.py::test_match[command5] PASSED [ 51%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_flag_after_filename.py::test_not_match[command0] PASSED [ 52%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_flag_after_filename.py::test_not_match[command1] PASSED [ 52%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_flag_after_filename.py::test_get_new_command[command0-git log -p README.md] PASSED [ 52%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_flag_after_filename.py::test_get_new_command[command1-git log -p README.md CONTRIBUTING.md] PASSED [ 52%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_flag_after_filename.py::test_get_new_command[command2-git log -p --name-only README.md] PASSED [ 52%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_flag_after_filename.py::test_get_new_command[command3-git log -p README.md] PASSED [ 52%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_flag_after_filename.py::test_get_new_command[command4-git log -p README.md CONTRIBUTING.md] PASSED [ 52%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_flag_after_filename.py::test_get_new_command[command5-git log -p --name-only README.md] PASSED [ 52%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_help_aliased.py::test_match[git help st-`git st' is aliased to `status'] PASSED [ 52%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_help_aliased.py::test_match[git help ds-`git ds' is aliased to `diff --staged'] PASSED [ 52%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_help_aliased.py::test_not_match[git help status-GIT-STATUS(1)...Git Manual...GIT-STATUS(1)] PASSED [ 52%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_help_aliased.py::test_not_match[git help diff-GIT-DIFF(1)...Git Manual...GIT-DIFF(1)] PASSED [ 52%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_help_aliased.py::test_get_new_command[git help st-`git st' is aliased to `status'-git help status] PASSED [ 52%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_help_aliased.py::test_get_new_command[git help ds-`git ds' is aliased to `diff --staged'-git help diff] PASSED [ 52%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_hook_bypass.py::test_match[command0] PASSED         [ 52%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_hook_bypass.py::test_match[command1] PASSED         [ 52%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_hook_bypass.py::test_match[command2] PASSED         [ 52%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_hook_bypass.py::test_match[command3] PASSED         [ 52%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_hook_bypass.py::test_match[command4] PASSED         [ 52%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_hook_bypass.py::test_not_match[command0] PASSED     [ 53%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_hook_bypass.py::test_not_match[command1] PASSED     [ 53%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_hook_bypass.py::test_not_match[command2] PASSED     [ 53%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_hook_bypass.py::test_get_new_command[command0-git am --no-verify] PASSED [ 53%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_hook_bypass.py::test_get_new_command[command1-git commit --no-verify] PASSED [ 53%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_hook_bypass.py::test_get_new_command[command2-git commit --no-verify -m 'foo bar'] PASSED [ 53%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_hook_bypass.py::test_get_new_command[command3-git push --no-verify] PASSED [ 53%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_hook_bypass.py::test_get_new_command[command4-git push --no-verify -p] PASSED [ 53%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_lfs_mistype.py::test_match PASSED                   [ 53%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_lfs_mistype.py::test_get_new_command PASSED         [ 53%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_main_master.py::test_match[git checkout main-main] PASSED [ 53%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_main_master.py::test_match[git checkout master-master] PASSED [ 53%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_main_master.py::test_match[git show main-main] PASSED [ 53%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_main_master.py::test_not_match[git checkout master-] PASSED [ 53%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_main_master.py::test_not_match[git checkout main-] PASSED [ 53%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_main_master.py::test_not_match[git checkout wibble-wibble] PASSED [ 53%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_main_master.py::test_get_new_command[git checkout main-main-git checkout master] PASSED [ 53%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_main_master.py::test_get_new_command[git checkout master-master-git checkout main] PASSED [ 53%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_main_master.py::test_get_new_command[git checkout wibble-wibble-git checkout wibble] PASSED [ 53%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_merge.py::test_match PASSED                         [ 53%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_merge.py::test_get_new_command[command0-git merge remote/local] PASSED [ 54%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_merge.py::test_get_new_command[command1-git merge -m \"test\" remote/local] PASSED [ 54%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_merge.py::test_get_new_command[command2-git merge -m \"test local\" remote/local] PASSED [ 54%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_merge_unrelated.py::test_match PASSED               [ 54%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_merge_unrelated.py::test_get_new_command[command0-git merge local --allow-unrelated-histories] PASSED [ 54%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_merge_unrelated.py::test_get_new_command[command1-git merge -m \"test\" local --allow-unrelated-histories] PASSED [ 54%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_merge_unrelated.py::test_get_new_command[command2-git merge -m \"test local\" local --allow-unrelated-histories] PASSED [ 54%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_not_command.py::test_match PASSED                   [ 54%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_not_command.py::test_get_new_command PASSED         [ 54%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_pull.py::test_match PASSED                          [ 54%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_pull.py::test_get_new_command PASSED                [ 54%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_pull_clone.py::test_match[command0] PASSED          [ 54%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_pull_clone.py::test_get_new_command[command0-git clone git@github.com:mcarton/thefuck.git] PASSED [ 54%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_pull_uncommitted_changes.py::test_match PASSED      [ 54%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_pull_uncommitted_changes.py::test_get_new_command PASSED [ 54%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_pull_unstaged_changes.py::test_match PASSED         [ 54%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_pull_unstaged_changes.py::test_get_new_command PASSED [ 54%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push.py::test_match[git push-master] PASSED         [ 54%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push.py::test_match[git push origin-master] PASSED  [ 54%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push.py::test_match_bitbucket PASSED                [ 55%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push.py::test_not_match[git push master-None] PASSED [ 55%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push.py::test_not_match[ls-master] PASSED           [ 55%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push.py::test_get_new_command[git push-master-git push --set-upstream origin master] PASSED [ 55%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push.py::test_get_new_command[git push master-master-git push --set-upstream origin master] PASSED [ 55%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push.py::test_get_new_command[git push -u-master-git push --set-upstream origin master] PASSED [ 55%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push.py::test_get_new_command[git push -u origin-master-git push --set-upstream origin master] PASSED [ 55%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push.py::test_get_new_command[git push origin-master-git push --set-upstream origin master] PASSED [ 55%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push.py::test_get_new_command[git push --set-upstream origin-master-git push --set-upstream origin master] PASSED [ 55%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push.py::test_get_new_command[git push --quiet-master-git push --set-upstream origin master --quiet] PASSED [ 55%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push.py::test_get_new_command[git push --quiet origin-master-git push --set-upstream origin master --quiet] PASSED [ 55%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push.py::test_get_new_command[git -c test=test push --quiet origin-master-git -c test=test push --set-upstream origin master --quiet] PASSED [ 55%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push.py::test_get_new_command[git push-test's-git push --set-upstream origin test\\'s] PASSED [ 55%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push.py::test_get_new_command[git push --force-master-git push --set-upstream origin master --force] PASSED [ 55%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push.py::test_get_new_command[git push --force-with-lease-master-git push --set-upstream origin master --force-with-lease] PASSED [ 55%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_different_branch_names.py::test_match PASSED   [ 55%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_different_branch_names.py::test_not_match[command0] PASSED [ 55%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_different_branch_names.py::test_not_match[command1] PASSED [ 55%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_different_branch_names.py::test_not_match[command2] PASSED [ 55%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_different_branch_names.py::test_get_new_command PASSED [ 55%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_force.py::test_match[command0] PASSED          [ 56%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_force.py::test_match[command1] PASSED          [ 56%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_force.py::test_match[command2] PASSED          [ 56%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_force.py::test_not_match[command0] PASSED      [ 56%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_force.py::test_not_match[command1] PASSED      [ 56%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_force.py::test_not_match[command2] PASSED      [ 56%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_force.py::test_not_match[command3] PASSED      [ 56%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_force.py::test_not_match[command4] PASSED      [ 56%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_force.py::test_not_match[command5] PASSED      [ 56%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_force.py::test_get_new_command[command0-git push --force-with-lease] PASSED [ 56%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_force.py::test_get_new_command[command1-git push --force-with-lease nvbn] PASSED [ 56%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_force.py::test_get_new_command[command2-git push --force-with-lease nvbn master] PASSED [ 56%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_pull.py::test_match[command0] PASSED           [ 56%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_pull.py::test_match[command1] PASSED           [ 56%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_pull.py::test_match[command2] PASSED           [ 56%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_pull.py::test_match[command3] PASSED           [ 56%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_pull.py::test_match[command4] PASSED           [ 56%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_pull.py::test_match[command5] PASSED           [ 56%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_pull.py::test_not_match[command0] PASSED       [ 56%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_pull.py::test_not_match[command1] PASSED       [ 57%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_pull.py::test_not_match[command2] PASSED       [ 57%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_pull.py::test_not_match[command3] PASSED       [ 57%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_pull.py::test_not_match[command4] PASSED       [ 57%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_pull.py::test_not_match[command5] PASSED       [ 57%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_pull.py::test_get_new_command[command0-git pull && git push] PASSED [ 57%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_pull.py::test_get_new_command[command1-git pull nvbn && git push nvbn] PASSED [ 57%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_pull.py::test_get_new_command[command2-git pull nvbn master && git push nvbn master] PASSED [ 57%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_pull.py::test_get_new_command[command3-git pull && git push] PASSED [ 57%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_pull.py::test_get_new_command[command4-git pull nvbn && git push nvbn] PASSED [ 57%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_pull.py::test_get_new_command[command5-git pull nvbn master && git push nvbn master] PASSED [ 57%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_without_commits.py::test_match PASSED          [ 57%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_without_commits.py::test_not_match PASSED      [ 57%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_push_without_commits.py::test_get_new_command PASSED [ 57%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rebase_merge_dir.py::test_match[git rebase master] PASSED [ 57%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rebase_merge_dir.py::test_match[git rebase -skip] PASSED [ 57%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rebase_merge_dir.py::test_match[git rebase] PASSED  [ 57%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rebase_merge_dir.py::test_not_match[git rebase master] PASSED [ 57%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rebase_merge_dir.py::test_not_match[git rebase -abort] PASSED [ 57%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rebase_merge_dir.py::test_get_new_command[git rebase master-result0] PASSED [ 57%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rebase_merge_dir.py::test_get_new_command[git rebase -skip-result1] PASSED [ 58%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rebase_merge_dir.py::test_get_new_command[git rebase-result2] PASSED [ 58%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rebase_no_changes.py::test_match PASSED             [ 58%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rebase_no_changes.py::test_get_new_command PASSED   [ 58%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_remote_delete.py::test_match PASSED                 [ 58%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_remote_delete.py::test_not_match[command0] PASSED   [ 58%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_remote_delete.py::test_not_match[command1] PASSED   [ 58%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_remote_delete.py::test_not_match[command2] PASSED   [ 58%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_remote_delete.py::test_get_new_command[command0-git remote remove foo] PASSED [ 58%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_remote_delete.py::test_get_new_command[command1-git remote remove delete] PASSED [ 58%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_remote_seturl_add.py::test_match[command0] PASSED   [ 58%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_remote_seturl_add.py::test_not_match[command0] PASSED [ 58%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_remote_seturl_add.py::test_not_match[command1] PASSED [ 58%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_remote_seturl_add.py::test_not_match[command2] PASSED [ 58%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_remote_seturl_add.py::test_not_match[command3] PASSED [ 58%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_remote_seturl_add.py::test_not_match[command4] PASSED [ 58%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_remote_seturl_add.py::test_get_new_command[command0-git remote add origin git@github.com:nvbn/thefuck.git] PASSED [ 58%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rm_local_modifications.py::test_match[git rm foo-foo] PASSED [ 58%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rm_local_modifications.py::test_match[git rm foo bar-bar] PASSED [ 58%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rm_local_modifications.py::test_not_match[git rm foo] PASSED [ 59%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rm_local_modifications.py::test_not_match[git rm foo bar] PASSED [ 59%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rm_local_modifications.py::test_not_match[git rm] PASSED [ 59%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rm_local_modifications.py::test_get_new_command[git rm foo-foo-new_command0] PASSED [ 59%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rm_local_modifications.py::test_get_new_command[git rm foo bar-bar-new_command1] PASSED [ 59%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rm_recursive.py::test_match[git rm foo-foo] PASSED  [ 59%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rm_recursive.py::test_match[git rm foo bar-foo bar] PASSED [ 59%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rm_recursive.py::test_not_match[git rm foo] PASSED  [ 59%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rm_recursive.py::test_not_match[git rm foo bar] PASSED [ 59%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rm_recursive.py::test_get_new_command[git rm foo-foo-git rm -r foo] PASSED [ 59%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rm_recursive.py::test_get_new_command[git rm foo bar-foo bar-git rm -r foo bar] PASSED [ 59%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rm_staged.py::test_match[git rm foo-foo] PASSED     [ 59%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rm_staged.py::test_match[git rm foo bar-bar] PASSED [ 59%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rm_staged.py::test_not_match[git rm foo] PASSED     [ 59%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rm_staged.py::test_not_match[git rm foo bar] PASSED [ 59%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rm_staged.py::test_not_match[git rm] PASSED         [ 59%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rm_staged.py::test_get_new_command[git rm foo-foo-new_command0] PASSED [ 59%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_rm_staged.py::test_get_new_command[git rm foo bar-bar-new_command1] PASSED [ 59%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_stash.py::test_match[command0] PASSED               [ 59%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_stash.py::test_match[command1] PASSED               [ 59%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_stash.py::test_not_match[command0] PASSED           [ 60%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_stash.py::test_not_match[command1] PASSED           [ 60%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_stash.py::test_get_new_command[command0-git stash && git cherry-pick a1b2c3d] PASSED [ 60%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_stash.py::test_get_new_command[command1-git stash && git rebase -i HEAD~7] PASSED [ 60%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_stash_pop.py::test_match PASSED                     [ 60%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_stash_pop.py::test_get_new_command PASSED           [ 60%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_tag_force.py::test_match PASSED                     [ 60%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_tag_force.py::test_get_new_command PASSED           [ 60%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_two_dashes.py::test_match[command0] PASSED          [ 60%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_two_dashes.py::test_match[command1] PASSED          [ 60%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_two_dashes.py::test_match[command2] PASSED          [ 60%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_two_dashes.py::test_match[command3] PASSED          [ 60%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_two_dashes.py::test_match[command4] PASSED          [ 60%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_two_dashes.py::test_not_match[command0] PASSED      [ 60%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_two_dashes.py::test_not_match[command1] PASSED      [ 60%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_two_dashes.py::test_not_match[command2] PASSED      [ 60%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_two_dashes.py::test_not_match[command3] PASSED      [ 60%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_two_dashes.py::test_not_match[command4] PASSED      [ 60%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_two_dashes.py::test_get_new_command[command0-git add --patch] PASSED [ 60%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_two_dashes.py::test_get_new_command[command1-git checkout --patch] PASSED [ 61%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_two_dashes.py::test_get_new_command[command2-git checkout --patch] PASSED [ 61%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_two_dashes.py::test_get_new_command[command3-git init --bare] PASSED [ 61%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_two_dashes.py::test_get_new_command[command4-git commit --amend] PASSED [ 61%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_two_dashes.py::test_get_new_command[command5-git push --tags] PASSED [ 61%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_git_two_dashes.py::test_get_new_command[command6-git rebase --continue] PASSED [ 61%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_go_run.py::test_match[command0] PASSED                  [ 61%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_go_run.py::test_match[command1] PASSED                  [ 61%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_go_run.py::test_get_new_command[command0-go run foo.go] PASSED [ 61%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_go_run.py::test_get_new_command[command1-go run bar.go] PASSED [ 61%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_go_unknown_command.py::test_match PASSED                [ 61%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_go_unknown_command.py::test_not_match PASSED            [ 61%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_go_unknown_command.py::test_get_new_command PASSED      [ 61%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gradle_not_task.py::test_match[command0] PASSED         [ 61%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gradle_not_task.py::test_match[command1] PASSED         [ 61%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gradle_not_task.py::test_match[command2] PASSED         [ 61%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gradle_not_task.py::test_match[command3] PASSED         [ 61%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gradle_not_task.py::test_not_match[command0] PASSED     [ 61%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gradle_not_task.py::test_not_match[command1] PASSED     [ 61%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gradle_not_task.py::test_not_match[command2] PASSED     [ 61%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gradle_not_task.py::test_not_match[command3] PASSED     [ 62%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gradle_not_task.py::test_get_new_command[command0-./gradlew assemble] PASSED [ 62%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gradle_not_task.py::test_get_new_command[command1-./gradlew installDebug] PASSED [ 62%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gradle_not_task.py::test_get_new_command[command2-gradle assemble] PASSED [ 62%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gradle_not_task.py::test_get_new_command[command3-gradle installDebug] PASSED [ 62%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gradle_wrapper.py::test_match[command0] PASSED          [ 62%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gradle_wrapper.py::test_match[command1] PASSED          [ 62%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gradle_wrapper.py::test_not_match[command0-False-None] PASSED [ 62%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gradle_wrapper.py::test_not_match[command1-True-/usr/bin/gradle] PASSED [ 62%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gradle_wrapper.py::test_not_match[command2-True-None] PASSED [ 62%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gradle_wrapper.py::test_get_new_command[gradle assemble-./gradlew assemble] PASSED [ 62%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gradle_wrapper.py::test_get_new_command[gradle --help-./gradlew --help] PASSED [ 62%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gradle_wrapper.py::test_get_new_command[gradle build -c-./gradlew build -c] PASSED [ 62%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grep_arguments_order.py::test_match[grep test.py test-test] PASSED [ 62%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grep_arguments_order.py::test_match[grep -lir . test-test] PASSED [ 62%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grep_arguments_order.py::test_match[egrep test.py test-test] PASSED [ 62%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grep_arguments_order.py::test_match[egrep -lir . test-test] PASSED [ 62%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grep_arguments_order.py::test_not_match[cat test.py-grep: test: No such file or directory] PASSED [ 62%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grep_arguments_order.py::test_not_match[grep test test.py-] PASSED [ 62%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grep_arguments_order.py::test_not_match[grep -lir test .-] PASSED [ 63%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grep_arguments_order.py::test_not_match[egrep test test.py-] PASSED [ 63%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grep_arguments_order.py::test_not_match[egrep -lir test .-] PASSED [ 63%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grep_arguments_order.py::test_get_new_command[grep test.py test-grep: test: No such file or directory-grep test test.py] PASSED [ 63%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grep_arguments_order.py::test_get_new_command[grep -lir . test-grep: test: No such file or directory-grep -lir test .] PASSED [ 63%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grep_arguments_order.py::test_get_new_command[grep . test -lir-grep: test: No such file or directory-grep test -lir .] PASSED [ 63%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grep_arguments_order.py::test_get_new_command[egrep test.py test-grep: test: No such file or directory-egrep test test.py] PASSED [ 63%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grep_arguments_order.py::test_get_new_command[egrep -lir . test-grep: test: No such file or directory-egrep -lir test .] PASSED [ 63%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grep_arguments_order.py::test_get_new_command[egrep . test -lir-grep: test: No such file or directory-egrep test -lir .] PASSED [ 63%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grep_recursive.py::test_match PASSED                    [ 63%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grep_recursive.py::test_get_new_command PASSED          [ 63%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grunt_task_not_found.py::test_match[command0] PASSED    [ 63%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grunt_task_not_found.py::test_match[command1] PASSED    [ 63%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grunt_task_not_found.py::test_not_match[command0] PASSED [ 63%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grunt_task_not_found.py::test_not_match[command1] PASSED [ 63%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grunt_task_not_found.py::test_get_new_command[command0-grunt default] PASSED [ 63%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grunt_task_not_found.py::test_get_new_command[command1-grunt compass:all] PASSED [ 63%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_grunt_task_not_found.py::test_get_new_command[command2-grunt compass:all --color] PASSED [ 63%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gulp_not_task.py::test_match PASSED                     [ 63%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gulp_not_task.py::test_not_march[gulp serve-] PASSED    [ 63%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gulp_not_task.py::test_not_march[cat srve-[00:41:11] Using gulpfile gulpfile.js\\n[00:41:11] Task 'srve' is not in your gulpfile\\n[00:41:11] Please check the documentation for proper gulpfile formatting\\n] PASSED [ 64%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_gulp_not_task.py::test_get_new_command PASSED           [ 64%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_has_exists_script.py::test_match PASSED                 [ 64%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_has_exists_script.py::test_get_new_command PASSED       [ 64%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_heroku_multiple_apps.py::test_match[pg] PASSED          [ 64%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_heroku_multiple_apps.py::test_not_match[heroku pg-\\n=== HEROKU_POSTGRESQL_TEAL_URL, DATABASE_URL\\nPlan:                  Hobby-basic\\nStatus:                Available\\nConnections:           20/20\\nPG Version:            9.6.4\\nCreated:               2017-01-01 00:00 UTC\\nData Size:             99.9 MB\\nTables:                99\\nRows:                  12345/10000000 (In compliance)\\nFork/Follow:           Unsupported\\nRollback:              Unsupported\\nContinuous Protection: Off\\nAdd-on:                postgresql-round-12345\\n] PASSED [ 64%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_heroku_multiple_apps.py::test_get_new_command[pg-result0] PASSED [ 64%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_heroku_not_command.py::test_match[log] PASSED           [ 64%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_heroku_not_command.py::test_not_match[cat log-\\n \\xe2\\x96\\xb8    log is not a heroku command.\\n \\xe2\\x96\\xb8    Perhaps you meant logs?\\n \\xe2\\x96\\xb8    Run heroku _ to run heroku logs.\\n \\xe2\\x96\\xb8    Run heroku help for a list of available commands.] PASSED [ 64%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_heroku_not_command.py::test_get_new_command[log-heroku logs] PASSED [ 64%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_history.py::test_match[ls cet] PASSED                   [ 64%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_history.py::test_match[daff x] PASSED                   [ 64%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_history.py::test_not_match[apt-get] PASSED              [ 64%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_history.py::test_not_match[nocommand y] PASSED          [ 64%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_history.py::test_get_new_command[ls cet-ls cat] PASSED  [ 64%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_history.py::test_get_new_command[daff x-diff x] PASSED  [ 64%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_hostscli.py::test_match[command0] PASSED                [ 64%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_hostscli.py::test_get_new_command[command0-result0] PASSED [ 64%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ifconfig_device_not_found.py::test_match[ifconfig wlan0-wlan0: error fetching interface information: Device not found] PASSED [ 64%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ifconfig_device_not_found.py::test_match[ifconfig -s eth0-eth0: error fetching interface information: Device not found] PASSED [ 65%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ifconfig_device_not_found.py::test_not_match[config wlan0-wlan0: error fetching interface information: Device not found] PASSED [ 65%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ifconfig_device_not_found.py::test_not_match[ifconfig eth0-] PASSED [ 65%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ifconfig_device_not_found.py::test_get_new_comman[ifconfig wlan0-result0] PASSED [ 65%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ifconfig_device_not_found.py::test_get_new_comman[ifconfig -s wlan0-result1] PASSED [ 65%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_java.py::test_match[command0] PASSED                    [ 65%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_java.py::test_match[command1] PASSED                    [ 65%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_java.py::test_get_new_command[command0-java foo] PASSED [ 65%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_java.py::test_get_new_command[command1-java bar] PASSED [ 65%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_javac.py::test_match[command0] PASSED                   [ 65%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_javac.py::test_match[command1] PASSED                   [ 65%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_javac.py::test_get_new_command[command0-javac foo.java] PASSED [ 65%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_javac.py::test_get_new_command[command1-javac bar.java] PASSED [ 65%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_lein_not_task.py::test_match PASSED                     [ 65%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_lein_not_task.py::test_get_new_command PASSED           [ 65%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ln_no_hard_link.py::test_match[ln barDir barLink-ln: \\xe2\\x80\\x98barDir\\xe2\\x80\\x99: {}] PASSED [ 65%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ln_no_hard_link.py::test_match[sudo ln a b-ln: \\xe2\\x80\\x98a\\xe2\\x80\\x99: {}] PASSED [ 65%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ln_no_hard_link.py::test_match[sudo ln -nbi a b-ln: \\xe2\\x80\\x98a\\xe2\\x80\\x99: {}] PASSED [ 65%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ln_no_hard_link.py::test_not_match[-] PASSED            [ 65%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ln_no_hard_link.py::test_not_match[ln a b-... hard link] PASSED [ 65%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ln_no_hard_link.py::test_not_match[sudo ln a b-... hard link] PASSED [ 66%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ln_no_hard_link.py::test_not_match[a b-hard link not allowed for directory] PASSED [ 66%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ln_no_hard_link.py::test_get_new_command[ln barDir barLink-ln -s barDir barLink] PASSED [ 66%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ln_no_hard_link.py::test_get_new_command[sudo ln barDir barLink-sudo ln -s barDir barLink] PASSED [ 66%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ln_no_hard_link.py::test_get_new_command[sudo ln -nbi a b-sudo ln -s -nbi a b] PASSED [ 66%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ln_no_hard_link.py::test_get_new_command[ln -nbi a b && ls-ln -s -nbi a b && ls] PASSED [ 66%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ln_no_hard_link.py::test_get_new_command[ln a ln-ln -s a ln] PASSED [ 66%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ln_no_hard_link.py::test_get_new_command[sudo ln a ln-sudo ln -s a ln] PASSED [ 66%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ln_s_order.py::test_not_match[ln dest source-ln: failed to create symbolic link 'source': File exists-True] PASSED [ 66%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ln_s_order.py::test_not_match[ls -s dest source-ln: failed to create symbolic link 'source': File exists-True] PASSED [ 66%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ln_s_order.py::test_not_match[ln -s dest source--True] PASSED [ 66%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ln_s_order.py::test_not_match[ln -s dest source-ln: failed to create symbolic link 'source': File exists-False] PASSED [ 66%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ln_s_order.py::test_match[ln -s dest source-ln -s source dest] PASSED [ 66%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ln_s_order.py::test_match[ln dest -s source-ln -s source dest] PASSED [ 66%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ln_s_order.py::test_match[ln dest source -s-ln source -s dest] PASSED [ 66%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_long_form_help.py::test_match[Try 'grep --help' for more information.] PASSED [ 66%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_long_form_help.py::test_not_match PASSED                [ 66%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_long_form_help.py::test_get_new_command[grep -h-grep --help] PASSED [ 66%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_long_form_help.py::test_get_new_command[tar -h-tar --help] PASSED [ 66%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_long_form_help.py::test_get_new_command[docker run -h-docker run --help] PASSED [ 67%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_long_form_help.py::test_get_new_command[cut -h-cut --help] PASSED [ 67%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ls_all.py::test_match PASSED                            [ 67%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ls_all.py::test_get_new_command PASSED                  [ 67%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ls_lah.py::test_match PASSED                            [ 67%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ls_lah.py::test_get_new_command PASSED                  [ 67%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_man.py::test_match[command0] PASSED                     [ 67%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_man.py::test_match[command1] PASSED                     [ 67%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_man.py::test_match[command2] PASSED                     [ 67%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_man.py::test_match[command3] PASSED                     [ 67%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_man.py::test_match[command4] PASSED                     [ 67%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_man.py::test_match[command5] PASSED                     [ 67%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_man.py::test_match[command6] PASSED                     [ 67%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_man.py::test_not_match[command0] PASSED                 [ 67%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_man.py::test_not_match[command1] PASSED                 [ 67%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_man.py::test_get_new_command[command0-new_command0] PASSED [ 67%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_man.py::test_get_new_command[command1-new_command1] PASSED [ 67%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_man.py::test_get_new_command[command2-man 3 read] PASSED [ 67%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_man.py::test_get_new_command[command3-man 2 read] PASSED [ 67%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_man.py::test_get_new_command[command4-man -s3 read] PASSED [ 67%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_man.py::test_get_new_command[command5-man -s2 read] PASSED [ 68%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_man.py::test_get_new_command[command6-man -s 3 read] PASSED [ 68%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_man.py::test_get_new_command[command7-man -s 2 read] PASSED [ 68%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_man_no_space.py::test_match PASSED                      [ 68%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_man_no_space.py::test_get_new_command PASSED            [ 68%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_match[command0] PASSED               [ 68%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_match[command1] PASSED               [ 68%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_match[command2] PASSED               [ 68%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_match[command3] PASSED               [ 68%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_match[command4] PASSED               [ 68%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_match[command5] PASSED               [ 68%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_match[command6] PASSED               [ 68%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_not_match[command0] PASSED           [ 68%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_not_match[command1] PASSED           [ 68%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_not_match[command2] PASSED           [ 68%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_not_match[command3] PASSED           [ 68%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_not_match[command4] PASSED           [ 68%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_not_match[command5] PASSED           [ 68%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_extract_possibilities[command0-possibilities0] PASSED [ 68%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_extract_possibilities[command1-possibilities1] PASSED [ 69%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_extract_possibilities[command2-possibilities2] PASSED [ 69%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_extract_possibilities[command3-possibilities3] PASSED [ 69%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_extract_possibilities[command4-possibilities4] PASSED [ 69%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_extract_possibilities[command5-possibilities5] PASSED [ 69%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_extract_possibilities[command6-possibilities6] PASSED [ 69%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_get_new_command[command0-hg rebase] PASSED [ 69%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_get_new_command[command1-hg branch] PASSED [ 69%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_get_new_command[command2-hg revert] PASSED [ 69%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_get_new_command[command3-hg log -r tip] PASSED [ 69%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_get_new_command[command4-hg revert] PASSED [ 69%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_get_new_command[command5-hg rebase] PASSED [ 69%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mercurial.py::test_get_new_command[command6-hg rebase re] PASSED [ 69%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_missing_space_before_subcommand.py::test_match[gitbranch] PASSED [ 69%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_missing_space_before_subcommand.py::test_match[ls-la] PASSED [ 69%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_missing_space_before_subcommand.py::test_match[npminstall] PASSED [ 69%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_missing_space_before_subcommand.py::test_match[watchls] PASSED [ 69%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_missing_space_before_subcommand.py::test_not_match[git branch] PASSED [ 69%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_missing_space_before_subcommand.py::test_not_match[vimfile] PASSED [ 69%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_missing_space_before_subcommand.py::test_get_new_command[gitbranch-git branch] PASSED [ 69%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_missing_space_before_subcommand.py::test_get_new_command[ls-la-ls -la] PASSED [ 70%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_missing_space_before_subcommand.py::test_get_new_command[npminstall webpack-npm install webpack] PASSED [ 70%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_missing_space_before_subcommand.py::test_get_new_command[watchls-watch ls] PASSED [ 70%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mkdir_p.py::test_match[command0] PASSED                 [ 70%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mkdir_p.py::test_match[command1] PASSED                 [ 70%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mkdir_p.py::test_match[command2] PASSED                 [ 70%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mkdir_p.py::test_not_match[command0] PASSED             [ 70%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mkdir_p.py::test_not_match[command1] PASSED             [ 70%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mkdir_p.py::test_not_match[command2] PASSED             [ 70%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mkdir_p.py::test_not_match[command3] PASSED             [ 70%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mkdir_p.py::test_not_match[command4] PASSED             [ 70%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mkdir_p.py::test_get_new_command[command0-mkdir -p foo/bar/baz] PASSED [ 70%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mkdir_p.py::test_get_new_command[command1-hdfs dfs -mkdir -p foo/bar/baz] PASSED [ 70%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mkdir_p.py::test_get_new_command[command2-./bin/hdfs dfs -mkdir -p foo/bar/baz] PASSED [ 70%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mvn_no_command.py::test_match[command0] PASSED          [ 70%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mvn_no_command.py::test_not_match[command0] PASSED      [ 70%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mvn_no_command.py::test_not_match[command1] PASSED      [ 70%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mvn_no_command.py::test_not_match[command2] PASSED      [ 70%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mvn_no_command.py::test_get_new_command[command0-new_command0] PASSED [ 70%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mvn_no_command.py::test_get_new_command[command1-new_command1] PASSED [ 71%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mvn_unknown_lifecycle_phase.py::test_match[command0] PASSED [ 71%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mvn_unknown_lifecycle_phase.py::test_not_match[command0] PASSED [ 71%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mvn_unknown_lifecycle_phase.py::test_not_match[command1] PASSED [ 71%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mvn_unknown_lifecycle_phase.py::test_not_match[command2] PASSED [ 71%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mvn_unknown_lifecycle_phase.py::test_get_new_command[command0-new_command0] PASSED [ 71%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_mvn_unknown_lifecycle_phase.py::test_get_new_command[command1-new_command1] PASSED [ 71%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_nixos_cmd_not_found.py::test_match[command0] PASSED     [ 71%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_nixos_cmd_not_found.py::test_not_match[command0] PASSED [ 71%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_nixos_cmd_not_found.py::test_not_match[command1] PASSED [ 71%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_nixos_cmd_not_found.py::test_get_new_command[command0-nix-env -iA nixos.vim && vim] PASSED [ 71%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_nixos_cmd_not_found.py::test_get_new_command[command1-nix-env -iA nixos.pacman && pacman] PASSED [ 71%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_no_command.py::test_match[vom file.py-vom: not found] PASSED [ 71%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_no_command.py::test_match[fucck-fucck: not found] PASSED [ 71%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_no_command.py::test_match[puthon-'puthon' is not recognized as an internal or external command] PASSED [ 71%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_no_command.py::test_match[got commit-got: command not found] PASSED [ 71%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_no_command.py::test_match[gti commit -m \"new commit\"-gti: command not found] PASSED [ 71%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_no_command.py::test_not_match[qweqwe-qweqwe: not found-None] PASSED [ 71%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_no_command.py::test_not_match[vom file.py-some text-None] PASSED [ 71%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_no_command.py::test_not_match[vim file.py-vim: not found-vim] PASSED [ 71%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_no_command.py::test_get_new_command[vom file.py-result0] PASSED [ 72%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_no_command.py::test_get_new_command[fucck-result1] PASSED [ 72%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_no_command.py::test_get_new_command[got commit-result2] PASSED [ 72%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_no_command.py::test_get_new_command[gti commit -m \"new commit\"-result3] PASSED [ 72%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_no_such_file.py::test_match[command0] PASSED            [ 72%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_no_such_file.py::test_match[command1] PASSED            [ 72%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_no_such_file.py::test_not_match[command0] PASSED        [ 72%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_no_such_file.py::test_not_match[command1] PASSED        [ 72%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_no_such_file.py::test_get_new_command[command0-mkdir -p bar && mv foo bar/foo] PASSED [ 72%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_no_such_file.py::test_get_new_command[command1-mkdir -p bar && mv foo bar/] PASSED [ 72%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_missing_script.py::test_match[command0] PASSED      [ 72%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_missing_script.py::test_match[command1] PASSED      [ 72%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_missing_script.py::test_match[command2] PASSED      [ 72%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_missing_script.py::test_not_match[command0] PASSED  [ 72%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_missing_script.py::test_not_match[command1] PASSED  [ 72%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_missing_script.py::test_not_match[command2] PASSED  [ 72%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_missing_script.py::test_get_new_command[npm ru wach-tests-\\nnpm ERR! Linux 4.4.0-31-generic\\nnpm ERR! argv \"/opt/node/bin/node\" \"/opt/node/bin/npm\" \"run\" \"dvelop\"\\nnpm ERR! node v4.4.7\\nnpm ERR! npm  v2.15.8\\n\\nnpm ERR! missing script: wach-tests\\nnpm ERR!\\nnpm ERR! If you need help, you may report this error at:\\nnpm ERR!     <https://github.com/npm/npm/issues>\\n\\nnpm ERR! Please include the following file with any support request:\\nnpm ERR!     /home/nvbn/exp/code_view/client_web/npm-debug.log\\n-npm ru watch-test] PASSED [ 72%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_missing_script.py::test_get_new_command[npm -i run-script dvelop-\\nnpm ERR! Linux 4.4.0-31-generic\\nnpm ERR! argv \"/opt/node/bin/node\" \"/opt/node/bin/npm\" \"run\" \"dvelop\"\\nnpm ERR! node v4.4.7\\nnpm ERR! npm  v2.15.8\\n\\nnpm ERR! missing script: dvelop\\nnpm ERR!\\nnpm ERR! If you need help, you may report this error at:\\nnpm ERR!     <https://github.com/npm/npm/issues>\\n\\nnpm ERR! Please include the following file with any support request:\\nnpm ERR!     /home/nvbn/exp/code_view/client_web/npm-debug.log\\n-npm -i run-script develop] PASSED [ 72%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_missing_script.py::test_get_new_command[npm -i run-script buld -X POST-\\nnpm ERR! Linux 4.4.0-31-generic\\nnpm ERR! argv \"/opt/node/bin/node\" \"/opt/node/bin/npm\" \"run\" \"dvelop\"\\nnpm ERR! node v4.4.7\\nnpm ERR! npm  v2.15.8\\n\\nnpm ERR! missing script: buld\\nnpm ERR!\\nnpm ERR! If you need help, you may report this error at:\\nnpm ERR!     <https://github.com/npm/npm/issues>\\n\\nnpm ERR! Please include the following file with any support request:\\nnpm ERR!     /home/nvbn/exp/code_view/client_web/npm-debug.log\\n-npm -i run-script build -X POST] PASSED [ 72%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_run_script.py::test_match[npm watch-test] PASSED    [ 73%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_run_script.py::test_match[npm develop] PASSED       [ 73%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_run_script.py::test_not_match[command0-\\nLifecycle scripts included in code-view-web:\\n  test\\n    jest\\n\\navailable via `npm run-script`:\\n  build\\n    cp node_modules/ace-builds/src-min/ -a resources/ace/ && webpack --progress --colors -p --config ./webpack.production.config.js\\n  develop\\n    cp node_modules/ace-builds/src/ -a resources/ace/ && webpack-dev-server --progress --colors\\n  watch-test\\n    jest --verbose --watch\\n\\n] PASSED [ 73%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_run_script.py::test_not_match[command1-\\nLifecycle scripts included in code-view-web:\\n  test\\n    jest\\n\\navailable via `npm run-script`:\\n  build\\n    cp node_modules/ace-builds/src-min/ -a resources/ace/ && webpack --progress --colors -p --config ./webpack.production.config.js\\n  develop\\n    cp node_modules/ace-builds/src/ -a resources/ace/ && webpack-dev-server --progress --colors\\n  watch-test\\n    jest --verbose --watch\\n\\n] PASSED [ 73%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_run_script.py::test_not_match[command2-\\nLifecycle scripts included in code-view-web:\\n  test\\n    jest\\n\\navailable via `npm run-script`:\\n  build\\n    cp node_modules/ace-builds/src-min/ -a resources/ace/ && webpack --progress --colors -p --config ./webpack.production.config.js\\n  develop\\n    cp node_modules/ace-builds/src/ -a resources/ace/ && webpack-dev-server --progress --colors\\n  watch-test\\n    jest --verbose --watch\\n\\n] PASSED [ 73%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_run_script.py::test_not_match[command3-\\nLifecycle scripts included in code-view-web:\\n  test\\n    jest\\n\\navailable via `npm run-script`:\\n  build\\n    cp node_modules/ace-builds/src-min/ -a resources/ace/ && webpack --progress --colors -p --config ./webpack.production.config.js\\n  develop\\n    cp node_modules/ace-builds/src/ -a resources/ace/ && webpack-dev-server --progress --colors\\n  watch-test\\n    jest --verbose --watch\\n\\n] PASSED [ 73%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_run_script.py::test_get_new_command[npm watch-test-npm run-script watch-test] PASSED [ 73%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_run_script.py::test_get_new_command[npm -i develop-npm run-script -i develop] PASSED [ 73%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_run_script.py::test_get_new_command[npm -i watch-script --path ..-npm run-script -i watch-script --path ..] PASSED [ 73%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_wrong_command.py::test_match[npm urgrdae] PASSED    [ 73%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_wrong_command.py::test_match[npm urgrade -g] PASSED [ 73%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_wrong_command.py::test_match[npm -f urgrade -g] PASSED [ 73%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_wrong_command.py::test_match[npm urg] PASSED        [ 73%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_wrong_command.py::test_not_match[npm urgrade-] PASSED [ 73%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_wrong_command.py::test_not_match[npm-\\nUsage: npm <command>\\n\\nwhere <command> is one of:\\n    access, add-user, adduser, apihelp, author, bin, bugs, c,\\n    cache, completion, config, ddp, dedupe, deprecate, dist-tag,\\n    dist-tags, docs, edit, explore, faq, find, find-dupes, get,\\n    help, help-search, home, i, info, init, install, issues, la,\\n    link, list, ll, ln, login, logout, ls, outdated, owner,\\n    pack, ping, prefix, prune, publish, r, rb, rebuild, remove,\\n    repo, restart, rm, root, run-script, s, se, search, set,\\n    show, shrinkwrap, star, stars, start, stop, t, tag, team,\\n    test, tst, un, uninstall, unlink, unpublish, unstar, up,\\n    update, upgrade, v, verison, version, view, whoami\\n\\nnpm <cmd> -h     quick help on <cmd>\\nnpm -l           display full usage info\\nnpm faq          commonly asked questions\\nnpm help <term>  search for help on <term>\\nnpm help npm     involved overview\\n\\nSpecify configs in the ini-formatted file:\\n    /home/nvbn/.npmrc\\nor on the command line via: npm <command> --key value\\nConfig info can be viewed via: npm help config\\n\\nnpm@2.14.7 /opt/node/lib/node_modules/npm\\n] PASSED [ 73%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_wrong_command.py::test_not_match[test urgrade-\\nUsage: npm <command>\\n\\nwhere <command> is one of:\\n    access, add-user, adduser, apihelp, author, bin, bugs, c,\\n    cache, completion, config, ddp, dedupe, deprecate, dist-tag,\\n    dist-tags, docs, edit, explore, faq, find, find-dupes, get,\\n    help, help-search, home, i, info, init, install, issues, la,\\n    link, list, ll, ln, login, logout, ls, outdated, owner,\\n    pack, ping, prefix, prune, publish, r, rb, rebuild, remove,\\n    repo, restart, rm, root, run-script, s, se, search, set,\\n    show, shrinkwrap, star, stars, start, stop, t, tag, team,\\n    test, tst, un, uninstall, unlink, unpublish, unstar, up,\\n    update, upgrade, v, verison, version, view, whoami\\n\\nnpm <cmd> -h     quick help on <cmd>\\nnpm -l           display full usage info\\nnpm faq          commonly asked questions\\nnpm help <term>  search for help on <term>\\nnpm help npm     involved overview\\n\\nSpecify configs in the ini-formatted file:\\n    /home/nvbn/.npmrc\\nor on the command line via: npm <command> --key value\\nConfig info can be viewed via: npm help config\\n\\nnpm@2.14.7 /opt/node/lib/node_modules/npm\\n] PASSED [ 73%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_wrong_command.py::test_not_match[npm -e-\\nUsage: npm <command>\\n\\nwhere <command> is one of:\\n    access, add-user, adduser, apihelp, author, bin, bugs, c,\\n    cache, completion, config, ddp, dedupe, deprecate, dist-tag,\\n    dist-tags, docs, edit, explore, faq, find, find-dupes, get,\\n    help, help-search, home, i, info, init, install, issues, la,\\n    link, list, ll, ln, login, logout, ls, outdated, owner,\\n    pack, ping, prefix, prune, publish, r, rb, rebuild, remove,\\n    repo, restart, rm, root, run-script, s, se, search, set,\\n    show, shrinkwrap, star, stars, start, stop, t, tag, team,\\n    test, tst, un, uninstall, unlink, unpublish, unstar, up,\\n    update, upgrade, v, verison, version, view, whoami\\n\\nnpm <cmd> -h     quick help on <cmd>\\nnpm -l           display full usage info\\nnpm faq          commonly asked questions\\nnpm help <term>  search for help on <term>\\nnpm help npm     involved overview\\n\\nSpecify configs in the ini-formatted file:\\n    /home/nvbn/.npmrc\\nor on the command line via: npm <command> --key value\\nConfig info can be viewed via: npm help config\\n\\nnpm@2.14.7 /opt/node/lib/node_modules/npm\\n] PASSED [ 73%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_wrong_command.py::test_get_new_command[npm urgrade-npm upgrade] PASSED [ 73%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_wrong_command.py::test_get_new_command[npm -g isntall gulp-npm -g install gulp] PASSED [ 73%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_npm_wrong_command.py::test_get_new_command[npm isntall -g gulp-npm install -g gulp] PASSED [ 73%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_omnienv_no_such_command.py::test_match[pyenv globe-globe] PASSED [ 74%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_omnienv_no_such_command.py::test_match[pyenv intall 3.8.0-intall] PASSED [ 74%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_omnienv_no_such_command.py::test_match[pyenv list-list] PASSED [ 74%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_omnienv_no_such_command.py::test_match_goenv_output_quote PASSED [ 74%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_omnienv_no_such_command.py::test_not_match[pyenv global-system] PASSED [ 74%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_omnienv_no_such_command.py::test_not_match[pyenv versions-  3.7.0\\n  3.7.1\\n* 3.7.2\\n] PASSED [ 74%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_omnienv_no_such_command.py::test_not_match[pyenv install --list-  3.7.0\\n  3.7.1\\n  3.7.2\\n] PASSED [ 74%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_omnienv_no_such_command.py::test_get_new_command[pyenv globe-globe-pyenv global] PASSED [ 74%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_omnienv_no_such_command.py::test_get_new_command[pyenv intall 3.8.0-intall-pyenv install 3.8.0] PASSED [ 74%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_omnienv_no_such_command.py::test_get_new_command[pyenv list-list-pyenv install --list] PASSED [ 74%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_omnienv_no_such_command.py::test_get_new_command[pyenv remove 3.8.0-remove-pyenv uninstall 3.8.0] PASSED [ 74%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_open.py::test_is_arg_url[open foo.com] PASSED           [ 74%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_open.py::test_is_arg_url[open foo.edu] PASSED           [ 74%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_open.py::test_is_arg_url[open foo.info] PASSED          [ 74%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_open.py::test_is_arg_url[open foo.io] PASSED            [ 74%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_open.py::test_is_arg_url[open foo.ly] PASSED            [ 74%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_open.py::test_is_arg_url[open foo.me] PASSED            [ 74%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_open.py::test_is_arg_url[open foo.net] PASSED           [ 74%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_open.py::test_is_arg_url[open foo.org] PASSED           [ 74%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_open.py::test_is_arg_url[open foo.se] PASSED            [ 75%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_open.py::test_is_arg_url[open www.foo.ru] PASSED        [ 75%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_open.py::test_not_is_arg_url[open foo] PASSED           [ 75%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_open.py::test_not_is_arg_url[open bar.txt] PASSED       [ 75%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_open.py::test_not_is_arg_url[open egg.doc] PASSED       [ 75%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_open.py::test_match[open foo.com] PASSED                [ 75%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_open.py::test_match[xdg-open foo.com] PASSED            [ 75%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_open.py::test_match[gnome-open foo.com] PASSED          [ 75%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_open.py::test_match[kde-open foo.com] PASSED            [ 75%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_open.py::test_match[open nonest] PASSED                 [ 75%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_open.py::test_get_new_command[open foo.io-new_command0] PASSED [ 75%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_open.py::test_get_new_command[xdg-open foo.io-new_command1] PASSED [ 75%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_open.py::test_get_new_command[gnome-open foo.io-new_command2] PASSED [ 75%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_open.py::test_get_new_command[kde-open foo.io-new_command3] PASSED [ 75%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_open.py::test_get_new_command[open nonest-new_command4] PASSED [ 75%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman.py::test_match[command0] SKIPPED                 [ 75%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman.py::test_match[command1] SKIPPED                 [ 75%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman.py::test_match_mocked[command0-extra/gvim 7.4.712-1        \\t/usr/bin/vim\\nextra/gvim-python3 7.4.712-1\\t/usr/bin/vim\\nextra/vim 7.4.712-1         \\t/usr/bin/vim\\nextra/vim-minimal 7.4.712-1 \\t/usr/bin/vim\\nextra/vim-python3 7.4.712-1 \\t/usr/bin/vim] PASSED [ 75%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman.py::test_match_mocked[command1-extra/gvim 7.4.712-1        \\t/usr/bin/vim\\nextra/gvim-python3 7.4.712-1\\t/usr/bin/vim\\nextra/vim 7.4.712-1         \\t/usr/bin/vim\\nextra/vim-minimal 7.4.712-1 \\t/usr/bin/vim\\nextra/vim-python3 7.4.712-1 \\t/usr/bin/vim] PASSED [ 75%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman.py::test_not_match[command0] PASSED              [ 75%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman.py::test_not_match[command1] PASSED              [ 76%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman.py::test_not_match[command2] PASSED              [ 76%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman.py::test_not_match[command3] PASSED              [ 76%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman.py::test_get_new_command[command0-new_command0] SKIPPED [ 76%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman.py::test_get_new_command[command1-new_command1] SKIPPED [ 76%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman.py::test_get_new_command[command2-new_command2] SKIPPED [ 76%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman.py::test_get_new_command[command3-new_command3] SKIPPED [ 76%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman.py::test_get_new_command_mocked[command0-new_command0-extra/gvim 7.4.712-1        \\t/usr/bin/vim\\nextra/gvim-python3 7.4.712-1\\t/usr/bin/vim\\nextra/vim 7.4.712-1         \\t/usr/bin/vim\\nextra/vim-minimal 7.4.712-1 \\t/usr/bin/vim\\nextra/vim-python3 7.4.712-1 \\t/usr/bin/vim] PASSED [ 76%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman.py::test_get_new_command_mocked[command1-new_command1-extra/gvim 7.4.712-1        \\t/usr/bin/vim\\nextra/gvim-python3 7.4.712-1\\t/usr/bin/vim\\nextra/vim 7.4.712-1         \\t/usr/bin/vim\\nextra/vim-minimal 7.4.712-1 \\t/usr/bin/vim\\nextra/vim-python3 7.4.712-1 \\t/usr/bin/vim] PASSED [ 76%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman.py::test_get_new_command_mocked[command2-new_command2-extra/imagemagick 6.9.1.0-1\\t/usr/bin/convert] PASSED [ 76%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman.py::test_get_new_command_mocked[command3-new_command3-core/sudo 1.8.13-13/usr/bin/sudo] PASSED [ 76%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman.py::test_get_new_command_mocked[command4-new_command4-extra/imagemagick 6.9.1.0-1\\t/usr/bin/convert] PASSED [ 76%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_not_match_good_output[S] PASSED [ 76%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_not_match_good_output[U] PASSED [ 76%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_not_match_good_output[R] PASSED [ 76%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_not_match_good_output[Q] PASSED [ 76%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_not_match_good_output[F] PASSED [ 76%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_not_match_good_output[D] PASSED [ 76%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_not_match_good_output[V] PASSED [ 76%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_not_match_good_output[T] PASSED [ 77%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_not_match_bad_output[a] PASSED [ 77%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_not_match_bad_output[z] PASSED [ 77%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_not_match_bad_output[x] PASSED [ 77%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_not_match_bad_output[c] PASSED [ 77%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_not_match_bad_output[b] PASSED [ 77%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_not_match_bad_output[n] PASSED [ 77%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_not_match_bad_output[m] PASSED [ 77%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_match[s] PASSED          [ 77%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_match[u] PASSED          [ 77%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_match[r] PASSED          [ 77%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_match[q] PASSED          [ 77%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_match[f] PASSED          [ 77%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_match[d] PASSED          [ 77%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_match[v] PASSED          [ 77%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_match[t] PASSED          [ 77%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_get_new_command[s] PASSED [ 77%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_get_new_command[u] PASSED [ 77%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_get_new_command[r] PASSED [ 77%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_get_new_command[q] PASSED [ 77%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_get_new_command[f] PASSED [ 78%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_get_new_command[d] PASSED [ 78%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_get_new_command[v] PASSED [ 78%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_invalid_option.py::test_get_new_command[t] PASSED [ 78%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_not_found.py::test_match[command0] SKIPPED       [ 78%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_not_found.py::test_match[command1] SKIPPED       [ 78%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_not_found.py::test_match[command2] SKIPPED       [ 78%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_not_found.py::test_match[command3] SKIPPED       [ 78%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_not_found.py::test_match[command4] SKIPPED       [ 78%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_not_found.py::test_match_mocked[command0] PASSED [ 78%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_not_found.py::test_match_mocked[command1] PASSED [ 78%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_not_found.py::test_match_mocked[command2] PASSED [ 78%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_not_found.py::test_match_mocked[command3] PASSED [ 78%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_not_found.py::test_match_mocked[command4] PASSED [ 78%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_not_found.py::test_get_new_command[command0-fixed0] SKIPPED [ 78%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_not_found.py::test_get_new_command[command1-fixed1] SKIPPED [ 78%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_not_found.py::test_get_new_command[command2-fixed2] SKIPPED [ 78%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_not_found.py::test_get_new_command[command3-fixed3] SKIPPED [ 78%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_not_found.py::test_get_new_command[command4-fixed4] SKIPPED [ 78%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_not_found.py::test_get_new_command_mocked[command0-fixed0] PASSED [ 79%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_not_found.py::test_get_new_command_mocked[command1-fixed1] PASSED [ 79%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_not_found.py::test_get_new_command_mocked[command2-fixed2] PASSED [ 79%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_not_found.py::test_get_new_command_mocked[command3-fixed3] PASSED [ 79%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pacman_not_found.py::test_get_new_command_mocked[command4-fixed4] PASSED [ 79%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_path_from_history.py::test_match[ls project-no such file or directory: project] PASSED [ 79%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_path_from_history.py::test_match[cd project-can't cd to project] PASSED [ 79%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_path_from_history.py::test_not_match[myapp cats-no such file or directory: project] PASSED [ 79%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_path_from_history.py::test_not_match[cd project-] PASSED [ 79%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_path_from_history.py::test_get_new_command[ls project-no such file or directory: project-ls ~/work/project] PASSED [ 79%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_path_from_history.py::test_get_new_command[cd java-can't cd to java-cd /opt/java] PASSED [ 79%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_php_s.py::test_match[command0] PASSED                   [ 79%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_php_s.py::test_match[command1] PASSED                   [ 79%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_php_s.py::test_not_match[command0] PASSED               [ 79%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_php_s.py::test_not_match[command1] PASSED               [ 79%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_php_s.py::test_get_new_command[command0-php -S localhost:8000] PASSED [ 79%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_php_s.py::test_get_new_command[command1-php -t pub -S 0.0.0.0:8080] PASSED [ 79%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pip_install.py::test_match PASSED                       [ 79%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pip_install.py::test_get_new_command PASSED             [ 79%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pip_unknown_command.py::test_match PASSED               [ 79%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pip_unknown_command.py::test_get_new_command[pip un+install thefuck-un+install-uninstall-pip uninstall thefuck] PASSED [ 80%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_pip_unknown_command.py::test_get_new_command[pip instatl-instatl-install-pip install] PASSED [ 80%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_port_already_in_use.py::test_match[command0] PASSED     [ 80%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_port_already_in_use.py::test_match[command1] PASSED     [ 80%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_port_already_in_use.py::test_match[command2] PASSED     [ 80%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_port_already_in_use.py::test_match[command3] PASSED     [ 80%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_port_already_in_use.py::test_match[command4] PASSED     [ 80%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_port_already_in_use.py::test_match[command5] PASSED     [ 80%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_port_already_in_use.py::test_not_match[command0-COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\\nnode    18233 nvbn   16u  IPv4 557134      0t0  TCP localhost:http-alt (LISTEN)\\n] PASSED [ 80%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_port_already_in_use.py::test_not_match[command1-] PASSED [ 80%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_port_already_in_use.py::test_not_match[command2-] PASSED [ 80%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_port_already_in_use.py::test_get_new_command[command0] PASSED [ 80%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_port_already_in_use.py::test_get_new_command[command1] PASSED [ 80%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_port_already_in_use.py::test_get_new_command[command2] PASSED [ 80%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_port_already_in_use.py::test_get_new_command[command3] PASSED [ 80%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_port_already_in_use.py::test_get_new_command[command4] PASSED [ 80%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_port_already_in_use.py::test_get_new_command[command5] PASSED [ 80%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_prove_recursively.py::test_match[prove -lv t-Files=0, Tests=0,  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)\\nResult: NOTESTS] PASSED [ 80%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_prove_recursively.py::test_match[prove app/t-Files=0, Tests=0,  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)\\nResult: NOTESTS] PASSED [ 80%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_prove_recursively.py::test_not_match[prove -lv t-Files=0, Tests=0,  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)\\nResult: NOTESTS-False] PASSED [ 81%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_prove_recursively.py::test_not_match[prove -r t-Files=0, Tests=0,  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)\\nResult: NOTESTS-True] PASSED [ 81%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_prove_recursively.py::test_not_match[prove --recurse t-Files=0, Tests=0,  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)\\nResult: NOTESTS-True] PASSED [ 81%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_prove_recursively.py::test_get_new_command[prove -lv t-prove -r -lv t] PASSED [ 81%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_prove_recursively.py::test_get_new_command[prove t-prove -r t] PASSED [ 81%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_python_command.py::test_match PASSED                    [ 81%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_python_command.py::test_get_new_command PASSED          [ 81%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_python_execute.py::test_match[command0] PASSED          [ 81%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_python_execute.py::test_match[command1] PASSED          [ 81%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_python_execute.py::test_get_new_command[command0-python foo.py] PASSED [ 81%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_python_execute.py::test_get_new_command[command1-python bar.py] PASSED [ 81%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_python_module_error.py::test_not_match[test0] PASSED    [ 81%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_python_module_error.py::test_not_match[test1] PASSED    [ 81%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_python_module_error.py::test_match[python some_script.py-some_script.py-more_itertools-pip install more_itertools && python some_script.py] PASSED [ 81%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_python_module_error.py::test_match[./some_other_script.py-some_other_script.py-a_module-pip install a_module && ./some_other_script.py] PASSED [ 81%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_python_module_error.py::test_get_new_command[python some_script.py-some_script.py-more_itertools-pip install more_itertools && python some_script.py] PASSED [ 81%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_python_module_error.py::test_get_new_command[./some_other_script.py-some_other_script.py-a_module-pip install a_module && ./some_other_script.py] PASSED [ 81%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_quotation_marks.py::test_match[command0] PASSED         [ 81%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_quotation_marks.py::test_match[command1] PASSED         [ 81%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_quotation_marks.py::test_match[command2] PASSED         [ 81%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_quotation_marks.py::test_get_new_command[command0-git commit -m \"My Message\"] PASSED [ 82%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_quotation_marks.py::test_get_new_command[command1-git commit -am \"Mismatched Quotation Marks\"] PASSED [ 82%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_quotation_marks.py::test_get_new_command[command2-echo \"hello\"] PASSED [ 82%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_rails_migrations_pending.py::test_match[command0] PASSED [ 82%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_rails_migrations_pending.py::test_match[command1] PASSED [ 82%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_rails_migrations_pending.py::test_not_match[command0] PASSED [ 82%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_rails_migrations_pending.py::test_get_new_command[command0-rails db:migrate RAILS_ENV=development && bin/rspec] PASSED [ 82%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_rails_migrations_pending.py::test_get_new_command[command1-bin/rails db:migrate RAILS_ENV=test && bin/rspec] PASSED [ 82%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_react_native_command_unrecognized.py::test_match[command0] PASSED [ 82%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_react_native_command_unrecognized.py::test_match[command1] PASSED [ 82%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_react_native_command_unrecognized.py::test_not_match[command0] PASSED [ 82%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_react_native_command_unrecognized.py::test_not_match[command1] PASSED [ 82%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_react_native_command_unrecognized.py::test_get_new_command[command0-react-native start] PASSED [ 82%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_react_native_command_unrecognized.py::test_get_new_command[command1-react-native log-android -f] PASSED [ 82%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_remove_shell_prompt_literal.py::test_match[$ cd newdir] PASSED [ 82%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_remove_shell_prompt_literal.py::test_match[ $ cd newdir] PASSED [ 82%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_remove_shell_prompt_literal.py::test_match[$ $ cd newdir] PASSED [ 82%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_remove_shell_prompt_literal.py::test_match[ $ $ cd newdir] PASSED [ 82%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_remove_shell_prompt_literal.py::test_not_match[command0] PASSED [ 82%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_remove_shell_prompt_literal.py::test_not_match[command1] PASSED [ 83%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_remove_shell_prompt_literal.py::test_not_match[command2] PASSED [ 83%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_remove_shell_prompt_literal.py::test_not_match[command3] PASSED [ 83%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_remove_shell_prompt_literal.py::test_not_match[command4] PASSED [ 83%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_remove_shell_prompt_literal.py::test_get_new_command[$ cd newdir-cd newdir] PASSED [ 83%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_remove_shell_prompt_literal.py::test_get_new_command[$ $ cd newdir-cd newdir] PASSED [ 83%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_remove_shell_prompt_literal.py::test_get_new_command[$ python3 -m virtualenv env-python3 -m virtualenv env] PASSED [ 83%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_remove_shell_prompt_literal.py::test_get_new_command[ $ $ $ python3 -m virtualenv env-python3 -m virtualenv env] PASSED [ 83%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_remove_trailing_cedilla.py::test_match[command0] PASSED [ 83%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_remove_trailing_cedilla.py::test_match[command1] PASSED [ 83%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_remove_trailing_cedilla.py::test_get_new_command[command0-wrong] PASSED [ 83%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_remove_trailing_cedilla.py::test_get_new_command[command1-wrong with args] PASSED [ 83%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_rm_dir.py::test_match[command0] PASSED                  [ 83%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_rm_dir.py::test_match[command1] PASSED                  [ 83%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_rm_dir.py::test_match[command2] PASSED                  [ 83%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_rm_dir.py::test_match[command3] PASSED                  [ 83%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_rm_dir.py::test_not_match[command0] PASSED              [ 83%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_rm_dir.py::test_not_match[command1] PASSED              [ 83%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_rm_dir.py::test_not_match[command2] PASSED              [ 83%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_rm_dir.py::test_not_match[command3] PASSED              [ 83%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_rm_dir.py::test_get_new_command[command0-rm -rf foo] PASSED [ 84%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_rm_dir.py::test_get_new_command[command1-hdfs dfs -rm -r foo] PASSED [ 84%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_rm_root.py::test_match PASSED                           [ 84%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_rm_root.py::test_not_match[command0] PASSED             [ 84%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_rm_root.py::test_not_match[command1] PASSED             [ 84%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_rm_root.py::test_not_match[command2] PASSED             [ 84%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_rm_root.py::test_get_new_command PASSED                 [ 84%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_scm_correction.py::test_match[git log-fatal: Not a git repository (or any of the parent directories): .git-hg] PASSED [ 84%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_scm_correction.py::test_match[hg log-abort: no repository found in '/home/nvbn/exp/thefuck' (.hg not found)!-git] PASSED [ 84%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_scm_correction.py::test_not_match[git log--hg] PASSED   [ 84%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_scm_correction.py::test_not_match[git log-fatal: Not a git repository (or any of the parent directories): .git-None] PASSED [ 84%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_scm_correction.py::test_not_match[hg log-abort: no repository found in '/home/nvbn/exp/thefuck' (.hg not found)!-None] PASSED [ 84%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_scm_correction.py::test_not_match[not-scm log-abort: no repository found in '/home/nvbn/exp/thefuck' (.hg not found)!-git] PASSED [ 84%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_scm_correction.py::test_get_new_command[git log-hg-hg log] PASSED [ 84%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_scm_correction.py::test_get_new_command[hg log-git-git log] PASSED [ 84%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sed_unterminated_s.py::test_match PASSED                [ 84%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sed_unterminated_s.py::test_get_new_command PASSED      [ 84%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sl_ls.py::test_match PASSED                             [ 84%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sl_ls.py::test_get_new_command PASSED                   [ 84%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ssh_known_host.py::test_match PASSED                    [ 85%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ssh_known_host.py::test_side_effect PASSED              [ 85%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_ssh_known_host.py::test_get_new_command PASSED          [ 85%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo.py::test_match[Permission denied] PASSED           [ 85%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo.py::test_match[permission denied] PASSED           [ 85%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo.py::test_match[npm ERR! Error: EACCES, unlink] PASSED [ 85%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo.py::test_match[requested operation requires superuser privilege] PASSED [ 85%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo.py::test_match[need to be root] PASSED             [ 85%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo.py::test_match[need root] PASSED                   [ 85%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo.py::test_match[shutdown: NOT super-user] PASSED    [ 85%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo.py::test_match[Error: This command has to be run with superuser privileges (under the root user on most systems).] PASSED [ 85%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo.py::test_match[updatedb: can not open a temporary file for `/var/lib/mlocate/mlocate.db] PASSED [ 85%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo.py::test_match[must be root] PASSED                [ 85%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo.py::test_match[You don't have access to the history DB.] PASSED [ 85%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo.py::test_match[error: [Errno 13] Permission denied: '/usr/local/lib/python2.7/dist-packages/ipaddr.py'] PASSED [ 85%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo.py::test_not_match PASSED                          [ 85%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo.py::test_get_new_command[ls-sudo ls] PASSED        [ 85%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo.py::test_get_new_command[echo a > b-sudo sh -c \"echo a > b\"] PASSED [ 85%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo.py::test_get_new_command[echo \"a\" >> b-sudo sh -c \"echo \\\"a\\\" >> b\"] PASSED [ 85%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo.py::test_get_new_command[mkdir && touch a-sudo sh -c \"mkdir && touch a\"] PASSED [ 85%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo_command_from_user_path.py::test_match[sudo npm install -g react-native-cli-sudo: npm: command not found] PASSED [ 86%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo_command_from_user_path.py::test_match[sudo -u app appcfg update .-sudo: appcfg: command not found] PASSED [ 86%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo_command_from_user_path.py::test_not_match[npm --version-sudo: npm: command not found-/usr/bin/npm] PASSED [ 86%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo_command_from_user_path.py::test_not_match[sudo npm --version--/usr/bin/npm] PASSED [ 86%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo_command_from_user_path.py::test_not_match[sudo npm --version-sudo: npm: command not found-None] PASSED [ 86%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo_command_from_user_path.py::test_get_new_command[sudo npm install -g react-native-cli-sudo: npm: command not found-sudo env \"PATH=$PATH\" npm install -g react-native-cli] PASSED [ 86%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_sudo_command_from_user_path.py::test_get_new_command[sudo -u app appcfg update .-sudo: appcfg: command not found-sudo -u app env \"PATH=$PATH\" appcfg update .] PASSED [ 86%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_switch_lang.py::test_match[command0] PASSED             [ 86%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_switch_lang.py::test_match[command1] PASSED             [ 86%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_switch_lang.py::test_match[command2] PASSED             [ 86%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_switch_lang.py::test_match[command3] PASSED             [ 86%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_switch_lang.py::test_match[command4] PASSED             [ 86%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_switch_lang.py::test_not_match[command0] PASSED         [ 86%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_switch_lang.py::test_not_match[command1] PASSED         [ 86%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_switch_lang.py::test_not_match[command2] PASSED         [ 86%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_switch_lang.py::test_not_match[command3] PASSED         [ 86%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_switch_lang.py::test_not_match[command4] PASSED         [ 86%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_switch_lang.py::test_not_match[command5] PASSED         [ 86%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_switch_lang.py::test_get_new_command[command0-apt-get install vim] PASSED [ 86%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_switch_lang.py::test_get_new_command[command1-ls -la] PASSED [ 87%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_switch_lang.py::test_get_new_command[command2-apt-get install vim] PASSED [ 87%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_switch_lang.py::test_get_new_command[command3-ls -la] PASSED [ 87%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_switch_lang.py::test_get_new_command[command4-apt-get install vim] PASSED [ 87%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_switch_lang.py::test_get_new_command[command5-ls -la] PASSED [ 87%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_switch_lang.py::test_get_new_command[command6-patchk] PASSED [ 87%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_systemctl.py::test_match PASSED                         [ 87%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_systemctl.py::test_get_new_command PASSED               [ 87%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_terraform_init.py::test_match[terraform plan-Error: Initialization required. Please see the error message above.] PASSED [ 87%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_terraform_init.py::test_match[terraform plan-This module is not yet installed. Run \"terraform init\" to install all modules required by this configuration.] PASSED [ 87%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_terraform_init.py::test_match[terraform apply-Error: Initialization required. Please see the error message above.] PASSED [ 87%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_terraform_init.py::test_match[terraform apply-This module is not yet installed. Run \"terraform init\" to install all modules required by this configuration.] PASSED [ 87%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_terraform_init.py::test_not_match[terraform --version-Terraform v0.12.2] PASSED [ 87%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_terraform_init.py::test_not_match[terraform plan-No changes. Infrastructure is up-to-date.] PASSED [ 87%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_terraform_init.py::test_not_match[terraform apply-Apply complete! Resources: 0 added, 0 changed, 0 destroyed.] PASSED [ 87%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_terraform_init.py::test_get_new_command[command0-terraform init && terraform plan] PASSED [ 87%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_terraform_init.py::test_get_new_command[command1-terraform init && terraform apply] PASSED [ 87%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_terraform_no_command.py::test_match[terraform appyl-Terraform has no command named \"appyl\". Did you mean \"apply\"?] PASSED [ 87%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_terraform_no_command.py::test_match[terraform destory-Terraform has no command named \"destory\". Did you mean \"destroy\"?] PASSED [ 87%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_terraform_no_command.py::test_not_match[terraform --version-Terraform v0.12.2] PASSED [ 87%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_terraform_no_command.py::test_not_match[terraform plan-No changes. Infrastructure is up-to-date.] PASSED [ 88%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_terraform_no_command.py::test_not_match[terraform apply-Apply complete! Resources: 0 added, 0 changed, 0 destroyed.] PASSED [ 88%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_terraform_no_command.py::test_get_new_command[terraform appyl-Terraform has no command named \"appyl\". Did you mean \"apply\"?-terraform apply] PASSED [ 88%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_terraform_no_command.py::test_get_new_command[terraform destory --some-other-option-Terraform has no command named \"destory\". Did you mean \"destroy\"?-terraform destroy --some-other-option] PASSED [ 88%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_tmux.py::test_match PASSED                              [ 88%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_tmux.py::test_get_new_command PASSED                    [ 88%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_touch.py::test_match[touch /a/b/c-False] PASSED         [ 88%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_touch.py::test_match[touch /a/b/c-True] PASSED          [ 88%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_touch.py::test_not_match[command0] PASSED               [ 88%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_touch.py::test_not_match[command1] PASSED               [ 88%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_touch.py::test_get_new_command[touch /a/b/c-False] PASSED [ 88%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_touch.py::test_get_new_command[touch /a/b/c-True] PASSED [ 88%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_tsuru_login.py::test_match[command0] PASSED             [ 88%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_tsuru_login.py::test_match[command1] PASSED             [ 88%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_tsuru_login.py::test_not_match[command0] PASSED         [ 88%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_tsuru_login.py::test_not_match[command1] PASSED         [ 88%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_tsuru_login.py::test_not_match[command2] PASSED         [ 88%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_tsuru_login.py::test_get_new_command[command0-tsuru login && tsuru app-shell] PASSED [ 88%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_tsuru_login.py::test_get_new_command[command1-tsuru login && tsuru app-log -f] PASSED [ 88%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_tsuru_not_command.py::test_match[command0] PASSED       [ 89%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_tsuru_not_command.py::test_match[command1] PASSED       [ 89%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_tsuru_not_command.py::test_match[command2] PASSED       [ 89%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_tsuru_not_command.py::test_match[command3] PASSED       [ 89%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_tsuru_not_command.py::test_not_match[command0] PASSED   [ 89%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_tsuru_not_command.py::test_not_match[command1] PASSED   [ 89%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_tsuru_not_command.py::test_not_match[command2] PASSED   [ 89%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_tsuru_not_command.py::test_not_match[command3] PASSED   [ 89%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_tsuru_not_command.py::test_not_match[command4] PASSED   [ 89%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_tsuru_not_command.py::test_get_new_command[command0-new_commands0] PASSED [ 89%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_tsuru_not_command.py::test_get_new_command[command1-new_commands1] PASSED [ 89%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_tsuru_not_command.py::test_get_new_command[command2-new_commands2] PASSED [ 89%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_tsuru_not_command.py::test_get_new_command[command3-new_commands3] PASSED [ 89%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_unknown_command.py::test_match[command0] PASSED         [ 89%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_unknown_command.py::test_match[command1] PASSED         [ 89%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_unknown_command.py::test_match[command2] PASSED         [ 89%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_unknown_command.py::test_not_match[command0] PASSED     [ 89%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_unknown_command.py::test_not_match[command1] PASSED     [ 89%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_unknown_command.py::test_not_match[command2] PASSED     [ 89%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_unknown_command.py::test_not_match[command3] PASSED     [ 89%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_unknown_command.py::test_get_new_command[command0-new_command0] PASSED [ 90%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_unknown_command.py::test_get_new_command[command1-new_command1] PASSED [ 90%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_unknown_command.py::test_get_new_command[command2-new_command2] PASSED [ 90%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_unknown_command.py::test_get_new_command[command3-new_command3] PASSED [ 90%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_unsudo.py::test_match[you cannot perform this operation as root] PASSED [ 90%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_unsudo.py::test_not_match PASSED                        [ 90%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_unsudo.py::test_get_new_command[sudo ls-ls] PASSED      [ 90%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_unsudo.py::test_get_new_command[sudo pacaur -S helloworld-pacaur -S helloworld] PASSED [ 90%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_vagrant_up.py::test_match[command0] PASSED              [ 90%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_vagrant_up.py::test_match[command1] PASSED              [ 90%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_vagrant_up.py::test_match[command2] PASSED              [ 90%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_vagrant_up.py::test_match[command3] PASSED              [ 90%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_vagrant_up.py::test_not_match[command0] PASSED          [ 90%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_vagrant_up.py::test_not_match[command1] PASSED          [ 90%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_vagrant_up.py::test_not_match[command2] PASSED          [ 90%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_vagrant_up.py::test_not_match[command3] PASSED          [ 90%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_vagrant_up.py::test_get_new_command[command0-vagrant up && vagrant ssh] PASSED [ 90%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_vagrant_up.py::test_get_new_command[command1-new_command1] PASSED [ 90%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_vagrant_up.py::test_get_new_command[command2-vagrant up && vagrant rdp] PASSED [ 90%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_vagrant_up.py::test_get_new_command[command3-new_command3] PASSED [ 91%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_whois.py::test_match[command0] PASSED                   [ 91%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_whois.py::test_match[command1] PASSED                   [ 91%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_whois.py::test_match[command2] PASSED                   [ 91%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_whois.py::test_not_match PASSED                         [ 91%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_whois.py::test_get_new_command[command0-whois en.wikipedia.org] PASSED [ 91%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_whois.py::test_get_new_command[command1-whois en.wikipedia.org] PASSED [ 91%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_whois.py::test_get_new_command[command2-new_command2] PASSED [ 91%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_workon_doesnt_exists.py::test_match[workon tehfuck] PASSED [ 91%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_workon_doesnt_exists.py::test_match[workon code-view] PASSED [ 91%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_workon_doesnt_exists.py::test_match[workon new-env] PASSED [ 91%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_workon_doesnt_exists.py::test_not_match[workon thefuck] PASSED [ 91%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_workon_doesnt_exists.py::test_not_match[workon code_view] PASSED [ 91%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_workon_doesnt_exists.py::test_not_match[work on tehfuck] PASSED [ 91%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_workon_doesnt_exists.py::test_get_new_command[workon tehfuck-workon thefuck] PASSED [ 91%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_workon_doesnt_exists.py::test_get_new_command[workon code-view-workon code_view] PASSED [ 91%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_workon_doesnt_exists.py::test_get_new_command[workon zzzz-mkvirtualenv zzzz] PASSED [ 91%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_wrong_hyphen_before_subcommand.py::test_match[git-log] PASSED [ 91%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_wrong_hyphen_before_subcommand.py::test_match[apt-install python] PASSED [ 91%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_wrong_hyphen_before_subcommand.py::test_not_match[ls -la] PASSED [ 91%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_wrong_hyphen_before_subcommand.py::test_not_match[git2-make] PASSED [ 92%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_wrong_hyphen_before_subcommand.py::test_not_match[apt-get install python] PASSED [ 92%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_wrong_hyphen_before_subcommand.py::test_get_new_command[git-log-git log] PASSED [ 92%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_wrong_hyphen_before_subcommand.py::test_get_new_command[apt-install python-apt install python] PASSED [ 92%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yarn_alias.py::test_match[command0] PASSED              [ 92%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yarn_alias.py::test_match[command1] PASSED              [ 92%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yarn_alias.py::test_match[command2] PASSED              [ 92%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yarn_alias.py::test_get_new_command[command0-yarn remove] PASSED [ 92%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yarn_alias.py::test_get_new_command[command1-yarn etl] PASSED [ 92%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yarn_alias.py::test_get_new_command[command2-yarn list] PASSED [ 92%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yarn_command_not_found.py::test_match[command0] PASSED  [ 92%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yarn_command_not_found.py::test_not_match[command0] PASSED [ 92%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yarn_command_not_found.py::test_not_match[command1] PASSED [ 92%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yarn_command_not_found.py::test_get_new_command[command0-yarn why webpack] PASSED [ 92%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yarn_command_not_found.py::test_get_new_command[command1-yarn add lodash] PASSED [ 92%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yarn_command_replaced.py::test_match[command0] PASSED   [ 92%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yarn_command_replaced.py::test_match[command1] PASSED   [ 92%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yarn_command_replaced.py::test_match[command2] PASSED   [ 92%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yarn_command_replaced.py::test_not_match[command0] PASSED [ 92%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yarn_command_replaced.py::test_get_new_command[command0-yarn add redux] PASSED [ 93%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yarn_command_replaced.py::test_get_new_command[command1-yarn add moment] PASSED [ 93%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yarn_command_replaced.py::test_get_new_command[command2-yarn add lodash] PASSED [ 93%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yarn_help.py::test_match[command0] PASSED               [ 93%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yarn_help.py::test_get_new_command[command0-https://yarnpkg.com/en/docs/cli/clean] PASSED [ 93%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yum_invalid_operation.py::test_match[saerch] PASSED     [ 93%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yum_invalid_operation.py::test_match[uninstall] PASSED  [ 93%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yum_invalid_operation.py::test_not_match[vim-] PASSED   [ 93%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yum_invalid_operation.py::test_not_match[yum-Loaded plugins: extras_suggestions, langpacks, priorities, update-motd\\nUsage: yum [options] COMMAND\\n\\nList of Commands:\\n\\ncheck          Check for problems in the rpmdb\\ncheck-update   Check for available package updates\\nclean          Remove cached data\\ndeplist        List a package's dependencies\\ndistribution-synchronization Synchronize installed packages to the latest available versions\\ndowngrade      downgrade a package\\nerase          Remove a package or packages from your system\\nfs             Acts on the filesystem data of the host, mainly for removing docs/lanuages for minimal hosts.\\nfssnapshot     Creates filesystem snapshots, or lists/deletes current snapshots.\\ngroups         Display, or use, the groups information\\nhelp           Display a helpful usage message\\nhistory        Display, or use, the transaction history\\ninfo           Display details about a package or group of packages\\ninstall        Install a package or packages on your system\\nlangavailable  Check available languages\\nlanginfo       List languages information\\nlanginstall    Install appropriate language packs for a language\\nlanglist       List installed languages\\nlangremove     Remove installed language packs for a language\\nlist           List a package or groups of packages\\nload-transaction load a saved transaction from filename\\nmakecache      Generate the metadata cache\\nprovides       Find what package provides the given value\\nreinstall      reinstall a package\\nrepo-pkgs      Treat a repo. as a group of packages, so we can install/remove all of them\\nrepolist       Display the configured software repositories\\nsearch         Search package details for the given string\\nshell          Run an interactive yum shell\\nswap           Simple way to swap packages, instead of using shell\\nupdate         Update a package or packages on your system\\nupdate-minimal Works like upgrade, but goes to the 'newest' package match which fixes a problem that affects your system\\nupdateinfo     Acts on repository update information\\nupgrade        Update packages taking obsoletes into account\\nversion        Display a version for the machine and/or available repos.\\n\\n\\nOptions:\\n  -h, --help            show this help message and exit\\n  -t, --tolerant        be tolerant of errors\\n  -C, --cacheonly       run entirely from system cache, don't update cache\\n  -c [config file], --config=[config file]\\n                        config file location\\n  -R [minutes], --randomwait=[minutes]\\n                        maximum command wait time\\n  -d [debug level], --debuglevel=[debug level]\\n                        debugging output level\\n  --showduplicates      show duplicates, in repos, in list/search commands\\n  -e [error level], --errorlevel=[error level]\\n                        error output level\\n  --rpmverbosity=[debug level name]\\n                        debugging output level for rpm\\n  -q, --quiet           quiet operation\\n  -v, --verbose         verbose operation\\n  -y, --assumeyes       answer yes for all questions\\n  --assumeno            answer no for all questions\\n  --version             show Yum version and exit\\n  --installroot=[path]  set install root\\n  --enablerepo=[repo]   enable one or more repositories (wildcards allowed)\\n  --disablerepo=[repo]  disable one or more repositories (wildcards allowed)\\n  -x [package], --exclude=[package]\\n                        exclude package(s) by name or glob\\n  --disableexcludes=[repo]\\n                        disable exclude from main, for a repo or for\\n                        everything\\n  --disableincludes=[repo]\\n                        disable includepkgs for a repo or for everything\\n  --obsoletes           enable obsoletes processing during updates\\n  --noplugins           disable Yum plugins\\n  --nogpgcheck          disable gpg signature checking\\n  --disableplugin=[plugin]\\n                        disable plugins by name\\n  --enableplugin=[plugin]\\n                        enable plugins by name\\n  --skip-broken         skip packages with depsolving problems\\n  --color=COLOR         control whether color is used\\n  --releasever=RELEASEVER\\n                        set value of $releasever in yum config and repo files\\n  --downloadonly        don't update, just download\\n  --downloaddir=DLDIR   specifies an alternate directory to store packages\\n  --setopt=SETOPTS      set arbitrary config and repo options\\n  --bugfix              Include bugfix relevant packages, in updates\\n  --security            Include security relevant packages, in updates\\n  --advisory=ADVS, --advisories=ADVS\\n                        Include packages needed to fix the given advisory, in\\n                        updates\\n  --bzs=BZS             Include packages needed to fix the given BZ, in\\n                        updates\\n  --cves=CVES           Include packages needed to fix the given CVE, in\\n                        updates\\n  --sec-severity=SEVS, --secseverity=SEVS\\n                        Include security relevant packages matching the\\n                        severity, in updates\\n\\n  Plugin Options:\\n    --samearch-priorities\\n                        Priority-exclude packages based on name + arch\\n] PASSED [ 93%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yum_invalid_operation.py::test_not_match[yum help-Loaded plugins: extras_suggestions, langpacks, priorities, update-motd\\nUsage: yum [options] COMMAND\\n\\nList of Commands:\\n\\ncheck          Check for problems in the rpmdb\\ncheck-update   Check for available package updates\\nclean          Remove cached data\\ndeplist        List a package's dependencies\\ndistribution-synchronization Synchronize installed packages to the latest available versions\\ndowngrade      downgrade a package\\nerase          Remove a package or packages from your system\\nfs             Acts on the filesystem data of the host, mainly for removing docs/lanuages for minimal hosts.\\nfssnapshot     Creates filesystem snapshots, or lists/deletes current snapshots.\\ngroups         Display, or use, the groups information\\nhelp           Display a helpful usage message\\nhistory        Display, or use, the transaction history\\ninfo           Display details about a package or group of packages\\ninstall        Install a package or packages on your system\\nlangavailable  Check available languages\\nlanginfo       List languages information\\nlanginstall    Install appropriate language packs for a language\\nlanglist       List installed languages\\nlangremove     Remove installed language packs for a language\\nlist           List a package or groups of packages\\nload-transaction load a saved transaction from filename\\nmakecache      Generate the metadata cache\\nprovides       Find what package provides the given value\\nreinstall      reinstall a package\\nrepo-pkgs      Treat a repo. as a group of packages, so we can install/remove all of them\\nrepolist       Display the configured software repositories\\nsearch         Search package details for the given string\\nshell          Run an interactive yum shell\\nswap           Simple way to swap packages, instead of using shell\\nupdate         Update a package or packages on your system\\nupdate-minimal Works like upgrade, but goes to the 'newest' package match which fixes a problem that affects your system\\nupdateinfo     Acts on repository update information\\nupgrade        Update packages taking obsoletes into account\\nversion        Display a version for the machine and/or available repos.\\n\\n\\nOptions:\\n  -h, --help            show this help message and exit\\n  -t, --tolerant        be tolerant of errors\\n  -C, --cacheonly       run entirely from system cache, don't update cache\\n  -c [config file], --config=[config file]\\n                        config file location\\n  -R [minutes], --randomwait=[minutes]\\n                        maximum command wait time\\n  -d [debug level], --debuglevel=[debug level]\\n                        debugging output level\\n  --showduplicates      show duplicates, in repos, in list/search commands\\n  -e [error level], --errorlevel=[error level]\\n                        error output level\\n  --rpmverbosity=[debug level name]\\n                        debugging output level for rpm\\n  -q, --quiet           quiet operation\\n  -v, --verbose         verbose operation\\n  -y, --assumeyes       answer yes for all questions\\n  --assumeno            answer no for all questions\\n  --version             show Yum version and exit\\n  --installroot=[path]  set install root\\n  --enablerepo=[repo]   enable one or more repositories (wildcards allowed)\\n  --disablerepo=[repo]  disable one or more repositories (wildcards allowed)\\n  -x [package], --exclude=[package]\\n                        exclude package(s) by name or glob\\n  --disableexcludes=[repo]\\n                        disable exclude from main, for a repo or for\\n                        everything\\n  --disableincludes=[repo]\\n                        disable includepkgs for a repo or for everything\\n  --obsoletes           enable obsoletes processing during updates\\n  --noplugins           disable Yum plugins\\n  --nogpgcheck          disable gpg signature checking\\n  --disableplugin=[plugin]\\n                        disable plugins by name\\n  --enableplugin=[plugin]\\n                        enable plugins by name\\n  --skip-broken         skip packages with depsolving problems\\n  --color=COLOR         control whether color is used\\n  --releasever=RELEASEVER\\n                        set value of $releasever in yum config and repo files\\n  --downloadonly        don't update, just download\\n  --downloaddir=DLDIR   specifies an alternate directory to store packages\\n  --setopt=SETOPTS      set arbitrary config and repo options\\n  --bugfix              Include bugfix relevant packages, in updates\\n  --security            Include security relevant packages, in updates\\n  --advisory=ADVS, --advisories=ADVS\\n                        Include packages needed to fix the given advisory, in\\n                        updates\\n  --bzs=BZS             Include packages needed to fix the given BZ, in\\n                        updates\\n  --cves=CVES           Include packages needed to fix the given CVE, in\\n                        updates\\n  --sec-severity=SEVS, --secseverity=SEVS\\n                        Include security relevant packages matching the\\n                        severity, in updates\\n\\n  Plugin Options:\\n    --samearch-priorities\\n                        Priority-exclude packages based on name + arch\\n] PASSED [ 93%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yum_invalid_operation.py::test_not_match[yum search asdf-Warning: No matches found for: asdf\\nNo matches found\\n] PASSED [ 93%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yum_invalid_operation.py::test_not_match[yum search vim-================================================== N/S matched: vim ===================================================\\nprotobuf-vim.x86_64 : Vim syntax highlighting for Google Protocol Buffers descriptions\\nvim-X11.x86_64 : The VIM version of the vi editor for the X Window System - GVim\\nvim-common.x86_64 : The common files needed by any version of the VIM editor\\nvim-enhanced.x86_64 : A version of the VIM editor which includes recent enhancements\\nvim-filesystem.x86_64 : VIM filesystem layout\\nvim-filesystem.noarch : VIM filesystem layout\\nvim-minimal.x86_64 : A minimal version of the VIM editor\\n\\n  Name and summary matches only, use \"search all\" for everything.\\n] PASSED [ 93%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yum_invalid_operation.py::test_get_operations PASSED    [ 93%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yum_invalid_operation.py::test_get_new_command[yum uninstall-Loaded plugins: extras_suggestions, langpacks, priorities, update-motd\\nNo such command: uninstall. Please use /usr/bin/yum --help\\n-yum remove] PASSED [ 93%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yum_invalid_operation.py::test_get_new_command[yum saerch asdf-Loaded plugins: extras_suggestions, langpacks, priorities, update-motd\\nNo such command: saerch. Please use /usr/bin/yum --help\\n-yum search asdf] PASSED [ 93%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/rules/test_yum_invalid_operation.py::test_get_new_command[yum hlep-Loaded plugins: extras_suggestions, langpacks, priorities, update-motd\\nNo such command: hlep. Please use /usr/bin/yum --help\\n-yum help] PASSED [ 93%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_bash.py::TestBash::test_from_shell[pwd-pwd] PASSED     [ 93%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_bash.py::TestBash::test_from_shell[fuck-eval $(thefuck $(fc -ln -1))] PASSED [ 93%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_bash.py::TestBash::test_from_shell[awk-awk] PASSED     [ 93%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_bash.py::TestBash::test_from_shell[ll-ls -alF] PASSED  [ 93%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_bash.py::TestBash::test_to_shell PASSED                [ 94%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_bash.py::TestBash::test_and_ PASSED                    [ 94%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_bash.py::TestBash::test_or_ PASSED                     [ 94%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_bash.py::TestBash::test_get_aliases PASSED             [ 94%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_bash.py::TestBash::test_app_alias PASSED               [ 94%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_bash.py::TestBash::test_app_alias_variables_correctly_set PASSED [ 94%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_bash.py::TestBash::test_get_history PASSED             [ 94%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_bash.py::TestBash::test_split_command PASSED           [ 94%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_bash.py::TestBash::test_how_to_configure PASSED        [ 94%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_bash.py::TestBash::test_how_to_configure_when_config_not_found PASSED [ 94%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_bash.py::TestBash::test_info PASSED                    [ 94%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_bash.py::TestBash::test_get_version_error PASSED       [ 94%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_get_overridden_aliases[TF_OVERRIDDEN_ALIASES-cut,git,sed] PASSED [ 94%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_get_overridden_aliases[THEFUCK_OVERRIDDEN_ALIASES-cut,git,sed] PASSED [ 94%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_get_overridden_aliases[THEFUCK_OVERRIDDEN_ALIASES-cut, git, sed] PASSED [ 94%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_get_overridden_aliases[THEFUCK_OVERRIDDEN_ALIASES- cut,\\tgit,sed\\n] PASSED [ 94%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_get_overridden_aliases[THEFUCK_OVERRIDDEN_ALIASES-\\ncut,\\n\\ngit,\\tsed\\r] PASSED [ 94%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_from_shell[cd-cd] PASSED       [ 94%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_from_shell[pwd-pwd] PASSED     [ 94%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_from_shell[fuck-fish -ic \"fuck\"] PASSED [ 95%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_from_shell[find-find] PASSED   [ 95%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_from_shell[funced-fish -ic \"funced\"] PASSED [ 95%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_from_shell[grep-grep] PASSED   [ 95%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_from_shell[awk-awk] PASSED     [ 95%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_from_shell[math \"2 + 2\"-fish -ic \"math \\\"2 + 2\\\"\"] PASSED [ 95%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_from_shell[man-man] PASSED     [ 95%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_from_shell[open-open] PASSED   [ 95%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_from_shell[vim-vim] PASSED     [ 95%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_from_shell[ll-fish -ic \"ll\"] PASSED [ 95%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_from_shell[ls-ls] PASSED       [ 95%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_from_shell[g-git] PASSED       [ 95%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_to_shell PASSED                [ 95%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_and_ PASSED                    [ 95%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_or_ PASSED                     [ 95%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_get_aliases PASSED             [ 95%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_app_alias PASSED               [ 95%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_app_alias_alter_history PASSED [ 95%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_get_history PASSED             [ 95%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_put_to_history[ls-- cmd: ls\\n   when: 1430707243\\n] PASSED [ 95%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_put_to_history[echo caf\\xe9-- cmd: echo caf\\xc3\\xa9\\n   when: 1430707243\\n] PASSED [ 96%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_how_to_configure PASSED        [ 96%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_how_to_configure_when_config_not_found PASSED [ 96%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_get_version PASSED             [ 96%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_get_version_error[side_effect0-IndexError] PASSED [ 96%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_fish.py::TestFish::test_get_version_error[side_effect1-OSError] PASSED [ 96%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_generic.py::TestGeneric::test_from_shell PASSED        [ 96%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_generic.py::TestGeneric::test_to_shell PASSED          [ 96%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_generic.py::TestGeneric::test_and_ PASSED              [ 96%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_generic.py::TestGeneric::test_or_ PASSED               [ 96%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_generic.py::TestGeneric::test_get_aliases PASSED       [ 96%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_generic.py::TestGeneric::test_app_alias PASSED         [ 96%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_generic.py::TestGeneric::test_get_history PASSED       [ 96%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_generic.py::TestGeneric::test_split_command PASSED     [ 96%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_generic.py::TestGeneric::test_how_to_configure PASSED  [ 96%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_generic.py::TestGeneric::test_info[side_effect0-Generic Shell 3.5.9-False] PASSED [ 96%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_generic.py::TestGeneric::test_info[side_effect1-Generic Shell-True] PASSED [ 96%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_powershell.py::TestPowershell::test_and_ PASSED        [ 96%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_powershell.py::TestPowershell::test_app_alias PASSED   [ 96%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_powershell.py::TestPowershell::test_how_to_configure PASSED [ 97%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_powershell.py::TestPowershell::test_info[side_effect0-PowerShell 5.1.17763.316-call_args0] PASSED [ 97%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_powershell.py::TestPowershell::test_info[side_effect1-PowerShell 6.1.2-call_args1] PASSED [ 97%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_powershell.py::TestPowershell::test_get_version_error PASSED [ 97%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_tcsh.py::TestTcsh::test_from_shell[pwd-pwd] PASSED     [ 97%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_tcsh.py::TestTcsh::test_from_shell[fuck-eval $(thefuck $(fc -ln -1))] PASSED [ 97%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_tcsh.py::TestTcsh::test_from_shell[awk-awk] PASSED     [ 97%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_tcsh.py::TestTcsh::test_from_shell[ll-ls -alF] PASSED  [ 97%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_tcsh.py::TestTcsh::test_to_shell PASSED                [ 97%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_tcsh.py::TestTcsh::test_and_ PASSED                    [ 97%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_tcsh.py::TestTcsh::test_or_ PASSED                     [ 97%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_tcsh.py::TestTcsh::test_get_aliases PASSED             [ 97%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_tcsh.py::TestTcsh::test_app_alias PASSED               [ 97%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_tcsh.py::TestTcsh::test_get_history PASSED             [ 97%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_tcsh.py::TestTcsh::test_how_to_configure PASSED        [ 97%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_tcsh.py::TestTcsh::test_how_to_configure_when_config_not_found PASSED [ 97%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_tcsh.py::TestTcsh::test_info PASSED                    [ 97%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_tcsh.py::TestTcsh::test_get_version_error[side_effect0-IndexError] PASSED [ 97%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_tcsh.py::TestTcsh::test_get_version_error[OSError-OSError] PASSED [ 97%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_zsh.py::TestZsh::test_from_shell[fuck-eval $(thefuck $(fc -ln -1 | tail -n 1))] PASSED [ 97%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_zsh.py::TestZsh::test_from_shell[pwd-pwd] PASSED       [ 98%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_zsh.py::TestZsh::test_from_shell[ll-ls -alF] PASSED    [ 98%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_zsh.py::TestZsh::test_to_shell PASSED                  [ 98%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_zsh.py::TestZsh::test_and_ PASSED                      [ 98%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_zsh.py::TestZsh::test_or_ PASSED                       [ 98%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_zsh.py::TestZsh::test_get_aliases PASSED               [ 98%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_zsh.py::TestZsh::test_app_alias PASSED                 [ 98%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_zsh.py::TestZsh::test_app_alias_variables_correctly_set PASSED [ 98%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_zsh.py::TestZsh::test_get_history PASSED               [ 98%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_zsh.py::TestZsh::test_how_to_configure PASSED          [ 98%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_zsh.py::TestZsh::test_how_to_configure_when_config_not_found PASSED [ 98%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_zsh.py::TestZsh::test_info PASSED                      [ 98%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/shells/test_zsh.py::TestZsh::test_get_version_error PASSED         [ 98%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_git.py::test_git_support[git co-git checkout-19:22:36.299340 git.c:282   trace: alias expansion: co => 'checkout'] PASSED [ 98%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_git.py::test_git_support[git com file-git commit --verbose file-19:23:25.470911 git.c:282   trace: alias expansion: com => 'commit' '--verbose'] PASSED [ 98%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_git.py::test_git_support[git com -m \"Initial commit\"-git commit -m \"Initial commit\"-19:22:36.299340 git.c:282   trace: alias expansion: com => 'commit'] PASSED [ 98%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_git.py::test_git_support[git br -d some_branch-git branch -d some_branch-19:22:36.299340 git.c:282   trace: alias expansion: br => 'branch'] PASSED [ 98%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_git.py::test_git_support_match[git pull-True] PASSED [ 98%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_git.py::test_git_support_match[hub pull-True] PASSED [ 98%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_git.py::test_git_support_match[git push --set-upstream origin foo-True] PASSED [ 99%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_git.py::test_git_support_match[hub push --set-upstream origin foo-True] PASSED [ 99%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_git.py::test_git_support_match[ls-False] PASSED      [ 99%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_git.py::test_git_support_match[cat git-False] PASSED [ 99%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_git.py::test_git_support_match[cat hub-False] PASSED [ 99%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_git.py::test_git_support_match[None-git pull-True] PASSED [ 99%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_git.py::test_git_support_match[None-hub pull-True] PASSED [ 99%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_git.py::test_git_support_match[None-git push --set-upstream origin foo-True] PASSED [ 99%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_git.py::test_git_support_match[None-hub push --set-upstream origin foo-True] PASSED [ 99%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_git.py::test_git_support_match[None-ls-False] PASSED [ 99%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_git.py::test_git_support_match[None-cat git-False] PASSED [ 99%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_git.py::test_git_support_match[None-cat hub-False] PASSED [ 99%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_npm.py::test_get_scripts PASSED                      [ 99%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_sudo.py::test_sudo_support[ls -lah-sudo ls-ls-sudo ls -lah] PASSED [ 99%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_sudo.py::test_sudo_support[ls -lah-ls-ls-ls -lah] PASSED [ 99%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_sudo.py::test_sudo_support[return_value2-sudo ls-ls-result2] PASSED [ 99%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_sudo.py::test_sudo_support[True-sudo ls-ls-True] PASSED [ 99%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_sudo.py::test_sudo_support[True-ls-ls-True] PASSED   [ 99%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_sudo.py::test_sudo_support[False-sudo ls-ls-False] PASSED [ 99%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/specific/test_sudo.py::test_sudo_support[False-ls-ls-False] PASSED [100%]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | \n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | =============================== warnings summary ===============================\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_conf.py::test_get_user_dir_path[True-~/.config-~/.thefuck]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/nvbn-thefuck/thefuck/conf.py:53: UserWarning: Config path /home/runneradmin/.thefuck is deprecated. Please move to /home/runneradmin/.config/thefuck\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |     legacy_user_dir, user_dir))\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | \n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | tests/test_conf.py::test_get_user_dir_path[True-/user/test/config/-~/.thefuck]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/nvbn-thefuck/thefuck/conf.py:53: UserWarning: Config path /home/runneradmin/.thefuck is deprecated. Please move to /user/test/config/thefuck\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   |     legacy_user_dir, user_dir))\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | \n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | -- Docs: https://docs.pytest.org/en/latest/warnings.html\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | - generated xml file: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/nvbn-thefuck/report.xml -\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | ============= 1887 passed, 62 skipped, 2 warnings in 37.33 seconds =============\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \u2705  Success - Main Run tests\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test] \u2b50 Run Post Cache dependencies\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v2/dist/save/index.js] user= workdir=\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Checking zstd --version\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Reserving Cache\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:41157/_apis/artifactcache/caches\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Cache ID: 1\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::omitBrokenSymbolicLinks 'true'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Search path '/opt/hostedtoolcache/Python/2.7.18/x64/bin'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Search path '/opt/hostedtoolcache/Python/2.7.18/x64/lib'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Search path '/opt/hostedtoolcache/Python/2.7.18/x64/scripts'\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/2to3\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/chardetect\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/coverage\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/coverage-2.7\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/coverage2\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/coveralls\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/cpuinfo\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/easy_install\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/easy_install-2.7\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/flake8\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/fuck\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/idle\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/pip\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/pip2\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/pip2.7\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/pkginfo\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/py.test\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/py.test-benchmark\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/pycodestyle\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/pydoc\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/pyflakes\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/pygmentize\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/pytest\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/pytest-benchmark\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/python\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/python-config\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/python2\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/python2-config\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/python2.7\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/python2.7-config\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/python27\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2html.py\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2html.pyc\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2html4.py\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2html4.pyc\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2html5.py\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2html5.pyc\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2latex.py\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2latex.pyc\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2man.py\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2man.pyc\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2odt.py\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2odt.pyc\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2odt_prepstyles.py\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2odt_prepstyles.pyc\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2pseudoxml.py\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2pseudoxml.pyc\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2s5.py\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2s5.pyc\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2xetex.py\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2xetex.pyc\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2xml.py\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2xml.pyc\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rstpep2html.py\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rstpep2html.pyc\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/smtpd.py\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/thefuck\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/tqdm\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/twine\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/wheel\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/lib/libpython2.7.so\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/lib/libpython2.7.so.1.0\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/lib/pkgconfig\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Matched: ../../../opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Cache Paths:\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::[\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/2to3\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/chardetect\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/coverage\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/coverage-2.7\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/coverage2\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/coveralls\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/cpuinfo\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/easy_install\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/easy_install-2.7\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/flake8\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/fuck\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/idle\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/pip\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/pip2\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/pip2.7\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/pkginfo\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/py.test\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/py.test-benchmark\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/pycodestyle\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/pydoc\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/pyflakes\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/pygmentize\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/pytest\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/pytest-benchmark\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/python\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/python-config\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/python2\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/python2-config\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/python2.7\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/python2.7-config\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/python27\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2html.py\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2html.pyc\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2html4.py\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2html4.pyc\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2html5.py\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2html5.pyc\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2latex.py\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2latex.pyc\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2man.py\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2man.pyc\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2odt.py\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2odt.pyc\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2odt_prepstyles.py\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2odt_prepstyles.pyc\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2pseudoxml.py\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2pseudoxml.pyc\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2s5.py\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2s5.pyc\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2xetex.py\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2xetex.pyc\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2xml.py\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rst2xml.pyc\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rstpep2html.py\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/rstpep2html.pyc\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/smtpd.py\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/thefuck\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/tqdm\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/twine\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/bin/wheel\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/lib/libpython2.7.so\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/lib/libpython2.7.so.1.0\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/lib/pkgconfig\",\"../../../opt/hostedtoolcache/Python/2.7.18/x64/lib/python2.7\"]\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Archive Path: /tmp/73a5536b-21ff-4e00-83e0-a804e031c56b/cache.tzst\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | [command]/usr/bin/tar --posix --use-compress-program zstd -T0 -cf cache.tzst -P -C /tmp/558156d8-17ed-11ee-8a50-bb14de238602/nvbn-thefuck --files-from manifest.txt\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::File Size: 63450405\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Saving Cache (ID: 1)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Upload cache\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:41157/_apis/artifactcache/caches/1\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Upload concurrency: 4\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Upload chunk size: 33554432\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Awaiting all uploads\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Uploading chunk of size 33554432 bytes at offset 0 with content range: bytes 0-33554431/*\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Uploading chunk of size 29895973 bytes at offset 33554432 with content range: bytes 33554432-63450404/*\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Commiting cache\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | Cache Size: ~61 MB (63450405 B)\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:41157/_apis/artifactcache/caches/1\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::commitCache - Attempt 1 of 2 failed with error: Cache service responded with 500\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udcac  ::debug::commitCache - Error is not retryable\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   | [warning]commitCache failed: Cache service responded with 500\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \u2705  Success - Post Cache dependencies\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test] \u2b50 Run Post Set up Python\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/cache-save/index.js] user= workdir=\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test]   \u2705  Success - Post Set up Python\n[7ccf57c6-826e-4b8b-b8f7-d8903ff17e53/test] \ud83c\udfc1  Job succeeded\n",
        "stderr": "time=\"2023-07-01T12:25:11+02:00\" level=error msg=\"POST /_apis/artifactcache/caches/1: broken file: 63450405 != 0\" module=artifactcache\n",
        "workflow": {
            "path": "/tmp/558156d8-17ed-11ee-8a50-bb14de238602/nvbn-thefuck/.github/workflows/test-crawler.yml",
            "type": "pytest"
        },
        "workflow_name": "7ccf57c6-826e-4b8b-b8f7-d8903ff17e53",
        "build_tool": "pytest",
        "elapsed_time": 324.5892987251282
    }
}