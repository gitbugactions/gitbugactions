{
    "repository": "mesonbuild/meson-python",
    "stars": 71,
    "language": "python",
    "size": 652,
    "clone_url": "https://github.com/mesonbuild/meson-python.git",
    "timestamp": "2023-07-01T16:46:18.912091Z",
    "clone_success": true,
    "number_of_actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "unknown",
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": true,
        "tests": [
            {
                "classname": "tests.test_consistency",
                "name": "test_pyproject_dependencies",
                "time": 0.029,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_editable",
                "name": "test_walk",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_editable",
                "name": "test_nodes_tree",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_editable",
                "name": "test_collect",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_editable",
                "name": "test_mesonpy_meta_finder",
                "time": 4.619,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_editable",
                "name": "test_mesonpy_traversable",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_editable",
                "name": "test_resources",
                "time": 1.544,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_editable",
                "name": "test_importlib_resources",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "importlib.resources not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_editable",
                "name": "test_editable_install",
                "time": 6.582,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_editable",
                "name": "test_editble_reentrant",
                "time": 7.9,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_examples",
                "name": "test_spam",
                "time": 5.808,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_metadata",
                "name": "test_no_pep621",
                "time": 1.979,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_metadata",
                "name": "test_pep621",
                "time": 1.663,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_metadata",
                "name": "test_dynamic_version",
                "time": 1.664,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_output",
                "name": "test_colors[False-env0-False]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_output",
                "name": "test_colors[True-env1-True]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_output",
                "name": "test_colors[False-env2-False]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_output",
                "name": "test_colors[True-env3-False]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_output",
                "name": "test_colors[False-env4-True]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_output",
                "name": "test_colors[True-env5-True]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_output",
                "name": "test_colors_conflict",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pep517",
                "name": "test_get_requires_for_build_wheel[noninja-patchelf-pure]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pep517",
                "name": "test_get_requires_for_build_wheel[noninja-patchelf-library]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pep517",
                "name": "test_get_requires_for_build_wheel[noninja-nopatchelf-pure]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pep517",
                "name": "test_get_requires_for_build_wheel[noninja-nopatchelf-library]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pep517",
                "name": "test_get_requires_for_build_wheel[oldninja-patchelf-pure]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pep517",
                "name": "test_get_requires_for_build_wheel[oldninja-patchelf-library]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pep517",
                "name": "test_get_requires_for_build_wheel[oldninja-nopatchelf-pure]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pep517",
                "name": "test_get_requires_for_build_wheel[oldninja-nopatchelf-library]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pep517",
                "name": "test_get_requires_for_build_wheel[newninja-patchelf-pure]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pep517",
                "name": "test_get_requires_for_build_wheel[newninja-patchelf-library]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pep517",
                "name": "test_get_requires_for_build_wheel[newninja-nopatchelf-pure]",
                "time": 1.111,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pep517",
                "name": "test_get_requires_for_build_wheel[newninja-nopatchelf-library]",
                "time": 1.734,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pep517",
                "name": "test_invalid_config_settings",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pep517",
                "name": "test_invalid_config_settings_suggest",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pep517",
                "name": "test_validate_config_settings_invalid",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pep517",
                "name": "test_validate_config_settings_repeated",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pep517",
                "name": "test_validate_config_settings_str",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pep517",
                "name": "test_validate_config_settings_list",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pep517",
                "name": "test_validate_config_settings_tuple",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pep518",
                "name": "test_pep518[sdist_to_wheel-purelib-and-platlib]",
                "time": 26.729,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pep518",
                "name": "test_pep518[wheel_directly-purelib-and-platlib]",
                "time": 10.826,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_project",
                "name": "test_name[library]",
                "time": 1.528,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_project",
                "name": "test_name[library-pep621]",
                "time": 1.704,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_project",
                "name": "test_version[library]",
                "time": 1.735,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_project",
                "name": "test_version[library-pep621]",
                "time": 1.594,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_project",
                "name": "test_unsupported_dynamic",
                "time": 1.189,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_project",
                "name": "test_unsupported_python_version",
                "time": 1.078,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_project",
                "name": "test_user_args",
                "time": 4.342,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_project",
                "name": "test_unknown_user_args[top-level]",
                "time": 0.519,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_project",
                "name": "test_unknown_user_args[meson-args]",
                "time": 0.55,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_project",
                "name": "test_install_tags",
                "time": 2.169,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_project",
                "name": "test_validate_pyproject_config_one",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_project",
                "name": "test_validate_pyproject_config_all",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_project",
                "name": "test_validate_pyproject_config_unknown",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_project",
                "name": "test_validate_pyproject_config_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_project",
                "name": "test_invalid_build_dir",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "unittest.mock doesn't support the required APIs for this test",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_project",
                "name": "test_compiler",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Requires MSVC",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sdist",
                "name": "test_contents",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sdist",
                "name": "test_contents_subdirs",
                "time": 2.389,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sdist",
                "name": "test_contents_unstaged",
                "time": 2.427,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sdist",
                "name": "test_executable_bit",
                "time": 2.73,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sdist",
                "name": "test_generated_files",
                "time": 3.265,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tags",
                "name": "test_wheel_tag",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tags",
                "name": "test_macos_platform_tag",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "macOS specific test",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tags",
                "name": "test_python_host_platform",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "macOS specific test",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tags",
                "name": "test_tag_empty_wheel",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tags",
                "name": "test_tag_purelib_wheel",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tags",
                "name": "test_tag_platlib_wheel",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tags",
                "name": "test_tag_stable_abi",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tags",
                "name": "test_tag_mixed_abi",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_wheel",
                "name": "test_scipy_like",
                "time": 4.253,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_wheel",
                "name": "test_contents",
                "time": 2.742,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_wheel",
                "name": "test_purelib_and_platlib",
                "time": 2.99,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_wheel",
                "name": "test_pure",
                "time": 2.049,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_wheel",
                "name": "test_configure_data",
                "time": 2.054,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_wheel",
                "name": "test_local_lib",
                "time": 7.477,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_wheel",
                "name": "test_contents_license_file",
                "time": 2.064,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_wheel",
                "name": "test_executable_bit",
                "time": 2.786,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_wheel",
                "name": "test_detect_wheel_tag_module",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_wheel",
                "name": "test_detect_wheel_tag_script",
                "time": 2.542,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_wheel",
                "name": "test_rpath",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_wheel",
                "name": "test_uneeded_rpath",
                "time": 0.06,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_wheel",
                "name": "test_entrypoints",
                "time": 1.968,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_wheel",
                "name": "test_top_level_modules",
                "time": 2.122,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_wheel",
                "name": "test_purelib_platlib_split",
                "time": 2.078,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_wheel",
                "name": "test_archflags_envvar[x86_64]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "macOS specific test",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_wheel",
                "name": "test_archflags_envvar[arm64]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "macOS specific test",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_wheelfile",
                "name": "test_basic",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_wheelfile",
                "name": "test_source_date_epoch",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ] \ud83d\ude80  Start image=crawlergpt:latest\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ] \ud83d\ude80  Start image=crawlergpt:latest\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ] \ud83d\ude80  Start image=crawlergpt:latest\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew] \ud83d\ude80  Start image=crawlergpt:latest\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ] \ud83d\ude80  Start image=crawlergpt:latest\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ] \ud83d\ude80  Start image=crawlergpt:latest\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ] \ud83d\ude80  Start image=crawlergpt:latest\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python] user=0 workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python] user=0 workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python] user=0 workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python] user=0 workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python] user=0 workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python] user=0 workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python] user=0 workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   \u2601  git clone 'https://github.com/cygwin/cygwin-install-action' # ref=v2\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v1\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ] \u2b50 Run Pre Setup Cygwin\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   \u2705  Success - Pre Setup Cygwin\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   \u2601  git clone 'https://github.com/actions/cache' # ref=v3\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \u2601  git clone 'https://github.com/bus1/cabuild' # ref=e22aba57d6e74891d059d66501b6b5aed8123c4d\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ] \u2b50 Run Main Checkout\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \u2705  Success - Main Checkout\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ] \u2b50 Run Main Setup Python\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udc33  docker cp src=/tmp/act-cache/4a98e3ae-ec7d-48d6-a6c8-5b143f8881e7/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \u2753  ::group::Installed versions\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udcac  ::debug::Semantic version spec of 3.9 is 3.9\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udcac  ::debug::isExplicit: \n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udcac  ::debug::explicit? false\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udcac  ::debug::evaluating 6 versions\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udcac  ::debug::matched: 3.9.6\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.9.6/x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udcac  ::debug::Found tool in cache Python 3.9.6 x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   | Successfully set up CPython (3.9.6)\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \u2753  ::endgroup::\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \u2705  Success - Main Setup Python\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.9.6/x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib/pkgconfig\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \u2699  ::set-output:: python-version=3.9.6\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.9.6/x64/bin/python\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64/bin\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ] \u2b50 Run Main Install mypy\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   | Collecting mypy==0.991\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   |   Downloading mypy-0.991-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (18.2 MB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   | Collecting tomli>=1.1.0\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   | Collecting typing-extensions>=3.10\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   |   Downloading typing_extensions-4.7.0-py3-none-any.whl (33 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   | Collecting mypy-extensions>=0.4.3\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   |   Downloading mypy_extensions-1.0.0-py3-none-any.whl (4.7 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   | Installing collected packages: typing-extensions, tomli, mypy-extensions, mypy\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   | Successfully installed mypy-0.991 mypy-extensions-1.0.0 tomli-2.0.1 typing-extensions-4.7.0\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \u2705  Success - Main Install mypy\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ] \u2b50 Run Main Run mypy\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew] \ud83e\uddea  Matrix: map[meson:<nil> python:3.8]\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew] \u2b50 Run Main Checkout\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   \u2705  Success - Main Checkout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ] \ud83e\uddea  Matrix: map[meson:<nil> python:3.8]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ] \u2b50 Run Main Checkout\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   \u2705  Success - Main Checkout\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v1\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew] \u2b50 Run Main Install Homebrew Python\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ] \u2b50 Run Main Install pyston\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   | /var/run/act/workflow/1: line 2: brew: command not found\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   \u274c  Failure - Main Install Homebrew Python\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | --2023-07-01 16:48:27--  https://github.com/pyston/pyston/releases/download/pyston_2.3.5/pyston_2.3.5_20.04_amd64.deb\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Resolving github.com (github.com)... 140.82.121.4\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Connecting to github.com (github.com)|140.82.121.4|:443... connected.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | HTTP request sent, awaiting response... 302 Found\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Location: https://objects.githubusercontent.com/github-production-release-asset-2e65be/343576900/544c7df8-b453-4f84-b213-91bbde8f72a8?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20230701%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20230701T164827Z&X-Amz-Expires=300&X-Amz-Signature=a6182c6a947a9437669b97b23e8a2e79fbbbcae2d976e3d40d7d15d9d8059355&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=343576900&response-content-disposition=attachment%3B%20filename%3Dpyston_2.3.5_20.04_amd64.deb&response-content-type=application%2Foctet-stream [following]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | --2023-07-01 16:48:27--  https://objects.githubusercontent.com/github-production-release-asset-2e65be/343576900/544c7df8-b453-4f84-b213-91bbde8f72a8?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20230701%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20230701T164827Z&X-Amz-Expires=300&X-Amz-Signature=a6182c6a947a9437669b97b23e8a2e79fbbbcae2d976e3d40d7d15d9d8059355&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=343576900&response-content-disposition=attachment%3B%20filename%3Dpyston_2.3.5_20.04_amd64.deb&response-content-type=application%2Foctet-stream\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Resolving objects.githubusercontent.com (objects.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Connecting to objects.githubusercontent.com (objects.githubusercontent.com)|185.199.108.133|:443... connected.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | HTTP request sent, awaiting response... 200 OK\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Length: 25635880 (24M) [application/octet-stream]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Saving to: \u2018pyston_2.3.5_20.04_amd64.deb\u2019\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |      0K .......... .......... .......... .......... ..........  0% 6.65M 4s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     50K .......... .......... .......... .......... ..........  0% 8.10M 3s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |    100K .......... .......... .......... .......... ..........  0% 9.88M 3s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |    150K .......... .......... .......... .......... ..........  0% 37.6M 2s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |    200K .......... .......... .......... .......... ..........  0% 58.6M 2s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |    250K .......... .......... .......... .......... ..........  1% 22.3M 2s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |    300K .......... .......... .......... .......... ..........  1%  167M 2s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |    350K .......... .......... .......... .......... ..........  1%  157M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |    400K .......... .......... .......... .......... ..........  1%  167M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |    450K .......... .......... .......... .......... ..........  1% 62.0M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |    500K .......... .......... .......... .......... ..........  2%  108M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |    550K .......... .......... .......... .......... ..........  2% 55.1M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |    600K .......... .......... .......... .......... ..........  2%  145M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |    650K .......... .......... .......... .......... ..........  2%  110M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |    700K .......... .......... .......... .......... ..........  2% 3.26M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |    750K .......... .......... .......... .......... ..........  3%  145M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |    800K .......... .......... .......... .......... ..........  3% 38.2M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |    850K .......... .......... .......... .......... ..........  3%  220M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |    900K .......... .......... .......... .......... ..........  3% 19.2M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |    950K .......... .......... .......... .......... ..........  3%  138M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   1000K .......... .......... .......... .......... ..........  4%  194M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   1050K .......... .......... .......... .......... ..........  4%  201M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   1100K .......... .......... .......... .......... ..........  4%  103M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   1150K .......... .......... .......... .......... ..........  4% 53.1M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   1200K .......... .......... .......... .......... ..........  4%  230M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   1250K .......... .......... .......... .......... ..........  5%  160M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   1300K .......... .......... .......... .......... ..........  5%  156M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   1350K .......... .......... .......... .......... ..........  5%  201M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   1400K .......... .......... .......... .......... ..........  5% 58.3M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   1450K .......... .......... .......... .......... ..........  5%  110M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   1500K .......... .......... .......... .......... ..........  6%  117M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   1550K .......... .......... .......... .......... ..........  6%  106M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   1600K .......... .......... .......... .......... ..........  6%  211M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   1650K .......... .......... .......... .......... ..........  6% 55.3M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   1700K .......... .......... .......... .......... ..........  6%  134M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   1750K .......... .......... .......... .......... ..........  7%  158M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   1800K .......... .......... .......... .......... ..........  7%  118M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   1850K .......... .......... .......... .......... ..........  7%  164M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   1900K .......... .......... .......... .......... ..........  7% 54.7M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   1950K .......... .......... .......... .......... ..........  7%  111M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   2000K .......... .......... .......... .......... ..........  8%  120M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   2050K .......... .......... .......... .......... ..........  8%  138M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   2100K .......... .......... .......... .......... ..........  8%  141M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   2150K .......... .......... .......... .......... ..........  8% 57.1M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   2200K .......... .......... .......... .......... ..........  8%  180M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   2250K .......... .......... .......... .......... ..........  9%  145M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   2300K .......... .......... .......... .......... ..........  9%  139M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   2350K .......... .......... .......... .......... ..........  9%  123M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   2400K .......... .......... .......... .......... ..........  9% 38.5M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   2450K .......... .......... .......... .......... ..........  9%  142M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   2500K .......... .......... .......... .......... .......... 10%  134M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   2550K .......... .......... .......... .......... .......... 10%  164M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   2600K .......... .......... .......... .......... .......... 10% 40.2M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   2650K .......... .......... .......... .......... .......... 10% 40.4M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   2700K .......... .......... .......... .......... .......... 10%  174M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   2750K .......... .......... .......... .......... .......... 11%  143M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   2800K .......... .......... .......... .......... .......... 11% 44.2M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   2850K .......... .......... .......... .......... .......... 11% 54.5M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   2900K .......... .......... .......... .......... .......... 11% 92.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   2950K .......... .......... .......... .......... .......... 11%  103M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   3000K .......... .......... .......... .......... .......... 12% 48.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   3050K .......... .......... .......... .......... .......... 12% 40.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   3100K .......... .......... .......... .......... .......... 12% 61.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   3150K .......... .......... .......... .......... .......... 12% 47.1M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   3200K .......... .......... .......... .......... .......... 12% 82.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   3250K .......... .......... .......... .......... .......... 13% 69.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   3300K .......... .......... .......... .......... .......... 13% 96.1M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   3350K .......... .......... .......... .......... .......... 13% 54.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   3400K .......... .......... .......... .......... .......... 13% 4.19M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   3450K .......... .......... .......... .......... .......... 13% 97.7M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   3500K .......... .......... .......... .......... .......... 14%  189M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   3550K .......... .......... .......... .......... .......... 14% 59.5M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   3600K .......... .......... .......... .......... .......... 14% 67.8M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   3650K .......... .......... .......... .......... .......... 14%  115M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   3700K .......... .......... .......... .......... .......... 14% 38.1M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   3750K .......... .......... .......... .......... .......... 15%  121M 1s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   3800K .......... .......... .......... .......... .......... 15% 57.2M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   3850K .......... .......... .......... .......... .......... 15% 46.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   3900K .......... .......... .......... .......... .......... 15% 30.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   3950K .......... .......... .......... .......... .......... 15% 82.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   4000K .......... .......... .......... .......... .......... 16% 98.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   4050K .......... .......... .......... .......... .......... 16% 92.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   4100K .......... .......... .......... .......... .......... 16% 46.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   4150K .......... .......... .......... .......... .......... 16%  129M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   4200K .......... .......... .......... .......... .......... 16% 46.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   4250K .......... .......... .......... .......... .......... 17%  175M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   4300K .......... .......... .......... .......... .......... 17%  168M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   4350K .......... .......... .......... .......... .......... 17%  112M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   4400K .......... .......... .......... .......... .......... 17% 4.98M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   4450K .......... .......... .......... .......... .......... 17%  186M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   4500K .......... .......... .......... .......... .......... 18%  244M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   4550K .......... .......... .......... .......... .......... 18%  154M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   4600K .......... .......... .......... .......... .......... 18%  203M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   4650K .......... .......... .......... .......... .......... 18% 65.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   4700K .......... .......... .......... .......... .......... 18% 36.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   4750K .......... .......... .......... .......... .......... 19%  203M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   4800K .......... .......... .......... .......... .......... 19% 37.8M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   4850K .......... .......... .......... .......... .......... 19%  114M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   4900K .......... .......... .......... .......... .......... 19%  107M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   4950K .......... .......... .......... .......... .......... 19% 50.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   5000K .......... .......... .......... .......... .......... 20%  113M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   5050K .......... .......... .......... .......... .......... 20% 28.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   5100K .......... .......... .......... .......... .......... 20%  155M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   5150K .......... .......... .......... .......... .......... 20% 42.6M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   5200K .......... .......... .......... .......... .......... 20% 40.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   5250K .......... .......... .......... .......... .......... 21% 52.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   5300K .......... .......... .......... .......... .......... 21% 46.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   5350K .......... .......... .......... .......... .......... 21%  166M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   5400K .......... .......... .......... .......... .......... 21% 45.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   5450K .......... .......... .......... .......... .......... 21%  146M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   5500K .......... .......... .......... .......... .......... 22% 19.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   5550K .......... .......... .......... .......... .......... 22%  100M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   5600K .......... .......... .......... .......... .......... 22% 40.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   5650K .......... .......... .......... .......... .......... 22% 45.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   5700K .......... .......... .......... .......... .......... 22% 43.6M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   5750K .......... .......... .......... .......... .......... 23%  142M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   5800K .......... .......... .......... .......... .......... 23%  138M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   5850K .......... .......... .......... .......... .......... 23% 26.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   5900K .......... .......... .......... .......... .......... 23% 90.2M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   5950K .......... .......... .......... .......... .......... 23% 42.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   6000K .......... .......... .......... .......... .......... 24%  131M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   6050K .......... .......... .......... .......... .......... 24%  120M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   6100K .......... .......... .......... .......... .......... 24% 40.1M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   6150K .......... .......... .......... .......... .......... 24% 26.6M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   6200K .......... .......... .......... .......... .......... 24%  111M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   6250K .......... .......... .......... .......... .......... 25%  131M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   6300K .......... .......... .......... .......... .......... 25% 51.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   6350K .......... .......... .......... .......... .......... 25% 90.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   6400K .......... .......... .......... .......... .......... 25% 19.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   6450K .......... .......... .......... .......... .......... 25%  218M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   6500K .......... .......... .......... .......... .......... 26% 67.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   6550K .......... .......... .......... .......... .......... 26% 57.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   6600K .......... .......... .......... .......... .......... 26% 97.1M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   6650K .......... .......... .......... .......... .......... 26% 20.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   6700K .......... .......... .......... .......... .......... 26%  193M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   6750K .......... .......... .......... .......... .......... 27%  119M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   6800K .......... .......... .......... .......... .......... 27% 21.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   6850K .......... .......... .......... .......... .......... 27%  205M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   6900K .......... .......... .......... .......... .......... 27% 34.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   6950K .......... .......... .......... .......... .......... 27%  134M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   7000K .......... .......... .......... .......... .......... 28%  109M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   7050K .......... .......... .......... .......... .......... 28% 33.1M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   7100K .......... .......... .......... .......... .......... 28% 50.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   7150K .......... .......... .......... .......... .......... 28% 49.1M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   7200K .......... .......... .......... .......... .......... 28% 30.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   7250K .......... .......... .......... .......... .......... 29% 11.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   7300K .......... .......... .......... .......... .......... 29%  248M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   7350K .......... .......... .......... .......... .......... 29% 74.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   7400K .......... .......... .......... .......... .......... 29%  191M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   7450K .......... .......... .......... .......... .......... 29%  199M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   7500K .......... .......... .......... .......... .......... 30%  217M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   7550K .......... .......... .......... .......... .......... 30%  272M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   7600K .......... .......... .......... .......... .......... 30% 48.6M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   7650K .......... .......... .......... .......... .......... 30% 78.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   7700K .......... .......... .......... .......... .......... 30%  204M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   7750K .......... .......... .......... .......... .......... 31% 64.1M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   7800K .......... .......... .......... .......... .......... 31% 35.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   7850K .......... .......... .......... .......... .......... 31%  182M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   7900K .......... .......... .......... .......... .......... 31% 62.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   7950K .......... .......... .......... .......... .......... 31%  168M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   8000K .......... .......... .......... .......... .......... 32% 72.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   8050K .......... .......... .......... .......... .......... 32% 38.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   8100K .......... .......... .......... .......... .......... 32%  203M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   8150K .......... .......... .......... .......... .......... 32% 35.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   8200K .......... .......... .......... .......... .......... 32% 76.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   8250K .......... .......... .......... .......... .......... 33% 71.6M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   8300K .......... .......... .......... .......... .......... 33% 65.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   8350K .......... .......... .......... .......... .......... 33% 30.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   8400K .......... .......... .......... .......... .......... 33%  207M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   8450K .......... .......... .......... .......... .......... 33%  164M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   8500K .......... .......... .......... .......... .......... 34% 39.6M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   8550K .......... .......... .......... .......... .......... 34%  227M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   8600K .......... .......... .......... .......... .......... 34% 80.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   8650K .......... .......... .......... .......... .......... 34% 56.8M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   8700K .......... .......... .......... .......... .......... 34%  259M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   8750K .......... .......... .......... .......... .......... 35%  156M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   8800K .......... .......... .......... .......... .......... 35% 27.6M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   8850K .......... .......... .......... .......... .......... 35% 40.2M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   8900K .......... .......... .......... .......... .......... 35%  189M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   8950K .......... .......... .......... .......... .......... 35% 70.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   9000K .......... .......... .......... .......... .......... 36% 84.6M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   9050K .......... .......... .......... .......... .......... 36%  201M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   9100K .......... .......... .......... .......... .......... 36% 56.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   9150K .......... .......... .......... .......... .......... 36% 57.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   9200K .......... .......... .......... .......... .......... 36% 39.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   9250K .......... .......... .......... .......... .......... 37% 57.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   9300K .......... .......... .......... .......... .......... 37%  161M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   9350K .......... .......... .......... .......... .......... 37% 26.1M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   9400K .......... .......... .......... .......... .......... 37%  111M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   9450K .......... .......... .......... .......... .......... 37% 25.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   9500K .......... .......... .......... .......... .......... 38% 9.18M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   9550K .......... .......... .......... .......... .......... 38%  137M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   9600K .......... .......... .......... .......... .......... 38% 57.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   9650K .......... .......... .......... .......... .......... 38%  156M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   9700K .......... .......... .......... .......... .......... 38% 63.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   9750K .......... .......... .......... .......... .......... 39%  181M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   9800K .......... .......... .......... .......... .......... 39%  155M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   9850K .......... .......... .......... .......... .......... 39% 87.8M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   9900K .......... .......... .......... .......... .......... 39%  163M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   9950K .......... .......... .......... .......... .......... 39%  171M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  10000K .......... .......... .......... .......... .......... 40%  142M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  10050K .......... .......... .......... .......... .......... 40% 84.8M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  10100K .......... .......... .......... .......... .......... 40% 61.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  10150K .......... .......... .......... .......... .......... 40% 65.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  10200K .......... .......... .......... .......... .......... 40% 24.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  10250K .......... .......... .......... .......... .......... 41%  167M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  10300K .......... .......... .......... .......... .......... 41%  205M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  10350K .......... .......... .......... .......... .......... 41% 34.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  10400K .......... .......... .......... .......... .......... 41%  151M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  10450K .......... .......... .......... .......... .......... 41% 10.8M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  10500K .......... .......... .......... .......... .......... 42%  150M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  10550K .......... .......... .......... .......... .......... 42%  169M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  10600K .......... .......... .......... .......... .......... 42%  181M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  10650K .......... .......... .......... .......... .......... 42% 37.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  10700K .......... .......... .......... .......... .......... 42%  158M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  10750K .......... .......... .......... .......... .......... 43%  102M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  10800K .......... .......... .......... .......... .......... 43% 44.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  10850K .......... .......... .......... .......... .......... 43% 84.2M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  10900K .......... .......... .......... .......... .......... 43% 40.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  10950K .......... .......... .......... .......... .......... 43% 52.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  11000K .......... .......... .......... .......... .......... 44% 60.6M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  11050K .......... .......... .......... .......... .......... 44% 41.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  11100K .......... .......... .......... .......... .......... 44% 20.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  11150K .......... .......... .......... .......... .......... 44%  133M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  11200K .......... .......... .......... .......... .......... 44% 24.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  11250K .......... .......... .......... .......... .......... 45% 47.8M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  11300K .......... .......... .......... .......... .......... 45%  129M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  11350K .......... .......... .......... .......... .......... 45% 28.1M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  11400K .......... .......... .......... .......... .......... 45% 5.00M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  11450K .......... .......... .......... .......... .......... 45%  126M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  11500K .......... .......... .......... .......... .......... 46% 60.6M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  11550K .......... .......... .......... .......... .......... 46%  151M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  11600K .......... .......... .......... .......... .......... 46%  138M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  11650K .......... .......... .......... .......... .......... 46%  190M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  11700K .......... .......... .......... .......... .......... 46%  197M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  11750K .......... .......... .......... .......... .......... 47% 9.85M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  11800K .......... .......... .......... .......... .......... 47%  144M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  11850K .......... .......... .......... .......... .......... 47%  163M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  11900K .......... .......... .......... .......... .......... 47% 32.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  11950K .......... .......... .......... .......... .......... 47%  170M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  12000K .......... .......... .......... .......... .......... 48%  148M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  12050K .......... .......... .......... .......... .......... 48% 49.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  12100K .......... .......... .......... .......... .......... 48% 42.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  12150K .......... .......... .......... .......... .......... 48% 30.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  12200K .......... .......... .......... .......... .......... 48% 41.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  12250K .......... .......... .......... .......... .......... 49% 20.2M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  12300K .......... .......... .......... .......... .......... 49%  194M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  12350K .......... .......... .......... .......... .......... 49%  209M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  12400K .......... .......... .......... .......... .......... 49%  111M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  12450K .......... .......... .......... .......... .......... 49% 26.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  12500K .......... .......... .......... .......... .......... 50%  193M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  12550K .......... .......... .......... .......... .......... 50% 49.8M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  12600K .......... .......... .......... .......... .......... 50% 19.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  12650K .......... .......... .......... .......... .......... 50% 44.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  12700K .......... .......... .......... .......... .......... 50% 40.2M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  12750K .......... .......... .......... .......... .......... 51% 30.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  12800K .......... .......... .......... .......... .......... 51% 6.55M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  12850K .......... .......... .......... .......... .......... 51%  203M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  12900K .......... .......... .......... .......... .......... 51%  206M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  12950K .......... .......... .......... .......... .......... 51%  208M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  13000K .......... .......... .......... .......... .......... 52% 3.31M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  13050K .......... .......... .......... .......... .......... 52%  221M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  13100K .......... .......... .......... .......... .......... 52% 66.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  13150K .......... .......... .......... .......... .......... 52%  251M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  13200K .......... .......... .......... .......... .......... 52%  200M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  13250K .......... .......... .......... .......... .......... 53% 2.60M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  13300K .......... .......... .......... .......... .......... 53%  207M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  13350K .......... .......... .......... .......... .......... 53% 70.6M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  13400K .......... .......... .......... .......... .......... 53%  177M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  13450K .......... .......... .......... .......... .......... 53%  202M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  13500K .......... .......... .......... .......... .......... 54%  188M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  13550K .......... .......... .......... .......... .......... 54%  176M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  13600K .......... .......... .......... .......... .......... 54% 69.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  13650K .......... .......... .......... .......... .......... 54%  206M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  13700K .......... .......... .......... .......... .......... 54%  238M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  13750K .......... .......... .......... .......... .......... 55% 10.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  13800K .......... .......... .......... .......... .......... 55%  212M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  13850K .......... .......... .......... .......... .......... 55% 74.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  13900K .......... .......... .......... .......... .......... 55%  248M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  13950K .......... .......... .......... .......... .......... 55% 7.02M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  14000K .......... .......... .......... .......... .......... 56%  205M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  14050K .......... .......... .......... .......... .......... 56%  240M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  14100K .......... .......... .......... .......... .......... 56% 84.1M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  14150K .......... .......... .......... .......... .......... 56% 7.02M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  14200K .......... .......... .......... .......... .......... 56%  203M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  14250K .......... .......... .......... .......... .......... 57%  243M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  14300K .......... .......... .......... .......... .......... 57%  240M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  14350K .......... .......... .......... .......... .......... 57% 75.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  14400K .......... .......... .......... .......... .......... 57% 36.2M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  14450K .......... .......... .......... .......... .......... 57% 75.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  14500K .......... .......... .......... .......... .......... 58% 28.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  14550K .......... .......... .......... .......... .......... 58% 55.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  14600K .......... .......... .......... .......... .......... 58% 73.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  14650K .......... .......... .......... .......... .......... 58% 65.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  14700K .......... .......... .......... .......... .......... 58% 63.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  14750K .......... .......... .......... .......... .......... 59% 87.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  14800K .......... .......... .......... .......... .......... 59% 16.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  14850K .......... .......... .......... .......... .......... 59%  129M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  14900K .......... .......... .......... .......... .......... 59%  124M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  14950K .......... .......... .......... .......... .......... 59%  132M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  15000K .......... .......... .......... .......... .......... 60% 15.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  15050K .......... .......... .......... .......... .......... 60%  121M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  15100K .......... .......... .......... .......... .......... 60%  131M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  15150K .......... .......... .......... .......... .......... 60% 83.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  15200K .......... .......... .......... .......... .......... 60% 74.2M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  15250K .......... .......... .......... .......... .......... 61%  119M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  15300K .......... .......... .......... .......... .......... 61% 50.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  15350K .......... .......... .......... .......... .......... 61%  282M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  15400K .......... .......... .......... .......... .......... 61% 83.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  15450K .......... .......... .......... .......... .......... 61% 86.2M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  15500K .......... .......... .......... .......... .......... 62% 82.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  15550K .......... .......... .......... .......... .......... 62% 44.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  15600K .......... .......... .......... .......... .......... 62% 53.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  15650K .......... .......... .......... .......... .......... 62%  167M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  15700K .......... .......... .......... .......... .......... 62%  161M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  15750K .......... .......... .......... .......... .......... 63%  188M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  15800K .......... .......... .......... .......... .......... 63%  104M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  15850K .......... .......... .......... .......... .......... 63%  100M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  15900K .......... .......... .......... .......... .......... 63% 57.6M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  15950K .......... .......... .......... .......... .......... 63% 45.1M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  16000K .......... .......... .......... .......... .......... 64%  189M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  16050K .......... .......... .......... .......... .......... 64% 62.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  16100K .......... .......... .......... .......... .......... 64%  102M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  16150K .......... .......... .......... .......... .......... 64% 30.2M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  16200K .......... .......... .......... .......... .......... 64% 54.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  16250K .......... .......... .......... .......... .......... 65%  197M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  16300K .......... .......... .......... .......... .......... 65% 17.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  16350K .......... .......... .......... .......... .......... 65% 41.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  16400K .......... .......... .......... .......... .......... 65% 34.1M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  16450K .......... .......... .......... .......... .......... 65% 41.8M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  16500K .......... .......... .......... .......... .......... 66%  192M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  16550K .......... .......... .......... .......... .......... 66% 30.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  16600K .......... .......... .......... .......... .......... 66% 74.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  16650K .......... .......... .......... .......... .......... 66% 19.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  16700K .......... .......... .......... .......... .......... 66% 9.16M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  16750K .......... .......... .......... .......... .......... 67% 52.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  16800K .......... .......... .......... .......... .......... 67%  150M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  16850K .......... .......... .......... .......... .......... 67%  144M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  16900K .......... .......... .......... .......... .......... 67%  186M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  16950K .......... .......... .......... .......... .......... 67%  193M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  17000K .......... .......... .......... .......... .......... 68% 19.8M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  17050K .......... .......... .......... .......... .......... 68% 58.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  17100K .......... .......... .......... .......... .......... 68%  130M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  17150K .......... .......... .......... .......... .......... 68% 53.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  17200K .......... .......... .......... .......... .......... 68% 19.2M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  17250K .......... .......... .......... .......... .......... 69% 52.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  17300K .......... .......... .......... .......... .......... 69% 31.8M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  17350K .......... .......... .......... .......... .......... 69% 49.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  17400K .......... .......... .......... .......... .......... 69%  121M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  17450K .......... .......... .......... .......... .......... 69% 21.8M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  17500K .......... .......... .......... .......... .......... 70% 31.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  17550K .......... .......... .......... .......... .......... 70% 58.8M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  17600K .......... .......... .......... .......... .......... 70% 44.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  17650K .......... .......... .......... .......... .......... 70% 64.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  17700K .......... .......... .......... .......... .......... 70% 98.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  17750K .......... .......... .......... .......... .......... 71% 31.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  17800K .......... .......... .......... .......... .......... 71%  146M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  17850K .......... .......... .......... .......... .......... 71%  647K 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  17900K .......... .......... .......... .......... .......... 71%  222M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  17950K .......... .......... .......... .......... .......... 71%  196M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  18000K .......... .......... .......... .......... .......... 72% 13.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  18050K .......... .......... .......... .......... .......... 72% 10.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  18100K .......... .......... .......... .......... .......... 72% 6.19M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  18150K .......... .......... .......... .......... .......... 72% 5.95M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  18200K .......... .......... .......... .......... .......... 72%  146M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  18250K .......... .......... .......... .......... .......... 73% 2.41M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  18300K .......... .......... .......... .......... .......... 73% 54.1M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  18350K .......... .......... .......... .......... .......... 73%  178M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  18400K .......... .......... .......... .......... .......... 73%  173M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  18450K .......... .......... .......... .......... .......... 73%  181M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  18500K .......... .......... .......... .......... .......... 74% 59.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  18550K .......... .......... .......... .......... .......... 74% 12.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  18600K .......... .......... .......... .......... .......... 74% 18.8M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  18650K .......... .......... .......... .......... .......... 74% 61.2M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  18700K .......... .......... .......... .......... .......... 74% 11.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  18750K .......... .......... .......... .......... .......... 75% 23.8M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  18800K .......... .......... .......... .......... .......... 75% 21.1M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  18850K .......... .......... .......... .......... .......... 75%  189M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  18900K .......... .......... .......... .......... .......... 75% 26.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  18950K .......... .......... .......... .......... .......... 75% 20.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  19000K .......... .......... .......... .......... .......... 76% 24.2M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  19050K .......... .......... .......... .......... .......... 76% 35.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  19100K .......... .......... .......... .......... .......... 76%  161M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  19150K .......... .......... .......... .......... .......... 76% 20.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  19200K .......... .......... .......... .......... .......... 76% 18.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  19250K .......... .......... .......... .......... .......... 77%  134M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  19300K .......... .......... .......... .......... .......... 77%  108M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  19350K .......... .......... .......... .......... .......... 77% 58.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  19400K .......... .......... .......... .......... .......... 77%  235M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  19450K .......... .......... .......... .......... .......... 77% 25.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  19500K .......... .......... .......... .......... .......... 78% 22.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  19550K .......... .......... .......... .......... .......... 78%  139M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  19600K .......... .......... .......... .......... .......... 78% 16.6M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  19650K .......... .......... .......... .......... .......... 78% 19.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  19700K .......... .......... .......... .......... .......... 78% 14.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  19750K .......... .......... .......... .......... .......... 79%  113M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  19800K .......... .......... .......... .......... .......... 79%  150M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  19850K .......... .......... .......... .......... .......... 79%  153M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  19900K .......... .......... .......... .......... .......... 79% 12.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  19950K .......... .......... .......... .......... .......... 79%  131M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  20000K .......... .......... .......... .......... .......... 80%  163M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  20050K .......... .......... .......... .......... .......... 80% 13.6M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  20100K .......... .......... .......... .......... .......... 80% 98.2M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  20150K .......... .......... .......... .......... .......... 80% 43.1M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  20200K .......... .......... .......... .......... .......... 80% 14.8M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  20250K .......... .......... .......... .......... .......... 81%  243M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  20300K .......... .......... .......... .......... .......... 81% 77.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  20350K .......... .......... .......... .......... .......... 81% 37.2M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  20400K .......... .......... .......... .......... .......... 81% 31.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  20450K .......... .......... .......... .......... .......... 81% 42.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  20500K .......... .......... .......... .......... .......... 82% 56.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  20550K .......... .......... .......... .......... .......... 82% 9.52M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  20600K .......... .......... .......... .......... .......... 82%  204M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  20650K .......... .......... .......... .......... .......... 82%  152M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  20700K .......... .......... .......... .......... .......... 82%  182M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  20750K .......... .......... .......... .......... .......... 83% 18.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  20800K .......... .......... .......... .......... .......... 83%  137M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  20850K .......... .......... .......... .......... .......... 83% 28.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  20900K .......... .......... .......... .......... .......... 83% 56.6M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  20950K .......... .......... .......... .......... .......... 83%  133M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  21000K .......... .......... .......... .......... .......... 84% 34.6M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  21050K .......... .......... .......... .......... .......... 84%  129M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  21100K .......... .......... .......... .......... .......... 84% 51.6M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  21150K .......... .......... .......... .......... .......... 84% 82.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  21200K .......... .......... .......... .......... .......... 84% 28.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  21250K .......... .......... .......... .......... .......... 85%  146M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  21300K .......... .......... .......... .......... .......... 85% 15.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  21350K .......... .......... .......... .......... .......... 85%  182M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  21400K .......... .......... .......... .......... .......... 85% 27.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  21450K .......... .......... .......... .......... .......... 85% 54.2M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  21500K .......... .......... .......... .......... .......... 86% 54.6M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  21550K .......... .......... .......... .......... .......... 86% 75.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  21600K .......... .......... .......... .......... .......... 86% 35.8M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  21650K .......... .......... .......... .......... .......... 86% 64.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  21700K .......... .......... .......... .......... .......... 86% 42.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  21750K .......... .......... .......... .......... .......... 87% 70.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  21800K .......... .......... .......... .......... .......... 87% 60.2M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  21850K .......... .......... .......... .......... .......... 87%  112M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  21900K .......... .......... .......... .......... .......... 87%  117M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  21950K .......... .......... .......... .......... .......... 87% 31.8M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  22000K .......... .......... .......... .......... .......... 88%  144M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  22050K .......... .......... .......... .......... .......... 88% 4.92M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  22100K .......... .......... .......... .......... .......... 88%  146M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  22150K .......... .......... .......... .......... .......... 88% 72.1M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  22200K .......... .......... .......... .......... .......... 88%  177M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  22250K .......... .......... .......... .......... .......... 89% 23.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  22300K .......... .......... .......... .......... .......... 89% 78.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  22350K .......... .......... .......... .......... .......... 89%  202M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  22400K .......... .......... .......... .......... .......... 89% 33.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  22450K .......... .......... .......... .......... .......... 89%  119M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  22500K .......... .......... .......... .......... .......... 90% 63.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  22550K .......... .......... .......... .......... .......... 90% 63.1M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  22600K .......... .......... .......... .......... .......... 90% 53.6M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  22650K .......... .......... .......... .......... .......... 90%  215M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  22700K .......... .......... .......... .......... .......... 90% 42.2M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  22750K .......... .......... .......... .......... .......... 91%  131M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  22800K .......... .......... .......... .......... .......... 91% 50.2M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  22850K .......... .......... .......... .......... .......... 91% 18.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  22900K .......... .......... .......... .......... .......... 91%  172M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  22950K .......... .......... .......... .......... .......... 91%  102M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  23000K .......... .......... .......... .......... .......... 92%  124M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  23050K .......... .......... .......... .......... .......... 92% 47.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  23100K .......... .......... .......... .......... .......... 92%  129M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  23150K .......... .......... .......... .......... .......... 92%  100M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  23200K .......... .......... .......... .......... .......... 92% 39.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  23250K .......... .......... .......... .......... .......... 93% 76.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  23300K .......... .......... .......... .......... .......... 93%  146M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  23350K .......... .......... .......... .......... .......... 93%  132M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  23400K .......... .......... .......... .......... .......... 93% 11.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  23450K .......... .......... .......... .......... .......... 93%  136M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  23500K .......... .......... .......... .......... .......... 94% 39.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  23550K .......... .......... .......... .......... .......... 94% 92.8M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  23600K .......... .......... .......... .......... .......... 94% 43.0M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  23650K .......... .......... .......... .......... .......... 94% 47.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  23700K .......... .......... .......... .......... .......... 94% 62.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  23750K .......... .......... .......... .......... .......... 95%  127M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  23800K .......... .......... .......... .......... .......... 95% 44.7M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  23850K .......... .......... .......... .......... .......... 95%  134M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  23900K .......... .......... .......... .......... .......... 95%  106M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  23950K .......... .......... .......... .......... .......... 95% 66.9M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  24000K .......... .......... .......... .......... .......... 96% 87.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  24050K .......... .......... .......... .......... .......... 96% 51.1M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  24100K .......... .......... .......... .......... .......... 96% 28.8M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  24150K .......... .......... .......... .......... .......... 96%  259M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  24200K .......... .......... .......... .......... .......... 96% 13.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  24250K .......... .......... .......... .......... .......... 97% 36.3M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  24300K .......... .......... .......... .......... .......... 97%  182M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  24350K .......... .......... .......... .......... .......... 97%  123M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  24400K .......... .......... .......... .......... .......... 97% 40.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  24450K .......... .......... .......... .......... .......... 97% 56.4M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  24500K .......... .......... .......... .......... .......... 98% 67.2M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  24550K .......... .......... .......... .......... .......... 98%  126M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  24600K .......... .......... .......... .......... .......... 98% 73.2M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  24650K .......... .......... .......... .......... .......... 98% 48.8M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  24700K .......... .......... .......... .......... .......... 98% 12.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  24750K .......... .......... .......... .......... .......... 99%  184M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  24800K .......... .......... .......... .......... .......... 99% 13.5M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  24850K .......... .......... .......... .......... .......... 99% 9.04M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  24900K .......... .......... .......... .......... .......... 99%  175M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  24950K .......... .......... .......... .......... .......... 99%  173M 0s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  25000K .......... .......... .......... .....                100% 50.6M=0.7s\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | 2023-07-01 16:48:28 (35.1 MB/s) - \u2018pyston_2.3.5_20.04_amd64.deb\u2019 saved [25635880/25635880]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | WARNING: apt does not have a stable CLI interface. Use with caution in scripts.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Reading package lists...\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Building dependency tree...\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Reading state information...\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | The following additional packages will be installed:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   tk8.6-blt2.5\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Suggested packages:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   blt-demo\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | The following NEW packages will be installed:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   pyston tk8.6-blt2.5\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew] exitcode '127': command not found, please refer to https://github.com/nektos/act/issues/107 for more information\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | 0 upgraded, 2 newly installed, 0 to remove and 20 not upgraded.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Need to get 572 kB/26.2 MB of archives.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | After this operation, 168 MB of additional disk space will be used.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Get:1 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/pyston_2.3.5_20.04_amd64.deb pyston amd64 2.3.5 [25.6 MB]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Get:2 http://archive.ubuntu.com/ubuntu focal/main amd64 tk8.6-blt2.5 amd64 2.5.3+dfsg-4 [572 kB]\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   | Success: no issues found in 8 source files\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \u2705  Success - Main Run mypy\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew] \u2b50 Run Main Send coverage report\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Fetched 572 kB in 1s (402 kB/s)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Selecting previously unselected package tk8.6-blt2.5.\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | (Reading database ... \r(Reading database ... 5%\r(Reading database ... 10%\r(Reading database ... 15%\r(Reading database ... 20%\r(Reading database ... 25%\r(Reading database ... 30%\r(Reading database ... 35%\r(Reading database ... 40%\r(Reading database ... 45%\r(Reading database ... 50%\r(Reading database ... 55%\r(Reading database ... 60%\r(Reading database ... 65%\r(Reading database ... 70%\r(Reading database ... 75%\r(Reading database ... 80%\r(Reading database ... 85%\r(Reading database ... 90%\r(Reading database ... 95%\r(Reading database ... 100%\r(Reading database ... 193678 files and directories currently installed.)\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Preparing to unpack .../tk8.6-blt2.5_2.5.3+dfsg-4_amd64.deb ...\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Unpacking tk8.6-blt2.5 (2.5.3+dfsg-4) ...\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   \ud83d\udc33  docker cp src=/tmp/act-cache/4a98e3ae-ec7d-48d6-a6c8-5b143f8881e7/act/codecov-codecov-action@v1/ dst=/var/run/act/actions/codecov-codecov-action@v1/\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Selecting previously unselected package pyston.\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Preparing to unpack .../pyston_2.3.5_20.04_amd64.deb ...\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Unpacking pyston (2.3.5) ...\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ] \u2b50 Run Post Setup Python\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/cache-save/index.js] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/codecov-codecov-action@v1/] user=0 workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v1\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/codecov-codecov-action@v1/dist/index.js] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ]   \u2705  Success - Post Setup Python\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   | [command]/usr/bin/bash codecov.sh -n homebrew-3.8 -F tests -Q github-action-v1.5.2 -e PYTHON\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Setting up tk8.6-blt2.5 (2.5.3+dfsg-4) ...\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   |   _____          _\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   |  / ____|        | |\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   | | |     ___   __| | ___  ___ _____   __\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   | | |    / _ \\ / _` |/ _ \\/ __/ _ \\ \\ / /\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   | | |___| (_) | (_| |  __/ (_| (_) \\ V /\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   |  \\_____\\___/ \\__,_|\\___|\\___\\___/ \\_/\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   |                               Bash-1.0.3\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Setting up pyston (2.3.5) ...\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   | \u001b[0;36m==>\u001b[0m git version 2.33.0 found\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   | \u001b[0;36m==>\u001b[0m curl 7.68.0 (x86_64-pc-linux-gnu) libcurl/7.68.0 OpenSSL/1.1.1f zlib/1.2.11 brotli/1.0.7 libidn2/2.2.0 libpsl/0.21.0 (+libidn2/2.2.0) libssh/0.9.3/openssl/zlib nghttp2/1.40.0 librtmp/2.3\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   | Release-Date: 2020-01-08\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   | Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtmp rtsp scp sftp smb smbs smtp smtps telnet tftp \n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   | Features: AsynchDNS brotli GSS-API HTTP2 HTTPS-proxy IDN IPv6 Kerberos Largefile libz NTLM NTLM_WB PSL SPNEGO SSL TLS-SRP UnixSockets\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   | \u001b[0;90m==>\u001b[0m GitHub Actions detected.\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   |     Env vars used:\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   |       -> GITHUB_ACTIONS:    true\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   |       -> GITHUB_HEAD_REF:   \n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   |       -> GITHUB_REF:        refs/heads/main\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   |       -> GITHUB_REPOSITORY: mesonbuild/meson-python\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   |       -> GITHUB_RUN_ID:     1\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   |       -> GITHUB_SHA:        354e049e8371816c3d7b34a42e75e8b4b381912d\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   |       -> GITHUB_WORKFLOW:   5972f913-cb5d-4143-8766-062b7d7b7525\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ] \u2b50 Run Pre Setup MSVC\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ] \ud83e\uddea  Matrix: map[meson:<nil> os:ubuntu python:3.7]\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   |     \u001b[0;90mproject root:\u001b[0m .\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   |     \u001b[0;90mYaml found at:\u001b[0m codecov.yml\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   | \u001b[0;90m==>\u001b[0m Running gcov in . \u001b[0;90m(disable via -X gcov)\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   | \u001b[0;90m==>\u001b[0m Python coveragepy not found\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   | \u001b[0;90m==>\u001b[0m Searching for coverage reports in:\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   |     \u001b[0;32m+\u001b[0m .\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   | \u001b[0;31m-->\u001b[0m No coverage report found.\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   |     Please visit \u001b[0;36mhttp://docs.codecov.io/docs/supported-languages\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew]   \u2705  Success - Main Send coverage report\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ] \u2b50 Run Main Checkout\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ] \ud83e\uddea  Matrix: map[os:ubuntu python:pypy-3.9]\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ] \u2b50 Run Main Checkout\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \u2705  Success - Main Checkout\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \u2705  Success - Pre Setup MSVC\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ] \ud83e\uddea  Matrix: map[meson:<nil> python:3.9]\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ] \u2b50 Run Main Checkout\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \u2705  Success - Main Checkout\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   \u2705  Success - Main Checkout\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ] \u2b50 Run Main Set up target Python\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ] \ud83e\uddea  Matrix: map[meson:<nil> python:3.11]\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ] \u2b50 Run Main Set up target Python\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ] \u2b50 Run Main Checkout\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udc33  docker cp src=/tmp/act-cache/4a98e3ae-ec7d-48d6-a6c8-5b143f8881e7/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ] \u2b50 Run Main Setup Cygwin\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \u2705  Success - Main Checkout\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udc33  docker cp src=/tmp/act-cache/4a98e3ae-ec7d-48d6-a6c8-5b143f8881e7/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   \ud83d\udc33  docker cp src=/tmp/act-cache/4a98e3ae-ec7d-48d6-a6c8-5b143f8881e7/act/cygwin-cygwin-install-action@v2/ dst=/var/run/act/actions/cygwin-cygwin-install-action@v2/\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/cygwin-cygwin-install-action@v2/] user=0 workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ] \u2b50 Run Main Set up target Python\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udc33  docker cp src=/tmp/act-cache/4a98e3ae-ec7d-48d6-a6c8-5b143f8881e7/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/homebrew] \ud83c\udfc1  Job failed\n[5972f913-cb5d-4143-8766-062b7d7b7525/mypy    ] \ud83c\udfc1  Job succeeded\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ] \u2b50 Run Main $platform = 'x86_64'\n$platform = $platform -replace '^(x64|amd64)$', 'x86_64'\n$platform = $platform -replace '^i686$', 'x86'\n# validate that platform is one of the expected values\nif (($platform -ne 'x86') -and ($platform -ne 'x86_64')) {\n  echo \"unknown platform $platform\"\n  exit 1\n}\nInvoke-WebRequest https://cygwin.com/setup-$platform.exe -OutFile C:\\setup.exe\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   \ud83d\udc33  docker exec cmd=[powershell -command . /var/run/act/workflow/1-composite-0.ps1] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Processing triggers for libc-bin (2.31-0ubuntu9.2) ...\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   \u2705  Success - Main Install pyston\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ] \u2b50 Run Main Install Ninja\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   | OCI runtime exec failed: exec failed: unable to start container process: exec: \"powershell\": executable file not found in $PATH: unknown\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   \u274c  Failure - Main $platform = 'x86_64'\n$platform = $platform -replace '^(x64|amd64)$', 'x86_64'\n$platform = $platform -replace '^i686$', 'x86'\n# validate that platform is one of the expected values\nif (($platform -ne 'x86') -and ($platform -ne 'x86_64')) {\n  echo \"unknown platform $platform\"\n  exit 1\n}\nInvoke-WebRequest https://cygwin.com/setup-$platform.exe -OutFile C:\\setup.exe\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \u2753  ::group::Installed versions\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udcac  ::debug::isExplicit: \n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udcac  ::debug::explicit? false\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udcac  ::debug::isExplicit: 3.6.12\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udcac  ::debug::isExplicit: 3.7.10\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udcac  ::debug::evaluating 3 versions\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udcac  ::debug::match not found\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | PyPy version 3.9 (x) was not found in the local cache\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \u2753  ::group::Installed versions\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udcac  ::debug::isExplicit: \n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udcac  ::debug::explicit? false\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udcac  ::debug::evaluating 6 versions\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udcac  ::debug::matched: 3.7.11\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Successfully set up CPython (3.7.11)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \u2753  ::endgroup::\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \u2705  Success - Main Set up target Python\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Downloading PyPy from \"https://downloads.python.org/pypy/pypy3.9-v7.3.12-linux64.tar.bz2\" ...\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udcac  ::debug::Downloading https://downloads.python.org/pypy/pypy3.9-v7.3.12-linux64.tar.bz2\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udcac  ::debug::Destination /tmp/fbd409e1-82a3-43af-8d91-c88e6a0dfef6\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib/pkgconfig\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ] exitcode '126': failure\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   \u274c  Failure - Main Setup Cygwin\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \u2699  ::set-output:: python-version=3.7.11\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ] \u2b50 Run Main Install Ninja\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udcac  ::debug::download complete\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Extracting downloaded archive...\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udcac  ::debug::Checking tar --version\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udcac  ::debug::tar (GNU tar) 1.30%0ACopyright (C) 2017 Free Software Foundation, Inc.%0ALicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.%0AThis is free software: you are free to change and redistribute it.%0AThere is NO WARRANTY, to the extent permitted by law.%0A%0AWritten by John Gilmore and Jay Fenlason.\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | [command]/usr/bin/tar x --warning=no-unknown-keyword -C /tmp/9ef9fe7b-35ca-4c99-ac49-42a2cdbf6d29 -f /tmp/fbd409e1-82a3-43af-8d91-c88e6a0dfef6\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ] exitcode '126': failure\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ] \u2b50 Run Main Send coverage report\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   \ud83d\udc33  docker cp src=/tmp/act-cache/4a98e3ae-ec7d-48d6-a6c8-5b143f8881e7/act/codecov-codecov-action@v1/ dst=/var/run/act/actions/codecov-codecov-action@v1/\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/codecov-codecov-action@v1/] user=0 workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udcac  ::debug::Caching tool PyPy 3.9.17 x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udcac  ::debug::source dir: /tmp/9ef9fe7b-35ca-4c99-ac49-42a2cdbf6d29/pypy3.9-v7.3.12-linux64\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udcac  ::debug::destination /opt/hostedtoolcache/PyPy/3.9.17/x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udcac  ::debug::finished caching tool\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Creating symlinks...\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Installing and updating pip\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | [command]/opt/hostedtoolcache/PyPy/3.9.17/x64/bin/python -m ensurepip\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Reading package lists...\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Building dependency tree...\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Reading state information...\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | The following NEW packages will be installed:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   ninja-build\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | 0 upgraded, 1 newly installed, 0 to remove and 20 not upgraded.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Need to get 107 kB of archives.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | After this operation, 338 kB of additional disk space will be used.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Get:1 http://archive.ubuntu.com/ubuntu focal/universe amd64 ninja-build amd64 1.10.0-1build1 [107 kB]\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/codecov-codecov-action@v1/dist/index.js] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \u2753  ::group::Installed versions\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::Semantic version spec of 3.11 is 3.11\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::isExplicit: \n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::explicit? false\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::evaluating 6 versions\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::match not found\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | Version 3.11 was not found in the local cache\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::Getting manifest from actions/python-versions@main\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::set auth\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::check 3.12.0-beta.3 satisfies 3.11\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::check 3.12.0-beta.2 satisfies 3.11\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::check 3.12.0-beta.1 satisfies 3.11\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::check 3.12.0-alpha.7 satisfies 3.11\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::check 3.12.0-alpha.6 satisfies 3.11\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::check 3.12.0-alpha.5 satisfies 3.11\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::check 3.12.0-alpha.4 satisfies 3.11\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::check 3.12.0-alpha.3 satisfies 3.11\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::check 3.12.0-alpha.2 satisfies 3.11\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::check 3.12.0-alpha.1 satisfies 3.11\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::check 3.11.4 satisfies 3.11\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::arm64===x64 && darwin===linux\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::x64===x64 && darwin===linux\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::x64===x64 && linux===linux\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::matched 3.11.4\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | Version 3.11 is available for downloading\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | Download from \"https://github.com/actions/python-versions/releases/download/3.11.4-5199054971/python-3.11.4-linux-20.04-x64.tar.gz\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::Downloading https://github.com/actions/python-versions/releases/download/3.11.4-5199054971/python-3.11.4-linux-20.04-x64.tar.gz\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::Destination /tmp/fb0ceab2-809d-4ad3-8edd-786c479596ad\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::set auth\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Reading package lists...\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Fetched 107 kB in 1s (172 kB/s)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Selecting previously unselected package ninja-build.\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Building dependency tree...\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Reading state information...\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | (Reading database ... \r(Reading database ... 5%\r(Reading database ... 10%\r(Reading database ... 15%\r(Reading database ... 20%\r(Reading database ... 25%\r(Reading database ... 30%\r(Reading database ... 35%\r(Reading database ... 40%\r(Reading database ... 45%\r(Reading database ... 50%\r(Reading database ... 55%\r(Reading database ... 60%\r(Reading database ... 65%\r(Reading database ... 70%\r(Reading database ... 75%\r(Reading database ... 80%\r(Reading database ... 85%\r(Reading database ... 90%\r(Reading database ... 95%\r(Reading database ... 100%\r(Reading database ... 202426 files and directories currently installed.)\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Preparing to unpack .../ninja-build_1.10.0-1build1_amd64.deb ...\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Unpacking ninja-build (1.10.0-1build1) ...\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | The following NEW packages will be installed:\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   ninja-build\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Setting up ninja-build (1.10.0-1build1) ...\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | 0 upgraded, 1 newly installed, 0 to remove and 20 not upgraded.\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Need to get 107 kB of archives.\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | After this operation, 338 kB of additional disk space will be used.\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Get:1 http://archive.ubuntu.com/ubuntu focal/universe amd64 ninja-build amd64 1.10.0-1build1 [107 kB]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   \u2705  Success - Main Install Ninja\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ] \u2b50 Run Main Install\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   | [command]/usr/bin/bash codecov.sh -n cygwin-3.9 -F tests -Q github-action-v1.5.2 -e PYTHON\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   |   _____          _\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   |  / ____|        | |\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   | | |     ___   __| | ___  ___ _____   __\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   | | |    / _ \\ / _` |/ _ \\/ __/ _ \\ \\ / /\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   | | |___| (_) | (_| |  __/ (_| (_) \\ V /\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   |  \\_____\\___/ \\__,_|\\___|\\___\\___/ \\_/\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   |                               Bash-1.0.3\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   | \u001b[0;36m==>\u001b[0m git version 2.33.0 found\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   | \u001b[0;36m==>\u001b[0m curl 7.68.0 (x86_64-pc-linux-gnu) libcurl/7.68.0 OpenSSL/1.1.1f zlib/1.2.11 brotli/1.0.7 libidn2/2.2.0 libpsl/0.21.0 (+libidn2/2.2.0) libssh/0.9.3/openssl/zlib nghttp2/1.40.0 librtmp/2.3\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   | Release-Date: 2020-01-08\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   | Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtmp rtsp scp sftp smb smbs smtp smtps telnet tftp \n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   | Features: AsynchDNS brotli GSS-API HTTP2 HTTPS-proxy IDN IPv6 Kerberos Largefile libz NTLM NTLM_WB PSL SPNEGO SSL TLS-SRP UnixSockets\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   | \u001b[0;90m==>\u001b[0m GitHub Actions detected.\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   |     Env vars used:\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   |       -> GITHUB_ACTIONS:    true\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   |       -> GITHUB_HEAD_REF:   \n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   |       -> GITHUB_REF:        refs/heads/main\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   |       -> GITHUB_REPOSITORY: mesonbuild/meson-python\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   |       -> GITHUB_RUN_ID:     1\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   |       -> GITHUB_SHA:        354e049e8371816c3d7b34a42e75e8b4b381912d\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   |       -> GITHUB_WORKFLOW:   5972f913-cb5d-4143-8766-062b7d7b7525\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   |     \u001b[0;90mproject root:\u001b[0m .\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   |     \u001b[0;90mYaml found at:\u001b[0m codecov.yml\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   | \u001b[0;90m==>\u001b[0m Running gcov in . \u001b[0;90m(disable via -X gcov)\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   | \u001b[0;90m==>\u001b[0m Python coveragepy not found\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   | \u001b[0;90m==>\u001b[0m Searching for coverage reports in:\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   |     \u001b[0;32m+\u001b[0m .\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   | \u001b[0;31m-->\u001b[0m No coverage report found.\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   |     Please visit \u001b[0;36mhttp://docs.codecov.io/docs/supported-languages\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   \u2705  Success - Main Send coverage report\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::download complete\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | Extract downloaded archive\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::Checking tar --version\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::tar (GNU tar) 1.30%0ACopyright (C) 2017 Free Software Foundation, Inc.%0ALicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.%0AThis is free software: you are free to change and redistribute it.%0AThere is NO WARRANTY, to the extent permitted by law.%0A%0AWritten by John Gilmore and Jay Fenlason.\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | [command]/usr/bin/tar xz --warning=no-unknown-keyword -C /tmp/3b400d03-fb13-4f4e-9a49-270c5bb13ac7 -f /tmp/fb0ceab2-809d-4ad3-8edd-786c479596ad\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ] \u2b50 Run Post Setup Cygwin\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   \ud83d\udc33  docker cp src=/tmp/act-cache/4a98e3ae-ec7d-48d6-a6c8-5b143f8881e7/act/cygwin-cygwin-install-action@v2/ dst=/var/run/act/actions/cygwin-cygwin-install-action@v2/\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/cygwin-cygwin-install-action@v2/] user=0 workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Looking in links: /tmp/tmphtac_kcq\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Fetched 107 kB in 1s (175 kB/s)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Processing /tmp/tmphtac_kcq/setuptools-58.1.0-py3-none-any.whl\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Processing /tmp/tmphtac_kcq/pip-23.0.1-py3-none-any.whl\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Selecting previously unselected package ninja-build.\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | (Reading database ... \r(Reading database ... 5%\r(Reading database ... 10%\r(Reading database ... 15%\r(Reading database ... 20%\r(Reading database ... 25%\r(Reading database ... 30%\r(Reading database ... 35%\r(Reading database ... 40%\r(Reading database ... 45%\r(Reading database ... 50%\r(Reading database ... 55%\r(Reading database ... 60%\r(Reading database ... 65%\r(Reading database ... 70%\r(Reading database ... 75%\r(Reading database ... 80%\r(Reading database ... 85%\r(Reading database ... 90%\r(Reading database ... 95%\r(Reading database ... 100%\r(Reading database ... 193678 files and directories currently installed.)\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Preparing to unpack .../ninja-build_1.10.0-1build1_amd64.deb ...\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Unpacking ninja-build (1.10.0-1build1) ...\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Installing collected packages: setuptools, pip\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Setting up ninja-build (1.10.0-1build1) ...\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \u2705  Success - Main Install Ninja\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ] \u2b50 Run Main Install\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ]   \u2705  Success - Post Setup Cygwin\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/6] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Defaulting to user installation because normal site-packages is not writeable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Processing /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   DEPRECATION: A future pip version will change local packages to be built in-place without first copying to a temporary directory. We recommend you use --use-feature=in-tree-build to test your packages with this new behavior before it becomes the default.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |    pip 21.3 will remove support for this functionality. You can find discussion regarding this at https://github.com/pypa/pip/issues/7555.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Installing build dependencies: started\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | Execute installation script\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | Check if Python hostedtoolcache folder exist...\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | Create Python 3.11.4 folder\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | Copy Python binaries to hostedtoolcache folder\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Successfully installed pip-23.0.1 setuptools-58.1.0\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | [command]/opt/hostedtoolcache/PyPy/3.9.17/x64/bin/python -m pip install --ignore-installed pip\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | Create additional symlinks (Required for the UsePythonVersion Azure Pipelines task and the setup-python GitHub Action)\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | Upgrading pip...\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Installing build dependencies: finished with status 'done'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Getting requirements to build wheel: started\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Getting requirements to build wheel: finished with status 'done'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     Preparing wheel metadata: started\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Collecting pip\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Processing /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   DEPRECATION: A future pip version will change local packages to be built in-place without first copying to a temporary directory. We recommend you use --use-feature=in-tree-build to test your packages with this new behavior before it becomes the default.\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |    pip 21.3 will remove support for this functionality. You can find discussion regarding this at https://github.com/pypa/pip/issues/7555.\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | \u001b[?25l     \u001b[90m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u001b[0m \u001b[32m0.0/2.1 MB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[91m\u2501\u2501\u2501\u2501\u2501\u001b[0m\u001b[91m\u2578\u001b[0m\u001b[90m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u001b[0m \u001b[32m0.3/2.1 MB\u001b[0m \u001b[31m8.1 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[91m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u001b[0m\u001b[91m\u2578\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m23.4 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[90m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m16.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     Preparing wheel metadata: finished with status 'done'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Collecting meson>=0.63.3\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | \u001b[?25hInstalling collected packages: pip\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Using cached meson-1.1.1-py3-none-any.whl (918 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Installing build dependencies: started\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Collecting pyproject-metadata>=0.7.1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Using cached pyproject_metadata-0.7.1-py3-none-any.whl (7.4 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Collecting tomli>=1.0.0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Using cached tomli-2.0.1-py3-none-any.whl (12 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Collecting pytest-cov[toml]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Downloading pytest_cov-4.1.0-py3-none-any.whl (21 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Collecting auditwheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Downloading auditwheel-5.4.0-py3-none-any.whl (53 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Collecting wheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Downloading wheel-0.40.0-py3-none-any.whl (64 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Collecting pytest-mock\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Downloading pytest_mock-3.11.1-py3-none-any.whl (9.6 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Collecting pytest>=6.0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Collecting typing-extensions>=3.7.4\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Downloading typing_extensions-4.7.0-py3-none-any.whl (33 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Collecting build\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Downloading build-0.10.0-py3-none-any.whl (17 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Collecting cython>=0.29.34\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Downloading Cython-0.29.35-py2.py3-none-any.whl (988 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Collecting packaging>=19.0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Using cached packaging-23.1-py3-none-any.whl (48 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Collecting pluggy<2.0,>=0.12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Collecting iniconfig\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Collecting exceptiongroup>=1.0.0rc8\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Collecting pyelftools>=0.24\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Downloading pyelftools-0.29-py2.py3-none-any.whl (174 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Collecting pyproject_hooks\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Downloading pyproject_hooks-1.0.0-py3-none-any.whl (9.3 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | WARNING: pytest-cov 4.1.0 does not provide the extra 'toml'\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | Looking in links: /tmp/tmp9__5yeou\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages (65.5.0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages (23.1.2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Collecting coverage[toml]>=5.2.1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Downloading coverage-7.2.7.tar.gz (762 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Installing build dependencies: started\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Installing build dependencies: finished with status 'done'\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Getting requirements to build wheel: started\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Getting requirements to build wheel: finished with status 'done'\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |     Preparing wheel metadata: started\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Successfully installed pip-23.1.2\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | \u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m23.1.2\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | \u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49m/opt/hostedtoolcache/PyPy/3.9.17/x64/bin/python -m pip install --upgrade pip\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Successfully set up PyPy 7.3.12 with Python (3.9.17)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \u2753  ::endgroup::\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \u2705  Success - Main Set up target Python\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/PyPy/3.9.17/x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/PyPy/3.9.17/x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/PyPy/3.9.17/x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/PyPy/3.9.17/x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/PyPy/3.9.17/x64/bin/lib/pkgconfig\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \u2699  ::set-output:: python-version=pypy7.3.12\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/PyPy/3.9.17/x64/bin/python\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \u2699  ::add-path:: /opt/hostedtoolcache/PyPy/3.9.17/x64/bin\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \u2699  ::add-path:: /opt/hostedtoolcache/PyPy/3.9.17/x64/bin\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ] \u2b50 Run Main Install Ninja\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |     Preparing wheel metadata: finished with status 'done'\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Collecting meson>=0.63.3\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Using cached meson-1.1.1-py3-none-any.whl (918 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | Collecting pip\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | \u001b[?25l\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | 0.0/2.1 MB ? eta -:--:--\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Collecting pyproject-metadata>=0.7.1\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Using cached pyproject_metadata-0.7.1-py3-none-any.whl (7.4 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | \u001b[2K     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578                    1.1/2.1 MB 33.0 MB/s eta 0:00:01\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | \u001b[2K     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578 2.1/2.1 MB 33.9 MB/s eta 0:00:01\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | \u001b[2K     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 2.1/2.1 MB 26.6 MB/s eta 0:00:00\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | \u001b[?25h\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Collecting tomli>=1.0.0\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Using cached tomli-2.0.1-py3-none-any.whl (12 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | Installing collected packages: pip\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Collecting auditwheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Downloading auditwheel-5.4.0-py3-none-any.whl (53 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Installing build dependencies: finished with status 'done'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Getting requirements to build wheel: started\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Collecting pytest-mock\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Downloading pytest_mock-3.11.1-py3-none-any.whl (9.6 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Collecting typing-extensions>=3.7.4\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Downloading typing_extensions-4.7.0-py3-none-any.whl (33 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Collecting build\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Downloading build-0.10.0-py3-none-any.whl (17 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Getting requirements to build wheel: finished with status 'done'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Installing backend dependencies: started\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Collecting cython>=0.29.34\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Downloading Cython-0.29.35-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl (1.9 MB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Collecting pytest>=6.0\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Collecting wheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Downloading wheel-0.40.0-py3-none-any.whl (64 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Collecting pytest-cov[toml]\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Downloading pytest_cov-4.1.0-py3-none-any.whl (21 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Collecting packaging>=19.0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Installing backend dependencies: finished with status 'done'\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Using cached packaging-23.1-py3-none-any.whl (48 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     Preparing wheel metadata: started\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Collecting pluggy<2.0,>=0.12\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     Preparing wheel metadata: finished with status 'done'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Building wheels for collected packages: meson-python, coverage\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Building wheel for meson-python (PEP 517): started\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Building wheel for meson-python (PEP 517): finished with status 'done'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Created wheel for meson-python: filename=meson_python-0.14.0.dev0-py3-none-any.whl size=79428 sha256=c3a9163344925260ceff32285f0f4277029063aa11ef093b25be2ce26abe8fb0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/79/58/79/fab1729107a2b10b3546d482b3f60be097b1460c7e837b636d\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Building wheel for coverage (PEP 517): started\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Collecting importlib-metadata>=0.12\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Downloading importlib_metadata-6.7.0-py3-none-any.whl (22 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Collecting exceptiongroup>=1.0.0rc8\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Collecting iniconfig\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/cygwin  ] \ud83c\udfc1  Job failed\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Collecting zipp>=0.5\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | Successfully installed pip-23.1.2\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Collecting pyelftools>=0.24\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Downloading pyelftools-0.29-py2.py3-none-any.whl (174 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | Create complete file\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::isExplicit: \n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::explicit? false\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::isExplicit: 3.11.4\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::explicit? true\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::evaluating 7 versions\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::matched: 3.11.4\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.11.4/x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udcac  ::debug::Found tool in cache Python 3.11.4 x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | Successfully set up CPython (3.11.4)\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \u2753  ::endgroup::\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \u2705  Success - Main Set up target Python\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Collecting pyproject_hooks\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Downloading pyproject_hooks-1.0.0-py3-none-any.whl (9.3 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.11.4/x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.11.4/x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.11.4/x64/lib\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.11.4/x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.11.4/x64/lib/pkgconfig\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.11.4/x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | WARNING: pytest-cov 4.1.0 does not provide the extra 'toml'\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \u2699  ::set-output:: python-version=3.11.4\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.11.4/x64/bin/python\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.11.4/x64\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.11.4/x64/bin\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Building wheel for coverage (PEP 517): finished with status 'done'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Created wheel for coverage: filename=coverage-7.2.7-pyston38-pyston_23_x86_64_linux_gnu-linux_x86_64.whl size=237729 sha256=37734a2c672ad2a9c50d4dc513dfd5e9130e19565eea519ca0d117899baa5533\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/3e/e0/cd/85e339285195197048a299b9ca3bae90b37b9609c57387eb33\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Successfully built meson-python coverage\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ] \u2b50 Run Main Install Ninja\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Installing collected packages: tomli, pluggy, packaging, iniconfig, exceptiongroup, coverage, pytest, pytest-cov, pyproject-metadata, pyproject-hooks, pyelftools, meson, wheel, typing-extensions, pytest-mock, meson-python, cython, build, auditwheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   WARNING: The scripts coverage, coverage-3.8 and coverage3 are installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Collecting coverage[toml]>=5.2.1\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Downloading coverage-7.2.7-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (225 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   WARNING: The scripts py.test and pytest are installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Building wheels for collected packages: meson-python\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Building wheel for meson-python (PEP 517): started\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Building wheel for meson-python (PEP 517): finished with status 'done'\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Created wheel for meson-python: filename=meson_python-0.14.0.dev0-py3-none-any.whl size=79428 sha256=9f141f7b983d9bcec4100e5521f55137c05f68952232fe6ace9e7c351d7007c7\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/a0/d4/0f/f4ddeb69677676f7da6a4e28c19d0c4fc318c657b141a65a71\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Successfully built meson-python\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Installing collected packages: zipp, typing-extensions, importlib-metadata, tomli, pluggy, packaging, iniconfig, exceptiongroup, coverage, pytest, pytest-cov, pyproject-metadata, pyproject-hooks, pyelftools, meson, wheel, pytest-mock, meson-python, cython, build, auditwheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   WARNING: The script meson is installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   WARNING: The script wheel is installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   WARNING: The scripts cygdb, cython and cythonize are installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   WARNING: The script pyproject-build is installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   WARNING: The script auditwheel is installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Successfully installed auditwheel-5.4.0 build-0.10.0 coverage-7.2.7 cython-0.29.35 exceptiongroup-1.1.1 iniconfig-2.0.0 meson-1.1.1 meson-python-0.14.0.dev0 packaging-23.1 pluggy-1.2.0 pyelftools-0.29 pyproject-hooks-1.0.0 pyproject-metadata-0.7.1 pytest-7.4.0 pytest-cov-4.1.0 pytest-mock-3.11.1 tomli-2.0.1 typing-extensions-4.7.0 wheel-0.40.0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   \u2705  Success - Main Install\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ] \u2b50 Run Main Run tests\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Successfully installed auditwheel-5.4.0 build-0.10.0 coverage-7.2.7 cython-0.29.35 exceptiongroup-1.1.1 importlib-metadata-6.7.0 iniconfig-2.0.0 meson-1.1.1 meson-python-0.14.0.dev0 packaging-23.1 pluggy-1.2.0 pyelftools-0.29 pyproject-hooks-1.0.0 pyproject-metadata-0.7.1 pytest-7.4.0 pytest-cov-4.1.0 pytest-mock-3.11.1 tomli-2.0.1 typing-extensions-4.7.0 wheel-0.40.0 zipp-3.15.0\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \u2705  Success - Main Install\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ] \u2b50 Run Main Run tests\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/7] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m============================= test session starts ==============================\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | platform linux -- Python 3.8.12, pytest-7.4.0, pluggy-1.2.0 -- /usr/bin/pyston\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cachedir: .pytest_cache\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | rootdir: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | configfile: pyproject.toml\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | testpaths: tests\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | plugins: mock-3.11.1, cov-4.1.0\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | Collecting ninja\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   |   Downloading ninja-1.11.1-py2.py3-none-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (145 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | \u001b[?25l                                              0.0/146.0 kB ? eta -:--:--\r\u001b[2K     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 146.0/146.0 kB 18.0 MB/s eta 0:00:00\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[1m============================= test session starts ==============================\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | platform linux -- Python 3.7.11, pytest-7.4.0, pluggy-1.2.0 -- /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | cachedir: .pytest_cache\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | rootdir: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | configfile: pyproject.toml\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | testpaths: tests\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | plugins: mock-3.11.1, cov-4.1.0\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | \u001b[?25hInstalling collected packages: ninja\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | Successfully installed ninja-1.11.1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1mcollecting ... \u001b[0mcollected 90 items\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_consistency.py::test_pyproject_dependencies \u001b[32mPASSED\u001b[0m\u001b[32m            [  1%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_editable.py::test_walk \u001b[32mPASSED\u001b[0m\u001b[32m                                 [  2%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_editable.py::test_nodes_tree \u001b[32mPASSED\u001b[0m\u001b[32m                           [  3%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_editable.py::test_collect \u001b[32mPASSED\u001b[0m\u001b[32m                              [  4%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \u2705  Success - Main Install Ninja\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_editable.py::test_mesonpy_meta_finder \u001b[31mFAILED\u001b[0m\u001b[31m                  [  5%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_editable.py::test_mesonpy_traversable \u001b[32mPASSED\u001b[0m\u001b[31m                  [  6%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Reading package lists...\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_editable.py::test_resources \u001b[31mFAILED\u001b[0m\u001b[31m                            [  7%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_editable.py::test_importlib_resources \u001b[33mSKIPPED\u001b[0m\u001b[31m                 [  8%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Building dependency tree...\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Reading state information...\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | The following NEW packages will be installed:\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   ninja-build\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_editable.py::test_editable_install \u001b[31mERROR\u001b[0m\u001b[31m                      [ 10%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | 0 upgraded, 1 newly installed, 0 to remove and 20 not upgraded.\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Need to get 107 kB of archives.\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | After this operation, 338 kB of additional disk space will be used.\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Get:1 http://archive.ubuntu.com/ubuntu focal/universe amd64 ninja-build amd64 1.10.0-1build1 [107 kB]\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[1mcollecting ... \u001b[0mcollected 90 items\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_consistency.py::test_pyproject_dependencies \u001b[32mPASSED\u001b[0m\u001b[32m            [  1%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_editable.py::test_walk \u001b[32mPASSED\u001b[0m\u001b[32m                                 [  2%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_editable.py::test_nodes_tree \u001b[32mPASSED\u001b[0m\u001b[32m                           [  3%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_editable.py::test_collect \u001b[32mPASSED\u001b[0m\u001b[32m                              [  4%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_editable.py::test_editble_reentrant \u001b[31mERROR\u001b[0m\u001b[31m                     [ 11%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ] \u2b50 Run Main Setup MSVC\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udc33  docker cp src=/tmp/act-cache/4a98e3ae-ec7d-48d6-a6c8-5b143f8881e7/act/bus1-cabuild-action-msdevshell@e22aba57d6e74891d059d66501b6b5aed8123c4d/ dst=/var/run/act/actions/bus1-cabuild-action-msdevshell@e22aba57d6e74891d059d66501b6b5aed8123c4d/\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/bus1-cabuild-action-msdevshell@e22aba57d6e74891d059d66501b6b5aed8123c4d/] user=0 workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Fetched 107 kB in 1s (172 kB/s)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Selecting previously unselected package ninja-build.\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | (Reading database ... \r(Reading database ... 5%\r(Reading database ... 10%\r(Reading database ... 15%\r(Reading database ... 20%\r(Reading database ... 25%\r(Reading database ... 30%\r(Reading database ... 35%\r(Reading database ... 40%\r(Reading database ... 45%\r(Reading database ... 50%\r(Reading database ... 55%\r(Reading database ... 60%\r(Reading database ... 65%\r(Reading database ... 70%\r(Reading database ... 75%\r(Reading database ... 80%\r(Reading database ... 85%\r(Reading database ... 90%\r(Reading database ... 95%\r(Reading database ... 100%\r(Reading database ... 193678 files and directories currently installed.)\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Preparing to unpack .../ninja-build_1.10.0-1build1_amd64.deb ...\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Unpacking ninja-build (1.10.0-1build1) ...\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Setting up ninja-build (1.10.0-1build1) ...\r\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \u2705  Success - Main Install Ninja\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ] \u2b50 Run Main Install\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/6] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_editable.py::test_mesonpy_meta_finder \u001b[32mPASSED\u001b[0m\u001b[32m                  [  5%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_editable.py::test_mesonpy_traversable \u001b[32mPASSED\u001b[0m\u001b[32m                  [  6%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_examples.py::test_spam \u001b[31mFAILED\u001b[0m\u001b[31m                                 [ 12%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_metadata.py::test_no_pep621 \u001b[31mERROR\u001b[0m\u001b[31m                             [ 13%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_metadata.py::test_pep621 \u001b[31mERROR\u001b[0m\u001b[31m                                [ 14%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_metadata.py::test_dynamic_version \u001b[31mERROR\u001b[0m\u001b[31m                       [ 15%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_output.py::test_colors[False-env0-False] \u001b[32mPASSED\u001b[0m\u001b[31m               [ 16%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_output.py::test_colors[True-env1-True] \u001b[32mPASSED\u001b[0m\u001b[31m                 [ 17%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_output.py::test_colors[False-env2-False] \u001b[32mPASSED\u001b[0m\u001b[31m               [ 18%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_output.py::test_colors[True-env3-False] \u001b[32mPASSED\u001b[0m\u001b[31m                [ 20%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_output.py::test_colors[False-env4-True] \u001b[32mPASSED\u001b[0m\u001b[31m                [ 21%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_output.py::test_colors[True-env5-True] \u001b[32mPASSED\u001b[0m\u001b[31m                 [ 22%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_output.py::test_colors_conflict \u001b[32mPASSED\u001b[0m\u001b[31m                        [ 23%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[noninja-patchelf-pure] \u001b[32mPASSED\u001b[0m\u001b[31m [ 24%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[noninja-patchelf-library] \u001b[32mPASSED\u001b[0m\u001b[31m [ 25%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[noninja-nopatchelf-pure] \u001b[32mPASSED\u001b[0m\u001b[31m [ 26%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[noninja-nopatchelf-library] \u001b[32mPASSED\u001b[0m\u001b[31m [ 27%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[oldninja-patchelf-pure] \u001b[32mPASSED\u001b[0m\u001b[31m [ 28%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[oldninja-patchelf-library] \u001b[32mPASSED\u001b[0m\u001b[31m [ 30%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[oldninja-nopatchelf-pure] \u001b[32mPASSED\u001b[0m\u001b[31m [ 31%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[oldninja-nopatchelf-library] \u001b[32mPASSED\u001b[0m\u001b[31m [ 32%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[newninja-patchelf-pure] \u001b[32mPASSED\u001b[0m\u001b[31m [ 33%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[newninja-patchelf-library] \u001b[32mPASSED\u001b[0m\u001b[31m [ 34%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_editable.py::test_resources \u001b[32mPASSED\u001b[0m\u001b[32m                            [  7%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_editable.py::test_importlib_resources \u001b[33mSKIPPED\u001b[0m\u001b[32m                 [  8%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[newninja-nopatchelf-pure] \u001b[31mFAILED\u001b[0m\u001b[31m [ 35%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[newninja-nopatchelf-library] \u001b[31mFAILED\u001b[0m\u001b[31m [ 36%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_pep517.py::test_invalid_config_settings \u001b[32mPASSED\u001b[0m\u001b[31m                [ 37%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_pep517.py::test_invalid_config_settings_suggest \u001b[32mPASSED\u001b[0m\u001b[31m        [ 38%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_pep517.py::test_validate_config_settings_invalid \u001b[32mPASSED\u001b[0m\u001b[31m       [ 40%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_pep517.py::test_validate_config_settings_repeated \u001b[32mPASSED\u001b[0m\u001b[31m      [ 41%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_pep517.py::test_validate_config_settings_str \u001b[32mPASSED\u001b[0m\u001b[31m           [ 42%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_pep517.py::test_validate_config_settings_list \u001b[32mPASSED\u001b[0m\u001b[31m          [ 43%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_pep517.py::test_validate_config_settings_tuple \u001b[32mPASSED\u001b[0m\u001b[31m         [ 44%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_pep518.py::test_pep518[sdist_to_wheel-purelib-and-platlib] \u001b[31mERROR\u001b[0m\u001b[31m [ 45%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_pep518.py::test_pep518[wheel_directly-purelib-and-platlib] \u001b[31mERROR\u001b[0m\u001b[31m [ 46%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_project.py::test_name[library] \u001b[31mFAILED\u001b[0m\u001b[31m                         [ 47%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_project.py::test_name[library-pep621] \u001b[31mFAILED\u001b[0m\u001b[31m                  [ 48%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_project.py::test_version[library] \u001b[31mFAILED\u001b[0m\u001b[31m                      [ 50%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_project.py::test_version[library-pep621] \u001b[31mFAILED\u001b[0m\u001b[31m               [ 51%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_project.py::test_unsupported_dynamic \u001b[31mFAILED\u001b[0m\u001b[31m                   [ 52%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_project.py::test_unsupported_python_version \u001b[31mFAILED\u001b[0m\u001b[31m            [ 53%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_project.py::test_user_args \u001b[31mFAILED\u001b[0m\u001b[31m                             [ 54%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_project.py::test_unknown_user_args[top-level] \u001b[31mFAILED\u001b[0m\u001b[31m          [ 55%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_project.py::test_unknown_user_args[meson-args] \u001b[31mFAILED\u001b[0m\u001b[31m         [ 56%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_project.py::test_install_tags \u001b[31mFAILED\u001b[0m\u001b[31m                          [ 57%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_project.py::test_validate_pyproject_config_one \u001b[32mPASSED\u001b[0m\u001b[31m         [ 58%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_project.py::test_validate_pyproject_config_all \u001b[32mPASSED\u001b[0m\u001b[31m         [ 60%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_project.py::test_validate_pyproject_config_unknown \u001b[32mPASSED\u001b[0m\u001b[31m     [ 61%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_project.py::test_validate_pyproject_config_empty \u001b[32mPASSED\u001b[0m\u001b[31m       [ 62%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_project.py::test_invalid_build_dir \u001b[31mFAILED\u001b[0m\u001b[31m                     [ 63%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_project.py::test_compiler \u001b[33mSKIPPED\u001b[0m (Requires MSVC)\u001b[31m             [ 64%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_sdist.py::test_contents \u001b[31mERROR\u001b[0m\u001b[31m                                 [ 65%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_sdist.py::test_contents_subdirs \u001b[31mERROR\u001b[0m\u001b[31m                         [ 66%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_sdist.py::test_contents_unstaged \u001b[31mFAILED\u001b[0m\u001b[31m                       [ 67%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_sdist.py::test_executable_bit \u001b[31mERROR\u001b[0m\u001b[31m                           [ 68%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_editable.py::test_editable_install \u001b[32mPASSED\u001b[0m\u001b[32m                     [ 10%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_sdist.py::test_generated_files \u001b[31mERROR\u001b[0m\u001b[31m                          [ 70%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_tags.py::test_wheel_tag \u001b[32mPASSED\u001b[0m\u001b[31m                                [ 71%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_tags.py::test_macos_platform_tag \u001b[33mSKIPPED\u001b[0m (macOS specific\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | test)\u001b[31m                                                                    [ 72%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_tags.py::test_python_host_platform \u001b[33mSKIPPED\u001b[0m (macOS specific\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | test)\u001b[31m                                                                    [ 73%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_tags.py::test_tag_empty_wheel \u001b[32mPASSED\u001b[0m\u001b[31m                          [ 74%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_tags.py::test_tag_purelib_wheel \u001b[32mPASSED\u001b[0m\u001b[31m                        [ 75%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_tags.py::test_tag_platlib_wheel \u001b[32mPASSED\u001b[0m\u001b[31m                        [ 76%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_tags.py::test_tag_stable_abi \u001b[32mPASSED\u001b[0m\u001b[31m                           [ 77%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_tags.py::test_tag_mixed_abi \u001b[32mPASSED\u001b[0m\u001b[31m                            [ 78%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_wheel.py::test_scipy_like \u001b[31mERROR\u001b[0m\u001b[31m                               [ 80%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_wheel.py::test_contents \u001b[31mERROR\u001b[0m\u001b[31m                                 [ 81%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_wheel.py::test_purelib_and_platlib \u001b[31mERROR\u001b[0m\u001b[31m                      [ 82%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_wheel.py::test_pure \u001b[31mERROR\u001b[0m\u001b[31m                                     [ 83%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ] \u2b50 Run Main Source Microsoft Visual Studio DevShell Environment\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udc33  docker exec cmd=[pwsh -command . /var/run/act/workflow/3-composite-0.ps1] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_wheel.py::test_configure_data \u001b[31mERROR\u001b[0m\u001b[31m                           [ 84%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_wheel.py::test_local_lib \u001b[31mERROR\u001b[0m\u001b[31m                                [ 85%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_wheel.py::test_contents_license_file \u001b[31mERROR\u001b[0m\u001b[31m                    [ 86%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_wheel.py::test_executable_bit \u001b[31mERROR\u001b[0m\u001b[31m                           [ 87%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_wheel.py::test_detect_wheel_tag_module \u001b[31mERROR\u001b[0m\u001b[31m                  [ 88%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_wheel.py::test_detect_wheel_tag_script \u001b[31mERROR\u001b[0m\u001b[31m                  [ 90%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_wheel.py::test_rpath \u001b[31mERROR\u001b[0m\u001b[31m                                    [ 91%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_wheel.py::test_uneeded_rpath \u001b[31mERROR\u001b[0m\u001b[31m                            [ 92%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_wheel.py::test_entrypoints \u001b[31mERROR\u001b[0m\u001b[31m                              [ 93%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_wheel.py::test_top_level_modules \u001b[31mFAILED\u001b[0m\u001b[31m                       [ 94%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_wheel.py::test_purelib_platlib_split \u001b[31mFAILED\u001b[0m\u001b[31m                   [ 95%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_wheel.py::test_archflags_envvar[x86_64] \u001b[33mSKIPPED\u001b[0m (macOS\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | specific test)\u001b[31m                                                           [ 96%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_wheel.py::test_archflags_envvar[arm64] \u001b[33mSKIPPED\u001b[0m (macOS\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | specific test)\u001b[31m                                                           [ 97%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_wheelfile.py::test_basic \u001b[32mPASSED\u001b[0m\u001b[31m                               [ 98%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tests/test_wheelfile.py::test_source_date_epoch \u001b[32mPASSED\u001b[0m\u001b[31m                   [100%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ==================================== ERRORS ====================================\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m___________________ ERROR at setup of test_editable_install ____________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def fixture(tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shutil.rmtree(package_dir / package / '.mesonpy' / 'editable', ignore_errors=True)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package), in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           return tmp_path_session / mesonpy.build_editable(tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'simple'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:136: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8'),)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_editable at 0x41295820>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1134: in build_editable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         builddir   = PosixPath('build')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = {'builddir': 'build/pyston_23_x86_64_linux_gnu'}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         metadata_directory = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         wheel_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41bdbca0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = {'builddir': 'build/pyston_23_x86_64_linux_gnu'}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {'builddir': 'build/pyston_23_x86_64_linux_gnu'}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41bdbdc0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = 'build/pyston_23_x86_64_linux_gnu'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-eh7i0k5m'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = 'build/pyston_23_x86_64_linux_gnu'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x41bdbd60>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-eh7i0k5m'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x4048cdf0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x4048cdf0>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 220\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x4048cdf0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ---------------------------- Captured stdout setup -----------------------------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Initialized empty Git repository in /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/simple/.git/\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m___________________ ERROR at setup of test_editble_reentrant ___________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def fixture(tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shutil.rmtree(package_dir / package / '.mesonpy' / 'editable', ignore_errors=True)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package), in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           return tmp_path_session / mesonpy.build_editable(tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'imports-itself-during-build'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:136: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8'),)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_editable at 0x41295820>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1134: in build_editable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         builddir   = PosixPath('build')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = {'builddir': 'build/pyston_23_x86_64_linux_gnu'}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         metadata_directory = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         wheel_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x40605880>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = {'builddir': 'build/pyston_23_x86_64_linux_gnu'}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {'builddir': 'build/pyston_23_x86_64_linux_gnu'}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x40605550>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = 'build/pyston_23_x86_64_linux_gnu'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-vb_sl1e2'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = 'build/pyston_23_x86_64_linux_gnu'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x40605610>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-vb_sl1e2'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x406057c0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x406057c0>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 227\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x406057c0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ---------------------------- Captured stdout setup -----------------------------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Initialized empty Git repository in /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/imports-itself-during-build/.git/\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_no_pep621 _______________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def fixture(tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package), in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           return tmp_path_session / mesonpy.build_sdist(tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'library'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:119: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8'),)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_sdist at 0x412954c0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1072: in build_sdist\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sdist_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41c1ea30>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41c1e7c0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-vwe55ptp'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x41c1e910>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-vwe55ptp'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x41c1eaf0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x41c1eaf0>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 241\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x41c1eaf0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ---------------------------- Captured stdout setup -----------------------------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Initialized empty Git repository in /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/library/.git/\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m________________________ ERROR at setup of test_pep621 _________________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def fixture(tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package), in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           return tmp_path_session / mesonpy.build_sdist(tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'full-metadata'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:119: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8'),)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_sdist at 0x412954c0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1072: in build_sdist\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sdist_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x4074f160>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x4074f040>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-vz_cvr_a'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x4074f070>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-vz_cvr_a'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x40874310>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x40874310>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 248\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x40874310>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ---------------------------- Captured stdout setup -----------------------------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Initialized empty Git repository in /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/full-metadata/.git/\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_dynamic_version ____________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def fixture(tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package), in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           return tmp_path_session / mesonpy.build_sdist(tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'dynamic-version'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:119: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8'),)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_sdist at 0x412954c0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1072: in build_sdist\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sdist_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41db89d0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41db87f0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-fd_j476o'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x41db87c0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-fd_j476o'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x41db89a0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x41db89a0>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 255\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x41db89a0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ---------------------------- Captured stdout setup -----------------------------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Initialized empty Git repository in /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/dynamic-version/.git/\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m______ ERROR at setup of test_pep518[sdist_to_wheel-purelib-and-platlib] _______\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x41873df0>, _basetemp=PosixPath('/tmp/pytest-of-runneradmin/pytest-0'), _retention_count=3, _retention_policy='all')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def pep518_wheelhouse(tmp_path_factory):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         wheelhouse = os.fspath(tmp_path_factory.mktemp('wheelhouse'))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_python = os.fspath(package_dir.parent.parent)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Populate wheelhouse with wheel for the following packages and\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # their dependencies.  Wheels are downloaded from PyPI or built\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # from the source distribution as needed.  Sources or wheels in\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # the pip cache are used when available.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         packages = [\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             meson_python,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         ]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cmd = [sys.executable, '-m', 'pip', 'wheel', '--no-build-isolation', '--wheel-dir', wheelhouse, *packages]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >       subprocess.run(cmd, check=True)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cmd        = ['/usr/bin/pyston',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  '-m',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'pip',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'wheel',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  '--no-build-isolation',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  '--wheel-dir',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  '/tmp/pytest-of-runneradmin/pytest-0/wheelhouse0',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | meson_python = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | packages   = ['/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x41873df0>, _basetemp=PosixPath('/tmp/pytest-of-runneradmin/pytest-0'), _retention_count=3, _retention_policy='all')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | wheelhouse = '/tmp/pytest-of-runneradmin/pytest-0/wheelhouse0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:169: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | input = None, capture_output = False, timeout = None, check = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | popenargs = (['/usr/bin/pyston', '-m', 'pip', 'wheel', '--no-build-isolation', '--wheel-dir', ...],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | kwargs = {}, process = <subprocess.Popen object at 0x41bffb20>, stdout = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | stderr = None, retcode = 1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def run(*popenargs,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         The returned instance will have attributes args, returncode, stdout and\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         If check is True and the exit code was non-zero, it raises a\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         CalledProcessError. The CalledProcessError object will have the return code\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         in the returncode attribute, and output & stderr attributes if those streams\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         were captured.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         exception will be raised.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         There is an optional argument \"input\", allowing you to\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         it will be used internally.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         The other arguments are the same as for the Popen constructor.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if input is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if kwargs.get('stdin') is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             kwargs['stdin'] = PIPE\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if capture_output:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  'with capture_output.')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             kwargs['stdout'] = PIPE\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             kwargs['stderr'] = PIPE\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except TimeoutExpired as exc:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 process.kill()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if _mswindows:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # Windows accumulates the output in a single blocking\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # read() call run on child threads, with the timeout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # being done in a join() on those threads.  communicate()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # _after_ kill() is required to collect that and add it\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # to the exception.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     exc.stdout, exc.stderr = process.communicate()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # POSIX _communicate already populated the output so\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # far into the TimeoutExpired exception.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     process.wait()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 process.kill()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             retcode = process.poll()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if check and retcode:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise CalledProcessError(retcode, process.args,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                          output=stdout, stderr=stderr)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['/usr/bin/pyston', '-m', 'pip', 'wheel', '--no-build-isolation', '--wheel-dir', '/tmp/pytest-of-runneradmin/pytest-0/wheelhouse0', '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python']' returned non-zero exit status 1.\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | capture_output = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | check      = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | popenargs  = (['/usr/bin/pyston',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   '-m',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   'pip',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   'wheel',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   '--no-build-isolation',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   '--wheel-dir',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   '/tmp/pytest-of-runneradmin/pytest-0/wheelhouse0',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | process    = <subprocess.Popen object at 0x41bffb20>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | retcode    = 1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | stderr     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | stdout     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:516: CalledProcessError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ---------------------------- Captured stdout setup -----------------------------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Processing /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     Preparing wheel metadata: started\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     Preparing wheel metadata: finished with status 'error'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ---------------------------- Captured stderr setup -----------------------------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   DEPRECATION: A future pip version will change local packages to be built in-place without first copying to a temporary directory. We recommend you use --use-feature=in-tree-build to test your packages with this new behavior before it becomes the default.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |    pip 21.3 will remove support for this functionality. You can find discussion regarding this at https://github.com/pypa/pip/issues/7555.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     ERROR: Command errored out with exit status 1:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |      command: /usr/bin/pyston /usr/lib/python3.8-pyston2.3/site-packages/pip/_vendor/pep517/in_process/_in_process.py prepare_metadata_for_build_wheel /tmp/tmp1a9ai96m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |          cwd: /tmp/pip-req-build-kay8bo55\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     Complete output (39 lines):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     Traceback (most recent call last):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |       File \"/usr/lib/python3.8-pyston2.3/site-packages/pip/_vendor/pep517/in_process/_in_process.py\", line 126, in prepare_metadata_for_build_wheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         hook = backend.prepare_metadata_for_build_wheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     AttributeError: module 'mesonpy' has no attribute 'prepare_metadata_for_build_wheel'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     During handling of the above exception, another exception occurred:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     Traceback (most recent call last):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |       File \"/usr/lib/python3.8-pyston2.3/site-packages/pip/_vendor/pep517/in_process/_in_process.py\", line 280, in <module>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         main()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |       File \"/usr/lib/python3.8-pyston2.3/site-packages/pip/_vendor/pep517/in_process/_in_process.py\", line 263, in main\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         json_out['return_val'] = hook(**hook_input['kwargs'])\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |       File \"/usr/lib/python3.8-pyston2.3/site-packages/pip/_vendor/pep517/in_process/_in_process.py\", line 130, in prepare_metadata_for_build_wheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         return _get_wheel_metadata_from_wheel(backend, metadata_directory,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |       File \"/usr/lib/python3.8-pyston2.3/site-packages/pip/_vendor/pep517/in_process/_in_process.py\", line 159, in _get_wheel_metadata_from_wheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         whl_basename = backend.build_wheel(metadata_directory, config_settings)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |       File \"/tmp/pip-req-build-kay8bo55/mesonpy/__init__.py\", line 1047, in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |       File \"/tmp/pip-req-build-kay8bo55/mesonpy/__init__.py\", line 1111, in build_wheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |       File \"/usr/lib/python3.8-pyston2.3/contextlib.py\", line 113, in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |       File \"/tmp/pip-req-build-kay8bo55/mesonpy/__init__.py\", line 985, in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |       File \"/usr/lib/python3.8-pyston2.3/contextlib.py\", line 113, in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |       File \"/tmp/pip-req-build-kay8bo55/mesonpy/__init__.py\", line 831, in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |       File \"/tmp/pip-req-build-kay8bo55/mesonpy/__init__.py\", line 652, in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |       File \"/tmp/pip-req-build-kay8bo55/mesonpy/__init__.py\", line 1026, in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |       File \"/usr/lib/python3.8-pyston2.3/subprocess.py\", line 493, in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |       File \"/usr/lib/python3.8-pyston2.3/subprocess.py\", line 858, in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |       File \"/usr/lib/python3.8-pyston2.3/subprocess.py\", line 1704, in _execute_child\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     ----------------------------------------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | WARNING: Discarding file:///tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python. Command errored out with exit status 1: /usr/bin/pyston /usr/lib/python3.8-pyston2.3/site-packages/pip/_vendor/pep517/in_process/_in_process.py prepare_metadata_for_build_wheel /tmp/tmp1a9ai96m Check the logs for full command output.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ERROR: Command errored out with exit status 1: /usr/bin/pyston /usr/lib/python3.8-pyston2.3/site-packages/pip/_vendor/pep517/in_process/_in_process.py prepare_metadata_for_build_wheel /tmp/tmp1a9ai96m Check the logs for full command output.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m______ ERROR at setup of test_pep518[wheel_directly-purelib-and-platlib] _______\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x41873df0>, _basetemp=PosixPath('/tmp/pytest-of-runneradmin/pytest-0'), _retention_count=3, _retention_policy='all')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def pep518_wheelhouse(tmp_path_factory):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         wheelhouse = os.fspath(tmp_path_factory.mktemp('wheelhouse'))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_python = os.fspath(package_dir.parent.parent)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Populate wheelhouse with wheel for the following packages and\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # their dependencies.  Wheels are downloaded from PyPI or built\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # from the source distribution as needed.  Sources or wheels in\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # the pip cache are used when available.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         packages = [\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             meson_python,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         ]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cmd = [sys.executable, '-m', 'pip', 'wheel', '--no-build-isolation', '--wheel-dir', wheelhouse, *packages]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >       subprocess.run(cmd, check=True)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cmd        = ['/usr/bin/pyston',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  '-m',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'pip',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'wheel',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  '--no-build-isolation',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  '--wheel-dir',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  '/tmp/pytest-of-runneradmin/pytest-0/wheelhouse0',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | meson_python = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | packages   = ['/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_factory = TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x41873df0>, _basetemp=PosixPath('/tmp/pytest-of-runneradmin/pytest-0'), _retention_count=3, _retention_policy='all')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | wheelhouse = '/tmp/pytest-of-runneradmin/pytest-0/wheelhouse0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:169: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | input = None, capture_output = False, timeout = None, check = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | popenargs = (['/usr/bin/pyston', '-m', 'pip', 'wheel', '--no-build-isolation', '--wheel-dir', ...],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | kwargs = {}, process = <subprocess.Popen object at 0x41bffb20>, stdout = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | stderr = None, retcode = 1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def run(*popenargs,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         The returned instance will have attributes args, returncode, stdout and\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         If check is True and the exit code was non-zero, it raises a\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         CalledProcessError. The CalledProcessError object will have the return code\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         in the returncode attribute, and output & stderr attributes if those streams\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         were captured.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         exception will be raised.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         There is an optional argument \"input\", allowing you to\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         it will be used internally.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         The other arguments are the same as for the Popen constructor.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if input is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if kwargs.get('stdin') is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             kwargs['stdin'] = PIPE\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if capture_output:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  'with capture_output.')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             kwargs['stdout'] = PIPE\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             kwargs['stderr'] = PIPE\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except TimeoutExpired as exc:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 process.kill()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if _mswindows:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # Windows accumulates the output in a single blocking\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # read() call run on child threads, with the timeout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # being done in a join() on those threads.  communicate()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # _after_ kill() is required to collect that and add it\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # to the exception.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     exc.stdout, exc.stderr = process.communicate()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # POSIX _communicate already populated the output so\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # far into the TimeoutExpired exception.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     process.wait()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 process.kill()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             retcode = process.poll()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if check and retcode:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise CalledProcessError(retcode, process.args,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                          output=stdout, stderr=stderr)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['/usr/bin/pyston', '-m', 'pip', 'wheel', '--no-build-isolation', '--wheel-dir', '/tmp/pytest-of-runneradmin/pytest-0/wheelhouse0', '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python']' returned non-zero exit status 1.\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | capture_output = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | check      = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | popenargs  = (['/usr/bin/pyston',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   '-m',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   'pip',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   'wheel',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   '--no-build-isolation',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   '--wheel-dir',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   '/tmp/pytest-of-runneradmin/pytest-0/wheelhouse0',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | process    = <subprocess.Popen object at 0x41bffb20>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | retcode    = 1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | stderr     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | stdout     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:516: CalledProcessError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_contents ________________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def fixture(tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package), in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           return tmp_path_session / mesonpy.build_sdist(tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'library'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:119: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8'),)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_sdist at 0x412954c0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1072: in build_sdist\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sdist_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41c1ea30>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41c1e7c0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-vwe55ptp'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x41c1e910>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-vwe55ptp'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x41c1eaf0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x41c1eaf0>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 241\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x41c1eaf0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m___________________ ERROR at setup of test_contents_subdirs ____________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def fixture(tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package), in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           return tmp_path_session / mesonpy.build_sdist(tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'subdirs'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:119: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8'),)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_sdist at 0x4074c1f0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1072: in build_sdist\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sdist_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41c2e910>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41c2e6d0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-7w9huacx'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x41c2e850>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-7w9huacx'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x41c2e970>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x41c2e970>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 288\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x41c2e970>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ---------------------------- Captured stdout setup -----------------------------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Initialized empty Git repository in /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/subdirs/.git/\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_executable_bit _____________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def fixture(tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package), in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           return tmp_path_session / mesonpy.build_sdist(tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'executable-bit'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:119: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8'),)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_sdist at 0x4074c1f0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1072: in build_sdist\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sdist_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x42260790>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x42260880>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-kz_qubif'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x422608b0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-kz_qubif'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x422605e0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x422605e0>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 302\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x422605e0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ---------------------------- Captured stdout setup -----------------------------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Initialized empty Git repository in /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/executable-bit/.git/\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_generated_files ____________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def fixture(tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package), in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           return tmp_path_session / mesonpy.build_sdist(tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'generated-files'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:119: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8'),)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_sdist at 0x4074c1f0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1072: in build_sdist\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sdist_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x40471e50>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41b5ea00>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-48el475d'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x41b5e9d0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-48el475d'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x41b5e5b0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x41b5e5b0>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 309\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x41b5e5b0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ---------------------------- Captured stdout setup -----------------------------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Initialized empty Git repository in /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/generated-files/.git/\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m______________________ ERROR at setup of test_scipy_like _______________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def fixture(tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package), in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           return tmp_path_session / mesonpy.build_wheel(tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'scipy-like'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:127: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8'),)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_wheel at 0x40735af0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1111: in build_wheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         metadata_directory = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         wheel_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41c214f0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41c21ee0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-_51sz3vv'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x41c21ca0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-_51sz3vv'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x41c21fd0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x41c21fd0>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 316\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x41c21fd0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ---------------------------- Captured stdout setup -----------------------------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Initialized empty Git repository in /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/scipy-like/.git/\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_contents ________________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def fixture(tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package), in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           return tmp_path_session / mesonpy.build_wheel(tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'library'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:127: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8'),)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_wheel at 0x40735af0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1111: in build_wheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         metadata_directory = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         wheel_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x40605250>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x40605910>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-eawa2e0j'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x41cec340>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-eawa2e0j'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x41cec1f0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x41cec1f0>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 323\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x41cec1f0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ---------------------------- Captured stdout setup -----------------------------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Initialized empty Git repository in /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/library/.git/\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m__________________ ERROR at setup of test_purelib_and_platlib __________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def fixture(tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package), in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           return tmp_path_session / mesonpy.build_wheel(tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'purelib-and-platlib'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:127: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8'),)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_wheel at 0x40735af0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1111: in build_wheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         metadata_directory = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         wheel_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41cfe7c0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41cfe4f0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-afzmani1'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x41cfec40>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-afzmani1'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x41cfe3d0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x41cfe3d0>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 330\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x41cfe3d0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ---------------------------- Captured stdout setup -----------------------------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Initialized empty Git repository in /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/purelib-and-platlib/.git/\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m_________________________ ERROR at setup of test_pure __________________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def fixture(tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package), in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           return tmp_path_session / mesonpy.build_wheel(tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'pure'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:127: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8'),)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_wheel at 0x40735af0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1111: in build_wheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         metadata_directory = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         wheel_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x4236d310>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x4236d1f0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-3jzj50hy'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x4236d2b0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-3jzj50hy'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x4236d8e0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x4236d8e0>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 337\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x4236d8e0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ---------------------------- Captured stdout setup -----------------------------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Initialized empty Git repository in /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/pure/.git/\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_configure_data _____________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def fixture(tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package), in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           return tmp_path_session / mesonpy.build_wheel(tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'configure-data'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:127: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8'),)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_wheel at 0x40735af0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1111: in build_wheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         metadata_directory = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         wheel_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41a8c190>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41a8c220>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-00rr32kw'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x41a8c280>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-00rr32kw'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x41a8ca30>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x41a8ca30>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 344\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x41a8ca30>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ---------------------------- Captured stdout setup -----------------------------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Initialized empty Git repository in /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/configure-data/.git/\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_local_lib _______________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def fixture(tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package), in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           return tmp_path_session / mesonpy.build_wheel(tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'link-against-local-lib'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:127: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8'),)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_wheel at 0x40735af0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1111: in build_wheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         metadata_directory = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         wheel_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x420ac0a0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x420ac9a0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-kfmhz_9c'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x420ace20>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-kfmhz_9c'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x420aca60>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x420aca60>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 351\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x420aca60>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ---------------------------- Captured stdout setup -----------------------------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Initialized empty Git repository in /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/link-against-local-lib/.git/\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m_________________ ERROR at setup of test_contents_license_file _________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def fixture(tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package), in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           return tmp_path_session / mesonpy.build_wheel(tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'license-file'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:127: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8'),)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_wheel at 0x40735af0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1111: in build_wheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         metadata_directory = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         wheel_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x4224d850>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x4224d760>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-6iw1jlkn'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x4224d640>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-6iw1jlkn'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x4224d9a0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x4224d9a0>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 358\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x4224d9a0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ---------------------------- Captured stdout setup -----------------------------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Initialized empty Git repository in /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/license-file/.git/\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_executable_bit _____________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def fixture(tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package), in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           return tmp_path_session / mesonpy.build_wheel(tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'executable-bit'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:127: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8'),)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_wheel at 0x40735af0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1111: in build_wheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         metadata_directory = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         wheel_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41a9aa30>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41a9a8e0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-cnf3ypyt'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x41a9a1f0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-cnf3ypyt'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x41a9ab50>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x41a9ab50>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 365\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x41a9ab50>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ---------------------------- Captured stdout setup -----------------------------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Initialized empty Git repository in /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/executable-bit/.git/\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m________________ ERROR at setup of test_detect_wheel_tag_module ________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def fixture(tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package), in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           return tmp_path_session / mesonpy.build_wheel(tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'purelib-and-platlib'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:127: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8'),)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_wheel at 0x40735af0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1111: in build_wheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         metadata_directory = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         wheel_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41cfe7c0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41cfe4f0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-afzmani1'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x41cfec40>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-afzmani1'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x41cfe3d0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x41cfe3d0>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 330\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x41cfe3d0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m________________ ERROR at setup of test_detect_wheel_tag_script ________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def fixture(tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package), in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           return tmp_path_session / mesonpy.build_wheel(tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'executable'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:127: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8'),)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_wheel at 0x40735af0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1111: in build_wheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         metadata_directory = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         wheel_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x42175bb0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x42175910>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-p2e0mkq5'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x421757f0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-p2e0mkq5'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x42175b50>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x42175b50>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 372\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x42175b50>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ---------------------------- Captured stdout setup -----------------------------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Initialized empty Git repository in /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/executable/.git/\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m_________________________ ERROR at setup of test_rpath _________________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def fixture(tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package), in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           return tmp_path_session / mesonpy.build_wheel(tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'link-against-local-lib'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:127: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8'),)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_wheel at 0x40735af0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1111: in build_wheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         metadata_directory = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         wheel_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x420ac0a0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x420ac9a0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-kfmhz_9c'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x420ace20>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-kfmhz_9c'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x420aca60>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x420aca60>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 351\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x420aca60>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_uneeded_rpath _____________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def fixture(tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package), in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           return tmp_path_session / mesonpy.build_wheel(tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'purelib-and-platlib'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:127: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8'),)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_wheel at 0x40735af0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1111: in build_wheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         metadata_directory = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         wheel_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41cfe7c0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41cfe4f0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-afzmani1'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x41cfec40>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-afzmani1'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x41cfe3d0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x41cfe3d0>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 330\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x41cfe3d0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m______________________ ERROR at setup of test_entrypoints ______________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.fixture(scope='session')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def fixture(tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package), in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           return tmp_path_session / mesonpy.build_wheel(tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'full-metadata'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/conftest.py\u001b[0m:127: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8'),)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_wheel at 0x40735af0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1111: in build_wheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         metadata_directory = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         wheel_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x422e1a30>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x422e1850>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-zo01tsnd'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x422e1970>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-zo01tsnd'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x422e17f0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x422e17f0>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 379\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x422e17f0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ---------------------------- Captured stdout setup -----------------------------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Initialized empty Git repository in /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/full-metadata/.git/\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | =================================== FAILURES ===================================\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m___________________________ test_mesonpy_meta_finder ___________________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package_complex = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/complex')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_mesonpy_meta_finder0')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def test_mesonpy_meta_finder(package_complex, tmp_path):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # build a package in a temporary directory\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >       mesonpy.Project(package_complex, tmp_path)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package_complex = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/complex')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path   = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_mesonpy_meta_finder0')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/test_editable.py\u001b[0m:63: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x4048cd00>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/complex')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_mesonpy_meta_finder0')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x4048cf70>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x4048cf70>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 212\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x4048cf70>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m________________________________ test_resources ________________________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_resources0')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def test_resources(tmp_path):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # build a package in a temporary directory\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         package_path = pathlib.Path(__file__).parent / 'packages' / 'simple'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >       mesonpy.Project(package_path, tmp_path)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package_path = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/simple')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path   = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_resources0')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/test_editable.py\u001b[0m:128: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x404859a0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/simple')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_resources0')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x40485b20>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x40485b20>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 213\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x40485b20>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m__________________________________ test_spam ___________________________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | venv = <tests.conftest.VEnv object at 0x4085e5b0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_spam0')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def test_spam(venv, tmp_path):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Test that the wheel for the example builds, installs, and imports.\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(examples_dir / 'spam'):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if sys.version_info < (3, 8):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The test project requires Python >= 3.8.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 with pytest.raises(SystemExit):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     mesonpy.build_wheel(tmp_path)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               wheel = mesonpy.build_wheel(tmp_path)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path   = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_spam0')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | venv       = <tests.conftest.VEnv object at 0x4085e5b0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/test_examples.py\u001b[0m:27: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_spam0'),)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_wheel at 0x41295700>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1111: in build_wheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         metadata_directory = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_spam0')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         wheel_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_spam0')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41cfe220>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41cfe2e0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-_5wgzxhb'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x41cfe310>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-_5wgzxhb'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x41cfe370>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x41cfe370>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 234\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x41cfe370>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m_________ test_get_requires_for_build_wheel[newninja-nopatchelf-pure] __________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x40749700>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package = 'pure', system_patchelf = None, ninja = '1.8.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.mark.parametrize('package', ['pure', 'library'])\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.mark.parametrize('system_patchelf', ['patchelf', None], ids=['patchelf', 'nopatchelf'])\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.mark.parametrize('ninja', [None, '1.8.1', '1.8.3'], ids=['noninja', 'oldninja', 'newninja'])\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def test_get_requires_for_build_wheel(monkeypatch, package, system_patchelf, ninja):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # the NINJA environment variable affects the ninja executable lookup and breaks the test\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         monkeypatch.delenv('NINJA', raising=False)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         def which(prog: str) -> bool:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if prog == 'patchelf':\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 return system_patchelf\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if prog == 'ninja':\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 return ninja and 'ninja'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if prog in ('ninja-build', 'samu'):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 return None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # smoke check for the future if we add another usage\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             raise AssertionError(f'Called with {prog}, tests not expecting that usage')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         subprocess_run = subprocess.run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         def run(cmd: List[str], *args: object, **kwargs: object) -> subprocess.CompletedProcess:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if cmd == ['ninja', '--version']:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 return subprocess.CompletedProcess(cmd, 0, f'{ninja}\\n', '')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return subprocess_run(cmd, *args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         monkeypatch.setattr(shutil, 'which', which)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         monkeypatch.setattr(subprocess, 'run', run)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         expected = set()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         ninja_available = ninja is not None and [int(x) for x in ninja.split('.')] >= [1, 8, 2]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if not ninja_available:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             expected |= {mesonpy._depstr.ninja}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             system_patchelf is None and sys.platform.startswith('linux')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             and (not ninja_available or (ninja_available and package != 'pure'))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         ):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             expected |= {mesonpy._depstr.patchelf}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           assert set(mesonpy.get_requires_for_build_wheel()) == expected\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | expected   = set()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x40749700>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ninja      = '1.8.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ninja_available = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'pure'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | run        = <function test_get_requires_for_build_wheel.<locals>.run at 0x40851040>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | subprocess_run = <function run at 0x413f04c0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | system_patchelf = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | which      = <function test_get_requires_for_build_wheel.<locals>.which at 0x408510d0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/test_pep517.py\u001b[0m:61: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function get_requires_for_build_wheel at 0x40720c10>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1091: in get_requires_for_build_wheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         dependencies = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41cfed30>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41cfefd0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-ym1u7jfa'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x41cfed90>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-ym1u7jfa'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/test_pep517.py\u001b[0m:42: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return subprocess_run(cmd, *args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cmd        = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'capture_output': True, 'check': False, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         ninja      = '1.8.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         subprocess_run = <function run at 0x413f04c0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x41cfe250>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x41cfe250>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 256\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x41cfe250>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m________ test_get_requires_for_build_wheel[newninja-nopatchelf-library] ________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x41b5f820>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package = 'library', system_patchelf = None, ninja = '1.8.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.mark.parametrize('package', ['pure', 'library'])\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.mark.parametrize('system_patchelf', ['patchelf', None], ids=['patchelf', 'nopatchelf'])\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.mark.parametrize('ninja', [None, '1.8.1', '1.8.3'], ids=['noninja', 'oldninja', 'newninja'])\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def test_get_requires_for_build_wheel(monkeypatch, package, system_patchelf, ninja):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # the NINJA environment variable affects the ninja executable lookup and breaks the test\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         monkeypatch.delenv('NINJA', raising=False)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         def which(prog: str) -> bool:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if prog == 'patchelf':\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 return system_patchelf\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if prog == 'ninja':\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 return ninja and 'ninja'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if prog in ('ninja-build', 'samu'):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 return None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # smoke check for the future if we add another usage\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             raise AssertionError(f'Called with {prog}, tests not expecting that usage')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         subprocess_run = subprocess.run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         def run(cmd: List[str], *args: object, **kwargs: object) -> subprocess.CompletedProcess:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if cmd == ['ninja', '--version']:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 return subprocess.CompletedProcess(cmd, 0, f'{ninja}\\n', '')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return subprocess_run(cmd, *args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         monkeypatch.setattr(shutil, 'which', which)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         monkeypatch.setattr(subprocess, 'run', run)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         expected = set()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         ninja_available = ninja is not None and [int(x) for x in ninja.split('.')] >= [1, 8, 2]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if not ninja_available:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             expected |= {mesonpy._depstr.ninja}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             system_patchelf is None and sys.platform.startswith('linux')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             and (not ninja_available or (ninja_available and package != 'pure'))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         ):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             expected |= {mesonpy._depstr.patchelf}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with chdir(package_dir / package):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           assert set(mesonpy.get_requires_for_build_wheel()) == expected\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | expected   = {'patchelf >= 0.11.0'}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x41b5f820>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ninja      = '1.8.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ninja_available = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'library'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | run        = <function test_get_requires_for_build_wheel.<locals>.run at 0x41b9b5e0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | subprocess_run = <function run at 0x413f04c0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | system_patchelf = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | which      = <function test_get_requires_for_build_wheel.<locals>.which at 0x41b9b550>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/test_pep517.py\u001b[0m:61: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function get_requires_for_build_wheel at 0x40720c10>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1091: in get_requires_for_build_wheel\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         dependencies = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41b5f730>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41b5f790>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-nsyo064u'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x41b5f4c0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-nsyo064u'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/test_pep517.py\u001b[0m:42: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return subprocess_run(cmd, *args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cmd        = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'capture_output': True, 'check': False, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         ninja      = '1.8.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         subprocess_run = <function run at 0x413f04c0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x41b5fa00>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x41b5fa00>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 257\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x41b5fa00>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m______________________________ test_name[library] ______________________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package = 'library'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.mark.parametrize(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         ('package'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         [\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             'library',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             'library-pep621',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         ]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     )\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def test_name(package):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >       with chdir(package_dir / package), mesonpy.Project.with_temp_working_dir() as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'library'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/test_project.py\u001b[0m:33: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x419c7100>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-4t7o09o6'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x419c70d0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-4t7o09o6'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x419c7eb0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x419c7eb0>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 265\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x419c7eb0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m__________________________ test_name[library-pep621] ___________________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package = 'library-pep621'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.mark.parametrize(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         ('package'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         [\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             'library',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             'library-pep621',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         ]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     )\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def test_name(package):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >       with chdir(package_dir / package), mesonpy.Project.with_temp_working_dir() as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'library-pep621'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/test_project.py\u001b[0m:33: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x420d0640>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-0e5q8fe0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x420d0670>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-0e5q8fe0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x420d0880>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x420d0880>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 266\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x420d0880>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m____________________________ test_version[library] _____________________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package = 'library'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.mark.parametrize(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         ('package'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         [\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             'library',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             'library-pep621',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         ]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     )\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def test_version(package):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >       with chdir(package_dir / package), mesonpy.Project.with_temp_working_dir() as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'library'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/test_project.py\u001b[0m:45: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41d67490>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-mews_k14'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x41d673a0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-mews_k14'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x41d67730>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x41d67730>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 267\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x41d67730>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m_________________________ test_version[library-pep621] _________________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package = 'library-pep621'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.mark.parametrize(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         ('package'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         [\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             'library',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             'library-pep621',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         ]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     )\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def test_version(package):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >       with chdir(package_dir / package), mesonpy.Project.with_temp_working_dir() as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'library-pep621'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/test_project.py\u001b[0m:45: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x420d0ac0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-nobv3g76'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x419c7580>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-nobv3g76'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x419c7a30>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x419c7a30>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 268\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x419c7a30>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m___________________________ test_unsupported_dynamic ___________________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package_unsupported_dynamic = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/unsupported-dynamic')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def test_unsupported_dynamic(package_unsupported_dynamic):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with pytest.raises(mesonpy.MesonBuilderError, match='Unsupported dynamic fields: \"dependencies\"'):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           with mesonpy.Project.with_temp_working_dir():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package_unsupported_dynamic = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/unsupported-dynamic')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/test_project.py\u001b[0m:51: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41aad550>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-_cbropfg'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x41aad610>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-_cbropfg'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x41aad700>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x41aad700>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 269\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x41aad700>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m_______________________ test_unsupported_python_version ________________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package_unsupported_python_version = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/unsupported-python-version')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def test_unsupported_python_version(package_unsupported_python_version):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with pytest.raises(mesonpy.MesonBuilderError, match=(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             f'Unsupported Python version {platform.python_version()}, expected ==1.0.0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         )):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           with mesonpy.Project.with_temp_working_dir():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package_unsupported_python_version = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/unsupported-python-version')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/test_project.py\u001b[0m:59: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41b376d0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-r_nyulk8'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x41b378e0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-r_nyulk8'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x41b373a0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x41b373a0>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 270\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x41b373a0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m________________________________ test_user_args ________________________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package_user_args = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/user-args')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_user_args0')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x409550a0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def test_user_args(package_user_args, tmp_path, monkeypatch):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         project_run = mesonpy.Project._run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cmds = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         def wrapper(self, cmd):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # intercept and filter out test arguments and forward the call\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if cmd[:2] == ['meson', 'compile']:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # when using meson compile instead of ninja directly, the\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # arguments needs to be unmarshalled from the form used to\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # pass them to the --ninja-args option\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 assert cmd[-1].startswith('--ninja-args=')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 cmds.append(cmd[:2])\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args.append(ast.literal_eval(cmd[-1].split('=')[1]))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             elif cmd[:1] == ['meson']:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 cmds.append(cmd[:2])\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args.append(cmd[2:])\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # direct ninja invocation\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 cmds.append([os.path.basename(cmd[0])])\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args.append(cmd[1:])\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return project_run(self, [x for x in cmd if not x.startswith(('config-', 'cli-', '--ninja-args'))])\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         monkeypatch.setattr(mesonpy.Project, '_run', wrapper)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = {\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             'dist-args': ('cli-dist',),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             'setup-args': ('cli-setup',),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             'compile-args': ('cli-compile',),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             'install-args': ('cli-install',),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         }\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           mesonpy.build_sdist(tmp_path, config_settings)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cmds       = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | config_settings = {'compile-args': ('cli-compile',),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'dist-args': ('cli-dist',),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'install-args': ('cli-install',),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'setup-args': ('cli-setup',)}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x409550a0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package_user_args = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/user-args')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | project_run = <function Project._run at 0x4072ba60>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path   = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_user_args0')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | wrapper    = <function test_user_args.<locals>.wrapper at 0x41b9bd30>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/test_project.py\u001b[0m:96: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = (PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_user_args0'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  {'compile-args': ('cli-compile',),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   'dist-args': ('cli-dist',),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   'install-args': ('cli-install',),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   'setup-args': ('cli-setup',)})\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_sdist at 0x4074c1f0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:1072: in build_sdist\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = {'compile-args': ('cli-compile',),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'dist-args': ('cli-dist',),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'install-args': ('cli-install',),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'setup-args': ('cli-setup',)}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_user_args0')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sdist_directory = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_user_args0')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41f5c220>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = {'compile-args': ('cli-compile',),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'dist-args': ('cli-dist',),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'install-args': ('cli-install',),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'setup-args': ('cli-setup',)}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': ['cli-compile'],\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'dist': ['cli-dist'],\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'install': ['cli-install'],\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'setup': ['cli-setup']}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {'compile-args': ['cli-compile'],\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'dist-args': ['cli-dist'],\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'install-args': ['cli-install'],\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'setup-args': ['cli-setup']}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41f5c0d0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': ['cli-compile'],\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'dist': ['cli-dist'],\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'install': ['cli-install'],\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'setup': ['cli-setup']}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-bqxv2n68'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': ['cli-compile'],\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'dist': ['cli-dist'],\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'install': ['cli-install'],\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'setup': ['cli-setup']}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x41f5c460>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-bqxv2n68'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x41f5c850>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x41f5c850>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 277\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x41f5c850>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ----------------------------- Captured stdout call -----------------------------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Initialized empty Git repository in /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/user-args/.git/\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m______________________ test_unknown_user_args[top-level] _______________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package = 'top-level'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.mark.parametrize('package', ('top-level', 'meson-args'))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def test_unknown_user_args(package, tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with pytest.raises(mesonpy.ConfigError):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           mesonpy.Project(package_dir / f'unknown-user-args-{package}', tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'top-level'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/test_project.py\u001b[0m:130: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x419c8c40>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/unknown-user-args-top-level')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x41dd3430>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x41dd3430>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 278\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x41dd3430>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m______________________ test_unknown_user_args[meson-args] ______________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package = 'meson-args'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.mark.parametrize('package', ('top-level', 'meson-args'))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def test_unknown_user_args(package, tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with pytest.raises(mesonpy.ConfigError):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           mesonpy.Project(package_dir / f'unknown-user-args-{package}', tmp_path_session)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package    = 'meson-args'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mtests/test_project.py\u001b[0m:130: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x41b52c10>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/unknown-user-args-meson-args')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mmesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x41b52f40>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x41b52f40>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 279\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x41b52f40>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m______________________________ test_install_tags _______________________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package_purelib_and_platlib = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/purelib-and-platlib')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def test_install_tags(package_purelib_and_platlib, tmp_path_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >       project = mesonpy.Project(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             package_purelib_and_platlib,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             tmp_path_session,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             meson_args={\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 'install': ['--tags', 'purelib'],\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             }\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         )\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package_purelib_and_platlib = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/purelib-and-platlib')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path_session = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/test_project.py\u001b[0m:134: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'install': ['--tags', 'purelib']}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x41d6f3d0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/purelib-and-platlib')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test0/mesonpy-test-iu1xslm8')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x41d6fc10>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x41d6fc10>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x41d6fc10>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m____________________________ test_invalid_build_dir ____________________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package_pure = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/pure')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_invalid_build_dir0')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | mocker = <pytest_mock.plugin.MockerFixture object at 0x41cfe7f0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     @pytest.mark.skipif(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.version_info < (3, 8),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         reason=\"unittest.mock doesn't support the required APIs for this test\",\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     )\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def test_invalid_build_dir(package_pure, tmp_path, mocker):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson = mocker.spy(mesonpy.Project, '_run')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # configure the project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >       project = mesonpy.Project(package_pure, tmp_path)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | meson      = <function _run at 0x41a0a310>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | mocker     = <pytest_mock.plugin.MockerFixture object at 0x41cfe7f0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package_pure = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/pure')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path   = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_invalid_build_dir0')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/test_project.py\u001b[0m:192: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x41cfea60>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/pure')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_invalid_build_dir0')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x40986700>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x40986700>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 281\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x40986700>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m____________________________ test_contents_unstaged ____________________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package_pure = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/pure')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_contents_unstaged0')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def test_contents_unstaged(package_pure, tmp_path):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         new_data = textwrap.dedent('''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         def bar():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return 'foo'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         ''').strip()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with open('pure.py', 'r') as f:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             old_data = f.read()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             with in_git_repo_context():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 with open('pure.py', 'w') as f, open('crap', 'x'):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     f.write(new_data)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               sdist_path = mesonpy.build_sdist(os.fspath(tmp_path))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | f          = <_io.TextIOWrapper name='pure.py' mode='w' encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | new_data   = \"def bar():\\n    return 'foo'\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | old_data   = ('# SPDX-FileCopyrightText: 2021 The meson-python developers\\n'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  '#\\n'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  '# SPDX-License-Identifier: MIT\\n'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  '\\n'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  'def foo():\\n'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  \"    return 'bar'\\n\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package_pure = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/pure')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path   = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_contents_unstaged0')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/test_sdist.py\u001b[0m:61: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:1047: in wrapper\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return func(*args, **kwargs)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ('/tmp/pytest-of-runneradmin/pytest-0/test_contents_unstaged0',)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         func       = <function build_sdist at 0x4074c1f0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:1072: in build_sdist\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with _project(config_settings) as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         out        = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_contents_unstaged0')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sdist_directory = '/tmp/pytest-of-runneradmin/pytest-0/test_contents_unstaged0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41bda910>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:985: in _project\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Project.with_temp_working_dir(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         config_settings = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         settings   = {}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x41bda8b0>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-m755fe42'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = {'compile': [], 'dist': [], 'install': [], 'setup': []}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x40956760>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-m755fe42'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x40956400>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x40956400>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 295\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x40956400>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ----------------------------- Captured stdout call -----------------------------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Initialized empty Git repository in /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/pure/.git/\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m____________________________ test_top_level_modules ____________________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package_module_types = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/module-types')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def test_top_level_modules(package_module_types):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >       with mesonpy.Project.with_temp_working_dir() as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package_module_types = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/module-types')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/test_wheel.py\u001b[0m:231: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x419c8100>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-d658if6c'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x419c8c10>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-d658if6c'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x419c8f40>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x419c8f40>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 380\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x419c8f40>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m\u001b[1m__________________________ test_purelib_platlib_split __________________________\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package_purelib_platlib_split = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/purelib-platlib-split')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_purelib_platlib_split0')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def test_purelib_platlib_split(package_purelib_platlib_split, tmp_path):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         with pytest.raises(mesonpy.BuildError, match='The purelib-platlib-split package is split'):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >           with mesonpy.Project.with_temp_working_dir() as project:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | package_purelib_platlib_split = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/packages/purelib-platlib-split')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | tmp_path   = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_purelib_platlib_split0')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/tests/test_wheel.py\u001b[0m:241: \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/contextlib.py\u001b[0m:113: in __enter__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     return next(self.gen)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <contextlib._GeneratorContextManager object at 0x420c8910>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:831: in with_temp_working_dir\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     yield cls(source_dir, tmpdir, build_dir, meson_args, editable_verbose)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cls        = <class 'mesonpy.Project'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         tmpdir     = './.mesonpy-o9nswj13'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:652: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     _check_meson_version()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         build_dir  = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         editable_verbose = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         meson_args = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <mesonpy.Project object at 0x420c8970>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         source_dir = '.'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         working_dir = './.mesonpy-o9nswj13'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/mesonpy/__init__.py\u001b[0m:1026: in _check_meson_version\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     meson_version = subprocess.run(['meson', '--version'], check=False, text=True, capture_output=True).stdout\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         required_version = (0, 63, 3)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         version    = '0.63.3'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:493: in run\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     with Popen(*popenargs, **kwargs) as process:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         capture_output = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         check      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         input      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         kwargs     = {'stderr': -1, 'stdout': -1, 'text': True}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         popenargs  = (['meson', '--version'],)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         timeout    = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:858: in __init__\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     self._execute_child(args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         bufsize    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         encoding   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errors     = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         executable = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         f          = <_io.TextIOWrapper name=13 encoding='UTF-8'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         line_buffering = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         self       = <subprocess.Popen object at 0x420c8a30>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stderr     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdin      = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         stdout     = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         text       = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         universal_newlines = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self = <subprocess.Popen object at 0x420c8a30>, args = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson', preexec_fn = None, close_fds = True, pass_fds = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12, errread = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite = 14, restore_signals = True, start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     def _execute_child(self, args, executable, preexec_fn, close_fds,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        pass_fds, cwd, env,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        startupinfo, creationflags, shell,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                        restore_signals, start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         \"\"\"Execute program (POSIX version)\"\"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if isinstance(args, (str, bytes)):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         elif isinstance(args, os.PathLike):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 raise TypeError('path-like args is not allowed when '\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                 'shell is true')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [args]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = list(args)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if shell:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # On Android the default shell is at '/system/bin/sh'.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             unix_shell = ('/system/bin/sh' if\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                       hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             args = [unix_shell, \"-c\"] + args\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if executable:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 args[0] = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if executable is None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             executable = args[0]\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if (_USE_POSIX_SPAWN\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and os.path.dirname(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and preexec_fn is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not close_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not pass_fds\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and cwd is None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (p2cread == -1 or p2cread > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (c2pwrite == -1 or c2pwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and (errwrite == -1 or errwrite > 2)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 and not start_new_session):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._posix_spawn(args, executable, env, restore_signals,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             return\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         orig_executable = executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # For transferring possible exec failure from child to parent.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Data format: \"exception name:hex errno:description\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # Pickle is not used; it is complex and involves memory allocation.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         errpipe_read, errpipe_write = os.pipe()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         while errpipe_write < 3:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             low_fds_to_close.append(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_write = os.dup(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         for low_fd in low_fds_to_close:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(low_fd)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # We must avoid complex work that could involve\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # malloc or free in the child process to avoid\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # potential deadlocks, thus we do all this here.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # and pass it to fork_exec()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if env is not None:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     for k, v in env.items():\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         k = os.fsencode(k)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         if b'=' in k:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                             raise ValueError(\"illegal environment variable name\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         env_list.append(k + b'=' + os.fsencode(v))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     env_list = None  # Use execv instead of execve.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 executable = os.fsencode(executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if os.path.dirname(executable):\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = (executable,)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # This matches the behavior of os._execvpe().\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     executable_list = tuple(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         os.path.join(os.fsencode(dir), executable)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         for dir in os.get_exec_path(env))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep = set(pass_fds)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 fds_to_keep.add(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self.pid = _posixsubprocess.fork_exec(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         args, executable_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         close_fds, tuple(sorted(map(int, fds_to_keep))),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         cwd, env_list,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         p2cread, p2cwrite, c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errread, errwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_read, errpipe_write,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         restore_signals, start_new_session, preexec_fn)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 self._child_created = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 os.close(errpipe_write)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             self._close_pipe_fds(p2cread, p2cwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  c2pread, c2pwrite,\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  errread, errwrite)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # Wait for exec to fail or succeed; possibly raising an\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # exception (limited in size)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             errpipe_data = bytearray()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             while True:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 part = os.read(errpipe_read, 50000)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errpipe_data += part\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if not part or len(errpipe_data) > 50000:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     break\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         finally:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             # be sure the FD is closed no matter what\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             os.close(errpipe_read)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         if errpipe_data:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pid, sts = os.waitpid(self.pid, 0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if pid == self.pid:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self._handle_exitstatus(sts)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     self.returncode = sys.maxsize\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ChildProcessError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 pass\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             try:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name, hex_errno, err_msg = (\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                         errpipe_data.split(b':', 2))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # The encoding here should match the encoding\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # written in by the subprocess implementations\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 # like _posixsubprocess\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = err_msg.decode()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             except ValueError:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 exception_name = b'SubprocessError'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 hex_errno = b'0'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 err_msg = 'Bad exception data from child: {!r}'.format(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               bytes(errpipe_data))\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             child_exception_type = getattr(\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     builtins, exception_name.decode('ascii'),\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     SubprocessError)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |             if issubclass(child_exception_type, OSError) and hex_errno:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 errno_num = int(hex_errno, 16)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 child_exec_never_called = (err_msg == \"noexec\")\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if child_exec_never_called:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = \"\"\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     # The error must be from chdir(cwd).\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = cwd\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 else:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_filename = orig_executable\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                 if errno_num != 0:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                     err_msg = os.strerror(errno_num)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | >               raise child_exception_type(errno_num, err_msg, err_filename)\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31mE               FileNotFoundError: [Errno 2] No such file or directory: 'meson'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | args       = ['meson', '--version']\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pread    = 11\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | c2pwrite   = 12\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exception_type = <class 'OSError'>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | child_exec_never_called = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | close_fds  = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | creationflags = 0\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | cwd        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env        = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | env_list   = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_filename = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | err_msg    = 'No such file or directory'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errno_num  = 2\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_data = bytearray(b'OSError:2:')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_read = 15\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errpipe_write = 16\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errread    = 13\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | errwrite   = 14\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | exception_name = bytearray(b'OSError')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable = b'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | executable_list = (b'/usr/local/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/local/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/usr/bin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/sbin/meson',\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  b'/bin/meson')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | fds_to_keep = {16}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | hex_errno  = bytearray(b'2')\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | low_fds_to_close = []\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | orig_executable = 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cread    = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | p2cwrite   = -1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | part       = b''\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pass_fds   = ()\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | pid        = 381\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | preexec_fn = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | restore_signals = True\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | self       = <subprocess.Popen object at 0x420c8a30>\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | shell      = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | start_new_session = False\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | startupinfo = None\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | sts        = 65280\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[1m\u001b[31m/usr/lib/python3.8-pyston2.3/subprocess.py\u001b[0m:1704: FileNotFoundError\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | - generated xml file: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/report.xml -\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | ---------- coverage: platform linux, python 3.8.12-final-0 -----------\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Coverage XML written to file coverage-pyston.xml\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[36m\u001b[1m=========================== short test summary info ============================\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[33mSKIPPED\u001b[0m [1] tests/test_editable.py:143: importlib.resources not available\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[33mSKIPPED\u001b[0m [1] tests/test_project.py:225: Requires MSVC\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[33mSKIPPED\u001b[0m [1] tests/test_tags.py:36: macOS specific test\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[33mSKIPPED\u001b[0m [1] tests/test_tags.py:47: macOS specific test\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[33mSKIPPED\u001b[0m [2] tests/test_wheel.py:245: macOS specific test\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_editable.py::\u001b[1mtest_editable_install\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_editable.py::\u001b[1mtest_editble_reentrant\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_metadata.py::\u001b[1mtest_no_pep621\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_metadata.py::\u001b[1mtest_pep621\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_metadata.py::\u001b[1mtest_dynamic_version\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_pep518.py::\u001b[1mtest_pep518[sdist_to_wheel-purelib-and-platlib]\u001b[0m - subprocess.CalledProcessError: Command '['/usr/bin/pyston', '-m', 'pip', 'wheel', '--no-build-isolation', '--wheel-dir', '/tmp/pytest-of-runneradmin/pytest-0/wheelhouse0', '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python']' returned non-zero exit status 1.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_pep518.py::\u001b[1mtest_pep518[wheel_directly-purelib-and-platlib]\u001b[0m - subprocess.CalledProcessError: Command '['/usr/bin/pyston', '-m', 'pip', 'wheel', '--no-build-isolation', '--wheel-dir', '/tmp/pytest-of-runneradmin/pytest-0/wheelhouse0', '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python']' returned non-zero exit status 1.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_sdist.py::\u001b[1mtest_contents\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_sdist.py::\u001b[1mtest_contents_subdirs\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_sdist.py::\u001b[1mtest_executable_bit\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_sdist.py::\u001b[1mtest_generated_files\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_wheel.py::\u001b[1mtest_scipy_like\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_wheel.py::\u001b[1mtest_contents\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_wheel.py::\u001b[1mtest_purelib_and_platlib\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_wheel.py::\u001b[1mtest_pure\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_wheel.py::\u001b[1mtest_configure_data\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_wheel.py::\u001b[1mtest_local_lib\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_wheel.py::\u001b[1mtest_contents_license_file\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_wheel.py::\u001b[1mtest_executable_bit\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_wheel.py::\u001b[1mtest_detect_wheel_tag_module\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_wheel.py::\u001b[1mtest_detect_wheel_tag_script\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_wheel.py::\u001b[1mtest_rpath\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_wheel.py::\u001b[1mtest_uneeded_rpath\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mERROR\u001b[0m tests/test_wheel.py::\u001b[1mtest_entrypoints\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mFAILED\u001b[0m tests/test_editable.py::\u001b[1mtest_mesonpy_meta_finder\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mFAILED\u001b[0m tests/test_editable.py::\u001b[1mtest_resources\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mFAILED\u001b[0m tests/test_examples.py::\u001b[1mtest_spam\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mFAILED\u001b[0m tests/test_pep517.py::\u001b[1mtest_get_requires_for_build_wheel[newninja-nopatchelf-pure]\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mFAILED\u001b[0m tests/test_pep517.py::\u001b[1mtest_get_requires_for_build_wheel[newninja-nopatchelf-library]\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mFAILED\u001b[0m tests/test_project.py::\u001b[1mtest_name[library]\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mFAILED\u001b[0m tests/test_project.py::\u001b[1mtest_name[library-pep621]\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mFAILED\u001b[0m tests/test_project.py::\u001b[1mtest_version[library]\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mFAILED\u001b[0m tests/test_project.py::\u001b[1mtest_version[library-pep621]\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mFAILED\u001b[0m tests/test_project.py::\u001b[1mtest_unsupported_dynamic\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mFAILED\u001b[0m tests/test_project.py::\u001b[1mtest_unsupported_python_version\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mFAILED\u001b[0m tests/test_project.py::\u001b[1mtest_user_args\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mFAILED\u001b[0m tests/test_project.py::\u001b[1mtest_unknown_user_args[top-level]\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mFAILED\u001b[0m tests/test_project.py::\u001b[1mtest_unknown_user_args[meson-args]\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mFAILED\u001b[0m tests/test_project.py::\u001b[1mtest_install_tags\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mFAILED\u001b[0m tests/test_project.py::\u001b[1mtest_invalid_build_dir\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mFAILED\u001b[0m tests/test_sdist.py::\u001b[1mtest_contents_unstaged\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mFAILED\u001b[0m tests/test_wheel.py::\u001b[1mtest_top_level_modules\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31mFAILED\u001b[0m tests/test_wheel.py::\u001b[1mtest_purelib_platlib_split\u001b[0m - FileNotFoundError: [Errno 2] No such file or directory: 'meson'\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[31m============= \u001b[31m\u001b[1m19 failed\u001b[0m, \u001b[32m41 passed\u001b[0m, \u001b[33m6 skipped\u001b[0m, \u001b[31m\u001b[1m24 errors\u001b[0m\u001b[31m in 20.25s\u001b[0m\u001b[31m =============\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   \u274c  Failure - Main Run tests\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ] exitcode '1': failure\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ] \u2b50 Run Main Send coverage report\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   \ud83d\udc33  docker cp src=/tmp/act-cache/4a98e3ae-ec7d-48d6-a6c8-5b143f8881e7/act/codecov-codecov-action@v1/ dst=/var/run/act/actions/codecov-codecov-action@v1/\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/codecov-codecov-action@v1/] user=0 workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_editable.py::test_editble_reentrant \u001b[32mPASSED\u001b[0m\u001b[32m                    [ 11%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_examples.py::test_spam \u001b[32mPASSED\u001b[0m\u001b[32m                                 [ 12%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_metadata.py::test_no_pep621 \u001b[32mPASSED\u001b[0m\u001b[32m                            [ 13%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_metadata.py::test_pep621 \u001b[32mPASSED\u001b[0m\u001b[32m                               [ 14%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_metadata.py::test_dynamic_version \u001b[32mPASSED\u001b[0m\u001b[32m                      [ 15%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_output.py::test_colors[False-env0-False] \u001b[32mPASSED\u001b[0m\u001b[32m               [ 16%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_output.py::test_colors[True-env1-True] \u001b[32mPASSED\u001b[0m\u001b[32m                 [ 17%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_output.py::test_colors[False-env2-False] \u001b[32mPASSED\u001b[0m\u001b[32m               [ 18%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_output.py::test_colors[True-env3-False] \u001b[32mPASSED\u001b[0m\u001b[32m                [ 20%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_output.py::test_colors[False-env4-True] \u001b[32mPASSED\u001b[0m\u001b[32m                [ 21%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_output.py::test_colors[True-env5-True] \u001b[32mPASSED\u001b[0m\u001b[32m                 [ 22%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_output.py::test_colors_conflict \u001b[32mPASSED\u001b[0m\u001b[32m                        [ 23%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[noninja-patchelf-pure] \u001b[32mPASSED\u001b[0m\u001b[32m [ 24%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[noninja-patchelf-library] \u001b[32mPASSED\u001b[0m\u001b[32m [ 25%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[noninja-nopatchelf-pure] \u001b[32mPASSED\u001b[0m\u001b[32m [ 26%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[noninja-nopatchelf-library] \u001b[32mPASSED\u001b[0m\u001b[32m [ 27%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[oldninja-patchelf-pure] \u001b[32mPASSED\u001b[0m\u001b[32m [ 28%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[oldninja-patchelf-library] \u001b[32mPASSED\u001b[0m\u001b[32m [ 30%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[oldninja-nopatchelf-pure] \u001b[32mPASSED\u001b[0m\u001b[32m [ 31%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[oldninja-nopatchelf-library] \u001b[32mPASSED\u001b[0m\u001b[32m [ 32%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[newninja-patchelf-pure] \u001b[32mPASSED\u001b[0m\u001b[32m [ 33%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[newninja-patchelf-library] \u001b[32mPASSED\u001b[0m\u001b[32m [ 34%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[newninja-nopatchelf-pure] \u001b[32mPASSED\u001b[0m\u001b[32m [ 35%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_pep517.py::test_get_requires_for_build_wheel[newninja-nopatchelf-library] \u001b[32mPASSED\u001b[0m\u001b[32m [ 36%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_pep517.py::test_invalid_config_settings \u001b[32mPASSED\u001b[0m\u001b[32m                [ 37%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_pep517.py::test_invalid_config_settings_suggest \u001b[32mPASSED\u001b[0m\u001b[32m        [ 38%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_pep517.py::test_validate_config_settings_invalid \u001b[32mPASSED\u001b[0m\u001b[32m       [ 40%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_pep517.py::test_validate_config_settings_repeated \u001b[32mPASSED\u001b[0m\u001b[32m      [ 41%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_pep517.py::test_validate_config_settings_str \u001b[32mPASSED\u001b[0m\u001b[32m           [ 42%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_pep517.py::test_validate_config_settings_list \u001b[32mPASSED\u001b[0m\u001b[32m          [ 43%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_pep517.py::test_validate_config_settings_tuple \u001b[32mPASSED\u001b[0m\u001b[32m         [ 44%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_pep518.py::test_pep518[sdist_to_wheel-purelib-and-platlib] \u001b[32mPASSED\u001b[0m\u001b[32m [ 45%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_pep518.py::test_pep518[wheel_directly-purelib-and-platlib] \u001b[32mPASSED\u001b[0m\u001b[32m [ 46%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_project.py::test_name[library] \u001b[32mPASSED\u001b[0m\u001b[32m                         [ 47%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_project.py::test_name[library-pep621] \u001b[32mPASSED\u001b[0m\u001b[32m                  [ 48%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_project.py::test_version[library] \u001b[32mPASSED\u001b[0m\u001b[32m                      [ 50%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_project.py::test_version[library-pep621] \u001b[32mPASSED\u001b[0m\u001b[32m               [ 51%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_project.py::test_unsupported_dynamic \u001b[32mPASSED\u001b[0m\u001b[32m                   [ 52%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_project.py::test_unsupported_python_version \u001b[32mPASSED\u001b[0m\u001b[32m            [ 53%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_project.py::test_user_args \u001b[32mPASSED\u001b[0m\u001b[32m                             [ 54%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_project.py::test_unknown_user_args[top-level] \u001b[32mPASSED\u001b[0m\u001b[32m          [ 55%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_project.py::test_unknown_user_args[meson-args] \u001b[32mPASSED\u001b[0m\u001b[32m         [ 56%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_project.py::test_install_tags \u001b[32mPASSED\u001b[0m\u001b[32m                          [ 57%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_project.py::test_validate_pyproject_config_one \u001b[32mPASSED\u001b[0m\u001b[32m         [ 58%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_project.py::test_validate_pyproject_config_all \u001b[32mPASSED\u001b[0m\u001b[32m         [ 60%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_project.py::test_validate_pyproject_config_unknown \u001b[32mPASSED\u001b[0m\u001b[32m     [ 61%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_project.py::test_validate_pyproject_config_empty \u001b[32mPASSED\u001b[0m\u001b[32m       [ 62%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_project.py::test_invalid_build_dir \u001b[33mSKIPPED\u001b[0m (unittest.mock\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | doesn't support the required APIs for this test)\u001b[32m                         [ 63%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_project.py::test_compiler \u001b[33mSKIPPED\u001b[0m (Requires MSVC)\u001b[32m             [ 64%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_sdist.py::test_contents \u001b[32mPASSED\u001b[0m\u001b[32m                                [ 65%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_sdist.py::test_contents_subdirs \u001b[32mPASSED\u001b[0m\u001b[32m                        [ 66%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_sdist.py::test_contents_unstaged \u001b[32mPASSED\u001b[0m\u001b[32m                       [ 67%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_sdist.py::test_executable_bit \u001b[32mPASSED\u001b[0m\u001b[32m                          [ 68%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_sdist.py::test_generated_files \u001b[32mPASSED\u001b[0m\u001b[32m                         [ 70%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_tags.py::test_wheel_tag \u001b[32mPASSED\u001b[0m\u001b[32m                                [ 71%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_tags.py::test_macos_platform_tag \u001b[33mSKIPPED\u001b[0m (macOS specific\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | test)\u001b[32m                                                                    [ 72%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_tags.py::test_python_host_platform \u001b[33mSKIPPED\u001b[0m (macOS specific\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | test)\u001b[32m                                                                    [ 73%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_tags.py::test_tag_empty_wheel \u001b[32mPASSED\u001b[0m\u001b[32m                          [ 74%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_tags.py::test_tag_purelib_wheel \u001b[32mPASSED\u001b[0m\u001b[32m                        [ 75%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_tags.py::test_tag_platlib_wheel \u001b[32mPASSED\u001b[0m\u001b[32m                        [ 76%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_tags.py::test_tag_stable_abi \u001b[32mPASSED\u001b[0m\u001b[32m                           [ 77%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_tags.py::test_tag_mixed_abi \u001b[32mPASSED\u001b[0m\u001b[32m                            [ 78%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_wheel.py::test_scipy_like \u001b[32mPASSED\u001b[0m\u001b[32m                              [ 80%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/codecov-codecov-action@v1/dist/index.js] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_wheel.py::test_contents \u001b[32mPASSED\u001b[0m\u001b[32m                                [ 81%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | [command]/usr/bin/bash codecov.sh -n pyston -F tests -Q github-action-v1.5.2 -e PYTHON\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   _____          _\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  / ____|        | |\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | | |     ___   __| | ___  ___ _____   __\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | | |    / _ \\ / _` |/ _ \\/ __/ _ \\ \\ / /\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | | |___| (_) | (_| |  __/ (_| (_) \\ V /\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |  \\_____\\___/ \\__,_|\\___|\\___\\___/ \\_/\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                               Bash-1.0.3\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[0;36m==>\u001b[0m git version 2.33.0 found\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[0;36m==>\u001b[0m curl 7.68.0 (x86_64-pc-linux-gnu) libcurl/7.68.0 OpenSSL/1.1.1f zlib/1.2.11 brotli/1.0.7 libidn2/2.2.0 libpsl/0.21.0 (+libidn2/2.2.0) libssh/0.9.3/openssl/zlib nghttp2/1.40.0 librtmp/2.3\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Release-Date: 2020-01-08\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtmp rtsp scp sftp smb smbs smtp smtps telnet tftp \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | Features: AsynchDNS brotli GSS-API HTTP2 HTTPS-proxy IDN IPv6 Kerberos Largefile libz NTLM NTLM_WB PSL SPNEGO SSL TLS-SRP UnixSockets\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[0;90m==>\u001b[0m GitHub Actions detected.\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     Env vars used:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |       -> GITHUB_ACTIONS:    true\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |       -> GITHUB_HEAD_REF:   \n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |       -> GITHUB_REF:        refs/heads/main\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |       -> GITHUB_REPOSITORY: mesonbuild/meson-python\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |       -> GITHUB_RUN_ID:     1\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |       -> GITHUB_SHA:        354e049e8371816c3d7b34a42e75e8b4b381912d\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |       -> GITHUB_WORKFLOW:   5972f913-cb5d-4143-8766-062b7d7b7525\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \u001b[0;90mproject root:\u001b[0m .\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \u001b[0;90mYaml found at:\u001b[0m codecov.yml\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[0;90m==>\u001b[0m Running gcov in . \u001b[0;90m(disable via -X gcov)\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[0;90m==>\u001b[0m Python coveragepy not found\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[0;90m==>\u001b[0m Searching for coverage reports in:\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \u001b[0;32m+\u001b[0m .\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \u001b[0;90m->\u001b[0m Found 2 reports\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[0;90m==>\u001b[0m Detecting git/mercurial file structure\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[0;90m==>\u001b[0m Appending build variables\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \u001b[0;32m+\u001b[0m PYTHON\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[0;90m==>\u001b[0m Reading reports\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \u001b[0;32m+\u001b[0m ./coverage-pyston.xml \u001b[0;90mbytes=69601\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \u001b[0;32m+\u001b[0m ./report.xml \u001b[0;90mbytes=528751\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[0;90m==>\u001b[0m Appending adjustments\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \u001b[0;36mhttps://docs.codecov.io/docs/fixing-reports\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | \u001b[91mGet-Command: \u001b[0m/var/run/act/workflow/3-composite-0.ps1:5\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | \u001b[96mLine |\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | \u001b[96m   5 | \u001b[0m   $vswhere = \u001b[96mGet-Command 'vswhere'\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | \u001b[96m     | \u001b[91m              ~~~~~~~~~~~~~~~~~~~~~\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | \u001b[91m\u001b[96m     | \u001b[91mThe term 'vswhere' is not recognized as a name of a cmdlet,\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | \u001b[96m     | \u001b[91mfunction, script file, or executable program. Check the\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | \u001b[96m     | \u001b[91mspelling of the name, or if a path was included, verify that\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | \u001b[96m     | \u001b[91mthe path is correct and try again.\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   | \u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \u001b[0;32m+\u001b[0m Found adjustments\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[0;90m==>\u001b[0m Gzipping contents\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \u274c  Failure - Main Source Microsoft Visual Studio DevShell Environment\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |         24K\t/tmp/codecov.IkekyH.gz\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[0;90m==>\u001b[0m Uploading reports\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \u001b[0;90murl:\u001b[0m https://codecov.io\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \u001b[0;90mquery:\u001b[0m branch=main&commit=354e049e8371816c3d7b34a42e75e8b4b381912d&build=1&build_url=http%3A%2F%2Fgithub.com%2Fmesonbuild%2Fmeson-python%2Factions%2Fruns%2F1&name=pyston&tag=&slug=mesonbuild%2Fmeson-python&service=github-actions&flags=tests&pr=&job=5972f913-cb5d-4143-8766-062b7d7b7525&cmd_args=n,F,Q,e\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[0;90m->\u001b[0m  Pinging Codecov\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | https://codecov.io/upload/v4?package=github-action-v1.5.2-1.0.3&token=secret&branch=main&commit=354e049e8371816c3d7b34a42e75e8b4b381912d&build=1&build_url=http%3A%2F%2Fgithub.com%2Fmesonbuild%2Fmeson-python%2Factions%2Fruns%2F1&name=pyston&tag=&slug=mesonbuild%2Fmeson-python&service=github-actions&flags=tests&pr=&job=5972f913-cb5d-4143-8766-062b7d7b7525&cmd_args=n,F,Q,e\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[0;31m{'detail': ErrorDetail(string='Unable to locate build via Github Actions API. Please upload with the Codecov repository upload token to resolve issue.', code='not_found')}\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | 404\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \u001b[0;90m==>\u001b[0m Uploading to Codecov\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |                                  Dload  Upload   Total   Spent    Left  Speed\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Processing /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Installing build dependencies: started\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ] exitcode '1': failure\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \u274c  Failure - Main Setup MSVC\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   | \r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100 23972    0     0  100 23972      0  98245 --:--:-- --:--:-- --:--:-- 98650\r100 24143  100   171  100 23972    500  70093 --:--:-- --:--:-- --:--:-- 70800\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   |     \u001b[0;32m{'detail': ErrorDetail(string='Unable to locate build via Github Actions API. Please upload with the Codecov repository upload token to resolve issue.', code='not_found')}\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ]   \u2705  Success - Main Send coverage report\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ] exitcode '1': failure\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_wheel.py::test_purelib_and_platlib \u001b[32mPASSED\u001b[0m\u001b[32m                     [ 82%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ] \u2b50 Run Post Setup MSVC\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udc33  docker cp src=/tmp/act-cache/4a98e3ae-ec7d-48d6-a6c8-5b143f8881e7/act/bus1-cabuild-action-msdevshell@e22aba57d6e74891d059d66501b6b5aed8123c4d/ dst=/var/run/act/actions/bus1-cabuild-action-msdevshell@e22aba57d6e74891d059d66501b6b5aed8123c4d/\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/bus1-cabuild-action-msdevshell@e22aba57d6e74891d059d66501b6b5aed8123c4d/] user=0 workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_wheel.py::test_pure \u001b[32mPASSED\u001b[0m\u001b[32m                                    [ 83%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_wheel.py::test_configure_data \u001b[32mPASSED\u001b[0m\u001b[32m                          [ 84%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Installing build dependencies: finished with status 'done'\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Getting requirements to build wheel: started\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Getting requirements to build wheel: finished with status 'done'\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Preparing metadata (pyproject.toml): started\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ]   \u2705  Success - Post Setup MSVC\n[5972f913-cb5d-4143-8766-062b7d7b7525/pyston  ] \ud83c\udfc1  Job failed\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Collecting meson>=0.63.3 (from meson-python==0.14.0.dev0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Using cached meson-1.1.1-py3-none-any.whl (918 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Collecting pyproject-metadata>=0.7.1 (from meson-python==0.14.0.dev0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Using cached pyproject_metadata-0.7.1-py3-none-any.whl (7.4 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Collecting tomli>=1.0.0 (from meson-python==0.14.0.dev0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Using cached tomli-2.0.1-py3-none-any.whl (12 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Collecting build (from meson-python==0.14.0.dev0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Downloading build-0.10.0-py3-none-any.whl (17 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Collecting pytest>=6.0 (from meson-python==0.14.0.dev0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | \u001b[?25l                                              0.0/323.6 kB ? eta -:--:--\r\u001b[2K     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  317.4/323.6 kB 15.3 MB/s eta 0:00:01\r\u001b[2K     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 323.6/323.6 kB 7.8 MB/s eta 0:00:00\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | \u001b[?25hCollecting pytest-cov[toml] (from meson-python==0.14.0.dev0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Downloading pytest_cov-4.1.0-py3-none-any.whl (21 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Collecting pytest-mock (from meson-python==0.14.0.dev0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Downloading pytest_mock-3.11.1-py3-none-any.whl (9.6 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Collecting auditwheel (from meson-python==0.14.0.dev0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Downloading auditwheel-5.4.0-py3-none-any.whl (53 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | \u001b[?25l                                              0.0/54.0 kB ? eta -:--:--\r\u001b[2K     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578   51.2/54.0 kB 37.5 MB/s eta 0:00:01\r\u001b[2K     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 54.0/54.0 kB 1.1 MB/s eta 0:00:00\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | \u001b[?25hCollecting cython>=0.29.34 (from meson-python==0.14.0.dev0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Downloading Cython-0.29.35-py2.py3-none-any.whl (988 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_wheel.py::test_local_lib \u001b[32mPASSED\u001b[0m\u001b[32m                               [ 85%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | \u001b[?25l                                              0.0/988.4 kB ? eta -:--:--\r\u001b[2K     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501                         368.6/988.4 kB 10.4 MB/s eta 0:00:01\r\u001b[2K     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501             696.3/988.4 kB 8.6 MB/s eta 0:00:01\r\u001b[2K     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578 983.0/988.4 kB 8.3 MB/s eta 0:00:01\r\u001b[2K     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 988.4/988.4 kB 6.0 MB/s eta 0:00:00\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | \u001b[?25hCollecting wheel (from meson-python==0.14.0.dev0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Downloading wheel-0.40.0-py3-none-any.whl (64 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | \u001b[?25l                                              0.0/64.5 kB ? eta -:--:--\r\u001b[2K     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   61.4/64.5 kB 10.8 MB/s eta 0:00:01\r\u001b[2K     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 64.5/64.5 kB 865.8 kB/s eta 0:00:00\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | \u001b[?25hCollecting typing-extensions>=3.7.4 (from meson-python==0.14.0.dev0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Downloading typing_extensions-4.7.0-py3-none-any.whl (33 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Collecting packaging>=19.0 (from pyproject-metadata>=0.7.1->meson-python==0.14.0.dev0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Using cached packaging-23.1-py3-none-any.whl (48 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Collecting iniconfig (from pytest>=6.0->meson-python==0.14.0.dev0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Collecting pluggy<2.0,>=0.12 (from pytest>=6.0->meson-python==0.14.0.dev0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest>=6.0->meson-python==0.14.0.dev0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Collecting pyelftools>=0.24 (from auditwheel->meson-python==0.14.0.dev0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Downloading pyelftools-0.29-py2.py3-none-any.whl (174 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | \u001b[?25l                                              0.0/174.3 kB ? eta -:--:--\r\u001b[2K     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578 174.1/174.3 kB 30.4 MB/s eta 0:00:01\r\u001b[2K     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 174.3/174.3 kB 4.1 MB/s eta 0:00:00\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_wheel.py::test_contents_license_file \u001b[32mPASSED\u001b[0m\u001b[32m                   [ 86%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | \u001b[?25hCollecting pyproject_hooks (from build->meson-python==0.14.0.dev0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Downloading pyproject_hooks-1.0.0-py3-none-any.whl (9.3 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | WARNING: pytest-cov 4.1.0 does not provide the extra 'toml'\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Collecting coverage[toml]>=5.2.1 (from pytest-cov[toml]->meson-python==0.14.0.dev0)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Downloading coverage-7.2.7-pp37.pp38.pp39-none-any.whl (193 kB)\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | \u001b[?25l                                              0.0/193.2 kB ? eta -:--:--\r\u001b[2K     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   184.3/193.2 kB 33.4 MB/s eta 0:00:01\r\u001b[2K     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   184.3/193.2 kB 33.4 MB/s eta 0:00:01\r\u001b[2K     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   184.3/193.2 kB 33.4 MB/s eta 0:00:01\r\u001b[2K     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 193.2/193.2 kB 1.4 MB/s eta 0:00:00\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | \u001b[?25hBuilding wheels for collected packages: meson-python\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Building wheel for meson-python (pyproject.toml): started\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Building wheel for meson-python (pyproject.toml): finished with status 'done'\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Created wheel for meson-python: filename=meson_python-0.14.0.dev0-py3-none-any.whl size=79428 sha256=a1369631447b39c6bdb31791e3b34fb16bc3a77aa2b51c8827cc06a6a322a747\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/d2/7e/ca/0810273759af8f1bdf4fc515dfdedab702a2f4b25be21df882\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Successfully built meson-python\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Installing collected packages: pyelftools, wheel, typing-extensions, tomli, pluggy, packaging, meson, iniconfig, exceptiongroup, cython, coverage, auditwheel, pytest, pyproject-metadata, pyproject_hooks, pytest-mock, pytest-cov, meson-python, build\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_wheel.py::test_executable_bit \u001b[32mPASSED\u001b[0m\u001b[32m                          [ 87%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_wheel.py::test_detect_wheel_tag_module \u001b[32mPASSED\u001b[0m\u001b[32m                 [ 88%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_wheel.py::test_detect_wheel_tag_script \u001b[32mPASSED\u001b[0m\u001b[32m                 [ 90%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_wheel.py::test_rpath \u001b[32mPASSED\u001b[0m\u001b[32m                                   [ 91%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_wheel.py::test_uneeded_rpath \u001b[32mPASSED\u001b[0m\u001b[32m                           [ 92%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_wheel.py::test_entrypoints \u001b[32mPASSED\u001b[0m\u001b[32m                             [ 93%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_wheel.py::test_top_level_modules \u001b[32mPASSED\u001b[0m\u001b[32m                       [ 94%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | Successfully installed auditwheel-5.4.0 build-0.10.0 coverage-7.2.7 cython-0.29.35 exceptiongroup-1.1.1 iniconfig-2.0.0 meson-1.1.1 meson-python-0.14.0.dev0 packaging-23.1 pluggy-1.2.0 pyelftools-0.29 pyproject-metadata-0.7.1 pyproject_hooks-1.0.0 pytest-7.4.0 pytest-cov-4.1.0 pytest-mock-3.11.1 tomli-2.0.1 typing-extensions-4.7.0 wheel-0.40.0\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \u2705  Success - Main Install\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ] \u2b50 Run Main Run tests\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/7] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_wheel.py::test_purelib_platlib_split \u001b[32mPASSED\u001b[0m\u001b[32m                   [ 95%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_wheel.py::test_archflags_envvar[x86_64] \u001b[33mSKIPPED\u001b[0m (macOS\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | specific test)\u001b[32m                                                           [ 96%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_wheel.py::test_archflags_envvar[arm64] \u001b[33mSKIPPED\u001b[0m (macOS\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | specific test)\u001b[32m                                                           [ 97%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_wheelfile.py::test_basic \u001b[32mPASSED\u001b[0m\u001b[32m                               [ 98%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | tests/test_wheelfile.py::test_source_date_epoch \u001b[32mPASSED\u001b[0m\u001b[32m                   [100%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | - generated xml file: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/report.xml -\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | ---------- coverage: platform linux, python 3.7.11-final-0 -----------\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Coverage XML written to file coverage-3.7.xml\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[36m\u001b[1m=========================== short test summary info ============================\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[33mSKIPPED\u001b[0m [1] tests/test_editable.py:143: importlib.resources not available\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[33mSKIPPED\u001b[0m [1] tests/test_project.py:184: unittest.mock doesn't support the required APIs for this test\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[33mSKIPPED\u001b[0m [1] tests/test_project.py:225: Requires MSVC\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[33mSKIPPED\u001b[0m [1] tests/test_tags.py:36: macOS specific test\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[33mSKIPPED\u001b[0m [1] tests/test_tags.py:47: macOS specific test\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[33mSKIPPED\u001b[0m [2] tests/test_wheel.py:245: macOS specific test\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[32m================== \u001b[32m\u001b[1m83 passed\u001b[0m, \u001b[33m7 skipped\u001b[0m\u001b[32m in 137.12s (0:02:17)\u001b[0m\u001b[32m ===================\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \u2705  Success - Main Run tests\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ] \u2b50 Run Main Send coverage report\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udc33  docker cp src=/tmp/act-cache/4a98e3ae-ec7d-48d6-a6c8-5b143f8881e7/act/codecov-codecov-action@v1/ dst=/var/run/act/actions/codecov-codecov-action@v1/\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/codecov-codecov-action@v1/] user=0 workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/msvc    ] \ud83c\udfc1  Job failed\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/codecov-codecov-action@v1/dist/index.js] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | \u001b[1m============================= test session starts ==============================\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | platform linux -- Python 3.9.17[pypy-7.3.12-final], pytest-7.4.0, pluggy-1.2.0 -- /opt/hostedtoolcache/PyPy/3.9.17/x64/bin/python\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | cachedir: .pytest_cache\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | rootdir: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | configfile: pyproject.toml\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | testpaths: tests\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | plugins: mock-3.11.1, cov-4.1.0\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | \u001b[1mcollecting ... \u001b[0mcollected 90 items\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | tests/test_consistency.py::test_pyproject_dependencies \u001b[32mPASSED\u001b[0m\u001b[32m            [  1%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | tests/test_editable.py::test_walk \u001b[32mPASSED\u001b[0m\u001b[32m                                 [  2%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | tests/test_editable.py::test_nodes_tree \u001b[32mPASSED\u001b[0m\u001b[32m                           [  3%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | tests/test_editable.py::test_collect \u001b[32mPASSED\u001b[0m\u001b[32m                              [  4%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | tests/test_editable.py::test_mesonpy_meta_finder \u001b[32mPASSED\u001b[0m\u001b[32m                  [  5%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | tests/test_editable.py::test_mesonpy_traversable \u001b[32mPASSED\u001b[0m\u001b[32m                  [  6%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | tests/test_editable.py::test_resources \u001b[32mPASSED\u001b[0m\u001b[32m                            [  7%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | [command]/usr/bin/bash codecov.sh -n 3.7 -F tests -Q github-action-v1.5.2 -e PYTHON\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   _____          _\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |  / ____|        | |\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | | |     ___   __| | ___  ___ _____   __\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | | |    / _ \\ / _` |/ _ \\/ __/ _ \\ \\ / /\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | | |___| (_) | (_| |  __/ (_| (_) \\ V /\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |  \\_____\\___/ \\__,_|\\___|\\___\\___/ \\_/\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |                               Bash-1.0.3\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[0;36m==>\u001b[0m git version 2.33.0 found\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[0;36m==>\u001b[0m curl 7.68.0 (x86_64-pc-linux-gnu) libcurl/7.68.0 OpenSSL/1.1.1f zlib/1.2.11 brotli/1.0.7 libidn2/2.2.0 libpsl/0.21.0 (+libidn2/2.2.0) libssh/0.9.3/openssl/zlib nghttp2/1.40.0 librtmp/2.3\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Release-Date: 2020-01-08\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtmp rtsp scp sftp smb smbs smtp smtps telnet tftp \n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Features: AsynchDNS brotli GSS-API HTTP2 HTTPS-proxy IDN IPv6 Kerberos Largefile libz NTLM NTLM_WB PSL SPNEGO SSL TLS-SRP UnixSockets\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[0;90m==>\u001b[0m GitHub Actions detected.\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |     Env vars used:\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |       -> GITHUB_ACTIONS:    true\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |       -> GITHUB_HEAD_REF:   \n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |       -> GITHUB_REF:        refs/heads/main\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |       -> GITHUB_REPOSITORY: mesonbuild/meson-python\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |       -> GITHUB_RUN_ID:     1\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |       -> GITHUB_SHA:        354e049e8371816c3d7b34a42e75e8b4b381912d\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |       -> GITHUB_WORKFLOW:   5972f913-cb5d-4143-8766-062b7d7b7525\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |     \u001b[0;90mproject root:\u001b[0m .\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |     \u001b[0;90mYaml found at:\u001b[0m codecov.yml\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[0;90m==>\u001b[0m Running gcov in . \u001b[0;90m(disable via -X gcov)\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[0;90m==>\u001b[0m Python coveragepy exists \u001b[0;90mdisable via -X coveragepy\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |     \u001b[0;90m->\u001b[0m Running coverage combine\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | tests/test_editable.py::test_importlib_resources \u001b[32mPASSED\u001b[0m\u001b[32m                  [  8%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Combined data file .coverage.croaker.230.774554\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Skipping duplicate data .coverage.croaker.243.277717\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Skipping duplicate data .coverage.croaker.252.872887\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Skipping duplicate data .coverage.croaker.210.232744\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Skipping duplicate data .coverage.croaker.239.156870\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Skipping duplicate data .coverage.croaker.209.889447\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Skipping duplicate data .coverage.croaker.186.567321\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Skipping duplicate data .coverage.croaker.187.376991\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Skipping duplicate data .coverage.croaker.248.832681\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Skipping duplicate data .coverage.croaker.162.998419\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Skipping duplicate data .coverage.croaker.220.115718\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Skipping duplicate data .coverage.croaker.235.302453\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | Skipping duplicate data .coverage.croaker.157.959330\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |     \u001b[0;90m->\u001b[0m Running coverage xml\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |     \u001b[0;31mNo data to report.\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[0;90m==>\u001b[0m Searching for coverage reports in:\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |     \u001b[0;32m+\u001b[0m .\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |     \u001b[0;90m->\u001b[0m Found 3 reports\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[0;90m==>\u001b[0m Detecting git/mercurial file structure\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[0;90m==>\u001b[0m Appending build variables\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |     \u001b[0;32m+\u001b[0m PYTHON\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[0;90m==>\u001b[0m Reading reports\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |     \u001b[0;32m+\u001b[0m ./coverage-3.7.xml \u001b[0;90mbytes=69137\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |     \u001b[0;32m+\u001b[0m ./coverage-pyston.xml \u001b[0;90mbytes=69601\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |     \u001b[0;32m+\u001b[0m ./report.xml \u001b[0;90mbytes=9854\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[0;90m==>\u001b[0m Appending adjustments\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |     \u001b[0;36mhttps://docs.codecov.io/docs/fixing-reports\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |     \u001b[0;32m+\u001b[0m Found adjustments\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[0;90m==>\u001b[0m Gzipping contents\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |         16K\t/tmp/codecov.taufIT.gz\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[0;90m==>\u001b[0m Uploading reports\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |     \u001b[0;90murl:\u001b[0m https://codecov.io\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |     \u001b[0;90mquery:\u001b[0m branch=main&commit=354e049e8371816c3d7b34a42e75e8b4b381912d&build=1&build_url=http%3A%2F%2Fgithub.com%2Fmesonbuild%2Fmeson-python%2Factions%2Fruns%2F1&name=3.7&tag=&slug=mesonbuild%2Fmeson-python&service=github-actions&flags=tests&pr=&job=5972f913-cb5d-4143-8766-062b7d7b7525&cmd_args=n,F,Q,e\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[0;90m->\u001b[0m  Pinging Codecov\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | https://codecov.io/upload/v4?package=github-action-v1.5.2-1.0.3&token=secret&branch=main&commit=354e049e8371816c3d7b34a42e75e8b4b381912d&build=1&build_url=http%3A%2F%2Fgithub.com%2Fmesonbuild%2Fmeson-python%2Factions%2Fruns%2F1&name=3.7&tag=&slug=mesonbuild%2Fmeson-python&service=github-actions&flags=tests&pr=&job=5972f913-cb5d-4143-8766-062b7d7b7525&cmd_args=n,F,Q,e\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[0;31m{'detail': ErrorDetail(string='Unable to locate build via Github Actions API. Please upload with the Codecov repository upload token to resolve issue.', code='not_found')}\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | 404\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \u001b[0;90m==>\u001b[0m Uploading to Codecov\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |                                  Dload  Upload   Total   Spent    Left  Speed\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   | \r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100 12945  100   171  100 12774    564  42158 --:--:-- --:--:-- --:--:-- 42722\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   |     \u001b[0;32m{'detail': ErrorDetail(string='Unable to locate build via Github Actions API. Please upload with the Codecov repository upload token to resolve issue.', code='not_found')}\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \u2705  Success - Main Send coverage report\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ] \u2b50 Run Post Set up target Python\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/cache-save/index.js] user= workdir=\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | tests/test_editable.py::test_editable_install \u001b[32mPASSED\u001b[0m\u001b[32m                     [ 10%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ]   \u2705  Success - Post Set up target Python\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   | tests/test_editable.py::test_editble_reentrant \u001b[32mPASSED\u001b[0m\u001b[32m                    [ 11%]\u001b[0m\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ]   \u274c  Failure - Main Run tests\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/8cb9ede735ff0c34e846f47f9c0b5ac49650757b6563ab4ef28eb1e7e44d4e07/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ] failed to remove container: Delete \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/dd8dec2c52aab143029fd4a20759f8e21f0cf0d45480755aefc342aee5019d2d?force=1&v=1\": context deadline exceeded\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-1  ] \ud83c\udfc1  Job succeeded\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ] failed to remove container: Delete \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/8cb9ede735ff0c34e846f47f9c0b5ac49650757b6563ab4ef28eb1e7e44d4e07?force=1&v=1\": context deadline exceeded\n[5972f913-cb5d-4143-8766-062b7d7b7525/test-2  ] \ud83c\udfc1  Job succeeded\n",
        "stderr": "Error: context canceled\n",
        "workflow": {
            "path": "/tmp/558156d8-17ed-11ee-8a50-bb14de238602/mesonbuild-meson-python/.github/workflows/tests-crawler.yml",
            "type": "pytest"
        },
        "workflow_name": "5972f913-cb5d-4143-8766-062b7d7b7525",
        "build_tool": "pytest",
        "elapsed_time": 660.1198854446411
    }
}