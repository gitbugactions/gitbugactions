{
    "repository": "fsspec/gcsfs",
    "stars": 285,
    "language": "python",
    "size": 5392,
    "clone_url": "https://github.com/fsspec/gcsfs.git",
    "timestamp": "2023-06-28T11:46:25.837969Z",
    "clone_success": true,
    "number_of_actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": true,
        "tests": [
            {
                "classname": "gcsfs.tests.test_checkers",
                "name": "test_validate_headers[checker0-hello world-different checksum-raises0]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_checkers",
                "name": "test_validate_headers[checker1-hello world-hello world-raises1]",
                "time": 0.058,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_checkers",
                "name": "test_validate_headers[checker2-hello world-different checksum-raises2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_checkers",
                "name": "test_validate_headers[checker3-hello world-hello world-raises3]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_checkers",
                "name": "test_checker_validate_http_response[checker0-hello world-different checksum-raises0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_checkers",
                "name": "test_checker_validate_http_response[checker1-hello world-hello world-raises1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_checkers",
                "name": "test_checker_validate_http_response[checker2-hello world-hello world-raises2]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_checkers",
                "name": "test_checker_validate_http_response[checker3-hello world-different size-raises3]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_checkers",
                "name": "test_checker_validate_http_response[checker4-hello world-hello world-raises4]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_checkers",
                "name": "test_checker_validate_http_response[checker5-hello world-different size-raises5]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_checkers",
                "name": "test_checker_validate_json_response[checker0-hello world-different checksum-raises0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_checkers",
                "name": "test_checker_validate_json_response[checker1-hello world-hello world-raises1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_checkers",
                "name": "test_checker_validate_json_response[checker2-hello world-hello world-raises2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_checkers",
                "name": "test_checker_validate_json_response[checker3-hello world-different size-raises3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_checkers",
                "name": "test_checker_validate_json_response[checker4-hello world-different checksum-raises4]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_checkers",
                "name": "test_checker_validate_json_response[checker5-hello world\\n-hello world\\n-raises5]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_simple",
                "time": 0.075,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_many_connect",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_many_connect_new",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_simple_upload",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_large_upload",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_multi_upload",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_info",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_ls2",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_pickle",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_ls_touch",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_rm",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_rm_batch",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_rm_recursive",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_rm_chunked_batch",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_file_access",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_file_info",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_du",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_ls",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_ls_detail",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_gcs_glob",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_read_keys_from_bucket",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_url",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_seek",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_bad_open",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_copy",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_copy_recursive",
                "time": 0.023,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_copy_errors",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_move",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_cat_file",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_get_put[None]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_get_put[size]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_get_put[md5]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_get_put[crc32c]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_get_put_list",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_get_put_recursive[]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_get_put_recursive[gs://]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_get_put_recursive[gcs://]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_get_put_file_in_dir[]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_get_put_file_in_dir[gs://]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_get_put_file_in_dir[gcs://]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_special_characters_filename",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_slash_filename",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_hash_filename",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_errors",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_read_small",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_seek_delimiter",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_read_block",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_flush",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_write_fails",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_write_blocks",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_write_blocks2",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_readline",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_readline_from_cache",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_readline_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_readline_blocksize",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_next",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_iterable",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_fixed_key_metadata[custom_time-2021-10-21T17:00:00Z-customTime]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_fixed_key_metadata[cache_control-public, max-age=3600-cacheControl]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_fixed_key_metadata[content_encoding-gzip-contentEncoding]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_fixed_key_metadata[content_language-en-contentLanguage]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_fixed_key_metadata[content_disposition-Attachment; filename=sample.empty-contentDisposition]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_readable",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_seekable",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_writable",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_merge",
                "time": 0.017,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_bigger_than_block_read",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_current",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_array",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_attrs",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_request_user_project",
                "time": 0.014,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_request_user_project_string",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_request_header",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_user_project_fallback_google_default",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_user_project_cat",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_raise_on_project_mismatch",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_ls_prefix_cache",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_placeholder_dir_cache_validity",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_pipe_small_cache_validity",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_put_small_cache_validity",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_pseudo_dir_find",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_zero_cache_timeout",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_find_with_prefix_partial_cache[False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_find_with_prefix_partial_cache[True]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_find_dircache",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_percent_file_name",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_bucket_location[None]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_bucket_location[US]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_bucket_location[EUROPE-WEST3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_bucket_location[europe-west3]",
                "time": 0.018,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_bucket_default_location_overwrite",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_dir_marker",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_mkdir_with_path",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_deep_find_wthdirs",
                "time": 0.006,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_info_versioned",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_cat_versioned",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_cp_versioned",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_ls_versioned",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_find_versioned",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_cp_directory_recursive",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_get_directory_recursive",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_put_directory_recursive",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_cp_two_files",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_multiglob",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_core",
                "name": "test_expiry_keyword",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_credentials",
                "name": "test_googlecredentials_none",
                "time": 0.131,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_credentials",
                "name": "test_credentials_from_raw_token[]",
                "time": 0.172,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_credentials",
                "name": "test_credentials_from_raw_token[incorrect.token]",
                "time": 0.089,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_credentials",
                "name": "test_credentials_from_raw_token[xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx]",
                "time": 0.089,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_fuse",
                "name": "test_fuse",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Test fuse causes hang.",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_mapping",
                "name": "test_api",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_mapping",
                "name": "test_map_simple",
                "time": 0.071,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_mapping",
                "name": "test_map_default_gcsfilesystem",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_mapping",
                "name": "test_map_errors",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_mapping",
                "name": "test_map_with_data",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_mapping",
                "name": "test_map_complex_keys",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_mapping",
                "name": "test_map_clear_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_mapping",
                "name": "test_map_pickle",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_mapping",
                "name": "test_map_array",
                "time": 0.012,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_mapping",
                "name": "test_map_bytearray",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_mapping",
                "name": "test_new_bucket",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_retry",
                "name": "test_tempfile",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_retry",
                "name": "test_retriable_exception",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_retry",
                "name": "test_validate_response",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_retry",
                "name": "test_metadata_read_permissions[missing_with_get_perms]",
                "time": 0.068,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_retry",
                "name": "test_metadata_read_permissions[missing_with_list_perms]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_retry",
                "name": "test_metadata_read_permissions[existing_with_get_perms]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "gcsfs.tests.test_retry",
                "name": "test_metadata_read_permissions[existing_with_list_perms]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ] \ud83d\ude80  Start image=crawlergpt:latest\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8] \ud83d\ude80  Start image=crawlergpt:latest\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-gcsfs] user=0 workdir=\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-gcsfs] user=0 workdir=\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \u2601  git clone 'https://github.com/mamba-org/provision-with-micromamba' # ref=main\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8] \ud83e\uddea  Matrix: map[python-version:3.8]\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8] \u2b50 Run Main Checkout source\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \u2705  Success - Main Checkout source\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8] \u2b50 Run Main Setup Conda Environment\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udc33  docker cp src=/tmp/act-cache/85530623-bab6-44d1-b34d-2823b34ec7a2/act/mamba-org-provision-with-micromamba@main/ dst=/var/run/act/actions/mamba-org-provision-with-micromamba@main/\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/mamba-org-provision-with-micromamba@main/] user=0 workdir=\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/mamba-org-provision-with-micromamba@main/dist/main/index.js] user= workdir=\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \u2601  git clone 'https://github.com/pre-commit/action' # ref=v2.0.0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udea7  ::warning::This action is deprecated and no longer maintained. Please use mamba-org/setup-micromamba instead. See `https://github.com/mamba-org/provision-with-micromamba#migration-to-setup-micromamba` for a migration guide.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Contents of /home/runneradmin/.condarc%0Achannel_priority: strict%0Achannels:%0A  - conda-forge%0A\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \u2753  ::group::Install micromamba ...\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Resolved Keys:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::[\"micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Wed Jun 28 2023 YYY\"]\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Checking zstd --version\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:42541/_apis/artifactcache/cache?keys=micromamba-bin%2520https%253A%252F%252Fmicro.mamba.pm%252Fapi%252Fmicromamba%252Flinux-64%252Flatest%2520Wed%2520Jun%252028%25202023%2520YYY&version=40cd471e258f8d42c1b6f93422de32dc9780571a713394832b85a5dd2c8cc2a6\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Failed to delete archive: Error: ENOENT: no such file or directory, unlink ''\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Cache miss for key 'micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Wed Jun 28 2023 YYY'\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-c\",\"curl https://micro.mamba.pm/api/micromamba/linux-64/latest -Ls --retry 5 --retry-delay 1 | tar -xj -O bin/micromamba > /home/runneradmin/micromamba-bin/micromamba\"]]\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | [command]/usr/bin/bash -eo pipefail -c curl https://micro.mamba.pm/api/micromamba/linux-64/latest -Ls --retry 5 --retry-delay 1 | tar -xj -O bin/micromamba > /home/runneradmin/micromamba-bin/micromamba\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ] \u2b50 Run Main actions/checkout@v3\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \u2705  Success - Main actions/checkout@v3\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ] \u2b50 Run Main actions/setup-python@v4\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \ud83d\udc33  docker cp src=/tmp/act-cache/85530623-bab6-44d1-b34d-2823b34ec7a2/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Will save to cache with key micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Wed Jun 28 2023 YYY\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"init\",\"-s\",\"zsh\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | [command]/home/runneradmin/micromamba-bin/micromamba shell init -s zsh -p /home/runneradmin/micromamba-root -y --log-level warning\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Modifying RC file \"/home/runneradmin/.zshrc\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Generating config for root prefix \u001b[1m\"/home/runneradmin/micromamba-root\"\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Setting mamba executable to: \u001b[1m\"/home/runneradmin/micromamba-bin/micromamba\"\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Adding (or replacing) the following in your \"/home/runneradmin/.zshrc\" file\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | # >>> mamba initialize >>>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | # !! Contents within this block are managed by 'mamba init' !!\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | export MAMBA_EXE=\"/home/runneradmin/micromamba-bin/micromamba\";\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | export MAMBA_ROOT_PREFIX=\"/home/runneradmin/micromamba-root\";\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | __mamba_setup=\"$(\"$MAMBA_EXE\" shell hook --shell zsh --prefix \"$MAMBA_ROOT_PREFIX\" 2> /dev/null)\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | if [ $? -eq 0 ]; then\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     eval \"$__mamba_setup\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | else\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     if [ -f \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\" ]; then\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         . \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     else\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         export  PATH=\"/home/runneradmin/micromamba-root/bin:$PATH\"  # extra space after export prevents interference from conda init\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     fi\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | fi\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | unset __mamba_setup\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | # <<< mamba initialize <<<\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"init\",\"-s\",\"bash\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | [command]/home/runneradmin/micromamba-bin/micromamba shell init -s bash -p /home/runneradmin/micromamba-root -y --log-level warning\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Modifying RC file \"/tmp/micromamba-hXoUkt/.bashrc\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Generating config for root prefix \u001b[1m\"/home/runneradmin/micromamba-root\"\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Setting mamba executable to: \u001b[1m\"/home/runneradmin/micromamba-bin/micromamba\"\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Adding (or replacing) the following in your \"/tmp/micromamba-hXoUkt/.bashrc\" file\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | # >>> mamba initialize >>>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | # !! Contents within this block are managed by 'mamba init' !!\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | export MAMBA_EXE=\"/home/runneradmin/micromamba-bin/micromamba\";\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | export MAMBA_ROOT_PREFIX=\"/home/runneradmin/micromamba-root\";\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | __mamba_setup=\"$(\"$MAMBA_EXE\" shell hook --shell bash --prefix \"$MAMBA_ROOT_PREFIX\" 2> /dev/null)\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | if [ $? -eq 0 ]; then\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     eval \"$__mamba_setup\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | else\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     if [ -f \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\" ]; then\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         . \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     else\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         export  PATH=\"/home/runneradmin/micromamba-root/bin:$PATH\"  # extra space after export prevents interference from conda init\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     fi\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | fi\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | unset __mamba_setup\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | # <<< mamba initialize <<<\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \u2753  ::endgroup::\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \u2753  ::group::Install environment gcsfs_test from /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-gcsfs/environment_gcsfs.yaml python=3.8...\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Resolved Keys:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::[\"micromamba-pkgs linux-64 Wed Jun 28 2023\"]\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Checking zstd --version\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:42541/_apis/artifactcache/cache?keys=micromamba-pkgs%2520linux-64%2520Wed%2520Jun%252028%25202023&version=7c4bd7238abeadc417e56f8af7aa842aa768cfb50d429d856ac6834e46acbab7\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Failed to delete archive: Error: ENOENT: no such file or directory, unlink ''\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Cache miss for key 'micromamba-pkgs linux-64 Wed Jun 28 2023'\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | create env gcsfs_test\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba create -n gcsfs_test -y --log-level warning \\\"python=3.8\\\" -f /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-gcsfs/environment_gcsfs.yaml\"]\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | [command]/home/runneradmin/micromamba-bin/micromamba create -n gcsfs_test -y --log-level warning python=3.8 -f /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-gcsfs/environment_gcsfs.yaml\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                            __\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |           __  ______ ___  ____ _____ ___  / /_  ____ _\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |          / / / / __ `__ \\/ __ `/ __ `__ \\/ __ \\/ __ `/\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         / /_/ / / / / / / /_/ / / / / / / /_/ / /_/ /\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |        / .___/_/ /_/ /_/\\__,_/_/ /_/ /_/_.___/\\__,_/\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |       /_/\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | [warning]Neither 'python-version' nor 'python-version-file' inputs were supplied. Attempting to find '.python-version' file.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | [warning].python-version doesn't exist.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \ud83d\udea7  ::warning::The `python-version` input is not set.  The version of Python currently in `PATH` will be used.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \u2705  Success - Main actions/setup-python@v4\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ] \u2b50 Run Main pre-commit/action@v2.0.0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \ud83d\udc33  docker cp src=/tmp/act-cache/85530623-bab6-44d1-b34d-2823b34ec7a2/act/pre-commit-action@v2.0.0/ dst=/var/run/act/actions/pre-commit-action@v2.0.0/\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/pre-commit-action@v2.0.0/] user=0 workdir=\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/pre-commit-action@v2.0.0/dist/index.js] user= workdir=\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Transaction\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   Prefix: /home/runneradmin/micromamba-root/envs/gcsfs_test\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   Updating specs:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |    - python=3.8\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |    - aiohttp\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |    - crcmod\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |    - decorator\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |    - fsspec\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |    - fusepy[version='<3']\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |    - google-api-core\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |    - google-api-python-client\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |    - google-auth\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |    - google-auth-oauthlib\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |    - google-cloud-core\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |    - libfuse[version='<3']\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |    - pytest\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |    - pytest-timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |    - requests\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |    - ujson\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |    - pip\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   Package                        Version  Build               Channel          Size\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   Install:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + _libgcc_mutex                    0.1  conda_forge         conda-forge       3kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + _openmp_mutex                    4.5  2_gnu               conda-forge      24kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + aiohttp                        3.8.4  py38h01eb140_1      conda-forge     445kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + aiosignal                      1.3.1  pyhd8ed1ab_0        conda-forge      13kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + async-timeout                  4.0.2  pyhd8ed1ab_0        conda-forge       9kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + attrs                         23.1.0  pyh71513ae_1        conda-forge      55kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + blinker                        1.6.2  pyhd8ed1ab_0        conda-forge      18kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + brotlipy                       0.7.0  py38h0a891b7_1005   conda-forge     351kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + bzip2                          1.0.8  h7f98852_4          conda-forge     496kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + c-ares                        1.19.1  hd590300_0          conda-forge     113kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + ca-certificates             2023.5.7  hbcca054_0          conda-forge     148kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + cachetools                     5.3.0  pyhd8ed1ab_0        conda-forge      14kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + certifi                     2023.5.7  pyhd8ed1ab_0        conda-forge     152kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + cffi                          1.15.1  py38h4a40e3a_3      conda-forge     235kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + charset-normalizer             3.1.0  pyhd8ed1ab_0        conda-forge      45kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + click                          8.1.3  unix_pyhd8ed1ab_2   conda-forge      76kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + colorama                       0.4.6  pyhd8ed1ab_0        conda-forge      25kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + crcmod                           1.7  py38h0a891b7_1009   conda-forge      36kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + cryptography                  41.0.1  py38hcdda232_0      conda-forge       2MB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + decorator                      5.1.1  pyhd8ed1ab_0        conda-forge      12kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + exceptiongroup                 1.1.1  pyhd8ed1ab_0        conda-forge      19kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + frozenlist                     1.3.3  py38h0a891b7_0      conda-forge      46kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + fsspec                      2023.6.0  pyh1a96a4e_0        conda-forge     118kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + fusepy                         2.0.4  py_0                conda-forge      10kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + google-api-core               2.11.1  pyhd8ed1ab_0        conda-forge      78kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + google-api-python-client      2.90.0  pyhd8ed1ab_0        conda-forge       6MB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + google-auth                   2.21.0  pyh1a96a4e_0        conda-forge     102kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + google-auth-httplib2           0.1.0  pyhd8ed1ab_1        conda-forge      14kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + google-auth-oauthlib           1.0.0  pyhd8ed1ab_0        conda-forge      21kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + google-cloud-core              2.3.2  pyhd8ed1ab_0        conda-forge      28kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + googleapis-common-protos      1.59.1  pyhd8ed1ab_0        conda-forge     120kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + grpcio                        1.55.1  py38h94a1851_1      conda-forge     785kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + httplib2                      0.22.0  pyhd8ed1ab_0        conda-forge      95kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + idna                             3.4  pyhd8ed1ab_0        conda-forge      57kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + iniconfig                      2.0.0  pyhd8ed1ab_0        conda-forge      11kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + ld_impl_linux-64                2.40  h41732ed_0          conda-forge     705kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + libabseil                 20230125.2  cxx17_h59595ed_2    conda-forge       1MB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + libffi                         3.4.2  h7f98852_5          conda-forge      58kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + libfuse                        2.9.9  ha1f6473_1          conda-forge     145kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + libgcc-ng                     13.1.0  he5830b7_0          conda-forge     776kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + libgomp                       13.1.0  he5830b7_0          conda-forge     419kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + libgrpc                       1.55.1  h59456c1_1          conda-forge       6MB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + libiconv                        1.17  h166bdaf_0          conda-forge       1MB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + libnsl                         2.0.0  h7f98852_0          conda-forge      31kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + libprotobuf                   4.23.2  hd1fb520_5          conda-forge       3MB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + libsqlite                     3.42.0  h2797004_0          conda-forge     829kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + libstdcxx-ng                  13.1.0  hfd8a6a1_0          conda-forge       4MB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + libuuid                       2.38.1  h0b41bf4_0          conda-forge      34kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + libzlib                       1.2.13  hd590300_5          conda-forge      62kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + multidict                      6.0.4  py38h1de0b5d_0      conda-forge      53kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + ncurses                          6.4  hcb278e6_0          conda-forge     881kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + oauthlib                       3.2.2  pyhd8ed1ab_0        conda-forge      92kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + openssl                        3.1.1  hd590300_1          conda-forge       3MB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + packaging                       23.1  pyhd8ed1ab_0        conda-forge      46kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + pip                           23.1.2  pyhd8ed1ab_0        conda-forge       1MB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + pluggy                         1.2.0  pyhd8ed1ab_0        conda-forge      22kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + protobuf                      4.23.2  py38h830738e_1      conda-forge     323kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + pyasn1                         0.4.8  py_0                conda-forge      54kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + pyasn1-modules                 0.2.7  py_0                conda-forge      61kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + pycparser                       2.21  pyhd8ed1ab_0        conda-forge     103kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + pyjwt                          2.7.0  pyhd8ed1ab_0        conda-forge      24kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + pyopenssl                     23.2.0  pyhd8ed1ab_1        conda-forge     129kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + pyparsing                      3.1.0  pyhd8ed1ab_0        conda-forge      89kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + pysocks                        1.7.1  pyha2e5f31_6        conda-forge      19kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + pytest                         7.4.0  pyhd8ed1ab_0        conda-forge     244kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + pytest-timeout                 2.1.0  pyhd8ed1ab_0        conda-forge      16kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + python                        3.8.17  he550d4f_0_cpython  conda-forge      25MB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + python_abi                       3.8  3_cp38              conda-forge       6kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + pyu2f                          0.1.5  pyhd8ed1ab_0        conda-forge      32kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + re2                       2023.03.02  h8c504da_0          conda-forge     201kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + readline                         8.2  h8228510_1          conda-forge     281kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + requests                      2.31.0  pyhd8ed1ab_0        conda-forge      57kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + requests-oauthlib              1.3.1  pyhd8ed1ab_0        conda-forge      22kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + rsa                              4.9  pyhd8ed1ab_0        conda-forge      30kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + setuptools                    68.0.0  pyhd8ed1ab_0        conda-forge     464kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + six                           1.16.0  pyh6c4a22f_0        conda-forge      14kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + tk                            8.6.12  h27826a3_0          conda-forge       3MB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + tomli                          2.0.1  pyhd8ed1ab_0        conda-forge      16kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + typing-extensions              4.6.3  hd8ed1ab_0          conda-forge      10kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + typing_extensions              4.6.3  pyha770c72_0        conda-forge      35kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + ujson                          5.7.0  py38h8dc9893_0      conda-forge      51kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + uritemplate                    4.1.1  pyhd8ed1ab_0        conda-forge      12kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + urllib3                      1.26.15  pyhd8ed1ab_0        conda-forge     113kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + wheel                         0.40.0  pyhd8ed1ab_0        conda-forge      56kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + xz                             5.2.6  h166bdaf_0          conda-forge     418kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   + yarl                           1.9.2  py38h01eb140_0      conda-forge      97kB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   Summary:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   Install: 86 packages\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   Total download: 66MB\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Transaction starting\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \u2753  ::group::install pre-commit\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | [command]/usr/bin/pip install pre-commit\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | Collecting pre-commit\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   |   Downloading pre_commit-3.3.3-py2.py3-none-any.whl (202 kB)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | Collecting cfgv>=2.0.0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   |   Downloading cfgv-3.3.1-py2.py3-none-any.whl (7.3 kB)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | Collecting virtualenv>=20.10.0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   |   Downloading virtualenv-20.23.1-py3-none-any.whl (3.3 MB)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | Collecting identify>=1.0.0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   |   Downloading identify-2.5.24-py2.py3-none-any.whl (98 kB)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | Requirement already satisfied: pyyaml>=5.1 in /usr/lib/python3/dist-packages (from pre-commit) (5.3.1)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | Collecting nodeenv>=0.11.1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   |   Downloading nodeenv-1.8.0-py2.py3-none-any.whl (22 kB)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking _libgcc_mutex-0.1-conda_forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking libstdcxx-ng-13.1.0-hfd8a6a1_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking python_abi-3.8-3_cp38\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking ld_impl_linux-64-2.40-h41732ed_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking ca-certificates-2023.5.7-hbcca054_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking libgomp-13.1.0-he5830b7_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking _openmp_mutex-4.5-2_gnu\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking libgcc-ng-13.1.0-he5830b7_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking libiconv-1.17-h166bdaf_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking libabseil-20230125.2-cxx17_h59595ed_2\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | Collecting distlib<1,>=0.3.6\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   |   Downloading distlib-0.3.6-py2.py3-none-any.whl (468 kB)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking openssl-3.1.1-hd590300_1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | Collecting filelock<4,>=3.12\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   |   Downloading filelock-3.12.2-py3-none-any.whl (10 kB)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking libzlib-1.2.13-hd590300_5\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking libffi-3.4.2-h7f98852_5\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking bzip2-1.0.8-h7f98852_4\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking re2-2023.03.02-h8c504da_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking c-ares-1.19.1-hd590300_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking ncurses-6.4-hcb278e6_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | Collecting platformdirs<4,>=3.5.1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   |   Downloading platformdirs-3.8.0-py3-none-any.whl (16 kB)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | Requirement already satisfied: setuptools in /usr/lib/python3/dist-packages (from nodeenv>=0.11.1->pre-commit) (45.2.0)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | Installing collected packages: cfgv, distlib, filelock, platformdirs, virtualenv, identify, nodeenv, pre-commit\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   |   WARNING: The script virtualenv is installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   |   WARNING: The script identify-cli is installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   |   WARNING: The script nodeenv is installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   |   WARNING: The script pre-commit is installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | Successfully installed cfgv-3.3.1 distlib-0.3.6 filelock-3.12.2 identify-2.5.24 nodeenv-1.8.0 platformdirs-3.8.0 pre-commit-3.3.3 virtualenv-20.23.1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | [command]/usr/bin/pip freeze --local\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | argcomplete==1.12.3\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | cfgv==3.3.1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | click==8.0.1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | distlib==0.3.6\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | filelock==3.12.2\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | identify==2.5.24\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | nodeenv==1.8.0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | packaging==21.0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | pipx==0.16.4\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | platformdirs==3.8.0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | pre-commit==3.3.3\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | pyparsing==2.4.7\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | userpath==1.7.0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   | virtualenv==20.23.1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \u2753  ::endgroup::\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \ud83d\udcac  ::debug::Resolved Keys:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \ud83d\udcac  ::debug::[\"pre-commit-2-c3d9b949beab6063d3f946d79e1337ffed190ae7c8ba08e9736b10ac17eb1e13-e146a478f8b152de675674b10609607904c30547081562a7f3f4f4bd93b0c4e2\"]\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \ud83d\udcac  ::debug::Checking zstd --version\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:42541/_apis/artifactcache/cache?keys=pre-commit-2-c3d9b949beab6063d3f946d79e1337ffed190ae7c8ba08e9736b10ac17eb1e13-e146a478f8b152de675674b10609607904c30547081562a7f3f4f4bd93b0c4e2&version=daaad88d35438f18ef22c9dee9688325e163e3ec248b8f04a97ec7dfe102a0ab\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \u2757  ::error::Unable to locate executable file: pre-commit. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ]   \u274c  Failure - Main pre-commit/action@v2.0.0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ] exitcode '1': failure\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking libuuid-2.38.1-h0b41bf4_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking xz-5.2.6-h166bdaf_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking libnsl-2.0.0-h7f98852_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking libfuse-2.9.9-ha1f6473_1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking libprotobuf-4.23.2-hd1fb520_5\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking libsqlite-3.42.0-h2797004_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking tk-8.6.12-h27826a3_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking readline-8.2-h8228510_1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking libgrpc-1.55.1-h59456c1_1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking python-3.8.17-he550d4f_0_cpython\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking wheel-0.40.0-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking setuptools-68.0.0-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking pip-23.1.2-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/lint      ] \ud83c\udfc1  Job failed\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking typing_extensions-4.6.3-pyha770c72_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking pyparsing-3.1.0-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking pysocks-1.7.1-pyha2e5f31_6\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking attrs-23.1.0-pyh71513ae_1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking pycparser-2.21-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking blinker-1.6.2-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking pyjwt-2.7.0-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking pyasn1-0.4.8-py_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking uritemplate-4.1.1-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking six-1.16.0-pyh6c4a22f_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking cachetools-5.3.0-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking click-8.1.3-unix_pyhd8ed1ab_2\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking tomli-2.0.1-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking iniconfig-2.0.0-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking exceptiongroup-1.1.1-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking pluggy-1.2.0-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking packaging-23.1-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking colorama-0.4.6-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking charset-normalizer-3.1.0-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking idna-3.4-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking certifi-2023.5.7-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking fsspec-2023.6.0-pyh1a96a4e_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking decorator-5.1.1-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking fusepy-2.0.4-py_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking typing-extensions-4.6.3-hd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking httplib2-0.22.0-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking pyasn1-modules-0.2.7-py_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking rsa-4.9-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking pyu2f-0.1.5-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking pytest-7.4.0-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking async-timeout-4.0.2-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking pytest-timeout-2.1.0-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking multidict-6.0.4-py38h1de0b5d_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking frozenlist-1.3.3-py38h0a891b7_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking grpcio-1.55.1-py38h94a1851_1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking protobuf-4.23.2-py38h830738e_1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking ujson-5.7.0-py38h8dc9893_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking crcmod-1.7-py38h0a891b7_1009\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking cffi-1.15.1-py38h4a40e3a_3\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking yarl-1.9.2-py38h01eb140_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking brotlipy-0.7.0-py38h0a891b7_1005\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking cryptography-41.0.1-py38hcdda232_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking aiosignal-1.3.1-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking googleapis-common-protos-1.59.1-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking oauthlib-3.2.2-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking pyopenssl-23.2.0-pyhd8ed1ab_1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking urllib3-1.26.15-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking requests-2.31.0-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking requests-oauthlib-1.3.1-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking aiohttp-3.8.4-py38h01eb140_1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking google-auth-2.21.0-pyh1a96a4e_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking google-auth-httplib2-0.1.0-pyhd8ed1ab_1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking google-auth-oauthlib-1.0.0-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking google-api-core-2.11.1-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking google-cloud-core-2.3.2-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Linking google-api-python-client-2.90.0-pyhd8ed1ab_0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Transaction finished\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | To activate this environment, use:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     micromamba activate gcsfs_test\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Or to execute a single command in this environment, use:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     micromamba run -n gcsfs_test mycommand\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Installing pip packages: git+https://github.com/fsspec/filesystem_spec\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Collecting git+https://github.com/fsspec/filesystem_spec (from -r /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-gcsfs/mambafF29DIxcenu (line 1))\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   Cloning https://github.com/fsspec/filesystem_spec to /tmp/pip-req-build-ylz8zawj\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   Running command git clone --filter=blob:none --quiet https://github.com/fsspec/filesystem_spec /tmp/pip-req-build-ylz8zawj\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   Resolved https://github.com/fsspec/filesystem_spec to commit 348d4ab5794de3b06d9899c1fc2fd2b418fe9109\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   Installing build dependencies: started\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   Installing build dependencies: finished with status 'done'\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   Getting requirements to build wheel: started\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   Getting requirements to build wheel: finished with status 'done'\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   Preparing metadata (pyproject.toml): started\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Building wheels for collected packages: fsspec\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   Building wheel for fsspec (pyproject.toml): started\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   Building wheel for fsspec (pyproject.toml): finished with status 'done'\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   Created wheel for fsspec: filename=fsspec-2023.6.0+4.g348d4ab-py3-none-any.whl size=155631 sha256=e6d1c9a327b130fe7429e2ca5d6e754e090296e5c6c88035bf8b0aef805af31c\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   Stored in directory: /tmp/pip-ephem-wheel-cache-2bbpoa7f/wheels/82/4f/7d/df7a39b365779169ffc241507645ee0ed36dfe3dd537b0d9d8\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Successfully built fsspec\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Installing collected packages: fsspec\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   Attempting uninstall: fsspec\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     Found existing installation: fsspec 2023.6.0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     Uninstalling fsspec-2023.6.0:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |       Successfully uninstalled fsspec-2023.6.0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Successfully installed fsspec-2023.6.0+4.g348d4ab\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | --- Contents of /home/runneradmin/.bash_profile ---\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | # >>> mamba initialize >>>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | # !! Contents within this block are managed by 'mamba init' !!\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | export MAMBA_EXE=\"/home/runneradmin/micromamba-bin/micromamba\";\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | export MAMBA_ROOT_PREFIX=\"/home/runneradmin/micromamba-root\";\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | __mamba_setup=\"$(\"$MAMBA_EXE\" shell hook --shell bash --prefix \"$MAMBA_ROOT_PREFIX\" 2> /dev/null)\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | if [ $? -eq 0 ]; then\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     eval \"$__mamba_setup\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | else\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     if [ -f \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\" ]; then\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         . \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     else\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         export  PATH=\"/home/runneradmin/micromamba-root/bin:$PATH\"  # extra space after export prevents interference from conda init\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     fi\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | fi\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | unset __mamba_setup\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | # <<< mamba initialize <<<\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | set -eo pipefail; micromamba activate gcsfs_test;\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | --- End contents of /home/runneradmin/.bash_profile ---\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-l\",\"-c\",\"micromamba info --json\"]]\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | [command]/usr/bin/bash -eo pipefail -l -c micromamba info --json\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | {\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \"base environment\": \"/home/runneradmin/micromamba-root\",\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \"channels\": [\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"https://conda.anaconda.org/conda-forge/linux-64\",\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"https://conda.anaconda.org/conda-forge/noarch\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     ],\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \"curl version\": \"libcurl/7.88.1 OpenSSL/3.1.1 zlib/1.2.13 zstd/1.5.2 libssh2/1.11.0 nghttp2/1.52.0\",\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \"env location\": \"/home/runneradmin/micromamba-root/envs/gcsfs_test\",\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \"environment\": \"gcsfs_test (active)\",\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \"libarchive version\": \"libarchive 3.6.2 zlib/1.2.13 bz2lib/1.0.8 libzstd/1.5.2\",\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \"libmamba version\": \"1.4.4\",\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \"micromamba version\": \"1.4.4\",\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \"platform\": \"linux-64\",\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \"populated config files\": [\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"/home/runneradmin/.condarc\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     ],\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \"user config files\": [\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"/home/runneradmin/.mambarc\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     ],\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \"virtual packages\": [\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"__unix=0=0\",\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"__linux=5.4.0=0\",\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"__glibc=2.31=0\",\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"__archspec=1=x86_64\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     ]\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | }\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Will save to cache with key micromamba-pkgs linux-64 Wed Jun 28 2023\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \u2753  ::endgroup::\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \u2753  ::group::Environment info\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-l\",\"-c\",\"micromamba info --log-level warning\"]]\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | [command]/usr/bin/bash -eo pipefail -l -c micromamba info --log-level warning\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                            __\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |           __  ______ ___  ____ _____ ___  / /_  ____ _\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |          / / / / __ `__ \\/ __ `/ __ `__ \\/ __ \\/ __ `/\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         / /_/ / / / / / / /_/ / / / / / / /_/ / /_/ /\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |        / .___/_/ /_/ /_/\\__,_/_/ /_/ /_/_.___/\\__,_/\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |       /_/\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             environment : gcsfs_test (active)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |            env location : /home/runneradmin/micromamba-root/envs/gcsfs_test\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |       user config files : /home/runneradmin/.mambarc\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |  populated config files : /home/runneradmin/.condarc\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |        libmamba version : 1.4.4\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |      micromamba version : 1.4.4\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |            curl version : libcurl/7.88.1 OpenSSL/3.1.1 zlib/1.2.13 zstd/1.5.2 libssh2/1.11.0 nghttp2/1.52.0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |      libarchive version : libarchive 3.6.2 zlib/1.2.13 bz2lib/1.0.8 libzstd/1.5.2\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |        virtual packages : __unix=0=0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                           __linux=5.4.0=0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                           __glibc=2.31=0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                           __archspec=1=x86_64\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                channels : https://conda.anaconda.org/conda-forge/linux-64\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                           https://conda.anaconda.org/conda-forge/noarch\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |        base environment : /home/runneradmin/micromamba-root\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                platform : linux-64\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-l\",\"-c\",\"micromamba list --log-level warning\"]]\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | [command]/usr/bin/bash -eo pipefail -l -c micromamba list --log-level warning\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | List of packages in environment: \"/home/runneradmin/micromamba-root/envs/gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   Name                      Version     Build               Channel    \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   _libgcc_mutex             0.1         conda_forge         conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   _openmp_mutex             4.5         2_gnu               conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   aiohttp                   3.8.4       py38h01eb140_1      conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   aiosignal                 1.3.1       pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   async-timeout             4.0.2       pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   attrs                     23.1.0      pyh71513ae_1        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   blinker                   1.6.2       pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   brotlipy                  0.7.0       py38h0a891b7_1005   conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   bzip2                     1.0.8       h7f98852_4          conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   c-ares                    1.19.1      hd590300_0          conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   ca-certificates           2023.5.7    hbcca054_0          conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   cachetools                5.3.0       pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   certifi                   2023.5.7    pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   cffi                      1.15.1      py38h4a40e3a_3      conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   charset-normalizer        3.1.0       pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   click                     8.1.3       unix_pyhd8ed1ab_2   conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   colorama                  0.4.6       pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   crcmod                    1.7         py38h0a891b7_1009   conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   cryptography              41.0.1      py38hcdda232_0      conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   decorator                 5.1.1       pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   exceptiongroup            1.1.1       pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   frozenlist                1.3.3       py38h0a891b7_0      conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   fsspec                    2023.6.0    pyh1a96a4e_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   fusepy                    2.0.4       py_0                conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   google-api-core           2.11.1      pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   google-api-python-client  2.90.0      pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   google-auth               2.21.0      pyh1a96a4e_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   google-auth-httplib2      0.1.0       pyhd8ed1ab_1        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   google-auth-oauthlib      1.0.0       pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   google-cloud-core         2.3.2       pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   googleapis-common-protos  1.59.1      pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   grpcio                    1.55.1      py38h94a1851_1      conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   httplib2                  0.22.0      pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   idna                      3.4         pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   iniconfig                 2.0.0       pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   ld_impl_linux-64          2.40        h41732ed_0          conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   libabseil                 20230125.2  cxx17_h59595ed_2    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   libffi                    3.4.2       h7f98852_5          conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   libfuse                   2.9.9       ha1f6473_1          conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   libgcc-ng                 13.1.0      he5830b7_0          conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   libgomp                   13.1.0      he5830b7_0          conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   libgrpc                   1.55.1      h59456c1_1          conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   libiconv                  1.17        h166bdaf_0          conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   libnsl                    2.0.0       h7f98852_0          conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   libprotobuf               4.23.2      hd1fb520_5          conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   libsqlite                 3.42.0      h2797004_0          conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   libstdcxx-ng              13.1.0      hfd8a6a1_0          conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   libuuid                   2.38.1      h0b41bf4_0          conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   libzlib                   1.2.13      hd590300_5          conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   multidict                 6.0.4       py38h1de0b5d_0      conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   ncurses                   6.4         hcb278e6_0          conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   oauthlib                  3.2.2       pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   openssl                   3.1.1       hd590300_1          conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   packaging                 23.1        pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   pip                       23.1.2      pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   pluggy                    1.2.0       pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   protobuf                  4.23.2      py38h830738e_1      conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   pyasn1                    0.4.8       py_0                conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   pyasn1-modules            0.2.7       py_0                conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   pycparser                 2.21        pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   pyjwt                     2.7.0       pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   pyopenssl                 23.2.0      pyhd8ed1ab_1        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   pyparsing                 3.1.0       pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   pysocks                   1.7.1       pyha2e5f31_6        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   pytest                    7.4.0       pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   pytest-timeout            2.1.0       pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   python                    3.8.17      he550d4f_0_cpython  conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   python_abi                3.8         3_cp38              conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   pyu2f                     0.1.5       pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   re2                       2023.03.02  h8c504da_0          conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   readline                  8.2         h8228510_1          conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   requests                  2.31.0      pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   requests-oauthlib         1.3.1       pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   rsa                       4.9         pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   setuptools                68.0.0      pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   six                       1.16.0      pyh6c4a22f_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   tk                        8.6.12      h27826a3_0          conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   tomli                     2.0.1       pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   typing-extensions         4.6.3       hd8ed1ab_0          conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   typing_extensions         4.6.3       pyha770c72_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   ujson                     5.7.0       py38h8dc9893_0      conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   uritemplate               4.1.1       pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   urllib3                   1.26.15     pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   wheel                     0.40.0      pyhd8ed1ab_0        conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   xz                        5.2.6       h166bdaf_0          conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   yarl                      1.9.2       py38h01eb140_0      conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \u2753  ::endgroup::\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \u2705  Success - Main Setup Conda Environment\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \u2699  ::set-env:: MAMBA_ROOT_PREFIX=/home/runneradmin/micromamba-root\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \u2699  ::set-env:: MAMBA_EXE=/home/runneradmin/micromamba-bin/micromamba\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \u2699  ::set-env:: MSYS=winsymlinks:nativestrict\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \u2699  ::add-path:: /home/runneradmin/micromamba-bin\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8] \u2b50 Run Main Conda info\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udc33  docker exec cmd=[bash -l -eo pipefail /var/run/act/workflow/2] user= workdir=\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | # packages in environment at /home/runneradmin/micromamba-root/envs/gcsfs_test:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | #\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | # Name                    Version                   Build  Channel\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _libgcc_mutex             0.1                 conda_forge    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _openmp_mutex             4.5                       2_gnu    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | aiohttp                   3.8.4            py38h01eb140_1    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | aiosignal                 1.3.1              pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | async-timeout             4.0.2              pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | attrs                     23.1.0             pyh71513ae_1    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | blinker                   1.6.2              pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | brotlipy                  0.7.0           py38h0a891b7_1005    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | bzip2                     1.0.8                h7f98852_4    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | c-ares                    1.19.1               hd590300_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | ca-certificates           2023.5.7             hbcca054_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | cachetools                5.3.0              pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | certifi                   2023.5.7           pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | cffi                      1.15.1           py38h4a40e3a_3    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | charset-normalizer        3.1.0              pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | click                     8.1.3           unix_pyhd8ed1ab_2    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | colorama                  0.4.6              pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | crcmod                    1.7             py38h0a891b7_1009    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | cryptography              41.0.1           py38hcdda232_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | decorator                 5.1.1              pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | exceptiongroup            1.1.1              pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | frozenlist                1.3.3            py38h0a891b7_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | fsspec                    2023.6.0+4.g348d4ab          pypi_0    pypi\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | fusepy                    2.0.4                      py_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | google-api-core           2.11.1             pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | google-api-python-client  2.90.0             pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | google-auth               2.21.0             pyh1a96a4e_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | google-auth-httplib2      0.1.0              pyhd8ed1ab_1    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | google-auth-oauthlib      1.0.0              pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | google-cloud-core         2.3.2              pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | googleapis-common-protos  1.59.1             pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | grpcio                    1.55.1           py38h94a1851_1    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | httplib2                  0.22.0             pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | idna                      3.4                pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | iniconfig                 2.0.0              pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | ld_impl_linux-64          2.40                 h41732ed_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | libabseil                 20230125.2      cxx17_h59595ed_2    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | libffi                    3.4.2                h7f98852_5    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | libfuse                   2.9.9                ha1f6473_1    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | libgcc-ng                 13.1.0               he5830b7_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | libgomp                   13.1.0               he5830b7_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | libgrpc                   1.55.1               h59456c1_1    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | libiconv                  1.17                 h166bdaf_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | libnsl                    2.0.0                h7f98852_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | libprotobuf               4.23.2               hd1fb520_5    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | libsqlite                 3.42.0               h2797004_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | libstdcxx-ng              13.1.0               hfd8a6a1_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | libuuid                   2.38.1               h0b41bf4_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | libzlib                   1.2.13               hd590300_5    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | multidict                 6.0.4            py38h1de0b5d_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | ncurses                   6.4                  hcb278e6_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | oauthlib                  3.2.2              pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | openssl                   3.1.1                hd590300_1    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | packaging                 23.1               pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | pip                       23.1.2             pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | pluggy                    1.2.0              pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | protobuf                  4.23.2           py38h830738e_1    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | pyasn1                    0.4.8                      py_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | pyasn1-modules            0.2.7                      py_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | pycparser                 2.21               pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | pyjwt                     2.7.0              pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | pyopenssl                 23.2.0             pyhd8ed1ab_1    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | pyparsing                 3.1.0              pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | pysocks                   1.7.1              pyha2e5f31_6    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | pytest                    7.4.0              pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | pytest-timeout            2.1.0              pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | python                    3.8.17          he550d4f_0_cpython    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | python_abi                3.8                      3_cp38    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | pyu2f                     0.1.5              pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | re2                       2023.03.02           h8c504da_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | readline                  8.2                  h8228510_1    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | requests                  2.31.0             pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | requests-oauthlib         1.3.1              pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | rsa                       4.9                pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | setuptools                68.0.0             pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | six                       1.16.0             pyh6c4a22f_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | tk                        8.6.12               h27826a3_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | tomli                     2.0.1              pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | typing-extensions         4.6.3                hd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | typing_extensions         4.6.3              pyha770c72_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | ujson                     5.7.0            py38h8dc9893_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | uritemplate               4.1.1              pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | urllib3                   1.26.15            pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | wheel                     0.40.0             pyhd8ed1ab_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | xz                        5.2.6                h166bdaf_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | yarl                      1.9.2            py38h01eb140_0    conda-forge\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | conda 4.10.3\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \u2705  Success - Main Conda info\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8] \u2b50 Run Main Install libfuse\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udc33  docker exec cmd=[bash -l -eo pipefail /var/run/act/workflow/3] user= workdir=\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Reading package lists...\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Building dependency tree...\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Reading state information...\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | The following additional packages will be installed:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   libfuse2\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | The following packages will be REMOVED:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   fuse-overlayfs fuse3\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | The following NEW packages will be installed:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |   fuse libfuse2\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | 0 upgraded, 2 newly installed, 2 to remove and 20 not upgraded.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Need to get 108 kB of archives.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | After this operation, 225 kB of additional disk space will be used.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Get:1 http://archive.ubuntu.com/ubuntu focal/main amd64 libfuse2 amd64 2.9.9-3 [82.0 kB]\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Get:2 http://archive.ubuntu.com/ubuntu focal/main amd64 fuse amd64 2.9.9-3 [26.0 kB]\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Fetched 108 kB in 0s (487 kB/s)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | (Reading database ... \r(Reading database ... 5%\r(Reading database ... 10%\r(Reading database ... 15%\r(Reading database ... 20%\r(Reading database ... 25%\r(Reading database ... 30%\r(Reading database ... 35%\r(Reading database ... 40%\r(Reading database ... 45%\r(Reading database ... 50%\r(Reading database ... 55%\r(Reading database ... 60%\r(Reading database ... 65%\r(Reading database ... 70%\r(Reading database ... 75%\r(Reading database ... 80%\r(Reading database ... 85%\r(Reading database ... 90%\r(Reading database ... 95%\r(Reading database ... 100%\r(Reading database ... 193678 files and directories currently installed.)\r\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing fuse-overlayfs (100:1.5.0-1) ...\r\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing fuse3 (3.9.0-2) ...\r\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Selecting previously unselected package libfuse2:amd64.\r\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | (Reading database ... \r(Reading database ... 5%\r(Reading database ... 10%\r(Reading database ... 15%\r(Reading database ... 20%\r(Reading database ... 25%\r(Reading database ... 30%\r(Reading database ... 35%\r(Reading database ... 40%\r(Reading database ... 45%\r(Reading database ... 50%\r(Reading database ... 55%\r(Reading database ... 60%\r(Reading database ... 65%\r(Reading database ... 70%\r(Reading database ... 75%\r(Reading database ... 80%\r(Reading database ... 85%\r(Reading database ... 90%\r(Reading database ... 95%\r(Reading database ... 100%\r(Reading database ... 193661 files and directories currently installed.)\r\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Preparing to unpack .../libfuse2_2.9.9-3_amd64.deb ...\r\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Unpacking libfuse2:amd64 (2.9.9-3) ...\r\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Selecting previously unselected package fuse.\r\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Preparing to unpack .../fuse_2.9.9-3_amd64.deb ...\r\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Unpacking fuse (2.9.9-3) ...\r\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Setting up libfuse2:amd64 (2.9.9-3) ...\r\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Setting up fuse (2.9.9-3) ...\r\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Installing new version of config file /etc/fuse.conf ...\r\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Processing triggers for libc-bin (2.31-0ubuntu9.2) ...\r\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \u2705  Success - Main Install libfuse\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8] \u2b50 Run Main Run tests\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udc33  docker exec cmd=[bash -l -eo pipefail /var/run/act/workflow/4] user= workdir=\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m============================= test session starts ==============================\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | platform linux -- Python 3.8.17, pytest-7.4.0, pluggy-1.2.0 -- /home/runneradmin/micromamba-root/envs/gcsfs_test/bin/python3.8\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | cachedir: .pytest_cache\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-gcsfs\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | configfile: setup.cfg\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | plugins: timeout-2.1.0\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | timeout: 600.0s\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | timeout method: signal\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | timeout func_only: False\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1mcollecting ... \u001b[0mcollected 144 items\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_checkers.py::test_validate_headers[checker0-hello world-different checksum-raises0] \u001b[32mPASSED\u001b[0m\u001b[32m [  0%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_checkers.py::test_validate_headers[checker1-hello world-hello world-raises1] \u001b[32mPASSED\u001b[0m\u001b[32m [  1%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_checkers.py::test_validate_headers[checker2-hello world-different checksum-raises2] \u001b[32mPASSED\u001b[0m\u001b[32m [  2%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_checkers.py::test_validate_headers[checker3-hello world-hello world-raises3] \u001b[32mPASSED\u001b[0m\u001b[32m [  2%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_checkers.py::test_checker_validate_http_response[checker0-hello world-different checksum-raises0] \u001b[32mPASSED\u001b[0m\u001b[32m [  3%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_checkers.py::test_checker_validate_http_response[checker1-hello world-hello world-raises1] \u001b[32mPASSED\u001b[0m\u001b[32m [  4%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_checkers.py::test_checker_validate_http_response[checker2-hello world-hello world-raises2] \u001b[32mPASSED\u001b[0m\u001b[32m [  4%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_checkers.py::test_checker_validate_http_response[checker3-hello world-different size-raises3] \u001b[32mPASSED\u001b[0m\u001b[32m [  5%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_checkers.py::test_checker_validate_http_response[checker4-hello world-hello world-raises4] \u001b[32mPASSED\u001b[0m\u001b[32m [  6%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_checkers.py::test_checker_validate_http_response[checker5-hello world-different size-raises5] \u001b[32mPASSED\u001b[0m\u001b[32m [  6%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_checkers.py::test_checker_validate_json_response[checker0-hello world-different checksum-raises0] \u001b[32mPASSED\u001b[0m\u001b[32m [  7%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_checkers.py::test_checker_validate_json_response[checker1-hello world-hello world-raises1] \u001b[32mPASSED\u001b[0m\u001b[32m [  8%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_checkers.py::test_checker_validate_json_response[checker2-hello world-hello world-raises2] \u001b[32mPASSED\u001b[0m\u001b[32m [  9%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_checkers.py::test_checker_validate_json_response[checker3-hello world-different size-raises3] \u001b[32mPASSED\u001b[0m\u001b[32m [  9%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_checkers.py::test_checker_validate_json_response[checker4-hello world-different checksum-raises4] \u001b[32mPASSED\u001b[0m\u001b[32m [ 10%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_checkers.py::test_checker_validate_json_response[checker5-hello world\\n-hello world\\n-raises5] \u001b[32mPASSED\u001b[0m\u001b[32m [ 11%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_simple \u001b[31mERROR\u001b[0m\u001b[31m                              [ 11%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_many_connect \u001b[31mERROR\u001b[0m\u001b[31m                        [ 12%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_many_connect_new \u001b[31mERROR\u001b[0m\u001b[31m                    [ 13%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_simple_upload \u001b[31mERROR\u001b[0m\u001b[31m                       [ 13%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_large_upload \u001b[31mERROR\u001b[0m\u001b[31m                        [ 14%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_multi_upload \u001b[31mERROR\u001b[0m\u001b[31m                        [ 15%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_info \u001b[31mERROR\u001b[0m\u001b[31m                                [ 15%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_ls2 \u001b[31mERROR\u001b[0m\u001b[31m                                 [ 16%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_pickle \u001b[31mERROR\u001b[0m\u001b[31m                              [ 17%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_ls_touch \u001b[31mERROR\u001b[0m\u001b[31m                            [ 18%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_rm \u001b[31mERROR\u001b[0m\u001b[31m                                  [ 18%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_rm_batch \u001b[31mERROR\u001b[0m\u001b[31m                            [ 19%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_rm_recursive \u001b[31mERROR\u001b[0m\u001b[31m                        [ 20%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_rm_chunked_batch \u001b[31mERROR\u001b[0m\u001b[31m                    [ 20%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_file_access \u001b[31mERROR\u001b[0m\u001b[31m                         [ 21%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_file_info \u001b[31mERROR\u001b[0m\u001b[31m                           [ 22%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_du \u001b[31mERROR\u001b[0m\u001b[31m                                  [ 22%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_ls \u001b[31mERROR\u001b[0m\u001b[31m                                  [ 23%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_ls_detail \u001b[31mERROR\u001b[0m\u001b[31m                           [ 24%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_gcs_glob \u001b[31mERROR\u001b[0m\u001b[31m                            [ 25%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_read_keys_from_bucket \u001b[31mERROR\u001b[0m\u001b[31m               [ 25%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_url \u001b[31mERROR\u001b[0m\u001b[31m                                 [ 26%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_seek \u001b[31mERROR\u001b[0m\u001b[31m                                [ 27%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_bad_open \u001b[31mERROR\u001b[0m\u001b[31m                            [ 27%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_copy \u001b[31mERROR\u001b[0m\u001b[31m                                [ 28%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_copy_recursive \u001b[31mERROR\u001b[0m\u001b[31m                      [ 29%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_copy_errors \u001b[31mERROR\u001b[0m\u001b[31m                         [ 29%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_move \u001b[31mERROR\u001b[0m\u001b[31m                                [ 30%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_cat_file \u001b[31mERROR\u001b[0m\u001b[31m                            [ 31%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_get_put[None] \u001b[31mERROR\u001b[0m\u001b[31m                       [ 31%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_get_put[size] \u001b[31mERROR\u001b[0m\u001b[31m                       [ 32%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_get_put[md5] \u001b[31mERROR\u001b[0m\u001b[31m                        [ 33%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_get_put[crc32c] \u001b[31mERROR\u001b[0m\u001b[31m                     [ 34%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_get_put_list \u001b[31mERROR\u001b[0m\u001b[31m                        [ 34%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_get_put_recursive[] \u001b[31mERROR\u001b[0m\u001b[31m                 [ 35%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_get_put_recursive[gs://] \u001b[31mERROR\u001b[0m\u001b[31m            [ 36%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_get_put_recursive[gcs://] \u001b[31mERROR\u001b[0m\u001b[31m           [ 36%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_get_put_file_in_dir[] \u001b[31mERROR\u001b[0m\u001b[31m               [ 37%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_get_put_file_in_dir[gs://] \u001b[31mERROR\u001b[0m\u001b[31m          [ 38%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_get_put_file_in_dir[gcs://] \u001b[31mERROR\u001b[0m\u001b[31m         [ 38%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_special_characters_filename \u001b[31mERROR\u001b[0m\u001b[31m         [ 39%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_slash_filename \u001b[31mERROR\u001b[0m\u001b[31m                      [ 40%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_hash_filename \u001b[31mERROR\u001b[0m\u001b[31m                       [ 40%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_errors \u001b[31mERROR\u001b[0m\u001b[31m                              [ 41%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_read_small \u001b[31mERROR\u001b[0m\u001b[31m                          [ 42%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_seek_delimiter \u001b[31mERROR\u001b[0m\u001b[31m                      [ 43%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_read_block \u001b[31mERROR\u001b[0m\u001b[31m                          [ 43%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_flush \u001b[31mERROR\u001b[0m\u001b[31m                               [ 44%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_write_fails \u001b[31mERROR\u001b[0m\u001b[31m                         [ 45%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_write_blocks \u001b[31mERROR\u001b[0m\u001b[31m                        [ 45%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_write_blocks2 \u001b[31mERROR\u001b[0m\u001b[31m                       [ 46%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_readline \u001b[31mERROR\u001b[0m\u001b[31m                            [ 47%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_readline_from_cache \u001b[31mERROR\u001b[0m\u001b[31m                 [ 47%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_readline_empty \u001b[31mERROR\u001b[0m\u001b[31m                      [ 48%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_readline_blocksize \u001b[31mERROR\u001b[0m\u001b[31m                  [ 49%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_next \u001b[31mERROR\u001b[0m\u001b[31m                                [ 50%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_iterable \u001b[31mERROR\u001b[0m\u001b[31m                            [ 50%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_fixed_key_metadata[custom_time-2021-10-21T17:00:00Z-customTime] \u001b[31mERROR\u001b[0m\u001b[31m [ 51%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_fixed_key_metadata[cache_control-public, max-age=3600-cacheControl] \u001b[31mERROR\u001b[0m\u001b[31m [ 52%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_fixed_key_metadata[content_encoding-gzip-contentEncoding] \u001b[31mERROR\u001b[0m\u001b[31m [ 52%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_fixed_key_metadata[content_language-en-contentLanguage] \u001b[31mERROR\u001b[0m\u001b[31m [ 53%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_fixed_key_metadata[content_disposition-Attachment; filename=sample.empty-contentDisposition] \u001b[31mERROR\u001b[0m\u001b[31m [ 54%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_readable \u001b[31mERROR\u001b[0m\u001b[31m                            [ 54%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_seekable \u001b[31mERROR\u001b[0m\u001b[31m                            [ 55%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_writable \u001b[31mERROR\u001b[0m\u001b[31m                            [ 56%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_merge \u001b[31mERROR\u001b[0m\u001b[31m                               [ 56%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_bigger_than_block_read \u001b[31mERROR\u001b[0m\u001b[31m              [ 57%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_current \u001b[31mERROR\u001b[0m\u001b[31m                             [ 58%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_array \u001b[31mERROR\u001b[0m\u001b[31m                               [ 59%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_attrs \u001b[31mERROR\u001b[0m\u001b[31m                               [ 59%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_request_user_project \u001b[31mERROR\u001b[0m\u001b[31m                [ 60%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_request_user_project_string \u001b[31mERROR\u001b[0m\u001b[31m         [ 61%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_request_header \u001b[31mERROR\u001b[0m\u001b[31m                      [ 61%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_user_project_fallback_google_default \u001b[32mPASSED\u001b[0m\u001b[31m [ 62%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_user_project_cat \u001b[31mERROR\u001b[0m\u001b[31m                    [ 63%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_raise_on_project_mismatch \u001b[32mPASSED\u001b[0m\u001b[31m          [ 63%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_ls_prefix_cache \u001b[31mERROR\u001b[0m\u001b[31m                     [ 64%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_placeholder_dir_cache_validity \u001b[31mERROR\u001b[0m\u001b[31m      [ 65%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_pipe_small_cache_validity \u001b[31mERROR\u001b[0m\u001b[31m           [ 65%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_put_small_cache_validity \u001b[31mERROR\u001b[0m\u001b[31m            [ 66%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_pseudo_dir_find \u001b[31mERROR\u001b[0m\u001b[31m                     [ 67%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_zero_cache_timeout \u001b[31mERROR\u001b[0m\u001b[31m                  [ 68%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_find_with_prefix_partial_cache[False] \u001b[31mERROR\u001b[0m\u001b[31m [ 68%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_find_with_prefix_partial_cache[True] \u001b[31mERROR\u001b[0m\u001b[31m [ 69%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_find_dircache \u001b[31mERROR\u001b[0m\u001b[31m                       [ 70%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_percent_file_name \u001b[31mERROR\u001b[0m\u001b[31m                   [ 70%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_bucket_location[None] \u001b[31mERROR\u001b[0m\u001b[31m               [ 71%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_bucket_location[US] \u001b[31mERROR\u001b[0m\u001b[31m                 [ 72%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_bucket_location[EUROPE-WEST3] \u001b[31mERROR\u001b[0m\u001b[31m       [ 72%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_bucket_location[europe-west3] \u001b[31mERROR\u001b[0m\u001b[31m       [ 73%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_bucket_default_location_overwrite \u001b[31mERROR\u001b[0m\u001b[31m   [ 74%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_dir_marker \u001b[31mERROR\u001b[0m\u001b[31m                          [ 75%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_mkdir_with_path \u001b[31mERROR\u001b[0m\u001b[31m                     [ 75%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_deep_find_wthdirs \u001b[31mERROR\u001b[0m\u001b[31m                   [ 76%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_info_versioned \u001b[31mERROR\u001b[0m\u001b[31m                      [ 77%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_cat_versioned \u001b[31mERROR\u001b[0m\u001b[31m                       [ 77%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_cp_versioned \u001b[31mERROR\u001b[0m\u001b[31m                        [ 78%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_ls_versioned \u001b[31mERROR\u001b[0m\u001b[31m                        [ 79%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_find_versioned \u001b[31mERROR\u001b[0m\u001b[31m                      [ 79%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_cp_directory_recursive \u001b[31mERROR\u001b[0m\u001b[31m              [ 80%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_get_directory_recursive \u001b[31mERROR\u001b[0m\u001b[31m             [ 81%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_put_directory_recursive \u001b[31mERROR\u001b[0m\u001b[31m             [ 81%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_cp_two_files \u001b[31mERROR\u001b[0m\u001b[31m                        [ 82%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_multiglob \u001b[31mERROR\u001b[0m\u001b[31m                           [ 83%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_core.py::test_expiry_keyword \u001b[32mPASSED\u001b[0m\u001b[31m                     [ 84%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_credentials.py::test_googlecredentials_none \u001b[32mPASSED\u001b[0m\u001b[31m      [ 84%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_credentials.py::test_credentials_from_raw_token[] \u001b[32mPASSED\u001b[0m\u001b[31m [ 85%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_credentials.py::test_credentials_from_raw_token[incorrect.token] \u001b[32mPASSED\u001b[0m\u001b[31m [ 86%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_credentials.py::test_credentials_from_raw_token[xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx] \u001b[32mPASSED\u001b[0m\u001b[31m [ 86%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_fuse.py::test_fuse \u001b[33mSKIPPED\u001b[0m (Test fuse causes hang.)\u001b[31m     [ 87%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_mapping.py::test_api \u001b[32mPASSED\u001b[0m\u001b[31m                             [ 88%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_mapping.py::test_map_simple \u001b[31mERROR\u001b[0m\u001b[31m                       [ 88%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_mapping.py::test_map_default_gcsfilesystem \u001b[31mERROR\u001b[0m\u001b[31m        [ 89%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_mapping.py::test_map_errors \u001b[31mERROR\u001b[0m\u001b[31m                       [ 90%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_mapping.py::test_map_with_data \u001b[31mERROR\u001b[0m\u001b[31m                    [ 90%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_mapping.py::test_map_complex_keys \u001b[31mERROR\u001b[0m\u001b[31m                 [ 91%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_mapping.py::test_map_clear_empty \u001b[31mERROR\u001b[0m\u001b[31m                  [ 92%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_mapping.py::test_map_pickle \u001b[31mERROR\u001b[0m\u001b[31m                       [ 93%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_mapping.py::test_map_array \u001b[31mERROR\u001b[0m\u001b[31m                        [ 93%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_mapping.py::test_map_bytearray \u001b[31mERROR\u001b[0m\u001b[31m                    [ 94%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_mapping.py::test_new_bucket \u001b[31mERROR\u001b[0m\u001b[31m                       [ 95%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_retry.py::test_tempfile \u001b[32mPASSED\u001b[0m\u001b[31m                          [ 95%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_retry.py::test_retriable_exception \u001b[32mPASSED\u001b[0m\u001b[31m               [ 96%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_retry.py::test_validate_response \u001b[32mPASSED\u001b[0m\u001b[31m                 [ 97%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_retry.py::test_metadata_read_permissions[missing_with_get_perms] \u001b[31mERROR\u001b[0m\u001b[31m [ 97%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_retry.py::test_metadata_read_permissions[missing_with_list_perms] \u001b[31mERROR\u001b[0m\u001b[31m [ 98%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_retry.py::test_metadata_read_permissions[existing_with_get_perms] \u001b[31mERROR\u001b[0m\u001b[31m [ 99%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | gcsfs/tests/test_retry.py::test_metadata_read_permissions[existing_with_list_perms] \u001b[31mERROR\u001b[0m\u001b[31m [100%]\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | ==================================== ERRORS ====================================\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m________________________ ERROR at setup of test_simple _________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | ---------------------------- Captured stderr setup -----------------------------\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/json?all=1&filters=%7B%22name%22%3A%7B%22gcsfs_test%22%3Atrue%7D%7D\": dial unix /var/run/docker.sock: connect: permission denied\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_many_connect ______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m___________________ ERROR at setup of test_many_connect_new ____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_simple_upload _____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_large_upload ______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_multi_upload ______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_________________________ ERROR at setup of test_info __________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m__________________________ ERROR at setup of test_ls2 __________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m________________________ ERROR at setup of test_pickle _________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_ls_touch ________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m__________________________ ERROR at setup of test_rm ___________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_rm_batch ________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_rm_recursive ______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m___________________ ERROR at setup of test_rm_chunked_batch ____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m______________________ ERROR at setup of test_file_access ______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_file_info _______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m__________________________ ERROR at setup of test_du ___________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m__________________________ ERROR at setup of test_ls ___________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_ls_detail _______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_gcs_glob ________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_________________ ERROR at setup of test_read_keys_from_bucket _________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m__________________________ ERROR at setup of test_url __________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_________________________ ERROR at setup of test_seek __________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_bad_open ________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_________________________ ERROR at setup of test_copy __________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_copy_recursive _____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m______________________ ERROR at setup of test_copy_errors ______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_________________________ ERROR at setup of test_move __________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_cat_file ________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_get_put[None] _____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_get_put[size] _____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_get_put[md5] ______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_get_put[crc32c] ____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_get_put_list ______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m__________________ ERROR at setup of test_get_put_recursive[] __________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_______________ ERROR at setup of test_get_put_recursive[gs://] ________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_______________ ERROR at setup of test_get_put_recursive[gcs://] _______________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_________________ ERROR at setup of test_get_put_file_in_dir[] _________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m______________ ERROR at setup of test_get_put_file_in_dir[gs://] _______________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m______________ ERROR at setup of test_get_put_file_in_dir[gcs://] ______________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m______________ ERROR at setup of test_special_characters_filename ______________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_slash_filename _____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_hash_filename _____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m________________________ ERROR at setup of test_errors _________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m______________________ ERROR at setup of test_read_small _______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_seek_delimiter _____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m______________________ ERROR at setup of test_read_block _______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_________________________ ERROR at setup of test_flush _________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m______________________ ERROR at setup of test_write_fails ______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_write_blocks ______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_write_blocks2 _____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_readline ________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m__________________ ERROR at setup of test_readline_from_cache __________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_readline_empty _____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m__________________ ERROR at setup of test_readline_blocksize ___________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_________________________ ERROR at setup of test_next __________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_iterable ________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_ ERROR at setup of test_fixed_key_metadata[custom_time-2021-10-21T17:00:00Z-customTime] _\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_ ERROR at setup of test_fixed_key_metadata[cache_control-public, max-age=3600-cacheControl] _\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_ ERROR at setup of test_fixed_key_metadata[content_encoding-gzip-contentEncoding] _\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_ ERROR at setup of test_fixed_key_metadata[content_language-en-contentLanguage] _\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_ ERROR at setup of test_fixed_key_metadata[content_disposition-Attachment; filename=sample.empty-contentDisposition] _\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_readable ________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_seekable ________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_writable ________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_________________________ ERROR at setup of test_merge _________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m________________ ERROR at setup of test_bigger_than_block_read _________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m________________________ ERROR at setup of test_current ________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_________________________ ERROR at setup of test_array _________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_________________________ ERROR at setup of test_attrs _________________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_________________ ERROR at setup of test_request_user_project __________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m______________ ERROR at setup of test_request_user_project_string ______________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_request_header _____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m___________________ ERROR at setup of test_user_project_cat ____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_ls_prefix_cache ____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m____________ ERROR at setup of test_placeholder_dir_cache_validity _____________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_______________ ERROR at setup of test_pipe_small_cache_validity _______________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_______________ ERROR at setup of test_put_small_cache_validity ________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_pseudo_dir_find ____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m__________________ ERROR at setup of test_zero_cache_timeout ___________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_________ ERROR at setup of test_find_with_prefix_partial_cache[False] _________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_________ ERROR at setup of test_find_with_prefix_partial_cache[True] __________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_find_dircache _____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m___________________ ERROR at setup of test_percent_file_name ___________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_________________ ERROR at setup of test_bucket_location[None] _________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m__________________ ERROR at setup of test_bucket_location[US] __________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_____________ ERROR at setup of test_bucket_location[EUROPE-WEST3] _____________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_____________ ERROR at setup of test_bucket_location[europe-west3] _____________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m___________ ERROR at setup of test_bucket_default_location_overwrite ___________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m______________________ ERROR at setup of test_dir_marker _______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_mkdir_with_path ____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m___________________ ERROR at setup of test_deep_find_wthdirs ___________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_info_versioned _____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_cat_versioned _____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_cp_versioned ______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_ls_versioned ______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_find_versioned _____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m________________ ERROR at setup of test_cp_directory_recursive _________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m________________ ERROR at setup of test_get_directory_recursive ________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m________________ ERROR at setup of test_put_directory_recursive ________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_cp_two_files ______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_multiglob _______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347bcf970>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m______________________ ERROR at setup of test_map_simple _______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347c7af10>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | ---------------------------- Captured stderr setup -----------------------------\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/json?all=1&filters=%7B%22name%22%3A%7B%22gcsfs_test%22%3Atrue%7D%7D\": dial unix /var/run/docker.sock: connect: permission denied\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_______________ ERROR at setup of test_map_default_gcsfilesystem _______________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347c7af10>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m______________________ ERROR at setup of test_map_errors _______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347c7af10>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_map_with_data _____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347c7af10>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m___________________ ERROR at setup of test_map_complex_keys ____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347c7af10>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_map_clear_empty ____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347c7af10>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m______________________ ERROR at setup of test_map_pickle _______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347c7af10>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_map_array _______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347c7af10>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_map_bytearray _____________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347c7af10>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m______________________ ERROR at setup of test_new_bucket _______________________\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f4347c7af10>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m___ ERROR at setup of test_metadata_read_permissions[missing_with_get_perms] ___\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f434801bd00>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | ---------------------------- Captured stderr setup -----------------------------\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/json?all=1&filters=%7B%22name%22%3A%7B%22gcsfs_test%22%3Atrue%7D%7D\": dial unix /var/run/docker.sock: connect: permission denied\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m__ ERROR at setup of test_metadata_read_permissions[missing_with_list_perms] ___\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f434801bd00>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m__ ERROR at setup of test_metadata_read_permissions[existing_with_get_perms] ___\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f434801bd00>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m\u001b[1m__ ERROR at setup of test_metadata_read_permissions[existing_with_list_perms] __\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     @pytest.fixture(scope=\"module\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def docker_gcs():\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             # assume using real API or otherwise have a server already set up\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             return\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         container = \"gcsfs_test\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         cmd = (\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             \"-backend memory\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         )\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >       stop_docker(container)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:69: \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mgcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     cid = subprocess.check_output(cmd).strip().decode()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:415: in check_output\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | kwargs = {'stdout': -1}, process = <subprocess.Popen object at 0x7f434801bd00>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | stdout = b'', stderr = None, retcode = 1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     def run(*popenargs,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         were captured.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         exception will be raised.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         There is an optional argument \"input\", allowing you to\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         it will be used internally.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         The other arguments are the same as for the Popen constructor.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         \"\"\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if input is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdin') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdin'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         if capture_output:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                  'with capture_output.')\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stdout'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             kwargs['stderr'] = PIPE\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |     \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             try:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except TimeoutExpired as exc:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 if _mswindows:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # Windows accumulates the output in a single blocking\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # read() call run on child threads, with the timeout\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # being done in a join() on those threads.  communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # _after_ kill() is required to collect that and add it\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # to the exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 else:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # POSIX _communicate already populated the output so\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     # far into the TimeoutExpired exception.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                     process.wait()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 process.kill()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                 raise\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             retcode = process.poll()\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |             if check and retcode:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   |                                          output=stdout, stderr=stderr)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/gcsfs_test/lib/python3.8/subprocess.py\u001b[0m:516: CalledProcessError\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-gcsfs/report.xml -\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[36m\u001b[1m=========================== short test summary info ============================\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_simple\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_many_connect\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_many_connect_new\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_simple_upload\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_large_upload\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_multi_upload\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_info\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_ls2\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_pickle\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_ls_touch\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_rm\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_rm_batch\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_rm_recursive\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_rm_chunked_batch\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_file_access\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_file_info\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_du\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_ls\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_ls_detail\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_gcs_glob\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_read_keys_from_bucket\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_url\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_seek\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_bad_open\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_copy\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_copy_recursive\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_copy_errors\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_move\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_cat_file\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_get_put[None]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_get_put[size]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_get_put[md5]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_get_put[crc32c]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_get_put_list\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_get_put_recursive[]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_get_put_recursive[gs://]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_get_put_recursive[gcs://]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_get_put_file_in_dir[]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_get_put_file_in_dir[gs://]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_get_put_file_in_dir[gcs://]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_special_characters_filename\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_slash_filename\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_hash_filename\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_errors\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_read_small\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_seek_delimiter\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_read_block\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_flush\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_write_fails\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_write_blocks\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_write_blocks2\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_readline\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_readline_from_cache\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_readline_empty\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_readline_blocksize\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_next\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_iterable\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_fixed_key_metadata[custom_time-2021-10-21T17:00:00Z-customTime]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_fixed_key_metadata[cache_control-public, max-age=3600-cacheControl]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_fixed_key_metadata[content_encoding-gzip-contentEncoding]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_fixed_key_metadata[content_language-en-contentLanguage]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_fixed_key_metadata[content_disposition-Attachment; filename=sample.empty-contentDisposition]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_readable\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_seekable\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_writable\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_merge\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_bigger_than_block_read\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_current\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_array\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_attrs\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_request_user_project\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_request_user_project_string\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_request_header\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_user_project_cat\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_ls_prefix_cache\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_placeholder_dir_cache_validity\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_pipe_small_cache_validity\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_put_small_cache_validity\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_pseudo_dir_find\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_zero_cache_timeout\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_find_with_prefix_partial_cache[False]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_find_with_prefix_partial_cache[True]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_find_dircache\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_percent_file_name\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_bucket_location[None]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_bucket_location[US]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_bucket_location[EUROPE-WEST3]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_bucket_location[europe-west3]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_bucket_default_location_overwrite\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_dir_marker\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_mkdir_with_path\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_deep_find_wthdirs\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_info_versioned\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_cat_versioned\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_cp_versioned\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_ls_versioned\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_find_versioned\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_cp_directory_recursive\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_get_directory_recursive\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_put_directory_recursive\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_cp_two_files\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_core.py::\u001b[1mtest_multiglob\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_mapping.py::\u001b[1mtest_map_simple\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_mapping.py::\u001b[1mtest_map_default_gcsfilesystem\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_mapping.py::\u001b[1mtest_map_errors\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_mapping.py::\u001b[1mtest_map_with_data\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_mapping.py::\u001b[1mtest_map_complex_keys\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_mapping.py::\u001b[1mtest_map_clear_empty\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_mapping.py::\u001b[1mtest_map_pickle\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_mapping.py::\u001b[1mtest_map_array\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_mapping.py::\u001b[1mtest_map_bytearray\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_mapping.py::\u001b[1mtest_new_bucket\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_retry.py::\u001b[1mtest_metadata_read_permissions[missing_with_get_perms]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_retry.py::\u001b[1mtest_metadata_read_permissions[missing_with_list_perms]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_retry.py::\u001b[1mtest_metadata_read_permissions[existing_with_get_perms]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31mERROR\u001b[0m gcsfs/tests/test_retry.py::\u001b[1mtest_metadata_read_permissions[existing_with_list_perms]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | \u001b[31m================== \u001b[32m27 passed\u001b[0m, \u001b[33m1 skipped\u001b[0m, \u001b[31m\u001b[1m116 errors\u001b[0m\u001b[31m in 8.95s\u001b[0m\u001b[31m ===================\u001b[0m\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \u274c  Failure - Main Run tests\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8] exitcode '1': failure\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8] \u2b50 Run Post Setup Conda Environment\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/mamba-org-provision-with-micromamba@main/dist/post/index.js] user= workdir=\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::inputs.postDeinit: auto\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::inputs.micromambaVersion: latest\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \u2753  ::group::Deinitializing micromamba ...\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"deinit\",\"-s\",\"zsh\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | [command]/home/runneradmin/micromamba-bin/micromamba shell deinit -s zsh -p /home/runneradmin/micromamba-root -y --log-level warning\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Resetting RC file \"/home/runneradmin/.zshrc\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Deleting config for root prefix \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Clearing mamba executable environment variable\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing the following in your \"/home/runneradmin/.zshrc\" file\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | # >>> mamba initialize >>>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | ...\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | # <<< mamba initialize <<<\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"deinit\",\"-s\",\"bash\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | [command]/home/runneradmin/micromamba-bin/micromamba shell deinit -s bash -p /home/runneradmin/micromamba-root -y --log-level warning\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Resetting RC file \"/home/runneradmin/.bashrc\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Deleting config for root prefix \n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Clearing mamba executable environment variable\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing the following in your \"/home/runneradmin/.bashrc\" file\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | # >>> mamba initialize >>>\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | ...\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | # <<< mamba initialize <<<\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \u2753  ::endgroup::\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \u2753  ::group::Removing uncompressed packages to trim down cache folder...\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/_libgcc_mutex-0.1-conda_forge\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/_openmp_mutex-4.5-2_gnu\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/aiohttp-3.8.4-py38h01eb140_1\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/aiosignal-1.3.1-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/async-timeout-4.0.2-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/attrs-23.1.0-pyh71513ae_1\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/blinker-1.6.2-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/brotlipy-0.7.0-py38h0a891b7_1005\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/bzip2-1.0.8-h7f98852_4\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/c-ares-1.19.1-hd590300_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/ca-certificates-2023.5.7-hbcca054_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/cachetools-5.3.0-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/certifi-2023.5.7-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/cffi-1.15.1-py38h4a40e3a_3\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/charset-normalizer-3.1.0-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/click-8.1.3-unix_pyhd8ed1ab_2\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/colorama-0.4.6-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/crcmod-1.7-py38h0a891b7_1009\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/cryptography-41.0.1-py38hcdda232_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/decorator-5.1.1-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/exceptiongroup-1.1.1-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/frozenlist-1.3.3-py38h0a891b7_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/fsspec-2023.6.0-pyh1a96a4e_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/fusepy-2.0.4-py_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/google-api-core-2.11.1-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/google-api-python-client-2.90.0-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/google-auth-2.21.0-pyh1a96a4e_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/google-auth-httplib2-0.1.0-pyhd8ed1ab_1\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/google-auth-oauthlib-1.0.0-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/google-cloud-core-2.3.2-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/googleapis-common-protos-1.59.1-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/grpcio-1.55.1-py38h94a1851_1\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/httplib2-0.22.0-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/idna-3.4-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/iniconfig-2.0.0-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/ld_impl_linux-64-2.40-h41732ed_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/libabseil-20230125.2-cxx17_h59595ed_2\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/libffi-3.4.2-h7f98852_5\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/libfuse-2.9.9-ha1f6473_1\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/libgcc-ng-13.1.0-he5830b7_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/libgomp-13.1.0-he5830b7_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/libgrpc-1.55.1-h59456c1_1\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/libiconv-1.17-h166bdaf_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/libnsl-2.0.0-h7f98852_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/libprotobuf-4.23.2-hd1fb520_5\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/libsqlite-3.42.0-h2797004_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/libstdcxx-ng-13.1.0-hfd8a6a1_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/libuuid-2.38.1-h0b41bf4_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/libzlib-1.2.13-hd590300_5\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/multidict-6.0.4-py38h1de0b5d_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/ncurses-6.4-hcb278e6_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/oauthlib-3.2.2-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/openssl-3.1.1-hd590300_1\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/packaging-23.1-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/pip-23.1.2-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/pluggy-1.2.0-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/protobuf-4.23.2-py38h830738e_1\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/pyasn1-0.4.8-py_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/pyasn1-modules-0.2.7-py_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/pycparser-2.21-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/pyjwt-2.7.0-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/pyopenssl-23.2.0-pyhd8ed1ab_1\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/pyparsing-3.1.0-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/pysocks-1.7.1-pyha2e5f31_6\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/pytest-7.4.0-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/pytest-timeout-2.1.0-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/python-3.8.17-he550d4f_0_cpython\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/python_abi-3.8-3_cp38\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/pyu2f-0.1.5-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/re2-2023.03.02-h8c504da_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/readline-8.2-h8228510_1\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/requests-2.31.0-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/requests-oauthlib-1.3.1-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/rsa-4.9-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/setuptools-68.0.0-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/six-1.16.0-pyh6c4a22f_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/tk-8.6.12-h27826a3_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/tomli-2.0.1-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/typing-extensions-4.6.3-hd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/typing_extensions-4.6.3-pyha770c72_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/ujson-5.7.0-py38h8dc9893_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/uritemplate-4.1.1-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/urllib3-1.26.15-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/wheel-0.40.0-pyhd8ed1ab_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/xz-5.2.6-h166bdaf_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Removing \"/home/runneradmin/micromamba-root/pkgs/yarl-1.9.2-py38h01eb140_0\"\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \u2753  ::endgroup::\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Checking zstd --version\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::omitBrokenSymbolicLinks 'true'\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Search path '/home/runneradmin/micromamba-root/pkgs'\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Matched: ../../../home/runneradmin/micromamba-root/pkgs\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Cache Paths:\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::[\"../../../home/runneradmin/micromamba-root/pkgs\"]\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Archive Path: /tmp/16eb6ffa-9769-4430-b0a3-108e80ec4943/cache.tzst\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | [command]/usr/bin/tar --posix -cf cache.tzst --exclude cache.tzst -P -C /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-gcsfs --files-from manifest.txt --use-compress-program zstdmt\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::File Size: 156483851\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Reserving Cache\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:42541/_apis/artifactcache/caches\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Saving Cache (ID: 1)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Upload cache\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:42541/_apis/artifactcache/caches/1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Upload concurrency: 4\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Upload chunk size: 33554432\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Awaiting all uploads\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Uploading chunk of size 33554432 bytes at offset 0 with content range: bytes 0-33554431/*\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Uploading chunk of size 33554432 bytes at offset 33554432 with content range: bytes 33554432-67108863/*\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Uploading chunk of size 33554432 bytes at offset 67108864 with content range: bytes 67108864-100663295/*\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Uploading chunk of size 33554432 bytes at offset 100663296 with content range: bytes 100663296-134217727/*\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Uploading chunk of size 22266123 bytes at offset 134217728 with content range: bytes 134217728-156483850/*\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Commiting cache\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Cache Size: ~149 MB (156483851 B)\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:42541/_apis/artifactcache/caches/1\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Cache saved successfully\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   | Cache saved with key: micromamba-pkgs linux-64 Wed Jun 28 2023\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \u2705  Success - Post Setup Conda Environment\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8]   \u2699  ::set-env:: MSYS=winsymlinks:nativestrict\n[f43a6f15-9c9b-45f8-8860-89dda1352005/Python 3.8] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'lint' failed\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-gcsfs/.github/workflows/ci-crawler.yml",
        "build_tool": "pytest",
        "elapsed_time": 250.59629440307617
    }
}