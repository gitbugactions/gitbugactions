{
    "repository": "chen-tf/price-tracker-bot",
    "stars": 112,
    "language": "python",
    "size": 633,
    "clone_url": "https://github.com/chen-tf/price-tracker-bot.git",
    "timestamp": "2023-07-01T16:44:05.176181Z",
    "clone_success": true,
    "number_of_actions": 6,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "tests.test_good_repository.TestGoodRepository",
                "name": "test_enable_state_goods",
                "time": 0.01,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pt_service.TestDisableBlockedUserData",
                "name": "test_blocked",
                "time": 0.7,
                "results": [
                    {
                        "result": "Failure",
                        "message": "telegram.error.InvalidToken: You must pass the token you received from https://t.me/Botfather!",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pt_service.TestDisableBlockedUserData",
                "name": "test_unblocked",
                "time": 0.027,
                "results": [
                    {
                        "result": "Failure",
                        "message": "telegram.error.InvalidToken: You must pass the token you received from https://t.me/Botfather!",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pt_service.TestUpdateUserLineToken",
                "name": "test_update_user_line_token",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pt_service.TestFindUserSubGoods",
                "name": "test_disable_state",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pt_service.TestFindUserSubGoods",
                "name": "test_enable_state",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pt_service.TestClearUserSubGoods",
                "name": "test_contains_removed_good_name",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pt_service.TestClearUserSubGoods",
                "name": "test_emtpy_user_sub_goods",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pt_service.TestClearUserSubGoods",
                "name": "test_remove_all",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pt_service.TestAddUserSubGood",
                "name": "test_exceed_maximum_sub_goods",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pt_service.TestAddUserSubGood",
                "name": "test_existing_sub_goods",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_pt_service.TestAddUserSubGood",
                "name": "test_non_existent_sub_goods",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_user_repository.TestUserRepository",
                "name": "test_enable_state_users",
                "time": 0.018,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_user_repository.TestUserRepository",
                "name": "test_find_id_345_user",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_user_repository.TestUserRepository",
                "name": "test_find_not_exist_user",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_user_repository.TestUserRepository",
                "name": "test_find_user_sub_another_good_id",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_user_repository.TestUserRepository",
                "name": "test_find_user_sub_good_id",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_user_repository.TestUserRepository",
                "name": "test_no_user_sub_good_id",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[691d0c21-2032-4b80-b469-8dce7ae94517/CI] \ud83d\ude80  Start image=crawlergpt:latest\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/chen-tf-price-tracker-bot] user=0 workdir=\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI] \u2b50 Run Main Checkout code\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \u2705  Success - Main Checkout code\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI] \u2b50 Run Main actions/setup-python@v4\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udc33  docker cp src=/tmp/act-cache/f18e36d5-8d04-4458-9ecc-752a2eaa0e27/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \u2753  ::group::Installed versions\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udcac  ::debug::Semantic version spec of 3.9 is 3.9\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udcac  ::debug::isExplicit: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udcac  ::debug::explicit? false\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udcac  ::debug::explicit? true\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udcac  ::debug::explicit? true\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udcac  ::debug::explicit? true\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udcac  ::debug::explicit? true\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udcac  ::debug::explicit? true\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udcac  ::debug::explicit? true\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udcac  ::debug::evaluating 6 versions\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udcac  ::debug::matched: 3.9.6\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.9.6/x64\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udcac  ::debug::Found tool in cache Python 3.9.6 x64\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Successfully set up CPython (3.9.6)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \u2753  ::endgroup::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \u2705  Success - Main actions/setup-python@v4\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.9.6/x64\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib/pkgconfig\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.9.6/x64/bin/python\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \u2699  ::set-output:: python-version=3.9.6\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64/bin\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI] \u2b50 Run Main Install pipenv and dependencies\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (21.2.4)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Collecting pip\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Installing collected packages: pip\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |   Attempting uninstall: pip\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     Found existing installation: pip 21.2.4\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     Uninstalling pip-21.2.4:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |       Successfully uninstalled pip-21.2.4\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Successfully installed pip-23.1.2\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Collecting pipenv\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |   Downloading pipenv-2023.6.26-py3-none-any.whl (2.8 MB)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 2.8/2.8 MB 18.5 MB/s eta 0:00:00\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Collecting certifi (from pipenv)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 157.0/157.0 kB 8.7 MB/s eta 0:00:00\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Collecting setuptools>=67.0.0 (from pipenv)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |   Downloading setuptools-68.0.0-py3-none-any.whl (804 kB)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 804.0/804.0 kB 8.8 MB/s eta 0:00:00\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Collecting virtualenv-clone>=0.2.5 (from pipenv)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |   Downloading virtualenv_clone-0.5.7-py3-none-any.whl (6.6 kB)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Collecting virtualenv>=20.17.1 (from pipenv)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |   Downloading virtualenv-20.23.1-py3-none-any.whl (3.3 MB)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.3/3.3 MB 14.3 MB/s eta 0:00:00\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Collecting distlib<1,>=0.3.6 (from virtualenv>=20.17.1->pipenv)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |   Downloading distlib-0.3.6-py2.py3-none-any.whl (468 kB)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 468.5/468.5 kB 19.6 MB/s eta 0:00:00\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Collecting filelock<4,>=3.12 (from virtualenv>=20.17.1->pipenv)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |   Downloading filelock-3.12.2-py3-none-any.whl (10 kB)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Collecting platformdirs<4,>=3.5.1 (from virtualenv>=20.17.1->pipenv)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |   Downloading platformdirs-3.8.0-py3-none-any.whl (16 kB)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Installing collected packages: distlib, virtualenv-clone, setuptools, platformdirs, filelock, certifi, virtualenv, pipenv\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |   Attempting uninstall: setuptools\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     Found existing installation: setuptools 56.0.0\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     Uninstalling setuptools-56.0.0:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |       Successfully uninstalled setuptools-56.0.0\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Successfully installed certifi-2023.5.7 distlib-0.3.6 filelock-3.12.2 pipenv-2023.6.26 platformdirs-3.8.0 setuptools-68.0.0 virtualenv-20.23.1 virtualenv-clone-0.5.7\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | [notice] A new release of pip is available: 21.1.3 -> 23.1.2\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | [notice] To update, run: pip install --upgrade pip\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Creating a virtualenv for this project...\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Pipfile: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/chen-tf-price-tracker-bot/Pipfile\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Using /opt/hostedtoolcache/Python/3.9.6/x64/bin/python3.9 (3.9.6) to create virtualenv...\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | created virtual environment CPython3.9.6.final.0-64 in 1254ms\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |   creator CPython3Posix(dest=/home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1, clear=False, no_vcs_ignore=False, global=False)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |   seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/runneradmin/.local/share/virtualenv)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     added seed packages: pip==23.1.2, setuptools==67.8.0, wheel==0.40.0\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |   activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Successfully created virtual environment!\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Virtualenv location: /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Installing dependencies from Pipfile.lock (3930cb)...\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Installing dependencies from Pipfile.lock (3930cb)...\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | To activate this project's virtualenv, run pipenv shell.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Alternatively, run a command inside the virtualenv with pipenv run.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \u2705  Success - Main Install pipenv and dependencies\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI] \u2b50 Run Main Run Tests\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | ============================= test session starts ==============================\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | platform linux -- Python 3.9.6, pytest-7.3.1, pluggy-1.0.0 -- /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/bin/python\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | cachedir: .pytest_cache\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | metadata: {'Python': '3.9.6', 'Platform': 'Linux-5.4.0-146-generic-x86_64-with-glibc2.31', 'Packages': {'pytest': '7.3.1', 'pluggy': '1.0.0'}, 'Plugins': {'sugar': '0.9.6', 'metadata': '3.0.0', 'cov': '4.0.0', 'datadir': '1.4.1', 'html': '3.2.0', 'mock': '3.10.0', 'order': '1.1.0', 'anyio': '3.7.0'}, 'CI': 'true'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | rootdir: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/chen-tf-price-tracker-bot\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | configfile: pytest.ini\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | plugins: sugar-0.9.6, metadata-3.0.0, cov-4.0.0, datadir-1.4.1, html-3.2.0, mock-3.10.0, order-1.1.0, anyio-3.7.0\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | collecting ... collected 18 items\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/test_good_repository.py::TestGoodRepository::test_enable_state_goods ERROR [  5%]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/test_pt_service.py::TestDisableBlockedUserData::test_blocked Exception ignored in: <function DockerContainer.__del__ at 0x7f7240bb6280>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Traceback (most recent call last):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |   File \"/home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/core/container.py\", line 80, in __del__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     if self._container is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | AttributeError: 'PostgresContainer' object has no attribute '_container'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | FAILED [ 11%]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/test_pt_service.py::TestDisableBlockedUserData::test_unblocked FAILED [ 16%]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/test_pt_service.py::TestUpdateUserLineToken::test_update_user_line_token PASSED [ 22%]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/test_pt_service.py::TestFindUserSubGoods::test_disable_state PASSED [ 27%]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/test_pt_service.py::TestFindUserSubGoods::test_enable_state PASSED [ 33%]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/test_pt_service.py::TestClearUserSubGoods::test_contains_removed_good_name PASSED [ 38%]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/test_pt_service.py::TestClearUserSubGoods::test_emtpy_user_sub_goods PASSED [ 44%]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/test_pt_service.py::TestClearUserSubGoods::test_remove_all PASSED  [ 50%]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/test_pt_service.py::TestAddUserSubGood::test_exceed_maximum_sub_goods PASSED [ 55%]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/test_pt_service.py::TestAddUserSubGood::test_existing_sub_goods PASSED [ 61%]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/test_pt_service.py::TestAddUserSubGood::test_non_existent_sub_goods PASSED [ 66%]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/test_user_repository.py::TestUserRepository::test_enable_state_users ERROR [ 72%]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/test_user_repository.py::TestUserRepository::test_find_id_345_user ERROR [ 77%]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/test_user_repository.py::TestUserRepository::test_find_not_exist_user ERROR [ 83%]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/test_user_repository.py::TestUserRepository::test_find_user_sub_another_good_id ERROR [ 88%]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/test_user_repository.py::TestUserRepository::test_find_user_sub_good_id ERROR [ 94%]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/test_user_repository.py::TestUserRepository::test_no_user_sub_good_id ERROR [100%]Exception ignored in: <function DockerContainer.__del__ at 0x7f7240bb6280>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Traceback (most recent call last):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |   File \"/home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/core/container.py\", line 80, in __del__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     if self._container is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | AttributeError: 'PostgresContainer' object has no attribute '_container'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | ==================================== ERRORS ====================================\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _________ ERROR at setup of TestGoodRepository.test_enable_state_goods _________\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f7240a7b790>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | redirect = False, assert_same_host = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | decode_content = False, response_kw = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | destination_scheme = None, conn = None, release_this_conn = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | http_tunnel_required = False, err = None, clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def urlopen(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | bool | int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         assert_same_host: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool_timeout: int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_conn: bool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         **response_kw: typing.Any,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Get a connection from the pool and perform an HTTP request. This is the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         lowest level call for making a request, so you'll need to specify all\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         the raw details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            More commonly, it's appropriate to use a convenience method\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            such as :meth:`request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `release_conn` will only behave as expected if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` because we want to make\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` the default behaviour someday soon without\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            breaking backwards compatibility.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param redirect:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, automatically handle redirects (status codes 301, 302,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             will disable redirect, too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param assert_same_host:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``True``, will make sure that the host of the pool requests is\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             consistent else will raise HostChangedError. When ``False``, you can\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             use the pool on an HTTP proxy and request foreign hosts.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param pool_timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If set and the pool is set to block=True, then this method will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             connection is available within the time period.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, the response's body will be preloaded into memory.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param release_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If False, then the urlopen call will not release the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool once a response is received (but will release if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             you read the entire contents of the response such as when\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             `preload_content=True`). This is useful if you're not preloading\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the response's content immediately. You will need to call\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool. If None, it takes the value of ``preload_content``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             which defaults to ``True``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param int body_pos:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Position to seek to in file-like body in the event of a retry or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             redirect. Typically this won't need to be set because urllib3 will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auto-populate the value when needed.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         parsed_url = parse_url(url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         destination_scheme = parsed_url.scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = self.headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not isinstance(retries, Retry):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if release_conn is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_conn = preload_content\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Check host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if assert_same_host and not self.is_same_host(url):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise HostChangedError(self, url, retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Ensure that the URL we're connecting to is properly encoded\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if url.startswith(\"/\"):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(_encode_target(url))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(parsed_url.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Track whether `conn` needs to be released before\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # returning/raising/recursing. Update this variable if necessary, and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # leave `release_conn` constant throughout the function. That way, if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the function recurses, the original value of `release_conn` will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # passed down into the recursive call, and its value will be respected.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # See issue #651 [1] for details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_this_conn = release_conn\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         http_tunnel_required = connection_requires_http_tunnel(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.proxy, self.proxy_config, destination_scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # have to copy the headers dict so we can safely change it without those\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # changes being reflected in anyone else's copy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not http_tunnel_required:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Must keep the exception bound to a separate variable or else Python 3\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # complains about UnboundLocalError.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         err = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Keep track of whether we cleanly exited the except block. This\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # ensures we do proper cleanup in finally.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Rewind body position, if needed. Record current position\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # for future rewinds in the event of a redirect/retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos = set_file_position(body, body_pos)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Request a connection from the queue.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self._get_conn(timeout=pool_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._prepare_proxy(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._raise_timeout(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If we're going to release the connection in ``finally:``, then\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # the response doesn't need to know about the connection. Otherwise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # it will also try to release it and we'll have a double-release\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # mess.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response_conn = conn if not release_conn else None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Make the request on the HTTPConnection object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           response = self._make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout_obj,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 response_conn=response_conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 **response_kw,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:790: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f7240a7b790>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f7240a6a0a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | response_conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f7240a6a0a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | preload_content = False, decode_content = False, enforce_content_length = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn: BaseHTTPConnection,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         response_conn: BaseHTTPConnection | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Perform a request on a given urllib connection object taken from our\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             a connection from one of our connection pools\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param response_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Set this to ``None`` if you will handle releasing the connection or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             set the connection to have the response release it.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |           If True, the response's body will be preloaded during construction.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param enforce_content_length:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Enforce content length checking. Body returned by server must match\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             value of Content-Length header, if present. Otherwise, raise error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.num_requests += 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj.start_connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Trigger any extra validation we need to do.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._validate_conn(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except (SocketTimeout, BaseSSLError) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # _validate_conn() starts the connection to an HTTPS proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # so we need to wrap errors with 'ProxyError' here too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             NewConnectionError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             BaseSSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             CertificateError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             new_e: Exception = e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(e, (BaseSSLError, CertificateError)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = SSLError(e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If the connection didn't successfully connect to it's proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # then there\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e, (OSError, NewConnectionError, TimeoutError, SSLError)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise new_e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # conn.request() calls http.client.*.request, not the method in\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           conn.request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:496: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f7240a6a0a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def request(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         *,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Update the inner socket's timeout value to send the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # This only triggers if the connection is re-used.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Store these values to be fed into the HTTPResponse\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # object later. TODO: Remove this in favor of a real\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # HTTP lifecycle mechanism.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # We have to store these before we call .request()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # because sometimes we can still salvage a response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # off the wire even if we aren't able to completely\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # send the request body.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._response_options = _ResponseOptions(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_method=method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         header_keys = frozenset(to_str(k.lower()) for k in headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_accept_encoding = \"accept-encoding\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_host = \"host\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.putrequest(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             method, url, skip_accept_encoding=skip_accept_encoding, skip_host=skip_host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Transform the body into an iterable of sendall()-able chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # and detect if an explicit Content-Length is doable.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks_and_cl = body_to_chunks(body, method=method, blocksize=self.blocksize)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks = chunks_and_cl.chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         content_length = chunks_and_cl.content_length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # When chunked is explicit set to 'True' we respect that.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"transfer-encoding\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Detect whether a framing mechanism is already in use. If so\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # we respect that value, otherwise we pick chunked vs content-length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # depending on the type of 'body'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"content-length\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif \"transfer-encoding\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Otherwise we go off the recommendation of 'body_to_chunks()'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 if content_length is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     if chunks is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self.putheader(\"Content-Length\", str(content_length))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Now that framing headers are out of the way we send all the other headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if \"user-agent\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(\"User-Agent\", _get_default_user_agent())\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         for header, value in headers.items():\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(header, value)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.endheaders()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connection.py:388: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f7240a6a0a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         This method sends the request to the server.  The optional message_body\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         argument can be used to pass a message body associated with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.__state == _CS_REQ_STARTED:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.__state = _CS_REQ_SENT\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise CannotSendHeader()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1252: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f7240a6a0a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None, encode_chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Appends an extra \\\\r\\\\n to the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         A message_body may be specified, to be appended to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._buffer.extend((b\"\", b\"\"))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         msg = b\"\\r\\n\".join(self._buffer)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         del self._buffer[:]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.send(msg)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1012: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f7240a6a0a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/6.1.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(self, data):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send `data' to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ``data`` can be a string object, a bytes object, an array object, a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         file-like object that supports a .read() method, or an iterable object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.auto_open:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               self.connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:952: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f7240a6a0a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def connect(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       sock.connect(self.unix_socket)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E       PermissionError: [Errno 13] Permission denied\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/transport/unixconn.py:27: PermissionError\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | During handling of the above exception, another exception occurred:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f7240a7b8b0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | request = <PreparedRequest [GET]>, stream = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | proxies = OrderedDict()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param stream: (optional) Whether to stream the request content.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout: (optional) How long to wait for the server to send\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             read timeout) <timeouts>` tuple.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type timeout: float or tuple or urllib3 Timeout object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             we verify the server's TLS certificate, or a string, in which case it\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             must be a path to a CA bundle to use\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self.get_connection(request.url, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except LocationValueError as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise InvalidURL(e, request=request)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.cert_verify(conn, request.url, verify, cert)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url = self.request_url(request, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.add_headers(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             stream=stream,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             verify=verify,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             cert=cert,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             proxies=proxies,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if isinstance(timeout, tuple):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 connect, read = timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except ValueError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise ValueError(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"or a single float to set both timeouts to the same value.\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         elif isinstance(timeout, TimeoutSauce):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             pass\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           resp = conn.urlopen(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method=request.method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=request.body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=request.headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 redirect=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 assert_same_host=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=self.max_retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/adapters.py:486: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f7240a7b790>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | redirect = False, assert_same_host = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | decode_content = False, response_kw = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | destination_scheme = None, conn = None, release_this_conn = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | http_tunnel_required = False, err = None, clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def urlopen(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | bool | int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         assert_same_host: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool_timeout: int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_conn: bool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         **response_kw: typing.Any,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Get a connection from the pool and perform an HTTP request. This is the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         lowest level call for making a request, so you'll need to specify all\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         the raw details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            More commonly, it's appropriate to use a convenience method\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            such as :meth:`request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `release_conn` will only behave as expected if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` because we want to make\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` the default behaviour someday soon without\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            breaking backwards compatibility.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param redirect:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, automatically handle redirects (status codes 301, 302,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             will disable redirect, too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param assert_same_host:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``True``, will make sure that the host of the pool requests is\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             consistent else will raise HostChangedError. When ``False``, you can\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             use the pool on an HTTP proxy and request foreign hosts.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param pool_timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If set and the pool is set to block=True, then this method will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             connection is available within the time period.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, the response's body will be preloaded into memory.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param release_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If False, then the urlopen call will not release the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool once a response is received (but will release if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             you read the entire contents of the response such as when\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             `preload_content=True`). This is useful if you're not preloading\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the response's content immediately. You will need to call\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool. If None, it takes the value of ``preload_content``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             which defaults to ``True``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param int body_pos:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Position to seek to in file-like body in the event of a retry or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             redirect. Typically this won't need to be set because urllib3 will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auto-populate the value when needed.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         parsed_url = parse_url(url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         destination_scheme = parsed_url.scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = self.headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not isinstance(retries, Retry):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if release_conn is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_conn = preload_content\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Check host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if assert_same_host and not self.is_same_host(url):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise HostChangedError(self, url, retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Ensure that the URL we're connecting to is properly encoded\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if url.startswith(\"/\"):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(_encode_target(url))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(parsed_url.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Track whether `conn` needs to be released before\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # returning/raising/recursing. Update this variable if necessary, and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # leave `release_conn` constant throughout the function. That way, if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the function recurses, the original value of `release_conn` will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # passed down into the recursive call, and its value will be respected.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # See issue #651 [1] for details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_this_conn = release_conn\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         http_tunnel_required = connection_requires_http_tunnel(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.proxy, self.proxy_config, destination_scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # have to copy the headers dict so we can safely change it without those\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # changes being reflected in anyone else's copy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not http_tunnel_required:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Must keep the exception bound to a separate variable or else Python 3\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # complains about UnboundLocalError.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         err = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Keep track of whether we cleanly exited the except block. This\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # ensures we do proper cleanup in finally.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Rewind body position, if needed. Record current position\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # for future rewinds in the event of a redirect/retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos = set_file_position(body, body_pos)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Request a connection from the queue.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self._get_conn(timeout=pool_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._prepare_proxy(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._raise_timeout(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If we're going to release the connection in ``finally:``, then\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # the response doesn't need to know about the connection. Otherwise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # it will also try to release it and we'll have a double-release\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # mess.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response_conn = conn if not release_conn else None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Make the request on the HTTPConnection object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response = self._make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout_obj,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 response_conn=response_conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 **response_kw,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Everything went great!\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             clean_exit = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except EmptyPoolError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Didn't get a connection from the pool, no need to clean up\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             clean_exit = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_this_conn = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTPException,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ProtocolError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             BaseSSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             CertificateError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ProxyError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Discard the connection for these exceptions. It will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # replaced during the next _get_conn() call.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             new_e: Exception = e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(e, (BaseSSLError, CertificateError)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = SSLError(e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     NewConnectionError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     HTTPException,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 ),\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif isinstance(new_e, (OSError, HTTPException)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = ProtocolError(\"Connection aborted.\", new_e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           retries = retries.increment(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:844: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', response = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f7240a7b790>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _stacktrace = <traceback object at 0x7f7240fbad40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def increment(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         response: BaseHTTPResponse | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         error: Exception | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         _pool: ConnectionPool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         _stacktrace: TracebackType | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> Retry:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param response: A response object, or None, if the server did not\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             return a response.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param Exception error: An error encountered during the request, or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             None if the response was received successfully.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :return: A new ``Retry`` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.total is False and error:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Disabled, indicate to re-raise the error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise reraise(type(error), error, _stacktrace)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         total = self.total\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if total is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             total -= 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         connect = self.connect\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         read = self.read\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect = self.redirect\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         status_count = self.status\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         other = self.other\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         cause = \"unknown\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         status = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect_location = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if error and self._is_connection_error(error):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Connect retry?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if connect is False:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise reraise(type(error), error, _stacktrace)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif connect is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 connect -= 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         elif error and self._is_read_error(error):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Read retry?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if read is False or method is None or not self._is_method_retryable(method):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               raise reraise(type(error), error, _stacktrace)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/util/retry.py:470: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def reraise(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         tp: type[BaseException] | None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         value: BaseException,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         tb: TracebackType | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> typing.NoReturn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if value.__traceback__ is not tb:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               raise value.with_traceback(tb)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/util/util.py:38: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f7240a7b790>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | redirect = False, assert_same_host = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | decode_content = False, response_kw = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | destination_scheme = None, conn = None, release_this_conn = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | http_tunnel_required = False, err = None, clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def urlopen(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | bool | int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         assert_same_host: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool_timeout: int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_conn: bool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         **response_kw: typing.Any,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Get a connection from the pool and perform an HTTP request. This is the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         lowest level call for making a request, so you'll need to specify all\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         the raw details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            More commonly, it's appropriate to use a convenience method\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            such as :meth:`request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `release_conn` will only behave as expected if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` because we want to make\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` the default behaviour someday soon without\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            breaking backwards compatibility.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param redirect:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, automatically handle redirects (status codes 301, 302,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             will disable redirect, too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param assert_same_host:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``True``, will make sure that the host of the pool requests is\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             consistent else will raise HostChangedError. When ``False``, you can\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             use the pool on an HTTP proxy and request foreign hosts.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param pool_timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If set and the pool is set to block=True, then this method will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             connection is available within the time period.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, the response's body will be preloaded into memory.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param release_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If False, then the urlopen call will not release the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool once a response is received (but will release if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             you read the entire contents of the response such as when\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             `preload_content=True`). This is useful if you're not preloading\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the response's content immediately. You will need to call\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool. If None, it takes the value of ``preload_content``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             which defaults to ``True``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param int body_pos:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Position to seek to in file-like body in the event of a retry or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             redirect. Typically this won't need to be set because urllib3 will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auto-populate the value when needed.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         parsed_url = parse_url(url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         destination_scheme = parsed_url.scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = self.headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not isinstance(retries, Retry):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if release_conn is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_conn = preload_content\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Check host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if assert_same_host and not self.is_same_host(url):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise HostChangedError(self, url, retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Ensure that the URL we're connecting to is properly encoded\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if url.startswith(\"/\"):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(_encode_target(url))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(parsed_url.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Track whether `conn` needs to be released before\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # returning/raising/recursing. Update this variable if necessary, and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # leave `release_conn` constant throughout the function. That way, if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the function recurses, the original value of `release_conn` will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # passed down into the recursive call, and its value will be respected.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # See issue #651 [1] for details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_this_conn = release_conn\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         http_tunnel_required = connection_requires_http_tunnel(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.proxy, self.proxy_config, destination_scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # have to copy the headers dict so we can safely change it without those\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # changes being reflected in anyone else's copy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not http_tunnel_required:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Must keep the exception bound to a separate variable or else Python 3\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # complains about UnboundLocalError.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         err = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Keep track of whether we cleanly exited the except block. This\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # ensures we do proper cleanup in finally.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Rewind body position, if needed. Record current position\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # for future rewinds in the event of a redirect/retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos = set_file_position(body, body_pos)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Request a connection from the queue.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self._get_conn(timeout=pool_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._prepare_proxy(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._raise_timeout(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If we're going to release the connection in ``finally:``, then\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # the response doesn't need to know about the connection. Otherwise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # it will also try to release it and we'll have a double-release\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # mess.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response_conn = conn if not release_conn else None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Make the request on the HTTPConnection object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           response = self._make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout_obj,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 response_conn=response_conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 **response_kw,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:790: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f7240a7b790>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f7240a6a0a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | response_conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f7240a6a0a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | preload_content = False, decode_content = False, enforce_content_length = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn: BaseHTTPConnection,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         response_conn: BaseHTTPConnection | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Perform a request on a given urllib connection object taken from our\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             a connection from one of our connection pools\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param response_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Set this to ``None`` if you will handle releasing the connection or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             set the connection to have the response release it.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |           If True, the response's body will be preloaded during construction.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param enforce_content_length:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Enforce content length checking. Body returned by server must match\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             value of Content-Length header, if present. Otherwise, raise error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.num_requests += 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj.start_connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Trigger any extra validation we need to do.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._validate_conn(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except (SocketTimeout, BaseSSLError) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # _validate_conn() starts the connection to an HTTPS proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # so we need to wrap errors with 'ProxyError' here too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             NewConnectionError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             BaseSSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             CertificateError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             new_e: Exception = e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(e, (BaseSSLError, CertificateError)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = SSLError(e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If the connection didn't successfully connect to it's proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # then there\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e, (OSError, NewConnectionError, TimeoutError, SSLError)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise new_e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # conn.request() calls http.client.*.request, not the method in\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           conn.request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:496: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f7240a6a0a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def request(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         *,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Update the inner socket's timeout value to send the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # This only triggers if the connection is re-used.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Store these values to be fed into the HTTPResponse\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # object later. TODO: Remove this in favor of a real\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # HTTP lifecycle mechanism.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # We have to store these before we call .request()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # because sometimes we can still salvage a response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # off the wire even if we aren't able to completely\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # send the request body.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._response_options = _ResponseOptions(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_method=method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         header_keys = frozenset(to_str(k.lower()) for k in headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_accept_encoding = \"accept-encoding\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_host = \"host\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.putrequest(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             method, url, skip_accept_encoding=skip_accept_encoding, skip_host=skip_host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Transform the body into an iterable of sendall()-able chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # and detect if an explicit Content-Length is doable.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks_and_cl = body_to_chunks(body, method=method, blocksize=self.blocksize)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks = chunks_and_cl.chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         content_length = chunks_and_cl.content_length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # When chunked is explicit set to 'True' we respect that.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"transfer-encoding\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Detect whether a framing mechanism is already in use. If so\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # we respect that value, otherwise we pick chunked vs content-length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # depending on the type of 'body'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"content-length\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif \"transfer-encoding\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Otherwise we go off the recommendation of 'body_to_chunks()'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 if content_length is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     if chunks is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self.putheader(\"Content-Length\", str(content_length))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Now that framing headers are out of the way we send all the other headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if \"user-agent\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(\"User-Agent\", _get_default_user_agent())\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         for header, value in headers.items():\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(header, value)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.endheaders()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connection.py:388: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f7240a6a0a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         This method sends the request to the server.  The optional message_body\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         argument can be used to pass a message body associated with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.__state == _CS_REQ_STARTED:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.__state = _CS_REQ_SENT\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise CannotSendHeader()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1252: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f7240a6a0a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None, encode_chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Appends an extra \\\\r\\\\n to the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         A message_body may be specified, to be appended to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._buffer.extend((b\"\", b\"\"))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         msg = b\"\\r\\n\".join(self._buffer)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         del self._buffer[:]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.send(msg)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1012: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f7240a6a0a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/6.1.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(self, data):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send `data' to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ``data`` can be a string object, a bytes object, an array object, a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         file-like object that supports a .read() method, or an iterable object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.auto_open:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               self.connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:952: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f7240a6a0a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def connect(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       sock.connect(self.unix_socket)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | During handling of the above exception, another exception occurred:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f7240a7b160>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _retrieve_server_version(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:214: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f7240a7b160>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | api_version = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def version(self, api_version=True):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Returns version information from the server. Similar to the ``docker\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         version`` command.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Returns:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             (dict): The server version information\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Raises:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :py:class:`docker.errors.APIError`\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 If the server returns an error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url = self._url(\"/version\", versioned_api=api_version)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return self._result(self._get(url), json=True)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/daemon.py:181: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f7240a7b160>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | args = ('http+docker://localhost/version',), kwargs = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def inner(self, *args, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if 'HttpHeaders' in self._general_configs:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if not kwargs.get('headers'):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return f(self, *args, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/utils/decorators.py:46: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f7240a7b160>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     @update_headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _get(self, url, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:237: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f7240a7b160>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | url = 'http+docker://localhost/version'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def get(self, url, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url: URL for the new :class:`Request` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"allow_redirects\", True)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return self.request(\"GET\", url, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/sessions.py:602: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f7240a7b160>, method = 'GET'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | url = 'http+docker://localhost/version', params = None, data = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | cert = None, json = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         params=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         data=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         cookies=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         files=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         auth=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         allow_redirects=True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         proxies=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         hooks=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         stream=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         verify=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         cert=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         json=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Returns :class:`Response <Response>` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method: method for the new :class:`Request` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url: URL for the new :class:`Request` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             string for the :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             object to send in the body of the :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param json: (optional) json to send in the body of the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             for multipart encoding upload.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param auth: (optional) Auth tuple or callable to enable\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Basic/Digest/Custom HTTP Auth.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout: (optional) How long to wait for the server to send\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             read timeout) <timeouts>` tuple.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type timeout: float or tuple\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param allow_redirects: (optional) Set to True by default.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type allow_redirects: bool\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             hostname to the URL of the proxy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param stream: (optional) whether to immediately download the response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content. Defaults to ``False``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the server's TLS certificate, or a string, in which case it must be a path\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``False``, requests will accept any TLS certificate presented by\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the server, and will ignore hostname mismatches and/or expired\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             certificates, which will make your application vulnerable to\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             may be useful during local development or testing.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If Tuple, ('cert', 'key') pair.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Create the Request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         req = Request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             method=method.upper(),\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             files=files,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data=data or {},\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             json=json,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             params=params or {},\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auth=auth,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             cookies=cookies,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             hooks=hooks,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         prep = self.prepare_request(req)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         proxies = proxies or {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         settings = self.merge_environment_settings(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             prep.url, proxies, stream, verify, cert\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Send the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         send_kwargs = {\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             \"timeout\": timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             \"allow_redirects\": allow_redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         }\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         send_kwargs.update(settings)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       resp = self.send(prep, **send_kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/sessions.py:589: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f7240a7b160>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | request = <PreparedRequest [GET]>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f7240a7b8b0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | start = 1688230007.4263878\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(self, request, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send a given PreparedRequest.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Set defaults that the hooks can utilize to ensure they always have\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the correct parameters to reproduce the previous request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"stream\", self.stream)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"verify\", self.verify)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"cert\", self.cert)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if \"proxies\" not in kwargs:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             kwargs[\"proxies\"] = resolve_proxies(request, self.proxies, self.trust_env)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # It's possible that users might accidentally send a Request object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Guard against that specific failure case.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if isinstance(request, Request):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise ValueError(\"You can only send PreparedRequests.\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         allow_redirects = kwargs.pop(\"allow_redirects\", True)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         stream = kwargs.get(\"stream\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         hooks = request.hooks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Get the appropriate adapter to use\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         adapter = self.get_adapter(url=request.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Start time (approximately) of the request\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         start = preferred_clock()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Send the request\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       r = adapter.send(request, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/sessions.py:703: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f7240a7b8b0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | request = <PreparedRequest [GET]>, stream = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | proxies = OrderedDict()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param stream: (optional) Whether to stream the request content.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout: (optional) How long to wait for the server to send\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             read timeout) <timeouts>` tuple.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type timeout: float or tuple or urllib3 Timeout object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             we verify the server's TLS certificate, or a string, in which case it\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             must be a path to a CA bundle to use\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self.get_connection(request.url, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except LocationValueError as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise InvalidURL(e, request=request)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.cert_verify(conn, request.url, verify, cert)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url = self.request_url(request, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.add_headers(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             stream=stream,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             verify=verify,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             cert=cert,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             proxies=proxies,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if isinstance(timeout, tuple):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 connect, read = timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except ValueError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise ValueError(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"or a single float to set both timeouts to the same value.\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         elif isinstance(timeout, TimeoutSauce):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             pass\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             resp = conn.urlopen(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method=request.method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=request.body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=request.headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 redirect=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 assert_same_host=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=self.max_retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (ProtocolError, OSError) as err:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           raise ConnectionError(err, request=request)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/adapters.py:501: ConnectionError\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | During handling of the above exception, another exception occurred:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | cls = <class 'tests.test_good_repository.TestGoodRepository'>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     @classmethod\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def setUpClass(cls):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       cls.container = PostgresContainer(\"postgres:14\").with_bind_ports(5432, 16888)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/base_pg_testcontainer.py:26: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/postgres.py:49: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     super(PostgresContainer, self).__init__(image=image, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/core/generic.py:27: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     super(DbContainer, self).__init__(image, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/core/container.py:19: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self.client = docker.from_env(**kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/client.py:96: in from_env\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     return cls(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/client.py:45: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self.api = APIClient(*args, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:197: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self._version = self._retrieve_server_version()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f7240a7b160>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _retrieve_server_version(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except KeyError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise DockerException(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 ' is missing.'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except Exception as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           raise DockerException(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 f'Error while fetching server API version: {e}'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:221: DockerException\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _________ ERROR at setup of TestUserRepository.test_enable_state_users _________\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | redirect = False, assert_same_host = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | decode_content = False, response_kw = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | destination_scheme = None, conn = None, release_this_conn = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | http_tunnel_required = False, err = None, clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def urlopen(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | bool | int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         assert_same_host: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool_timeout: int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_conn: bool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         **response_kw: typing.Any,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Get a connection from the pool and perform an HTTP request. This is the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         lowest level call for making a request, so you'll need to specify all\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         the raw details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            More commonly, it's appropriate to use a convenience method\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            such as :meth:`request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `release_conn` will only behave as expected if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` because we want to make\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` the default behaviour someday soon without\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            breaking backwards compatibility.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param redirect:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, automatically handle redirects (status codes 301, 302,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             will disable redirect, too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param assert_same_host:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``True``, will make sure that the host of the pool requests is\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             consistent else will raise HostChangedError. When ``False``, you can\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             use the pool on an HTTP proxy and request foreign hosts.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param pool_timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If set and the pool is set to block=True, then this method will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             connection is available within the time period.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, the response's body will be preloaded into memory.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param release_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If False, then the urlopen call will not release the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool once a response is received (but will release if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             you read the entire contents of the response such as when\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             `preload_content=True`). This is useful if you're not preloading\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the response's content immediately. You will need to call\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool. If None, it takes the value of ``preload_content``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             which defaults to ``True``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param int body_pos:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Position to seek to in file-like body in the event of a retry or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             redirect. Typically this won't need to be set because urllib3 will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auto-populate the value when needed.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         parsed_url = parse_url(url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         destination_scheme = parsed_url.scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = self.headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not isinstance(retries, Retry):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if release_conn is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_conn = preload_content\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Check host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if assert_same_host and not self.is_same_host(url):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise HostChangedError(self, url, retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Ensure that the URL we're connecting to is properly encoded\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if url.startswith(\"/\"):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(_encode_target(url))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(parsed_url.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Track whether `conn` needs to be released before\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # returning/raising/recursing. Update this variable if necessary, and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # leave `release_conn` constant throughout the function. That way, if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the function recurses, the original value of `release_conn` will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # passed down into the recursive call, and its value will be respected.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # See issue #651 [1] for details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_this_conn = release_conn\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         http_tunnel_required = connection_requires_http_tunnel(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.proxy, self.proxy_config, destination_scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # have to copy the headers dict so we can safely change it without those\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # changes being reflected in anyone else's copy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not http_tunnel_required:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Must keep the exception bound to a separate variable or else Python 3\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # complains about UnboundLocalError.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         err = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Keep track of whether we cleanly exited the except block. This\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # ensures we do proper cleanup in finally.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Rewind body position, if needed. Record current position\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # for future rewinds in the event of a redirect/retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos = set_file_position(body, body_pos)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Request a connection from the queue.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self._get_conn(timeout=pool_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._prepare_proxy(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._raise_timeout(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If we're going to release the connection in ``finally:``, then\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # the response doesn't need to know about the connection. Otherwise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # it will also try to release it and we'll have a double-release\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # mess.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response_conn = conn if not release_conn else None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Make the request on the HTTPConnection object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           response = self._make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout_obj,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 response_conn=response_conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 **response_kw,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:790: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | response_conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | preload_content = False, decode_content = False, enforce_content_length = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn: BaseHTTPConnection,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         response_conn: BaseHTTPConnection | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Perform a request on a given urllib connection object taken from our\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             a connection from one of our connection pools\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param response_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Set this to ``None`` if you will handle releasing the connection or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             set the connection to have the response release it.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |           If True, the response's body will be preloaded during construction.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param enforce_content_length:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Enforce content length checking. Body returned by server must match\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             value of Content-Length header, if present. Otherwise, raise error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.num_requests += 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj.start_connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Trigger any extra validation we need to do.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._validate_conn(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except (SocketTimeout, BaseSSLError) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # _validate_conn() starts the connection to an HTTPS proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # so we need to wrap errors with 'ProxyError' here too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             NewConnectionError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             BaseSSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             CertificateError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             new_e: Exception = e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(e, (BaseSSLError, CertificateError)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = SSLError(e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If the connection didn't successfully connect to it's proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # then there\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e, (OSError, NewConnectionError, TimeoutError, SSLError)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise new_e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # conn.request() calls http.client.*.request, not the method in\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           conn.request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:496: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def request(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         *,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Update the inner socket's timeout value to send the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # This only triggers if the connection is re-used.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Store these values to be fed into the HTTPResponse\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # object later. TODO: Remove this in favor of a real\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # HTTP lifecycle mechanism.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # We have to store these before we call .request()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # because sometimes we can still salvage a response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # off the wire even if we aren't able to completely\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # send the request body.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._response_options = _ResponseOptions(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_method=method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         header_keys = frozenset(to_str(k.lower()) for k in headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_accept_encoding = \"accept-encoding\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_host = \"host\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.putrequest(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             method, url, skip_accept_encoding=skip_accept_encoding, skip_host=skip_host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Transform the body into an iterable of sendall()-able chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # and detect if an explicit Content-Length is doable.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks_and_cl = body_to_chunks(body, method=method, blocksize=self.blocksize)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks = chunks_and_cl.chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         content_length = chunks_and_cl.content_length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # When chunked is explicit set to 'True' we respect that.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"transfer-encoding\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Detect whether a framing mechanism is already in use. If so\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # we respect that value, otherwise we pick chunked vs content-length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # depending on the type of 'body'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"content-length\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif \"transfer-encoding\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Otherwise we go off the recommendation of 'body_to_chunks()'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 if content_length is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     if chunks is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self.putheader(\"Content-Length\", str(content_length))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Now that framing headers are out of the way we send all the other headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if \"user-agent\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(\"User-Agent\", _get_default_user_agent())\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         for header, value in headers.items():\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(header, value)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.endheaders()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connection.py:388: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         This method sends the request to the server.  The optional message_body\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         argument can be used to pass a message body associated with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.__state == _CS_REQ_STARTED:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.__state = _CS_REQ_SENT\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise CannotSendHeader()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1252: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None, encode_chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Appends an extra \\\\r\\\\n to the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         A message_body may be specified, to be appended to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._buffer.extend((b\"\", b\"\"))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         msg = b\"\\r\\n\".join(self._buffer)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         del self._buffer[:]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.send(msg)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1012: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/6.1.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(self, data):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send `data' to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ``data`` can be a string object, a bytes object, an array object, a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         file-like object that supports a .read() method, or an iterable object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.auto_open:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               self.connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:952: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def connect(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       sock.connect(self.unix_socket)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E       PermissionError: [Errno 13] Permission denied\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/transport/unixconn.py:27: PermissionError\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | During handling of the above exception, another exception occurred:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f723f3838e0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | request = <PreparedRequest [GET]>, stream = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | proxies = OrderedDict()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param stream: (optional) Whether to stream the request content.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout: (optional) How long to wait for the server to send\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             read timeout) <timeouts>` tuple.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type timeout: float or tuple or urllib3 Timeout object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             we verify the server's TLS certificate, or a string, in which case it\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             must be a path to a CA bundle to use\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self.get_connection(request.url, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except LocationValueError as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise InvalidURL(e, request=request)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.cert_verify(conn, request.url, verify, cert)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url = self.request_url(request, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.add_headers(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             stream=stream,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             verify=verify,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             cert=cert,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             proxies=proxies,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if isinstance(timeout, tuple):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 connect, read = timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except ValueError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise ValueError(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"or a single float to set both timeouts to the same value.\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         elif isinstance(timeout, TimeoutSauce):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             pass\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           resp = conn.urlopen(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method=request.method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=request.body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=request.headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 redirect=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 assert_same_host=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=self.max_retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/adapters.py:486: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | redirect = False, assert_same_host = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | decode_content = False, response_kw = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | destination_scheme = None, conn = None, release_this_conn = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | http_tunnel_required = False, err = None, clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def urlopen(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | bool | int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         assert_same_host: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool_timeout: int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_conn: bool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         **response_kw: typing.Any,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Get a connection from the pool and perform an HTTP request. This is the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         lowest level call for making a request, so you'll need to specify all\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         the raw details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            More commonly, it's appropriate to use a convenience method\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            such as :meth:`request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `release_conn` will only behave as expected if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` because we want to make\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` the default behaviour someday soon without\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            breaking backwards compatibility.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param redirect:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, automatically handle redirects (status codes 301, 302,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             will disable redirect, too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param assert_same_host:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``True``, will make sure that the host of the pool requests is\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             consistent else will raise HostChangedError. When ``False``, you can\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             use the pool on an HTTP proxy and request foreign hosts.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param pool_timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If set and the pool is set to block=True, then this method will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             connection is available within the time period.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, the response's body will be preloaded into memory.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param release_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If False, then the urlopen call will not release the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool once a response is received (but will release if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             you read the entire contents of the response such as when\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             `preload_content=True`). This is useful if you're not preloading\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the response's content immediately. You will need to call\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool. If None, it takes the value of ``preload_content``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             which defaults to ``True``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param int body_pos:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Position to seek to in file-like body in the event of a retry or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             redirect. Typically this won't need to be set because urllib3 will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auto-populate the value when needed.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         parsed_url = parse_url(url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         destination_scheme = parsed_url.scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = self.headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not isinstance(retries, Retry):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if release_conn is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_conn = preload_content\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Check host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if assert_same_host and not self.is_same_host(url):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise HostChangedError(self, url, retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Ensure that the URL we're connecting to is properly encoded\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if url.startswith(\"/\"):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(_encode_target(url))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(parsed_url.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Track whether `conn` needs to be released before\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # returning/raising/recursing. Update this variable if necessary, and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # leave `release_conn` constant throughout the function. That way, if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the function recurses, the original value of `release_conn` will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # passed down into the recursive call, and its value will be respected.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # See issue #651 [1] for details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_this_conn = release_conn\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         http_tunnel_required = connection_requires_http_tunnel(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.proxy, self.proxy_config, destination_scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # have to copy the headers dict so we can safely change it without those\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # changes being reflected in anyone else's copy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not http_tunnel_required:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Must keep the exception bound to a separate variable or else Python 3\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # complains about UnboundLocalError.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         err = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Keep track of whether we cleanly exited the except block. This\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # ensures we do proper cleanup in finally.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Rewind body position, if needed. Record current position\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # for future rewinds in the event of a redirect/retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos = set_file_position(body, body_pos)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Request a connection from the queue.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self._get_conn(timeout=pool_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._prepare_proxy(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._raise_timeout(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If we're going to release the connection in ``finally:``, then\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # the response doesn't need to know about the connection. Otherwise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # it will also try to release it and we'll have a double-release\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # mess.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response_conn = conn if not release_conn else None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Make the request on the HTTPConnection object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response = self._make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout_obj,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 response_conn=response_conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 **response_kw,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Everything went great!\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             clean_exit = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except EmptyPoolError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Didn't get a connection from the pool, no need to clean up\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             clean_exit = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_this_conn = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTPException,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ProtocolError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             BaseSSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             CertificateError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ProxyError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Discard the connection for these exceptions. It will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # replaced during the next _get_conn() call.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             new_e: Exception = e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(e, (BaseSSLError, CertificateError)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = SSLError(e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     NewConnectionError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     HTTPException,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 ),\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif isinstance(new_e, (OSError, HTTPException)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = ProtocolError(\"Connection aborted.\", new_e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           retries = retries.increment(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:844: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', response = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _stacktrace = <traceback object at 0x7f723f382080>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def increment(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         response: BaseHTTPResponse | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         error: Exception | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         _pool: ConnectionPool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         _stacktrace: TracebackType | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> Retry:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param response: A response object, or None, if the server did not\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             return a response.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param Exception error: An error encountered during the request, or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             None if the response was received successfully.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :return: A new ``Retry`` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.total is False and error:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Disabled, indicate to re-raise the error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise reraise(type(error), error, _stacktrace)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         total = self.total\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if total is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             total -= 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         connect = self.connect\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         read = self.read\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect = self.redirect\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         status_count = self.status\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         other = self.other\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         cause = \"unknown\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         status = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect_location = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if error and self._is_connection_error(error):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Connect retry?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if connect is False:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise reraise(type(error), error, _stacktrace)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif connect is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 connect -= 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         elif error and self._is_read_error(error):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Read retry?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if read is False or method is None or not self._is_method_retryable(method):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               raise reraise(type(error), error, _stacktrace)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/util/retry.py:470: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def reraise(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         tp: type[BaseException] | None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         value: BaseException,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         tb: TracebackType | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> typing.NoReturn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if value.__traceback__ is not tb:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               raise value.with_traceback(tb)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/util/util.py:38: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | redirect = False, assert_same_host = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | decode_content = False, response_kw = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | destination_scheme = None, conn = None, release_this_conn = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | http_tunnel_required = False, err = None, clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def urlopen(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | bool | int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         assert_same_host: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool_timeout: int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_conn: bool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         **response_kw: typing.Any,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Get a connection from the pool and perform an HTTP request. This is the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         lowest level call for making a request, so you'll need to specify all\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         the raw details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            More commonly, it's appropriate to use a convenience method\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            such as :meth:`request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `release_conn` will only behave as expected if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` because we want to make\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` the default behaviour someday soon without\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            breaking backwards compatibility.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param redirect:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, automatically handle redirects (status codes 301, 302,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             will disable redirect, too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param assert_same_host:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``True``, will make sure that the host of the pool requests is\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             consistent else will raise HostChangedError. When ``False``, you can\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             use the pool on an HTTP proxy and request foreign hosts.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param pool_timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If set and the pool is set to block=True, then this method will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             connection is available within the time period.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, the response's body will be preloaded into memory.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param release_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If False, then the urlopen call will not release the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool once a response is received (but will release if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             you read the entire contents of the response such as when\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             `preload_content=True`). This is useful if you're not preloading\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the response's content immediately. You will need to call\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool. If None, it takes the value of ``preload_content``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             which defaults to ``True``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param int body_pos:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Position to seek to in file-like body in the event of a retry or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             redirect. Typically this won't need to be set because urllib3 will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auto-populate the value when needed.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         parsed_url = parse_url(url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         destination_scheme = parsed_url.scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = self.headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not isinstance(retries, Retry):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if release_conn is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_conn = preload_content\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Check host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if assert_same_host and not self.is_same_host(url):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise HostChangedError(self, url, retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Ensure that the URL we're connecting to is properly encoded\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if url.startswith(\"/\"):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(_encode_target(url))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(parsed_url.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Track whether `conn` needs to be released before\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # returning/raising/recursing. Update this variable if necessary, and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # leave `release_conn` constant throughout the function. That way, if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the function recurses, the original value of `release_conn` will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # passed down into the recursive call, and its value will be respected.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # See issue #651 [1] for details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_this_conn = release_conn\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         http_tunnel_required = connection_requires_http_tunnel(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.proxy, self.proxy_config, destination_scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # have to copy the headers dict so we can safely change it without those\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # changes being reflected in anyone else's copy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not http_tunnel_required:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Must keep the exception bound to a separate variable or else Python 3\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # complains about UnboundLocalError.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         err = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Keep track of whether we cleanly exited the except block. This\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # ensures we do proper cleanup in finally.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Rewind body position, if needed. Record current position\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # for future rewinds in the event of a redirect/retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos = set_file_position(body, body_pos)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Request a connection from the queue.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self._get_conn(timeout=pool_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._prepare_proxy(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._raise_timeout(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If we're going to release the connection in ``finally:``, then\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # the response doesn't need to know about the connection. Otherwise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # it will also try to release it and we'll have a double-release\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # mess.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response_conn = conn if not release_conn else None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Make the request on the HTTPConnection object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           response = self._make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout_obj,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 response_conn=response_conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 **response_kw,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:790: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | response_conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | preload_content = False, decode_content = False, enforce_content_length = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn: BaseHTTPConnection,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         response_conn: BaseHTTPConnection | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Perform a request on a given urllib connection object taken from our\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             a connection from one of our connection pools\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param response_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Set this to ``None`` if you will handle releasing the connection or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             set the connection to have the response release it.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |           If True, the response's body will be preloaded during construction.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param enforce_content_length:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Enforce content length checking. Body returned by server must match\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             value of Content-Length header, if present. Otherwise, raise error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.num_requests += 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj.start_connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Trigger any extra validation we need to do.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._validate_conn(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except (SocketTimeout, BaseSSLError) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # _validate_conn() starts the connection to an HTTPS proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # so we need to wrap errors with 'ProxyError' here too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             NewConnectionError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             BaseSSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             CertificateError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             new_e: Exception = e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(e, (BaseSSLError, CertificateError)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = SSLError(e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If the connection didn't successfully connect to it's proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # then there\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e, (OSError, NewConnectionError, TimeoutError, SSLError)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise new_e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # conn.request() calls http.client.*.request, not the method in\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           conn.request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:496: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def request(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         *,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Update the inner socket's timeout value to send the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # This only triggers if the connection is re-used.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Store these values to be fed into the HTTPResponse\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # object later. TODO: Remove this in favor of a real\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # HTTP lifecycle mechanism.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # We have to store these before we call .request()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # because sometimes we can still salvage a response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # off the wire even if we aren't able to completely\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # send the request body.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._response_options = _ResponseOptions(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_method=method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         header_keys = frozenset(to_str(k.lower()) for k in headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_accept_encoding = \"accept-encoding\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_host = \"host\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.putrequest(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             method, url, skip_accept_encoding=skip_accept_encoding, skip_host=skip_host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Transform the body into an iterable of sendall()-able chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # and detect if an explicit Content-Length is doable.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks_and_cl = body_to_chunks(body, method=method, blocksize=self.blocksize)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks = chunks_and_cl.chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         content_length = chunks_and_cl.content_length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # When chunked is explicit set to 'True' we respect that.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"transfer-encoding\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Detect whether a framing mechanism is already in use. If so\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # we respect that value, otherwise we pick chunked vs content-length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # depending on the type of 'body'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"content-length\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif \"transfer-encoding\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Otherwise we go off the recommendation of 'body_to_chunks()'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 if content_length is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     if chunks is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self.putheader(\"Content-Length\", str(content_length))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Now that framing headers are out of the way we send all the other headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if \"user-agent\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(\"User-Agent\", _get_default_user_agent())\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         for header, value in headers.items():\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(header, value)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.endheaders()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connection.py:388: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         This method sends the request to the server.  The optional message_body\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         argument can be used to pass a message body associated with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.__state == _CS_REQ_STARTED:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.__state = _CS_REQ_SENT\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise CannotSendHeader()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1252: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None, encode_chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Appends an extra \\\\r\\\\n to the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         A message_body may be specified, to be appended to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._buffer.extend((b\"\", b\"\"))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         msg = b\"\\r\\n\".join(self._buffer)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         del self._buffer[:]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.send(msg)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1012: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/6.1.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(self, data):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send `data' to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ``data`` can be a string object, a bytes object, an array object, a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         file-like object that supports a .read() method, or an iterable object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.auto_open:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               self.connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:952: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def connect(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       sock.connect(self.unix_socket)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | During handling of the above exception, another exception occurred:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _retrieve_server_version(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:214: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | api_version = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def version(self, api_version=True):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Returns version information from the server. Similar to the ``docker\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         version`` command.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Returns:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             (dict): The server version information\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Raises:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :py:class:`docker.errors.APIError`\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 If the server returns an error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url = self._url(\"/version\", versioned_api=api_version)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return self._result(self._get(url), json=True)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/daemon.py:181: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | args = ('http+docker://localhost/version',), kwargs = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def inner(self, *args, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if 'HttpHeaders' in self._general_configs:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if not kwargs.get('headers'):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return f(self, *args, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/utils/decorators.py:46: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     @update_headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _get(self, url, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:237: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | url = 'http+docker://localhost/version'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def get(self, url, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url: URL for the new :class:`Request` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"allow_redirects\", True)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return self.request(\"GET\", url, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/sessions.py:602: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>, method = 'GET'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | url = 'http+docker://localhost/version', params = None, data = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | cert = None, json = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         params=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         data=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         cookies=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         files=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         auth=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         allow_redirects=True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         proxies=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         hooks=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         stream=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         verify=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         cert=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         json=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Returns :class:`Response <Response>` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method: method for the new :class:`Request` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url: URL for the new :class:`Request` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             string for the :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             object to send in the body of the :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param json: (optional) json to send in the body of the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             for multipart encoding upload.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param auth: (optional) Auth tuple or callable to enable\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Basic/Digest/Custom HTTP Auth.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout: (optional) How long to wait for the server to send\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             read timeout) <timeouts>` tuple.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type timeout: float or tuple\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param allow_redirects: (optional) Set to True by default.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type allow_redirects: bool\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             hostname to the URL of the proxy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param stream: (optional) whether to immediately download the response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content. Defaults to ``False``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the server's TLS certificate, or a string, in which case it must be a path\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``False``, requests will accept any TLS certificate presented by\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the server, and will ignore hostname mismatches and/or expired\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             certificates, which will make your application vulnerable to\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             may be useful during local development or testing.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If Tuple, ('cert', 'key') pair.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Create the Request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         req = Request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             method=method.upper(),\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             files=files,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data=data or {},\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             json=json,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             params=params or {},\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auth=auth,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             cookies=cookies,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             hooks=hooks,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         prep = self.prepare_request(req)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         proxies = proxies or {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         settings = self.merge_environment_settings(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             prep.url, proxies, stream, verify, cert\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Send the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         send_kwargs = {\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             \"timeout\": timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             \"allow_redirects\": allow_redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         }\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         send_kwargs.update(settings)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       resp = self.send(prep, **send_kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/sessions.py:589: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | request = <PreparedRequest [GET]>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f723f3838e0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | start = 1688230010.6987472\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(self, request, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send a given PreparedRequest.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Set defaults that the hooks can utilize to ensure they always have\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the correct parameters to reproduce the previous request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"stream\", self.stream)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"verify\", self.verify)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"cert\", self.cert)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if \"proxies\" not in kwargs:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             kwargs[\"proxies\"] = resolve_proxies(request, self.proxies, self.trust_env)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # It's possible that users might accidentally send a Request object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Guard against that specific failure case.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if isinstance(request, Request):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise ValueError(\"You can only send PreparedRequests.\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         allow_redirects = kwargs.pop(\"allow_redirects\", True)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         stream = kwargs.get(\"stream\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         hooks = request.hooks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Get the appropriate adapter to use\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         adapter = self.get_adapter(url=request.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Start time (approximately) of the request\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         start = preferred_clock()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Send the request\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       r = adapter.send(request, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/sessions.py:703: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f723f3838e0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | request = <PreparedRequest [GET]>, stream = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | proxies = OrderedDict()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param stream: (optional) Whether to stream the request content.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout: (optional) How long to wait for the server to send\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             read timeout) <timeouts>` tuple.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type timeout: float or tuple or urllib3 Timeout object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             we verify the server's TLS certificate, or a string, in which case it\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             must be a path to a CA bundle to use\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self.get_connection(request.url, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except LocationValueError as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise InvalidURL(e, request=request)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.cert_verify(conn, request.url, verify, cert)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url = self.request_url(request, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.add_headers(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             stream=stream,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             verify=verify,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             cert=cert,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             proxies=proxies,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if isinstance(timeout, tuple):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 connect, read = timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except ValueError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise ValueError(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"or a single float to set both timeouts to the same value.\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         elif isinstance(timeout, TimeoutSauce):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             pass\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             resp = conn.urlopen(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method=request.method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=request.body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=request.headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 redirect=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 assert_same_host=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=self.max_retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (ProtocolError, OSError) as err:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           raise ConnectionError(err, request=request)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/adapters.py:501: ConnectionError\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | During handling of the above exception, another exception occurred:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | cls = <class 'tests.test_user_repository.TestUserRepository'>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     @classmethod\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def setUpClass(cls):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       cls.container = PostgresContainer(\"postgres:14\").with_bind_ports(5432, 16888)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/base_pg_testcontainer.py:26: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/postgres.py:49: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     super(PostgresContainer, self).__init__(image=image, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/core/generic.py:27: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     super(DbContainer, self).__init__(image, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/core/container.py:19: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self.client = docker.from_env(**kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/client.py:96: in from_env\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     return cls(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/client.py:45: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self.api = APIClient(*args, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:197: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self._version = self._retrieve_server_version()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _retrieve_server_version(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except KeyError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise DockerException(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 ' is missing.'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except Exception as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           raise DockerException(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 f'Error while fetching server API version: {e}'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:221: DockerException\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | __________ ERROR at setup of TestUserRepository.test_find_id_345_user __________\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | redirect = False, assert_same_host = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | decode_content = False, response_kw = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | destination_scheme = None, conn = None, release_this_conn = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | http_tunnel_required = False, err = None, clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def urlopen(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | bool | int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         assert_same_host: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool_timeout: int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_conn: bool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         **response_kw: typing.Any,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Get a connection from the pool and perform an HTTP request. This is the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         lowest level call for making a request, so you'll need to specify all\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         the raw details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            More commonly, it's appropriate to use a convenience method\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            such as :meth:`request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `release_conn` will only behave as expected if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` because we want to make\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` the default behaviour someday soon without\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            breaking backwards compatibility.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param redirect:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, automatically handle redirects (status codes 301, 302,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             will disable redirect, too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param assert_same_host:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``True``, will make sure that the host of the pool requests is\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             consistent else will raise HostChangedError. When ``False``, you can\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             use the pool on an HTTP proxy and request foreign hosts.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param pool_timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If set and the pool is set to block=True, then this method will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             connection is available within the time period.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, the response's body will be preloaded into memory.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param release_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If False, then the urlopen call will not release the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool once a response is received (but will release if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             you read the entire contents of the response such as when\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             `preload_content=True`). This is useful if you're not preloading\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the response's content immediately. You will need to call\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool. If None, it takes the value of ``preload_content``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             which defaults to ``True``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param int body_pos:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Position to seek to in file-like body in the event of a retry or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             redirect. Typically this won't need to be set because urllib3 will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auto-populate the value when needed.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         parsed_url = parse_url(url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         destination_scheme = parsed_url.scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = self.headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not isinstance(retries, Retry):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if release_conn is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_conn = preload_content\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Check host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if assert_same_host and not self.is_same_host(url):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise HostChangedError(self, url, retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Ensure that the URL we're connecting to is properly encoded\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if url.startswith(\"/\"):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(_encode_target(url))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(parsed_url.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Track whether `conn` needs to be released before\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # returning/raising/recursing. Update this variable if necessary, and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # leave `release_conn` constant throughout the function. That way, if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the function recurses, the original value of `release_conn` will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # passed down into the recursive call, and its value will be respected.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # See issue #651 [1] for details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_this_conn = release_conn\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         http_tunnel_required = connection_requires_http_tunnel(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.proxy, self.proxy_config, destination_scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # have to copy the headers dict so we can safely change it without those\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # changes being reflected in anyone else's copy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not http_tunnel_required:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Must keep the exception bound to a separate variable or else Python 3\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # complains about UnboundLocalError.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         err = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Keep track of whether we cleanly exited the except block. This\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # ensures we do proper cleanup in finally.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Rewind body position, if needed. Record current position\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # for future rewinds in the event of a redirect/retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos = set_file_position(body, body_pos)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Request a connection from the queue.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self._get_conn(timeout=pool_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._prepare_proxy(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._raise_timeout(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If we're going to release the connection in ``finally:``, then\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # the response doesn't need to know about the connection. Otherwise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # it will also try to release it and we'll have a double-release\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # mess.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response_conn = conn if not release_conn else None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Make the request on the HTTPConnection object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           response = self._make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout_obj,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 response_conn=response_conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 **response_kw,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:790: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | response_conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | preload_content = False, decode_content = False, enforce_content_length = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn: BaseHTTPConnection,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         response_conn: BaseHTTPConnection | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Perform a request on a given urllib connection object taken from our\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             a connection from one of our connection pools\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param response_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Set this to ``None`` if you will handle releasing the connection or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             set the connection to have the response release it.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |           If True, the response's body will be preloaded during construction.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param enforce_content_length:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Enforce content length checking. Body returned by server must match\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             value of Content-Length header, if present. Otherwise, raise error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.num_requests += 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj.start_connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Trigger any extra validation we need to do.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._validate_conn(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except (SocketTimeout, BaseSSLError) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # _validate_conn() starts the connection to an HTTPS proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # so we need to wrap errors with 'ProxyError' here too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             NewConnectionError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             BaseSSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             CertificateError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             new_e: Exception = e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(e, (BaseSSLError, CertificateError)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = SSLError(e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If the connection didn't successfully connect to it's proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # then there\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e, (OSError, NewConnectionError, TimeoutError, SSLError)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise new_e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # conn.request() calls http.client.*.request, not the method in\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           conn.request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:496: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def request(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         *,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Update the inner socket's timeout value to send the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # This only triggers if the connection is re-used.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Store these values to be fed into the HTTPResponse\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # object later. TODO: Remove this in favor of a real\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # HTTP lifecycle mechanism.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # We have to store these before we call .request()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # because sometimes we can still salvage a response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # off the wire even if we aren't able to completely\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # send the request body.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._response_options = _ResponseOptions(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_method=method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         header_keys = frozenset(to_str(k.lower()) for k in headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_accept_encoding = \"accept-encoding\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_host = \"host\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.putrequest(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             method, url, skip_accept_encoding=skip_accept_encoding, skip_host=skip_host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Transform the body into an iterable of sendall()-able chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # and detect if an explicit Content-Length is doable.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks_and_cl = body_to_chunks(body, method=method, blocksize=self.blocksize)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks = chunks_and_cl.chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         content_length = chunks_and_cl.content_length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # When chunked is explicit set to 'True' we respect that.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"transfer-encoding\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Detect whether a framing mechanism is already in use. If so\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # we respect that value, otherwise we pick chunked vs content-length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # depending on the type of 'body'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"content-length\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif \"transfer-encoding\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Otherwise we go off the recommendation of 'body_to_chunks()'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 if content_length is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     if chunks is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self.putheader(\"Content-Length\", str(content_length))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Now that framing headers are out of the way we send all the other headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if \"user-agent\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(\"User-Agent\", _get_default_user_agent())\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         for header, value in headers.items():\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(header, value)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.endheaders()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connection.py:388: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         This method sends the request to the server.  The optional message_body\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         argument can be used to pass a message body associated with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.__state == _CS_REQ_STARTED:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.__state = _CS_REQ_SENT\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise CannotSendHeader()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1252: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None, encode_chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Appends an extra \\\\r\\\\n to the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         A message_body may be specified, to be appended to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._buffer.extend((b\"\", b\"\"))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         msg = b\"\\r\\n\".join(self._buffer)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         del self._buffer[:]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.send(msg)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1012: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/6.1.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(self, data):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send `data' to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ``data`` can be a string object, a bytes object, an array object, a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         file-like object that supports a .read() method, or an iterable object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.auto_open:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               self.connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:952: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def connect(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       sock.connect(self.unix_socket)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E       PermissionError: [Errno 13] Permission denied\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/transport/unixconn.py:27: PermissionError\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | During handling of the above exception, another exception occurred:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f723f3838e0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | request = <PreparedRequest [GET]>, stream = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | proxies = OrderedDict()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param stream: (optional) Whether to stream the request content.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout: (optional) How long to wait for the server to send\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             read timeout) <timeouts>` tuple.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type timeout: float or tuple or urllib3 Timeout object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             we verify the server's TLS certificate, or a string, in which case it\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             must be a path to a CA bundle to use\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self.get_connection(request.url, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except LocationValueError as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise InvalidURL(e, request=request)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.cert_verify(conn, request.url, verify, cert)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url = self.request_url(request, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.add_headers(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             stream=stream,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             verify=verify,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             cert=cert,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             proxies=proxies,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if isinstance(timeout, tuple):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 connect, read = timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except ValueError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise ValueError(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"or a single float to set both timeouts to the same value.\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         elif isinstance(timeout, TimeoutSauce):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             pass\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           resp = conn.urlopen(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method=request.method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=request.body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=request.headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 redirect=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 assert_same_host=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=self.max_retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/adapters.py:486: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | redirect = False, assert_same_host = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | decode_content = False, response_kw = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | destination_scheme = None, conn = None, release_this_conn = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | http_tunnel_required = False, err = None, clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def urlopen(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | bool | int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         assert_same_host: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool_timeout: int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_conn: bool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         **response_kw: typing.Any,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Get a connection from the pool and perform an HTTP request. This is the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         lowest level call for making a request, so you'll need to specify all\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         the raw details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            More commonly, it's appropriate to use a convenience method\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            such as :meth:`request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `release_conn` will only behave as expected if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` because we want to make\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` the default behaviour someday soon without\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            breaking backwards compatibility.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param redirect:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, automatically handle redirects (status codes 301, 302,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             will disable redirect, too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param assert_same_host:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``True``, will make sure that the host of the pool requests is\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             consistent else will raise HostChangedError. When ``False``, you can\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             use the pool on an HTTP proxy and request foreign hosts.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param pool_timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If set and the pool is set to block=True, then this method will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             connection is available within the time period.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, the response's body will be preloaded into memory.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param release_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If False, then the urlopen call will not release the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool once a response is received (but will release if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             you read the entire contents of the response such as when\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             `preload_content=True`). This is useful if you're not preloading\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the response's content immediately. You will need to call\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool. If None, it takes the value of ``preload_content``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             which defaults to ``True``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param int body_pos:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Position to seek to in file-like body in the event of a retry or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             redirect. Typically this won't need to be set because urllib3 will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auto-populate the value when needed.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         parsed_url = parse_url(url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         destination_scheme = parsed_url.scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = self.headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not isinstance(retries, Retry):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if release_conn is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_conn = preload_content\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Check host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if assert_same_host and not self.is_same_host(url):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise HostChangedError(self, url, retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Ensure that the URL we're connecting to is properly encoded\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if url.startswith(\"/\"):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(_encode_target(url))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(parsed_url.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Track whether `conn` needs to be released before\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # returning/raising/recursing. Update this variable if necessary, and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # leave `release_conn` constant throughout the function. That way, if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the function recurses, the original value of `release_conn` will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # passed down into the recursive call, and its value will be respected.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # See issue #651 [1] for details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_this_conn = release_conn\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         http_tunnel_required = connection_requires_http_tunnel(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.proxy, self.proxy_config, destination_scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # have to copy the headers dict so we can safely change it without those\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # changes being reflected in anyone else's copy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not http_tunnel_required:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Must keep the exception bound to a separate variable or else Python 3\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # complains about UnboundLocalError.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         err = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Keep track of whether we cleanly exited the except block. This\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # ensures we do proper cleanup in finally.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Rewind body position, if needed. Record current position\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # for future rewinds in the event of a redirect/retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos = set_file_position(body, body_pos)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Request a connection from the queue.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self._get_conn(timeout=pool_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._prepare_proxy(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._raise_timeout(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If we're going to release the connection in ``finally:``, then\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # the response doesn't need to know about the connection. Otherwise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # it will also try to release it and we'll have a double-release\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # mess.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response_conn = conn if not release_conn else None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Make the request on the HTTPConnection object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response = self._make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout_obj,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 response_conn=response_conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 **response_kw,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Everything went great!\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             clean_exit = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except EmptyPoolError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Didn't get a connection from the pool, no need to clean up\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             clean_exit = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_this_conn = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTPException,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ProtocolError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             BaseSSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             CertificateError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ProxyError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Discard the connection for these exceptions. It will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # replaced during the next _get_conn() call.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             new_e: Exception = e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(e, (BaseSSLError, CertificateError)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = SSLError(e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     NewConnectionError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     HTTPException,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 ),\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif isinstance(new_e, (OSError, HTTPException)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = ProtocolError(\"Connection aborted.\", new_e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           retries = retries.increment(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:844: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', response = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _stacktrace = <traceback object at 0x7f723f382080>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def increment(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         response: BaseHTTPResponse | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         error: Exception | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         _pool: ConnectionPool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         _stacktrace: TracebackType | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> Retry:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param response: A response object, or None, if the server did not\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             return a response.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param Exception error: An error encountered during the request, or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             None if the response was received successfully.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :return: A new ``Retry`` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.total is False and error:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Disabled, indicate to re-raise the error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise reraise(type(error), error, _stacktrace)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         total = self.total\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if total is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             total -= 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         connect = self.connect\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         read = self.read\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect = self.redirect\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         status_count = self.status\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         other = self.other\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         cause = \"unknown\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         status = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect_location = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if error and self._is_connection_error(error):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Connect retry?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if connect is False:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise reraise(type(error), error, _stacktrace)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif connect is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 connect -= 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         elif error and self._is_read_error(error):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Read retry?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if read is False or method is None or not self._is_method_retryable(method):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               raise reraise(type(error), error, _stacktrace)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/util/retry.py:470: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def reraise(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         tp: type[BaseException] | None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         value: BaseException,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         tb: TracebackType | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> typing.NoReturn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if value.__traceback__ is not tb:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               raise value.with_traceback(tb)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/util/util.py:38: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | redirect = False, assert_same_host = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | decode_content = False, response_kw = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | destination_scheme = None, conn = None, release_this_conn = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | http_tunnel_required = False, err = None, clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def urlopen(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | bool | int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         assert_same_host: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool_timeout: int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_conn: bool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         **response_kw: typing.Any,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Get a connection from the pool and perform an HTTP request. This is the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         lowest level call for making a request, so you'll need to specify all\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         the raw details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            More commonly, it's appropriate to use a convenience method\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            such as :meth:`request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `release_conn` will only behave as expected if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` because we want to make\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` the default behaviour someday soon without\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            breaking backwards compatibility.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param redirect:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, automatically handle redirects (status codes 301, 302,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             will disable redirect, too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param assert_same_host:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``True``, will make sure that the host of the pool requests is\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             consistent else will raise HostChangedError. When ``False``, you can\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             use the pool on an HTTP proxy and request foreign hosts.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param pool_timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If set and the pool is set to block=True, then this method will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             connection is available within the time period.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, the response's body will be preloaded into memory.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param release_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If False, then the urlopen call will not release the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool once a response is received (but will release if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             you read the entire contents of the response such as when\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             `preload_content=True`). This is useful if you're not preloading\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the response's content immediately. You will need to call\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool. If None, it takes the value of ``preload_content``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             which defaults to ``True``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param int body_pos:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Position to seek to in file-like body in the event of a retry or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             redirect. Typically this won't need to be set because urllib3 will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auto-populate the value when needed.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         parsed_url = parse_url(url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         destination_scheme = parsed_url.scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = self.headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not isinstance(retries, Retry):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if release_conn is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_conn = preload_content\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Check host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if assert_same_host and not self.is_same_host(url):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise HostChangedError(self, url, retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Ensure that the URL we're connecting to is properly encoded\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if url.startswith(\"/\"):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(_encode_target(url))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(parsed_url.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Track whether `conn` needs to be released before\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # returning/raising/recursing. Update this variable if necessary, and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # leave `release_conn` constant throughout the function. That way, if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the function recurses, the original value of `release_conn` will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # passed down into the recursive call, and its value will be respected.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # See issue #651 [1] for details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_this_conn = release_conn\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         http_tunnel_required = connection_requires_http_tunnel(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.proxy, self.proxy_config, destination_scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # have to copy the headers dict so we can safely change it without those\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # changes being reflected in anyone else's copy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not http_tunnel_required:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Must keep the exception bound to a separate variable or else Python 3\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # complains about UnboundLocalError.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         err = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Keep track of whether we cleanly exited the except block. This\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # ensures we do proper cleanup in finally.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Rewind body position, if needed. Record current position\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # for future rewinds in the event of a redirect/retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos = set_file_position(body, body_pos)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Request a connection from the queue.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self._get_conn(timeout=pool_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._prepare_proxy(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._raise_timeout(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If we're going to release the connection in ``finally:``, then\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # the response doesn't need to know about the connection. Otherwise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # it will also try to release it and we'll have a double-release\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # mess.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response_conn = conn if not release_conn else None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Make the request on the HTTPConnection object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           response = self._make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout_obj,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 response_conn=response_conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 **response_kw,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:790: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | response_conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | preload_content = False, decode_content = False, enforce_content_length = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn: BaseHTTPConnection,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         response_conn: BaseHTTPConnection | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Perform a request on a given urllib connection object taken from our\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             a connection from one of our connection pools\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param response_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Set this to ``None`` if you will handle releasing the connection or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             set the connection to have the response release it.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |           If True, the response's body will be preloaded during construction.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param enforce_content_length:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Enforce content length checking. Body returned by server must match\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             value of Content-Length header, if present. Otherwise, raise error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.num_requests += 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj.start_connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Trigger any extra validation we need to do.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._validate_conn(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except (SocketTimeout, BaseSSLError) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # _validate_conn() starts the connection to an HTTPS proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # so we need to wrap errors with 'ProxyError' here too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             NewConnectionError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             BaseSSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             CertificateError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             new_e: Exception = e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(e, (BaseSSLError, CertificateError)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = SSLError(e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If the connection didn't successfully connect to it's proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # then there\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e, (OSError, NewConnectionError, TimeoutError, SSLError)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise new_e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # conn.request() calls http.client.*.request, not the method in\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           conn.request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:496: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def request(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         *,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Update the inner socket's timeout value to send the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # This only triggers if the connection is re-used.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Store these values to be fed into the HTTPResponse\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # object later. TODO: Remove this in favor of a real\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # HTTP lifecycle mechanism.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # We have to store these before we call .request()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # because sometimes we can still salvage a response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # off the wire even if we aren't able to completely\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # send the request body.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._response_options = _ResponseOptions(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_method=method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         header_keys = frozenset(to_str(k.lower()) for k in headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_accept_encoding = \"accept-encoding\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_host = \"host\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.putrequest(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             method, url, skip_accept_encoding=skip_accept_encoding, skip_host=skip_host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Transform the body into an iterable of sendall()-able chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # and detect if an explicit Content-Length is doable.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks_and_cl = body_to_chunks(body, method=method, blocksize=self.blocksize)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks = chunks_and_cl.chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         content_length = chunks_and_cl.content_length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # When chunked is explicit set to 'True' we respect that.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"transfer-encoding\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Detect whether a framing mechanism is already in use. If so\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # we respect that value, otherwise we pick chunked vs content-length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # depending on the type of 'body'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"content-length\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif \"transfer-encoding\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Otherwise we go off the recommendation of 'body_to_chunks()'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 if content_length is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     if chunks is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self.putheader(\"Content-Length\", str(content_length))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Now that framing headers are out of the way we send all the other headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if \"user-agent\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(\"User-Agent\", _get_default_user_agent())\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         for header, value in headers.items():\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(header, value)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.endheaders()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connection.py:388: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         This method sends the request to the server.  The optional message_body\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         argument can be used to pass a message body associated with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.__state == _CS_REQ_STARTED:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.__state = _CS_REQ_SENT\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise CannotSendHeader()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1252: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None, encode_chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Appends an extra \\\\r\\\\n to the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         A message_body may be specified, to be appended to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._buffer.extend((b\"\", b\"\"))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         msg = b\"\\r\\n\".join(self._buffer)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         del self._buffer[:]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.send(msg)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1012: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/6.1.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(self, data):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send `data' to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ``data`` can be a string object, a bytes object, an array object, a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         file-like object that supports a .read() method, or an iterable object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.auto_open:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               self.connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:952: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def connect(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       sock.connect(self.unix_socket)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | During handling of the above exception, another exception occurred:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _retrieve_server_version(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:214: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | api_version = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def version(self, api_version=True):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Returns version information from the server. Similar to the ``docker\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         version`` command.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Returns:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             (dict): The server version information\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Raises:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :py:class:`docker.errors.APIError`\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 If the server returns an error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url = self._url(\"/version\", versioned_api=api_version)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return self._result(self._get(url), json=True)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/daemon.py:181: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | args = ('http+docker://localhost/version',), kwargs = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def inner(self, *args, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if 'HttpHeaders' in self._general_configs:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if not kwargs.get('headers'):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return f(self, *args, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/utils/decorators.py:46: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     @update_headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _get(self, url, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:237: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | url = 'http+docker://localhost/version'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def get(self, url, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url: URL for the new :class:`Request` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"allow_redirects\", True)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return self.request(\"GET\", url, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/sessions.py:602: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>, method = 'GET'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | url = 'http+docker://localhost/version', params = None, data = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | cert = None, json = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         params=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         data=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         cookies=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         files=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         auth=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         allow_redirects=True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         proxies=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         hooks=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         stream=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         verify=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         cert=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         json=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Returns :class:`Response <Response>` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method: method for the new :class:`Request` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url: URL for the new :class:`Request` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             string for the :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             object to send in the body of the :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param json: (optional) json to send in the body of the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             for multipart encoding upload.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param auth: (optional) Auth tuple or callable to enable\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Basic/Digest/Custom HTTP Auth.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout: (optional) How long to wait for the server to send\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             read timeout) <timeouts>` tuple.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type timeout: float or tuple\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param allow_redirects: (optional) Set to True by default.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type allow_redirects: bool\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             hostname to the URL of the proxy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param stream: (optional) whether to immediately download the response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content. Defaults to ``False``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the server's TLS certificate, or a string, in which case it must be a path\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``False``, requests will accept any TLS certificate presented by\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the server, and will ignore hostname mismatches and/or expired\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             certificates, which will make your application vulnerable to\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             may be useful during local development or testing.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If Tuple, ('cert', 'key') pair.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Create the Request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         req = Request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             method=method.upper(),\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             files=files,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data=data or {},\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             json=json,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             params=params or {},\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auth=auth,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             cookies=cookies,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             hooks=hooks,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         prep = self.prepare_request(req)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         proxies = proxies or {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         settings = self.merge_environment_settings(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             prep.url, proxies, stream, verify, cert\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Send the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         send_kwargs = {\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             \"timeout\": timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             \"allow_redirects\": allow_redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         }\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         send_kwargs.update(settings)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       resp = self.send(prep, **send_kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/sessions.py:589: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | request = <PreparedRequest [GET]>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f723f3838e0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | start = 1688230010.6987472\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(self, request, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send a given PreparedRequest.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Set defaults that the hooks can utilize to ensure they always have\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the correct parameters to reproduce the previous request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"stream\", self.stream)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"verify\", self.verify)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"cert\", self.cert)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if \"proxies\" not in kwargs:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             kwargs[\"proxies\"] = resolve_proxies(request, self.proxies, self.trust_env)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # It's possible that users might accidentally send a Request object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Guard against that specific failure case.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if isinstance(request, Request):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise ValueError(\"You can only send PreparedRequests.\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         allow_redirects = kwargs.pop(\"allow_redirects\", True)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         stream = kwargs.get(\"stream\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         hooks = request.hooks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Get the appropriate adapter to use\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         adapter = self.get_adapter(url=request.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Start time (approximately) of the request\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         start = preferred_clock()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Send the request\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       r = adapter.send(request, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/sessions.py:703: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f723f3838e0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | request = <PreparedRequest [GET]>, stream = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | proxies = OrderedDict()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param stream: (optional) Whether to stream the request content.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout: (optional) How long to wait for the server to send\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             read timeout) <timeouts>` tuple.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type timeout: float or tuple or urllib3 Timeout object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             we verify the server's TLS certificate, or a string, in which case it\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             must be a path to a CA bundle to use\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self.get_connection(request.url, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except LocationValueError as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise InvalidURL(e, request=request)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.cert_verify(conn, request.url, verify, cert)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url = self.request_url(request, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.add_headers(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             stream=stream,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             verify=verify,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             cert=cert,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             proxies=proxies,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if isinstance(timeout, tuple):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 connect, read = timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except ValueError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise ValueError(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"or a single float to set both timeouts to the same value.\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         elif isinstance(timeout, TimeoutSauce):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             pass\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             resp = conn.urlopen(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method=request.method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=request.body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=request.headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 redirect=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 assert_same_host=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=self.max_retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (ProtocolError, OSError) as err:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           raise ConnectionError(err, request=request)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/adapters.py:501: ConnectionError\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | During handling of the above exception, another exception occurred:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | cls = <class 'tests.test_user_repository.TestUserRepository'>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     @classmethod\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def setUpClass(cls):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       cls.container = PostgresContainer(\"postgres:14\").with_bind_ports(5432, 16888)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/base_pg_testcontainer.py:26: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/postgres.py:49: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     super(PostgresContainer, self).__init__(image=image, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/core/generic.py:27: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     super(DbContainer, self).__init__(image, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/core/container.py:19: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self.client = docker.from_env(**kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/client.py:96: in from_env\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     return cls(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/client.py:45: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self.api = APIClient(*args, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:197: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self._version = self._retrieve_server_version()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _retrieve_server_version(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except KeyError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise DockerException(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 ' is missing.'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except Exception as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           raise DockerException(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 f'Error while fetching server API version: {e}'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:221: DockerException\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | ________ ERROR at setup of TestUserRepository.test_find_not_exist_user _________\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | redirect = False, assert_same_host = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | decode_content = False, response_kw = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | destination_scheme = None, conn = None, release_this_conn = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | http_tunnel_required = False, err = None, clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def urlopen(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | bool | int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         assert_same_host: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool_timeout: int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_conn: bool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         **response_kw: typing.Any,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Get a connection from the pool and perform an HTTP request. This is the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         lowest level call for making a request, so you'll need to specify all\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         the raw details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            More commonly, it's appropriate to use a convenience method\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            such as :meth:`request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `release_conn` will only behave as expected if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` because we want to make\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` the default behaviour someday soon without\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            breaking backwards compatibility.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param redirect:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, automatically handle redirects (status codes 301, 302,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             will disable redirect, too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param assert_same_host:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``True``, will make sure that the host of the pool requests is\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             consistent else will raise HostChangedError. When ``False``, you can\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             use the pool on an HTTP proxy and request foreign hosts.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param pool_timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If set and the pool is set to block=True, then this method will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             connection is available within the time period.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, the response's body will be preloaded into memory.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param release_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If False, then the urlopen call will not release the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool once a response is received (but will release if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             you read the entire contents of the response such as when\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             `preload_content=True`). This is useful if you're not preloading\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the response's content immediately. You will need to call\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool. If None, it takes the value of ``preload_content``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             which defaults to ``True``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param int body_pos:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Position to seek to in file-like body in the event of a retry or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             redirect. Typically this won't need to be set because urllib3 will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auto-populate the value when needed.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         parsed_url = parse_url(url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         destination_scheme = parsed_url.scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = self.headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not isinstance(retries, Retry):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if release_conn is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_conn = preload_content\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Check host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if assert_same_host and not self.is_same_host(url):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise HostChangedError(self, url, retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Ensure that the URL we're connecting to is properly encoded\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if url.startswith(\"/\"):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(_encode_target(url))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(parsed_url.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Track whether `conn` needs to be released before\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # returning/raising/recursing. Update this variable if necessary, and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # leave `release_conn` constant throughout the function. That way, if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the function recurses, the original value of `release_conn` will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # passed down into the recursive call, and its value will be respected.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # See issue #651 [1] for details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_this_conn = release_conn\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         http_tunnel_required = connection_requires_http_tunnel(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.proxy, self.proxy_config, destination_scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # have to copy the headers dict so we can safely change it without those\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # changes being reflected in anyone else's copy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not http_tunnel_required:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Must keep the exception bound to a separate variable or else Python 3\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # complains about UnboundLocalError.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         err = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Keep track of whether we cleanly exited the except block. This\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # ensures we do proper cleanup in finally.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Rewind body position, if needed. Record current position\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # for future rewinds in the event of a redirect/retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos = set_file_position(body, body_pos)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Request a connection from the queue.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self._get_conn(timeout=pool_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._prepare_proxy(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._raise_timeout(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If we're going to release the connection in ``finally:``, then\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # the response doesn't need to know about the connection. Otherwise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # it will also try to release it and we'll have a double-release\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # mess.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response_conn = conn if not release_conn else None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Make the request on the HTTPConnection object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           response = self._make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout_obj,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 response_conn=response_conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 **response_kw,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:790: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | response_conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | preload_content = False, decode_content = False, enforce_content_length = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn: BaseHTTPConnection,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         response_conn: BaseHTTPConnection | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Perform a request on a given urllib connection object taken from our\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             a connection from one of our connection pools\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param response_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Set this to ``None`` if you will handle releasing the connection or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             set the connection to have the response release it.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |           If True, the response's body will be preloaded during construction.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param enforce_content_length:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Enforce content length checking. Body returned by server must match\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             value of Content-Length header, if present. Otherwise, raise error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.num_requests += 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj.start_connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Trigger any extra validation we need to do.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._validate_conn(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except (SocketTimeout, BaseSSLError) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # _validate_conn() starts the connection to an HTTPS proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # so we need to wrap errors with 'ProxyError' here too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             NewConnectionError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             BaseSSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             CertificateError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             new_e: Exception = e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(e, (BaseSSLError, CertificateError)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = SSLError(e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If the connection didn't successfully connect to it's proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # then there\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e, (OSError, NewConnectionError, TimeoutError, SSLError)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise new_e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # conn.request() calls http.client.*.request, not the method in\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           conn.request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:496: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def request(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         *,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Update the inner socket's timeout value to send the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # This only triggers if the connection is re-used.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Store these values to be fed into the HTTPResponse\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # object later. TODO: Remove this in favor of a real\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # HTTP lifecycle mechanism.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # We have to store these before we call .request()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # because sometimes we can still salvage a response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # off the wire even if we aren't able to completely\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # send the request body.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._response_options = _ResponseOptions(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_method=method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         header_keys = frozenset(to_str(k.lower()) for k in headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_accept_encoding = \"accept-encoding\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_host = \"host\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.putrequest(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             method, url, skip_accept_encoding=skip_accept_encoding, skip_host=skip_host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Transform the body into an iterable of sendall()-able chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # and detect if an explicit Content-Length is doable.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks_and_cl = body_to_chunks(body, method=method, blocksize=self.blocksize)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks = chunks_and_cl.chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         content_length = chunks_and_cl.content_length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # When chunked is explicit set to 'True' we respect that.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"transfer-encoding\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Detect whether a framing mechanism is already in use. If so\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # we respect that value, otherwise we pick chunked vs content-length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # depending on the type of 'body'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"content-length\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif \"transfer-encoding\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Otherwise we go off the recommendation of 'body_to_chunks()'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 if content_length is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     if chunks is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self.putheader(\"Content-Length\", str(content_length))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Now that framing headers are out of the way we send all the other headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if \"user-agent\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(\"User-Agent\", _get_default_user_agent())\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         for header, value in headers.items():\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(header, value)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.endheaders()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connection.py:388: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         This method sends the request to the server.  The optional message_body\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         argument can be used to pass a message body associated with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.__state == _CS_REQ_STARTED:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.__state = _CS_REQ_SENT\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise CannotSendHeader()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1252: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None, encode_chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Appends an extra \\\\r\\\\n to the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         A message_body may be specified, to be appended to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._buffer.extend((b\"\", b\"\"))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         msg = b\"\\r\\n\".join(self._buffer)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         del self._buffer[:]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.send(msg)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1012: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/6.1.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(self, data):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send `data' to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ``data`` can be a string object, a bytes object, an array object, a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         file-like object that supports a .read() method, or an iterable object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.auto_open:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               self.connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:952: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def connect(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       sock.connect(self.unix_socket)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E       PermissionError: [Errno 13] Permission denied\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/transport/unixconn.py:27: PermissionError\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | During handling of the above exception, another exception occurred:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f723f3838e0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | request = <PreparedRequest [GET]>, stream = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | proxies = OrderedDict()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param stream: (optional) Whether to stream the request content.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout: (optional) How long to wait for the server to send\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             read timeout) <timeouts>` tuple.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type timeout: float or tuple or urllib3 Timeout object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             we verify the server's TLS certificate, or a string, in which case it\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             must be a path to a CA bundle to use\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self.get_connection(request.url, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except LocationValueError as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise InvalidURL(e, request=request)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.cert_verify(conn, request.url, verify, cert)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url = self.request_url(request, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.add_headers(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             stream=stream,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             verify=verify,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             cert=cert,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             proxies=proxies,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if isinstance(timeout, tuple):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 connect, read = timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except ValueError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise ValueError(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"or a single float to set both timeouts to the same value.\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         elif isinstance(timeout, TimeoutSauce):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             pass\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           resp = conn.urlopen(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method=request.method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=request.body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=request.headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 redirect=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 assert_same_host=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=self.max_retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/adapters.py:486: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | redirect = False, assert_same_host = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | decode_content = False, response_kw = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | destination_scheme = None, conn = None, release_this_conn = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | http_tunnel_required = False, err = None, clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def urlopen(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | bool | int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         assert_same_host: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool_timeout: int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_conn: bool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         **response_kw: typing.Any,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Get a connection from the pool and perform an HTTP request. This is the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         lowest level call for making a request, so you'll need to specify all\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         the raw details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            More commonly, it's appropriate to use a convenience method\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            such as :meth:`request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `release_conn` will only behave as expected if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` because we want to make\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` the default behaviour someday soon without\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            breaking backwards compatibility.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param redirect:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, automatically handle redirects (status codes 301, 302,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             will disable redirect, too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param assert_same_host:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``True``, will make sure that the host of the pool requests is\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             consistent else will raise HostChangedError. When ``False``, you can\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             use the pool on an HTTP proxy and request foreign hosts.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param pool_timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If set and the pool is set to block=True, then this method will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             connection is available within the time period.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, the response's body will be preloaded into memory.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param release_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If False, then the urlopen call will not release the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool once a response is received (but will release if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             you read the entire contents of the response such as when\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             `preload_content=True`). This is useful if you're not preloading\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the response's content immediately. You will need to call\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool. If None, it takes the value of ``preload_content``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             which defaults to ``True``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param int body_pos:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Position to seek to in file-like body in the event of a retry or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             redirect. Typically this won't need to be set because urllib3 will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auto-populate the value when needed.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         parsed_url = parse_url(url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         destination_scheme = parsed_url.scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = self.headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not isinstance(retries, Retry):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if release_conn is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_conn = preload_content\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Check host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if assert_same_host and not self.is_same_host(url):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise HostChangedError(self, url, retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Ensure that the URL we're connecting to is properly encoded\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if url.startswith(\"/\"):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(_encode_target(url))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(parsed_url.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Track whether `conn` needs to be released before\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # returning/raising/recursing. Update this variable if necessary, and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # leave `release_conn` constant throughout the function. That way, if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the function recurses, the original value of `release_conn` will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # passed down into the recursive call, and its value will be respected.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # See issue #651 [1] for details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_this_conn = release_conn\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         http_tunnel_required = connection_requires_http_tunnel(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.proxy, self.proxy_config, destination_scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # have to copy the headers dict so we can safely change it without those\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # changes being reflected in anyone else's copy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not http_tunnel_required:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Must keep the exception bound to a separate variable or else Python 3\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # complains about UnboundLocalError.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         err = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Keep track of whether we cleanly exited the except block. This\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # ensures we do proper cleanup in finally.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Rewind body position, if needed. Record current position\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # for future rewinds in the event of a redirect/retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos = set_file_position(body, body_pos)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Request a connection from the queue.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self._get_conn(timeout=pool_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._prepare_proxy(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._raise_timeout(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If we're going to release the connection in ``finally:``, then\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # the response doesn't need to know about the connection. Otherwise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # it will also try to release it and we'll have a double-release\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # mess.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response_conn = conn if not release_conn else None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Make the request on the HTTPConnection object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response = self._make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout_obj,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 response_conn=response_conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 **response_kw,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Everything went great!\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             clean_exit = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except EmptyPoolError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Didn't get a connection from the pool, no need to clean up\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             clean_exit = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_this_conn = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTPException,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ProtocolError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             BaseSSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             CertificateError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ProxyError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Discard the connection for these exceptions. It will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # replaced during the next _get_conn() call.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             new_e: Exception = e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(e, (BaseSSLError, CertificateError)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = SSLError(e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     NewConnectionError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     HTTPException,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 ),\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif isinstance(new_e, (OSError, HTTPException)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = ProtocolError(\"Connection aborted.\", new_e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           retries = retries.increment(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:844: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', response = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _stacktrace = <traceback object at 0x7f723f382080>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def increment(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         response: BaseHTTPResponse | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         error: Exception | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         _pool: ConnectionPool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         _stacktrace: TracebackType | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> Retry:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param response: A response object, or None, if the server did not\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             return a response.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param Exception error: An error encountered during the request, or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             None if the response was received successfully.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :return: A new ``Retry`` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.total is False and error:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Disabled, indicate to re-raise the error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise reraise(type(error), error, _stacktrace)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         total = self.total\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if total is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             total -= 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         connect = self.connect\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         read = self.read\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect = self.redirect\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         status_count = self.status\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         other = self.other\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         cause = \"unknown\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         status = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect_location = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if error and self._is_connection_error(error):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Connect retry?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if connect is False:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise reraise(type(error), error, _stacktrace)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif connect is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 connect -= 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         elif error and self._is_read_error(error):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Read retry?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if read is False or method is None or not self._is_method_retryable(method):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               raise reraise(type(error), error, _stacktrace)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/util/retry.py:470: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def reraise(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         tp: type[BaseException] | None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         value: BaseException,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         tb: TracebackType | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> typing.NoReturn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if value.__traceback__ is not tb:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               raise value.with_traceback(tb)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/util/util.py:38: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | redirect = False, assert_same_host = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | decode_content = False, response_kw = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | destination_scheme = None, conn = None, release_this_conn = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | http_tunnel_required = False, err = None, clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def urlopen(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | bool | int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         assert_same_host: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool_timeout: int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_conn: bool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         **response_kw: typing.Any,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Get a connection from the pool and perform an HTTP request. This is the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         lowest level call for making a request, so you'll need to specify all\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         the raw details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            More commonly, it's appropriate to use a convenience method\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            such as :meth:`request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `release_conn` will only behave as expected if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` because we want to make\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` the default behaviour someday soon without\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            breaking backwards compatibility.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param redirect:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, automatically handle redirects (status codes 301, 302,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             will disable redirect, too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param assert_same_host:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``True``, will make sure that the host of the pool requests is\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             consistent else will raise HostChangedError. When ``False``, you can\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             use the pool on an HTTP proxy and request foreign hosts.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param pool_timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If set and the pool is set to block=True, then this method will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             connection is available within the time period.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, the response's body will be preloaded into memory.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param release_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If False, then the urlopen call will not release the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool once a response is received (but will release if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             you read the entire contents of the response such as when\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             `preload_content=True`). This is useful if you're not preloading\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the response's content immediately. You will need to call\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool. If None, it takes the value of ``preload_content``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             which defaults to ``True``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param int body_pos:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Position to seek to in file-like body in the event of a retry or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             redirect. Typically this won't need to be set because urllib3 will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auto-populate the value when needed.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         parsed_url = parse_url(url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         destination_scheme = parsed_url.scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = self.headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not isinstance(retries, Retry):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if release_conn is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_conn = preload_content\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Check host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if assert_same_host and not self.is_same_host(url):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise HostChangedError(self, url, retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Ensure that the URL we're connecting to is properly encoded\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if url.startswith(\"/\"):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(_encode_target(url))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(parsed_url.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Track whether `conn` needs to be released before\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # returning/raising/recursing. Update this variable if necessary, and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # leave `release_conn` constant throughout the function. That way, if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the function recurses, the original value of `release_conn` will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # passed down into the recursive call, and its value will be respected.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # See issue #651 [1] for details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_this_conn = release_conn\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         http_tunnel_required = connection_requires_http_tunnel(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.proxy, self.proxy_config, destination_scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # have to copy the headers dict so we can safely change it without those\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # changes being reflected in anyone else's copy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not http_tunnel_required:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Must keep the exception bound to a separate variable or else Python 3\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # complains about UnboundLocalError.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         err = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Keep track of whether we cleanly exited the except block. This\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # ensures we do proper cleanup in finally.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Rewind body position, if needed. Record current position\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # for future rewinds in the event of a redirect/retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos = set_file_position(body, body_pos)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Request a connection from the queue.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self._get_conn(timeout=pool_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._prepare_proxy(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._raise_timeout(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If we're going to release the connection in ``finally:``, then\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # the response doesn't need to know about the connection. Otherwise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # it will also try to release it and we'll have a double-release\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # mess.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response_conn = conn if not release_conn else None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Make the request on the HTTPConnection object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           response = self._make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout_obj,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 response_conn=response_conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 **response_kw,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:790: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | response_conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | preload_content = False, decode_content = False, enforce_content_length = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn: BaseHTTPConnection,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         response_conn: BaseHTTPConnection | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Perform a request on a given urllib connection object taken from our\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             a connection from one of our connection pools\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param response_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Set this to ``None`` if you will handle releasing the connection or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             set the connection to have the response release it.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |           If True, the response's body will be preloaded during construction.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param enforce_content_length:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Enforce content length checking. Body returned by server must match\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             value of Content-Length header, if present. Otherwise, raise error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.num_requests += 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj.start_connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Trigger any extra validation we need to do.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._validate_conn(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except (SocketTimeout, BaseSSLError) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # _validate_conn() starts the connection to an HTTPS proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # so we need to wrap errors with 'ProxyError' here too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             NewConnectionError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             BaseSSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             CertificateError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             new_e: Exception = e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(e, (BaseSSLError, CertificateError)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = SSLError(e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If the connection didn't successfully connect to it's proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # then there\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e, (OSError, NewConnectionError, TimeoutError, SSLError)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise new_e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # conn.request() calls http.client.*.request, not the method in\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           conn.request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:496: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def request(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         *,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Update the inner socket's timeout value to send the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # This only triggers if the connection is re-used.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Store these values to be fed into the HTTPResponse\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # object later. TODO: Remove this in favor of a real\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # HTTP lifecycle mechanism.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # We have to store these before we call .request()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # because sometimes we can still salvage a response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # off the wire even if we aren't able to completely\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # send the request body.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._response_options = _ResponseOptions(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_method=method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         header_keys = frozenset(to_str(k.lower()) for k in headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_accept_encoding = \"accept-encoding\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_host = \"host\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.putrequest(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             method, url, skip_accept_encoding=skip_accept_encoding, skip_host=skip_host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Transform the body into an iterable of sendall()-able chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # and detect if an explicit Content-Length is doable.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks_and_cl = body_to_chunks(body, method=method, blocksize=self.blocksize)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks = chunks_and_cl.chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         content_length = chunks_and_cl.content_length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # When chunked is explicit set to 'True' we respect that.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"transfer-encoding\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Detect whether a framing mechanism is already in use. If so\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # we respect that value, otherwise we pick chunked vs content-length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # depending on the type of 'body'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"content-length\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif \"transfer-encoding\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Otherwise we go off the recommendation of 'body_to_chunks()'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 if content_length is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     if chunks is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self.putheader(\"Content-Length\", str(content_length))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Now that framing headers are out of the way we send all the other headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if \"user-agent\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(\"User-Agent\", _get_default_user_agent())\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         for header, value in headers.items():\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(header, value)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.endheaders()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connection.py:388: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         This method sends the request to the server.  The optional message_body\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         argument can be used to pass a message body associated with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.__state == _CS_REQ_STARTED:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.__state = _CS_REQ_SENT\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise CannotSendHeader()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1252: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None, encode_chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Appends an extra \\\\r\\\\n to the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         A message_body may be specified, to be appended to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._buffer.extend((b\"\", b\"\"))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         msg = b\"\\r\\n\".join(self._buffer)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         del self._buffer[:]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.send(msg)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1012: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/6.1.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(self, data):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send `data' to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ``data`` can be a string object, a bytes object, an array object, a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         file-like object that supports a .read() method, or an iterable object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.auto_open:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               self.connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:952: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def connect(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       sock.connect(self.unix_socket)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | During handling of the above exception, another exception occurred:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _retrieve_server_version(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:214: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | api_version = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def version(self, api_version=True):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Returns version information from the server. Similar to the ``docker\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         version`` command.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Returns:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             (dict): The server version information\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Raises:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :py:class:`docker.errors.APIError`\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 If the server returns an error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url = self._url(\"/version\", versioned_api=api_version)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return self._result(self._get(url), json=True)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/daemon.py:181: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | args = ('http+docker://localhost/version',), kwargs = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def inner(self, *args, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if 'HttpHeaders' in self._general_configs:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if not kwargs.get('headers'):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return f(self, *args, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/utils/decorators.py:46: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     @update_headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _get(self, url, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:237: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | url = 'http+docker://localhost/version'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def get(self, url, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url: URL for the new :class:`Request` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"allow_redirects\", True)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return self.request(\"GET\", url, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/sessions.py:602: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>, method = 'GET'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | url = 'http+docker://localhost/version', params = None, data = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | cert = None, json = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         params=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         data=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         cookies=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         files=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         auth=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         allow_redirects=True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         proxies=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         hooks=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         stream=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         verify=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         cert=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         json=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Returns :class:`Response <Response>` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method: method for the new :class:`Request` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url: URL for the new :class:`Request` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             string for the :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             object to send in the body of the :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param json: (optional) json to send in the body of the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             for multipart encoding upload.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param auth: (optional) Auth tuple or callable to enable\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Basic/Digest/Custom HTTP Auth.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout: (optional) How long to wait for the server to send\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             read timeout) <timeouts>` tuple.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type timeout: float or tuple\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param allow_redirects: (optional) Set to True by default.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type allow_redirects: bool\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             hostname to the URL of the proxy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param stream: (optional) whether to immediately download the response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content. Defaults to ``False``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the server's TLS certificate, or a string, in which case it must be a path\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``False``, requests will accept any TLS certificate presented by\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the server, and will ignore hostname mismatches and/or expired\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             certificates, which will make your application vulnerable to\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             may be useful during local development or testing.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If Tuple, ('cert', 'key') pair.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Create the Request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         req = Request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             method=method.upper(),\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             files=files,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data=data or {},\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             json=json,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             params=params or {},\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auth=auth,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             cookies=cookies,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             hooks=hooks,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         prep = self.prepare_request(req)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         proxies = proxies or {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         settings = self.merge_environment_settings(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             prep.url, proxies, stream, verify, cert\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Send the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         send_kwargs = {\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             \"timeout\": timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             \"allow_redirects\": allow_redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         }\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         send_kwargs.update(settings)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       resp = self.send(prep, **send_kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/sessions.py:589: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | request = <PreparedRequest [GET]>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f723f3838e0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | start = 1688230010.6987472\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(self, request, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send a given PreparedRequest.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Set defaults that the hooks can utilize to ensure they always have\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the correct parameters to reproduce the previous request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"stream\", self.stream)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"verify\", self.verify)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"cert\", self.cert)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if \"proxies\" not in kwargs:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             kwargs[\"proxies\"] = resolve_proxies(request, self.proxies, self.trust_env)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # It's possible that users might accidentally send a Request object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Guard against that specific failure case.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if isinstance(request, Request):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise ValueError(\"You can only send PreparedRequests.\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         allow_redirects = kwargs.pop(\"allow_redirects\", True)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         stream = kwargs.get(\"stream\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         hooks = request.hooks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Get the appropriate adapter to use\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         adapter = self.get_adapter(url=request.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Start time (approximately) of the request\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         start = preferred_clock()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Send the request\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       r = adapter.send(request, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/sessions.py:703: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f723f3838e0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | request = <PreparedRequest [GET]>, stream = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | proxies = OrderedDict()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param stream: (optional) Whether to stream the request content.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout: (optional) How long to wait for the server to send\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             read timeout) <timeouts>` tuple.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type timeout: float or tuple or urllib3 Timeout object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             we verify the server's TLS certificate, or a string, in which case it\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             must be a path to a CA bundle to use\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self.get_connection(request.url, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except LocationValueError as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise InvalidURL(e, request=request)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.cert_verify(conn, request.url, verify, cert)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url = self.request_url(request, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.add_headers(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             stream=stream,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             verify=verify,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             cert=cert,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             proxies=proxies,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if isinstance(timeout, tuple):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 connect, read = timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except ValueError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise ValueError(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"or a single float to set both timeouts to the same value.\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         elif isinstance(timeout, TimeoutSauce):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             pass\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             resp = conn.urlopen(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method=request.method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=request.body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=request.headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 redirect=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 assert_same_host=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=self.max_retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (ProtocolError, OSError) as err:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           raise ConnectionError(err, request=request)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/adapters.py:501: ConnectionError\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | During handling of the above exception, another exception occurred:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | cls = <class 'tests.test_user_repository.TestUserRepository'>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     @classmethod\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def setUpClass(cls):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       cls.container = PostgresContainer(\"postgres:14\").with_bind_ports(5432, 16888)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/base_pg_testcontainer.py:26: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/postgres.py:49: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     super(PostgresContainer, self).__init__(image=image, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/core/generic.py:27: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     super(DbContainer, self).__init__(image, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/core/container.py:19: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self.client = docker.from_env(**kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/client.py:96: in from_env\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     return cls(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/client.py:45: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self.api = APIClient(*args, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:197: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self._version = self._retrieve_server_version()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _retrieve_server_version(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except KeyError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise DockerException(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 ' is missing.'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except Exception as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           raise DockerException(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 f'Error while fetching server API version: {e}'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:221: DockerException\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | ___ ERROR at setup of TestUserRepository.test_find_user_sub_another_good_id ____\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | redirect = False, assert_same_host = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | decode_content = False, response_kw = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | destination_scheme = None, conn = None, release_this_conn = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | http_tunnel_required = False, err = None, clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def urlopen(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | bool | int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         assert_same_host: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool_timeout: int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_conn: bool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         **response_kw: typing.Any,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Get a connection from the pool and perform an HTTP request. This is the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         lowest level call for making a request, so you'll need to specify all\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         the raw details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            More commonly, it's appropriate to use a convenience method\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            such as :meth:`request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `release_conn` will only behave as expected if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` because we want to make\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` the default behaviour someday soon without\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            breaking backwards compatibility.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param redirect:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, automatically handle redirects (status codes 301, 302,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             will disable redirect, too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param assert_same_host:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``True``, will make sure that the host of the pool requests is\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             consistent else will raise HostChangedError. When ``False``, you can\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             use the pool on an HTTP proxy and request foreign hosts.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param pool_timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If set and the pool is set to block=True, then this method will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             connection is available within the time period.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, the response's body will be preloaded into memory.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param release_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If False, then the urlopen call will not release the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool once a response is received (but will release if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             you read the entire contents of the response such as when\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             `preload_content=True`). This is useful if you're not preloading\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the response's content immediately. You will need to call\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool. If None, it takes the value of ``preload_content``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             which defaults to ``True``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param int body_pos:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Position to seek to in file-like body in the event of a retry or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             redirect. Typically this won't need to be set because urllib3 will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auto-populate the value when needed.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         parsed_url = parse_url(url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         destination_scheme = parsed_url.scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = self.headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not isinstance(retries, Retry):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if release_conn is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_conn = preload_content\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Check host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if assert_same_host and not self.is_same_host(url):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise HostChangedError(self, url, retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Ensure that the URL we're connecting to is properly encoded\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if url.startswith(\"/\"):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(_encode_target(url))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(parsed_url.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Track whether `conn` needs to be released before\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # returning/raising/recursing. Update this variable if necessary, and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # leave `release_conn` constant throughout the function. That way, if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the function recurses, the original value of `release_conn` will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # passed down into the recursive call, and its value will be respected.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # See issue #651 [1] for details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_this_conn = release_conn\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         http_tunnel_required = connection_requires_http_tunnel(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.proxy, self.proxy_config, destination_scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # have to copy the headers dict so we can safely change it without those\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # changes being reflected in anyone else's copy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not http_tunnel_required:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Must keep the exception bound to a separate variable or else Python 3\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # complains about UnboundLocalError.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         err = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Keep track of whether we cleanly exited the except block. This\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # ensures we do proper cleanup in finally.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Rewind body position, if needed. Record current position\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # for future rewinds in the event of a redirect/retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos = set_file_position(body, body_pos)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Request a connection from the queue.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self._get_conn(timeout=pool_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._prepare_proxy(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._raise_timeout(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If we're going to release the connection in ``finally:``, then\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # the response doesn't need to know about the connection. Otherwise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # it will also try to release it and we'll have a double-release\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # mess.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response_conn = conn if not release_conn else None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Make the request on the HTTPConnection object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           response = self._make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout_obj,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 response_conn=response_conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 **response_kw,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:790: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | response_conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | preload_content = False, decode_content = False, enforce_content_length = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn: BaseHTTPConnection,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         response_conn: BaseHTTPConnection | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Perform a request on a given urllib connection object taken from our\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             a connection from one of our connection pools\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param response_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Set this to ``None`` if you will handle releasing the connection or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             set the connection to have the response release it.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |           If True, the response's body will be preloaded during construction.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param enforce_content_length:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Enforce content length checking. Body returned by server must match\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             value of Content-Length header, if present. Otherwise, raise error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.num_requests += 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj.start_connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Trigger any extra validation we need to do.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._validate_conn(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except (SocketTimeout, BaseSSLError) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # _validate_conn() starts the connection to an HTTPS proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # so we need to wrap errors with 'ProxyError' here too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             NewConnectionError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             BaseSSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             CertificateError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             new_e: Exception = e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(e, (BaseSSLError, CertificateError)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = SSLError(e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If the connection didn't successfully connect to it's proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # then there\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e, (OSError, NewConnectionError, TimeoutError, SSLError)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise new_e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # conn.request() calls http.client.*.request, not the method in\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           conn.request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:496: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def request(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         *,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Update the inner socket's timeout value to send the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # This only triggers if the connection is re-used.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Store these values to be fed into the HTTPResponse\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # object later. TODO: Remove this in favor of a real\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # HTTP lifecycle mechanism.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # We have to store these before we call .request()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # because sometimes we can still salvage a response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # off the wire even if we aren't able to completely\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # send the request body.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._response_options = _ResponseOptions(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_method=method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         header_keys = frozenset(to_str(k.lower()) for k in headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_accept_encoding = \"accept-encoding\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_host = \"host\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.putrequest(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             method, url, skip_accept_encoding=skip_accept_encoding, skip_host=skip_host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Transform the body into an iterable of sendall()-able chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # and detect if an explicit Content-Length is doable.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks_and_cl = body_to_chunks(body, method=method, blocksize=self.blocksize)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks = chunks_and_cl.chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         content_length = chunks_and_cl.content_length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # When chunked is explicit set to 'True' we respect that.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"transfer-encoding\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Detect whether a framing mechanism is already in use. If so\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # we respect that value, otherwise we pick chunked vs content-length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # depending on the type of 'body'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"content-length\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif \"transfer-encoding\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Otherwise we go off the recommendation of 'body_to_chunks()'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 if content_length is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     if chunks is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self.putheader(\"Content-Length\", str(content_length))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Now that framing headers are out of the way we send all the other headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if \"user-agent\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(\"User-Agent\", _get_default_user_agent())\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         for header, value in headers.items():\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(header, value)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.endheaders()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connection.py:388: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         This method sends the request to the server.  The optional message_body\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         argument can be used to pass a message body associated with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.__state == _CS_REQ_STARTED:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.__state = _CS_REQ_SENT\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise CannotSendHeader()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1252: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None, encode_chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Appends an extra \\\\r\\\\n to the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         A message_body may be specified, to be appended to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._buffer.extend((b\"\", b\"\"))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         msg = b\"\\r\\n\".join(self._buffer)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         del self._buffer[:]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.send(msg)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1012: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/6.1.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(self, data):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send `data' to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ``data`` can be a string object, a bytes object, an array object, a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         file-like object that supports a .read() method, or an iterable object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.auto_open:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               self.connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:952: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def connect(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       sock.connect(self.unix_socket)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E       PermissionError: [Errno 13] Permission denied\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/transport/unixconn.py:27: PermissionError\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | During handling of the above exception, another exception occurred:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f723f3838e0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | request = <PreparedRequest [GET]>, stream = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | proxies = OrderedDict()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param stream: (optional) Whether to stream the request content.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout: (optional) How long to wait for the server to send\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             read timeout) <timeouts>` tuple.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type timeout: float or tuple or urllib3 Timeout object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             we verify the server's TLS certificate, or a string, in which case it\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             must be a path to a CA bundle to use\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self.get_connection(request.url, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except LocationValueError as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise InvalidURL(e, request=request)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.cert_verify(conn, request.url, verify, cert)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url = self.request_url(request, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.add_headers(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             stream=stream,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             verify=verify,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             cert=cert,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             proxies=proxies,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if isinstance(timeout, tuple):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 connect, read = timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except ValueError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise ValueError(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"or a single float to set both timeouts to the same value.\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         elif isinstance(timeout, TimeoutSauce):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             pass\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           resp = conn.urlopen(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method=request.method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=request.body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=request.headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 redirect=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 assert_same_host=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=self.max_retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/adapters.py:486: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | redirect = False, assert_same_host = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | decode_content = False, response_kw = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | destination_scheme = None, conn = None, release_this_conn = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | http_tunnel_required = False, err = None, clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def urlopen(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | bool | int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         assert_same_host: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool_timeout: int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_conn: bool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         **response_kw: typing.Any,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Get a connection from the pool and perform an HTTP request. This is the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         lowest level call for making a request, so you'll need to specify all\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         the raw details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            More commonly, it's appropriate to use a convenience method\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            such as :meth:`request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `release_conn` will only behave as expected if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` because we want to make\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` the default behaviour someday soon without\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            breaking backwards compatibility.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param redirect:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, automatically handle redirects (status codes 301, 302,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             will disable redirect, too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param assert_same_host:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``True``, will make sure that the host of the pool requests is\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             consistent else will raise HostChangedError. When ``False``, you can\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             use the pool on an HTTP proxy and request foreign hosts.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param pool_timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If set and the pool is set to block=True, then this method will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             connection is available within the time period.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, the response's body will be preloaded into memory.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param release_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If False, then the urlopen call will not release the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool once a response is received (but will release if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             you read the entire contents of the response such as when\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             `preload_content=True`). This is useful if you're not preloading\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the response's content immediately. You will need to call\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool. If None, it takes the value of ``preload_content``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             which defaults to ``True``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param int body_pos:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Position to seek to in file-like body in the event of a retry or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             redirect. Typically this won't need to be set because urllib3 will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auto-populate the value when needed.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         parsed_url = parse_url(url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         destination_scheme = parsed_url.scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = self.headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not isinstance(retries, Retry):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if release_conn is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_conn = preload_content\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Check host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if assert_same_host and not self.is_same_host(url):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise HostChangedError(self, url, retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Ensure that the URL we're connecting to is properly encoded\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if url.startswith(\"/\"):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(_encode_target(url))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(parsed_url.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Track whether `conn` needs to be released before\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # returning/raising/recursing. Update this variable if necessary, and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # leave `release_conn` constant throughout the function. That way, if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the function recurses, the original value of `release_conn` will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # passed down into the recursive call, and its value will be respected.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # See issue #651 [1] for details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_this_conn = release_conn\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         http_tunnel_required = connection_requires_http_tunnel(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.proxy, self.proxy_config, destination_scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # have to copy the headers dict so we can safely change it without those\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # changes being reflected in anyone else's copy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not http_tunnel_required:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Must keep the exception bound to a separate variable or else Python 3\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # complains about UnboundLocalError.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         err = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Keep track of whether we cleanly exited the except block. This\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # ensures we do proper cleanup in finally.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Rewind body position, if needed. Record current position\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # for future rewinds in the event of a redirect/retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos = set_file_position(body, body_pos)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Request a connection from the queue.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self._get_conn(timeout=pool_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._prepare_proxy(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._raise_timeout(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If we're going to release the connection in ``finally:``, then\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # the response doesn't need to know about the connection. Otherwise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # it will also try to release it and we'll have a double-release\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # mess.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response_conn = conn if not release_conn else None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Make the request on the HTTPConnection object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response = self._make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout_obj,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 response_conn=response_conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 **response_kw,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Everything went great!\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             clean_exit = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except EmptyPoolError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Didn't get a connection from the pool, no need to clean up\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             clean_exit = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_this_conn = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTPException,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ProtocolError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             BaseSSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             CertificateError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ProxyError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Discard the connection for these exceptions. It will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # replaced during the next _get_conn() call.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             new_e: Exception = e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(e, (BaseSSLError, CertificateError)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = SSLError(e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     NewConnectionError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     HTTPException,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 ),\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif isinstance(new_e, (OSError, HTTPException)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = ProtocolError(\"Connection aborted.\", new_e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           retries = retries.increment(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:844: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', response = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _stacktrace = <traceback object at 0x7f723f382080>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def increment(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         response: BaseHTTPResponse | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         error: Exception | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         _pool: ConnectionPool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         _stacktrace: TracebackType | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> Retry:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param response: A response object, or None, if the server did not\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             return a response.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param Exception error: An error encountered during the request, or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             None if the response was received successfully.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :return: A new ``Retry`` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.total is False and error:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Disabled, indicate to re-raise the error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise reraise(type(error), error, _stacktrace)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         total = self.total\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if total is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             total -= 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         connect = self.connect\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         read = self.read\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect = self.redirect\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         status_count = self.status\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         other = self.other\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         cause = \"unknown\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         status = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect_location = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if error and self._is_connection_error(error):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Connect retry?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if connect is False:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise reraise(type(error), error, _stacktrace)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif connect is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 connect -= 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         elif error and self._is_read_error(error):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Read retry?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if read is False or method is None or not self._is_method_retryable(method):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               raise reraise(type(error), error, _stacktrace)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/util/retry.py:470: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def reraise(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         tp: type[BaseException] | None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         value: BaseException,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         tb: TracebackType | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> typing.NoReturn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if value.__traceback__ is not tb:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               raise value.with_traceback(tb)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/util/util.py:38: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | redirect = False, assert_same_host = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | decode_content = False, response_kw = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | destination_scheme = None, conn = None, release_this_conn = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | http_tunnel_required = False, err = None, clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def urlopen(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | bool | int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         assert_same_host: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool_timeout: int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_conn: bool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         **response_kw: typing.Any,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Get a connection from the pool and perform an HTTP request. This is the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         lowest level call for making a request, so you'll need to specify all\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         the raw details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            More commonly, it's appropriate to use a convenience method\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            such as :meth:`request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `release_conn` will only behave as expected if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` because we want to make\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` the default behaviour someday soon without\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            breaking backwards compatibility.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param redirect:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, automatically handle redirects (status codes 301, 302,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             will disable redirect, too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param assert_same_host:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``True``, will make sure that the host of the pool requests is\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             consistent else will raise HostChangedError. When ``False``, you can\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             use the pool on an HTTP proxy and request foreign hosts.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param pool_timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If set and the pool is set to block=True, then this method will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             connection is available within the time period.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, the response's body will be preloaded into memory.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param release_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If False, then the urlopen call will not release the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool once a response is received (but will release if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             you read the entire contents of the response such as when\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             `preload_content=True`). This is useful if you're not preloading\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the response's content immediately. You will need to call\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool. If None, it takes the value of ``preload_content``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             which defaults to ``True``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param int body_pos:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Position to seek to in file-like body in the event of a retry or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             redirect. Typically this won't need to be set because urllib3 will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auto-populate the value when needed.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         parsed_url = parse_url(url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         destination_scheme = parsed_url.scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = self.headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not isinstance(retries, Retry):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if release_conn is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_conn = preload_content\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Check host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if assert_same_host and not self.is_same_host(url):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise HostChangedError(self, url, retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Ensure that the URL we're connecting to is properly encoded\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if url.startswith(\"/\"):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(_encode_target(url))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(parsed_url.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Track whether `conn` needs to be released before\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # returning/raising/recursing. Update this variable if necessary, and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # leave `release_conn` constant throughout the function. That way, if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the function recurses, the original value of `release_conn` will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # passed down into the recursive call, and its value will be respected.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # See issue #651 [1] for details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_this_conn = release_conn\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         http_tunnel_required = connection_requires_http_tunnel(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.proxy, self.proxy_config, destination_scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # have to copy the headers dict so we can safely change it without those\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # changes being reflected in anyone else's copy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not http_tunnel_required:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Must keep the exception bound to a separate variable or else Python 3\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # complains about UnboundLocalError.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         err = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Keep track of whether we cleanly exited the except block. This\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # ensures we do proper cleanup in finally.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Rewind body position, if needed. Record current position\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # for future rewinds in the event of a redirect/retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos = set_file_position(body, body_pos)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Request a connection from the queue.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self._get_conn(timeout=pool_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._prepare_proxy(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._raise_timeout(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If we're going to release the connection in ``finally:``, then\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # the response doesn't need to know about the connection. Otherwise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # it will also try to release it and we'll have a double-release\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # mess.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response_conn = conn if not release_conn else None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Make the request on the HTTPConnection object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           response = self._make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout_obj,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 response_conn=response_conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 **response_kw,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:790: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | response_conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | preload_content = False, decode_content = False, enforce_content_length = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn: BaseHTTPConnection,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         response_conn: BaseHTTPConnection | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Perform a request on a given urllib connection object taken from our\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             a connection from one of our connection pools\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param response_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Set this to ``None`` if you will handle releasing the connection or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             set the connection to have the response release it.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |           If True, the response's body will be preloaded during construction.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param enforce_content_length:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Enforce content length checking. Body returned by server must match\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             value of Content-Length header, if present. Otherwise, raise error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.num_requests += 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj.start_connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Trigger any extra validation we need to do.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._validate_conn(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except (SocketTimeout, BaseSSLError) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # _validate_conn() starts the connection to an HTTPS proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # so we need to wrap errors with 'ProxyError' here too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             NewConnectionError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             BaseSSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             CertificateError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             new_e: Exception = e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(e, (BaseSSLError, CertificateError)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = SSLError(e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If the connection didn't successfully connect to it's proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # then there\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e, (OSError, NewConnectionError, TimeoutError, SSLError)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise new_e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # conn.request() calls http.client.*.request, not the method in\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           conn.request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:496: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def request(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         *,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Update the inner socket's timeout value to send the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # This only triggers if the connection is re-used.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Store these values to be fed into the HTTPResponse\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # object later. TODO: Remove this in favor of a real\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # HTTP lifecycle mechanism.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # We have to store these before we call .request()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # because sometimes we can still salvage a response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # off the wire even if we aren't able to completely\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # send the request body.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._response_options = _ResponseOptions(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_method=method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         header_keys = frozenset(to_str(k.lower()) for k in headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_accept_encoding = \"accept-encoding\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_host = \"host\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.putrequest(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             method, url, skip_accept_encoding=skip_accept_encoding, skip_host=skip_host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Transform the body into an iterable of sendall()-able chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # and detect if an explicit Content-Length is doable.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks_and_cl = body_to_chunks(body, method=method, blocksize=self.blocksize)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks = chunks_and_cl.chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         content_length = chunks_and_cl.content_length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # When chunked is explicit set to 'True' we respect that.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"transfer-encoding\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Detect whether a framing mechanism is already in use. If so\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # we respect that value, otherwise we pick chunked vs content-length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # depending on the type of 'body'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"content-length\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif \"transfer-encoding\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Otherwise we go off the recommendation of 'body_to_chunks()'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 if content_length is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     if chunks is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self.putheader(\"Content-Length\", str(content_length))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Now that framing headers are out of the way we send all the other headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if \"user-agent\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(\"User-Agent\", _get_default_user_agent())\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         for header, value in headers.items():\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(header, value)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.endheaders()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connection.py:388: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         This method sends the request to the server.  The optional message_body\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         argument can be used to pass a message body associated with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.__state == _CS_REQ_STARTED:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.__state = _CS_REQ_SENT\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise CannotSendHeader()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1252: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None, encode_chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Appends an extra \\\\r\\\\n to the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         A message_body may be specified, to be appended to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._buffer.extend((b\"\", b\"\"))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         msg = b\"\\r\\n\".join(self._buffer)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         del self._buffer[:]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.send(msg)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1012: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/6.1.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(self, data):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send `data' to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ``data`` can be a string object, a bytes object, an array object, a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         file-like object that supports a .read() method, or an iterable object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.auto_open:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               self.connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:952: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def connect(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       sock.connect(self.unix_socket)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | During handling of the above exception, another exception occurred:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _retrieve_server_version(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:214: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | api_version = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def version(self, api_version=True):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Returns version information from the server. Similar to the ``docker\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         version`` command.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Returns:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             (dict): The server version information\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Raises:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :py:class:`docker.errors.APIError`\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 If the server returns an error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url = self._url(\"/version\", versioned_api=api_version)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return self._result(self._get(url), json=True)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/daemon.py:181: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | args = ('http+docker://localhost/version',), kwargs = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def inner(self, *args, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if 'HttpHeaders' in self._general_configs:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if not kwargs.get('headers'):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return f(self, *args, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/utils/decorators.py:46: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     @update_headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _get(self, url, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:237: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | url = 'http+docker://localhost/version'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def get(self, url, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url: URL for the new :class:`Request` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"allow_redirects\", True)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return self.request(\"GET\", url, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/sessions.py:602: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>, method = 'GET'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | url = 'http+docker://localhost/version', params = None, data = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | cert = None, json = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         params=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         data=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         cookies=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         files=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         auth=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         allow_redirects=True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         proxies=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         hooks=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         stream=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         verify=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         cert=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         json=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Returns :class:`Response <Response>` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method: method for the new :class:`Request` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url: URL for the new :class:`Request` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             string for the :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             object to send in the body of the :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param json: (optional) json to send in the body of the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             for multipart encoding upload.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param auth: (optional) Auth tuple or callable to enable\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Basic/Digest/Custom HTTP Auth.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout: (optional) How long to wait for the server to send\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             read timeout) <timeouts>` tuple.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type timeout: float or tuple\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param allow_redirects: (optional) Set to True by default.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type allow_redirects: bool\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             hostname to the URL of the proxy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param stream: (optional) whether to immediately download the response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content. Defaults to ``False``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the server's TLS certificate, or a string, in which case it must be a path\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``False``, requests will accept any TLS certificate presented by\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the server, and will ignore hostname mismatches and/or expired\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             certificates, which will make your application vulnerable to\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             may be useful during local development or testing.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If Tuple, ('cert', 'key') pair.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Create the Request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         req = Request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             method=method.upper(),\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             files=files,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data=data or {},\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             json=json,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             params=params or {},\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auth=auth,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             cookies=cookies,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             hooks=hooks,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         prep = self.prepare_request(req)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         proxies = proxies or {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         settings = self.merge_environment_settings(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             prep.url, proxies, stream, verify, cert\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Send the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         send_kwargs = {\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             \"timeout\": timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             \"allow_redirects\": allow_redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         }\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         send_kwargs.update(settings)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       resp = self.send(prep, **send_kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/sessions.py:589: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | request = <PreparedRequest [GET]>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f723f3838e0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | start = 1688230010.6987472\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(self, request, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send a given PreparedRequest.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Set defaults that the hooks can utilize to ensure they always have\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the correct parameters to reproduce the previous request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"stream\", self.stream)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"verify\", self.verify)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"cert\", self.cert)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if \"proxies\" not in kwargs:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             kwargs[\"proxies\"] = resolve_proxies(request, self.proxies, self.trust_env)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # It's possible that users might accidentally send a Request object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Guard against that specific failure case.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if isinstance(request, Request):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise ValueError(\"You can only send PreparedRequests.\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         allow_redirects = kwargs.pop(\"allow_redirects\", True)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         stream = kwargs.get(\"stream\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         hooks = request.hooks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Get the appropriate adapter to use\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         adapter = self.get_adapter(url=request.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Start time (approximately) of the request\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         start = preferred_clock()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Send the request\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       r = adapter.send(request, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/sessions.py:703: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f723f3838e0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | request = <PreparedRequest [GET]>, stream = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | proxies = OrderedDict()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param stream: (optional) Whether to stream the request content.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout: (optional) How long to wait for the server to send\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             read timeout) <timeouts>` tuple.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type timeout: float or tuple or urllib3 Timeout object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             we verify the server's TLS certificate, or a string, in which case it\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             must be a path to a CA bundle to use\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self.get_connection(request.url, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except LocationValueError as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise InvalidURL(e, request=request)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.cert_verify(conn, request.url, verify, cert)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url = self.request_url(request, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.add_headers(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             stream=stream,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             verify=verify,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             cert=cert,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             proxies=proxies,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if isinstance(timeout, tuple):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 connect, read = timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except ValueError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise ValueError(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"or a single float to set both timeouts to the same value.\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         elif isinstance(timeout, TimeoutSauce):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             pass\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             resp = conn.urlopen(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method=request.method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=request.body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=request.headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 redirect=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 assert_same_host=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=self.max_retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (ProtocolError, OSError) as err:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           raise ConnectionError(err, request=request)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/adapters.py:501: ConnectionError\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | During handling of the above exception, another exception occurred:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | cls = <class 'tests.test_user_repository.TestUserRepository'>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     @classmethod\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def setUpClass(cls):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       cls.container = PostgresContainer(\"postgres:14\").with_bind_ports(5432, 16888)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/base_pg_testcontainer.py:26: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/postgres.py:49: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     super(PostgresContainer, self).__init__(image=image, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/core/generic.py:27: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     super(DbContainer, self).__init__(image, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/core/container.py:19: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self.client = docker.from_env(**kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/client.py:96: in from_env\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     return cls(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/client.py:45: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self.api = APIClient(*args, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:197: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self._version = self._retrieve_server_version()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _retrieve_server_version(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except KeyError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise DockerException(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 ' is missing.'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except Exception as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           raise DockerException(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 f'Error while fetching server API version: {e}'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:221: DockerException\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _______ ERROR at setup of TestUserRepository.test_find_user_sub_good_id ________\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | redirect = False, assert_same_host = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | decode_content = False, response_kw = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | destination_scheme = None, conn = None, release_this_conn = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | http_tunnel_required = False, err = None, clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def urlopen(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | bool | int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         assert_same_host: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool_timeout: int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_conn: bool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         **response_kw: typing.Any,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Get a connection from the pool and perform an HTTP request. This is the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         lowest level call for making a request, so you'll need to specify all\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         the raw details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            More commonly, it's appropriate to use a convenience method\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            such as :meth:`request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `release_conn` will only behave as expected if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` because we want to make\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` the default behaviour someday soon without\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            breaking backwards compatibility.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param redirect:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, automatically handle redirects (status codes 301, 302,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             will disable redirect, too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param assert_same_host:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``True``, will make sure that the host of the pool requests is\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             consistent else will raise HostChangedError. When ``False``, you can\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             use the pool on an HTTP proxy and request foreign hosts.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param pool_timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If set and the pool is set to block=True, then this method will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             connection is available within the time period.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, the response's body will be preloaded into memory.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param release_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If False, then the urlopen call will not release the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool once a response is received (but will release if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             you read the entire contents of the response such as when\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             `preload_content=True`). This is useful if you're not preloading\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the response's content immediately. You will need to call\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool. If None, it takes the value of ``preload_content``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             which defaults to ``True``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param int body_pos:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Position to seek to in file-like body in the event of a retry or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             redirect. Typically this won't need to be set because urllib3 will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auto-populate the value when needed.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         parsed_url = parse_url(url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         destination_scheme = parsed_url.scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = self.headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not isinstance(retries, Retry):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if release_conn is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_conn = preload_content\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Check host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if assert_same_host and not self.is_same_host(url):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise HostChangedError(self, url, retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Ensure that the URL we're connecting to is properly encoded\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if url.startswith(\"/\"):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(_encode_target(url))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(parsed_url.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Track whether `conn` needs to be released before\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # returning/raising/recursing. Update this variable if necessary, and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # leave `release_conn` constant throughout the function. That way, if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the function recurses, the original value of `release_conn` will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # passed down into the recursive call, and its value will be respected.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # See issue #651 [1] for details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_this_conn = release_conn\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         http_tunnel_required = connection_requires_http_tunnel(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.proxy, self.proxy_config, destination_scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # have to copy the headers dict so we can safely change it without those\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # changes being reflected in anyone else's copy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not http_tunnel_required:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Must keep the exception bound to a separate variable or else Python 3\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # complains about UnboundLocalError.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         err = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Keep track of whether we cleanly exited the except block. This\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # ensures we do proper cleanup in finally.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Rewind body position, if needed. Record current position\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # for future rewinds in the event of a redirect/retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos = set_file_position(body, body_pos)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Request a connection from the queue.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self._get_conn(timeout=pool_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._prepare_proxy(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._raise_timeout(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If we're going to release the connection in ``finally:``, then\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # the response doesn't need to know about the connection. Otherwise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # it will also try to release it and we'll have a double-release\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # mess.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response_conn = conn if not release_conn else None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Make the request on the HTTPConnection object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           response = self._make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout_obj,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 response_conn=response_conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 **response_kw,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:790: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | response_conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | preload_content = False, decode_content = False, enforce_content_length = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn: BaseHTTPConnection,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         response_conn: BaseHTTPConnection | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Perform a request on a given urllib connection object taken from our\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             a connection from one of our connection pools\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param response_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Set this to ``None`` if you will handle releasing the connection or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             set the connection to have the response release it.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |           If True, the response's body will be preloaded during construction.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param enforce_content_length:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Enforce content length checking. Body returned by server must match\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             value of Content-Length header, if present. Otherwise, raise error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.num_requests += 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj.start_connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Trigger any extra validation we need to do.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._validate_conn(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except (SocketTimeout, BaseSSLError) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # _validate_conn() starts the connection to an HTTPS proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # so we need to wrap errors with 'ProxyError' here too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             NewConnectionError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             BaseSSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             CertificateError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             new_e: Exception = e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(e, (BaseSSLError, CertificateError)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = SSLError(e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If the connection didn't successfully connect to it's proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # then there\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e, (OSError, NewConnectionError, TimeoutError, SSLError)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise new_e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # conn.request() calls http.client.*.request, not the method in\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           conn.request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:496: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def request(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         *,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Update the inner socket's timeout value to send the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # This only triggers if the connection is re-used.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Store these values to be fed into the HTTPResponse\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # object later. TODO: Remove this in favor of a real\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # HTTP lifecycle mechanism.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # We have to store these before we call .request()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # because sometimes we can still salvage a response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # off the wire even if we aren't able to completely\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # send the request body.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._response_options = _ResponseOptions(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_method=method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         header_keys = frozenset(to_str(k.lower()) for k in headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_accept_encoding = \"accept-encoding\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_host = \"host\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.putrequest(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             method, url, skip_accept_encoding=skip_accept_encoding, skip_host=skip_host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Transform the body into an iterable of sendall()-able chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # and detect if an explicit Content-Length is doable.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks_and_cl = body_to_chunks(body, method=method, blocksize=self.blocksize)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks = chunks_and_cl.chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         content_length = chunks_and_cl.content_length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # When chunked is explicit set to 'True' we respect that.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"transfer-encoding\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Detect whether a framing mechanism is already in use. If so\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # we respect that value, otherwise we pick chunked vs content-length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # depending on the type of 'body'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"content-length\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif \"transfer-encoding\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Otherwise we go off the recommendation of 'body_to_chunks()'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 if content_length is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     if chunks is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self.putheader(\"Content-Length\", str(content_length))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Now that framing headers are out of the way we send all the other headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if \"user-agent\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(\"User-Agent\", _get_default_user_agent())\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         for header, value in headers.items():\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(header, value)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.endheaders()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connection.py:388: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         This method sends the request to the server.  The optional message_body\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         argument can be used to pass a message body associated with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.__state == _CS_REQ_STARTED:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.__state = _CS_REQ_SENT\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise CannotSendHeader()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1252: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None, encode_chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Appends an extra \\\\r\\\\n to the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         A message_body may be specified, to be appended to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._buffer.extend((b\"\", b\"\"))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         msg = b\"\\r\\n\".join(self._buffer)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         del self._buffer[:]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.send(msg)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1012: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/6.1.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(self, data):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send `data' to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ``data`` can be a string object, a bytes object, an array object, a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         file-like object that supports a .read() method, or an iterable object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.auto_open:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               self.connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:952: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def connect(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       sock.connect(self.unix_socket)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E       PermissionError: [Errno 13] Permission denied\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/transport/unixconn.py:27: PermissionError\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | During handling of the above exception, another exception occurred:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f723f3838e0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | request = <PreparedRequest [GET]>, stream = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | proxies = OrderedDict()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param stream: (optional) Whether to stream the request content.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout: (optional) How long to wait for the server to send\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             read timeout) <timeouts>` tuple.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type timeout: float or tuple or urllib3 Timeout object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             we verify the server's TLS certificate, or a string, in which case it\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             must be a path to a CA bundle to use\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self.get_connection(request.url, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except LocationValueError as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise InvalidURL(e, request=request)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.cert_verify(conn, request.url, verify, cert)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url = self.request_url(request, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.add_headers(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             stream=stream,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             verify=verify,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             cert=cert,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             proxies=proxies,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if isinstance(timeout, tuple):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 connect, read = timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except ValueError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise ValueError(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"or a single float to set both timeouts to the same value.\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         elif isinstance(timeout, TimeoutSauce):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             pass\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           resp = conn.urlopen(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method=request.method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=request.body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=request.headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 redirect=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 assert_same_host=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=self.max_retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/adapters.py:486: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | redirect = False, assert_same_host = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | decode_content = False, response_kw = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | destination_scheme = None, conn = None, release_this_conn = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | http_tunnel_required = False, err = None, clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def urlopen(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | bool | int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         assert_same_host: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool_timeout: int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_conn: bool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         **response_kw: typing.Any,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Get a connection from the pool and perform an HTTP request. This is the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         lowest level call for making a request, so you'll need to specify all\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         the raw details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            More commonly, it's appropriate to use a convenience method\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            such as :meth:`request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `release_conn` will only behave as expected if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` because we want to make\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` the default behaviour someday soon without\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            breaking backwards compatibility.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param redirect:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, automatically handle redirects (status codes 301, 302,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             will disable redirect, too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param assert_same_host:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``True``, will make sure that the host of the pool requests is\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             consistent else will raise HostChangedError. When ``False``, you can\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             use the pool on an HTTP proxy and request foreign hosts.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param pool_timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If set and the pool is set to block=True, then this method will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             connection is available within the time period.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, the response's body will be preloaded into memory.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param release_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If False, then the urlopen call will not release the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool once a response is received (but will release if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             you read the entire contents of the response such as when\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             `preload_content=True`). This is useful if you're not preloading\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the response's content immediately. You will need to call\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool. If None, it takes the value of ``preload_content``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             which defaults to ``True``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param int body_pos:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Position to seek to in file-like body in the event of a retry or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             redirect. Typically this won't need to be set because urllib3 will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auto-populate the value when needed.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         parsed_url = parse_url(url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         destination_scheme = parsed_url.scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = self.headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not isinstance(retries, Retry):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if release_conn is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_conn = preload_content\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Check host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if assert_same_host and not self.is_same_host(url):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise HostChangedError(self, url, retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Ensure that the URL we're connecting to is properly encoded\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if url.startswith(\"/\"):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(_encode_target(url))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(parsed_url.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Track whether `conn` needs to be released before\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # returning/raising/recursing. Update this variable if necessary, and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # leave `release_conn` constant throughout the function. That way, if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the function recurses, the original value of `release_conn` will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # passed down into the recursive call, and its value will be respected.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # See issue #651 [1] for details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_this_conn = release_conn\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         http_tunnel_required = connection_requires_http_tunnel(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.proxy, self.proxy_config, destination_scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # have to copy the headers dict so we can safely change it without those\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # changes being reflected in anyone else's copy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not http_tunnel_required:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Must keep the exception bound to a separate variable or else Python 3\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # complains about UnboundLocalError.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         err = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Keep track of whether we cleanly exited the except block. This\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # ensures we do proper cleanup in finally.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Rewind body position, if needed. Record current position\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # for future rewinds in the event of a redirect/retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos = set_file_position(body, body_pos)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Request a connection from the queue.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self._get_conn(timeout=pool_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._prepare_proxy(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._raise_timeout(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If we're going to release the connection in ``finally:``, then\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # the response doesn't need to know about the connection. Otherwise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # it will also try to release it and we'll have a double-release\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # mess.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response_conn = conn if not release_conn else None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Make the request on the HTTPConnection object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response = self._make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout_obj,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 response_conn=response_conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 **response_kw,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Everything went great!\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             clean_exit = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except EmptyPoolError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Didn't get a connection from the pool, no need to clean up\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             clean_exit = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_this_conn = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTPException,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ProtocolError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             BaseSSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             CertificateError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ProxyError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Discard the connection for these exceptions. It will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # replaced during the next _get_conn() call.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             new_e: Exception = e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(e, (BaseSSLError, CertificateError)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = SSLError(e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     NewConnectionError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     HTTPException,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 ),\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif isinstance(new_e, (OSError, HTTPException)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = ProtocolError(\"Connection aborted.\", new_e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           retries = retries.increment(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:844: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', response = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _stacktrace = <traceback object at 0x7f723f382080>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def increment(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         response: BaseHTTPResponse | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         error: Exception | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         _pool: ConnectionPool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         _stacktrace: TracebackType | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> Retry:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param response: A response object, or None, if the server did not\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             return a response.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param Exception error: An error encountered during the request, or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             None if the response was received successfully.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :return: A new ``Retry`` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.total is False and error:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Disabled, indicate to re-raise the error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise reraise(type(error), error, _stacktrace)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         total = self.total\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if total is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             total -= 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         connect = self.connect\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         read = self.read\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect = self.redirect\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         status_count = self.status\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         other = self.other\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         cause = \"unknown\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         status = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect_location = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if error and self._is_connection_error(error):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Connect retry?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if connect is False:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise reraise(type(error), error, _stacktrace)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif connect is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 connect -= 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         elif error and self._is_read_error(error):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Read retry?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if read is False or method is None or not self._is_method_retryable(method):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               raise reraise(type(error), error, _stacktrace)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/util/retry.py:470: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def reraise(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         tp: type[BaseException] | None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         value: BaseException,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         tb: TracebackType | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> typing.NoReturn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if value.__traceback__ is not tb:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               raise value.with_traceback(tb)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/util/util.py:38: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | redirect = False, assert_same_host = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | decode_content = False, response_kw = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | destination_scheme = None, conn = None, release_this_conn = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | http_tunnel_required = False, err = None, clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def urlopen(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | bool | int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         assert_same_host: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool_timeout: int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_conn: bool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         **response_kw: typing.Any,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Get a connection from the pool and perform an HTTP request. This is the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         lowest level call for making a request, so you'll need to specify all\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         the raw details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            More commonly, it's appropriate to use a convenience method\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            such as :meth:`request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `release_conn` will only behave as expected if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` because we want to make\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` the default behaviour someday soon without\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            breaking backwards compatibility.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param redirect:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, automatically handle redirects (status codes 301, 302,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             will disable redirect, too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param assert_same_host:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``True``, will make sure that the host of the pool requests is\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             consistent else will raise HostChangedError. When ``False``, you can\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             use the pool on an HTTP proxy and request foreign hosts.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param pool_timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If set and the pool is set to block=True, then this method will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             connection is available within the time period.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, the response's body will be preloaded into memory.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param release_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If False, then the urlopen call will not release the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool once a response is received (but will release if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             you read the entire contents of the response such as when\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             `preload_content=True`). This is useful if you're not preloading\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the response's content immediately. You will need to call\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool. If None, it takes the value of ``preload_content``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             which defaults to ``True``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param int body_pos:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Position to seek to in file-like body in the event of a retry or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             redirect. Typically this won't need to be set because urllib3 will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auto-populate the value when needed.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         parsed_url = parse_url(url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         destination_scheme = parsed_url.scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = self.headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not isinstance(retries, Retry):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if release_conn is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_conn = preload_content\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Check host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if assert_same_host and not self.is_same_host(url):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise HostChangedError(self, url, retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Ensure that the URL we're connecting to is properly encoded\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if url.startswith(\"/\"):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(_encode_target(url))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(parsed_url.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Track whether `conn` needs to be released before\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # returning/raising/recursing. Update this variable if necessary, and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # leave `release_conn` constant throughout the function. That way, if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the function recurses, the original value of `release_conn` will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # passed down into the recursive call, and its value will be respected.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # See issue #651 [1] for details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_this_conn = release_conn\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         http_tunnel_required = connection_requires_http_tunnel(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.proxy, self.proxy_config, destination_scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # have to copy the headers dict so we can safely change it without those\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # changes being reflected in anyone else's copy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not http_tunnel_required:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Must keep the exception bound to a separate variable or else Python 3\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # complains about UnboundLocalError.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         err = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Keep track of whether we cleanly exited the except block. This\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # ensures we do proper cleanup in finally.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Rewind body position, if needed. Record current position\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # for future rewinds in the event of a redirect/retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos = set_file_position(body, body_pos)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Request a connection from the queue.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self._get_conn(timeout=pool_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._prepare_proxy(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._raise_timeout(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If we're going to release the connection in ``finally:``, then\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # the response doesn't need to know about the connection. Otherwise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # it will also try to release it and we'll have a double-release\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # mess.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response_conn = conn if not release_conn else None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Make the request on the HTTPConnection object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           response = self._make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout_obj,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 response_conn=response_conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 **response_kw,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:790: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | response_conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | preload_content = False, decode_content = False, enforce_content_length = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn: BaseHTTPConnection,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         response_conn: BaseHTTPConnection | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Perform a request on a given urllib connection object taken from our\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             a connection from one of our connection pools\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param response_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Set this to ``None`` if you will handle releasing the connection or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             set the connection to have the response release it.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |           If True, the response's body will be preloaded during construction.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param enforce_content_length:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Enforce content length checking. Body returned by server must match\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             value of Content-Length header, if present. Otherwise, raise error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.num_requests += 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj.start_connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Trigger any extra validation we need to do.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._validate_conn(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except (SocketTimeout, BaseSSLError) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # _validate_conn() starts the connection to an HTTPS proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # so we need to wrap errors with 'ProxyError' here too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             NewConnectionError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             BaseSSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             CertificateError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             new_e: Exception = e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(e, (BaseSSLError, CertificateError)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = SSLError(e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If the connection didn't successfully connect to it's proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # then there\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e, (OSError, NewConnectionError, TimeoutError, SSLError)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise new_e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # conn.request() calls http.client.*.request, not the method in\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           conn.request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:496: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def request(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         *,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Update the inner socket's timeout value to send the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # This only triggers if the connection is re-used.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Store these values to be fed into the HTTPResponse\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # object later. TODO: Remove this in favor of a real\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # HTTP lifecycle mechanism.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # We have to store these before we call .request()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # because sometimes we can still salvage a response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # off the wire even if we aren't able to completely\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # send the request body.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._response_options = _ResponseOptions(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_method=method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         header_keys = frozenset(to_str(k.lower()) for k in headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_accept_encoding = \"accept-encoding\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_host = \"host\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.putrequest(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             method, url, skip_accept_encoding=skip_accept_encoding, skip_host=skip_host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Transform the body into an iterable of sendall()-able chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # and detect if an explicit Content-Length is doable.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks_and_cl = body_to_chunks(body, method=method, blocksize=self.blocksize)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks = chunks_and_cl.chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         content_length = chunks_and_cl.content_length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # When chunked is explicit set to 'True' we respect that.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"transfer-encoding\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Detect whether a framing mechanism is already in use. If so\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # we respect that value, otherwise we pick chunked vs content-length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # depending on the type of 'body'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"content-length\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif \"transfer-encoding\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Otherwise we go off the recommendation of 'body_to_chunks()'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 if content_length is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     if chunks is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self.putheader(\"Content-Length\", str(content_length))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Now that framing headers are out of the way we send all the other headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if \"user-agent\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(\"User-Agent\", _get_default_user_agent())\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         for header, value in headers.items():\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(header, value)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.endheaders()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connection.py:388: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         This method sends the request to the server.  The optional message_body\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         argument can be used to pass a message body associated with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.__state == _CS_REQ_STARTED:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.__state = _CS_REQ_SENT\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise CannotSendHeader()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1252: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None, encode_chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Appends an extra \\\\r\\\\n to the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         A message_body may be specified, to be appended to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._buffer.extend((b\"\", b\"\"))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         msg = b\"\\r\\n\".join(self._buffer)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         del self._buffer[:]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.send(msg)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1012: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/6.1.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(self, data):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send `data' to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ``data`` can be a string object, a bytes object, an array object, a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         file-like object that supports a .read() method, or an iterable object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.auto_open:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               self.connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:952: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def connect(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       sock.connect(self.unix_socket)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | During handling of the above exception, another exception occurred:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _retrieve_server_version(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:214: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | api_version = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def version(self, api_version=True):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Returns version information from the server. Similar to the ``docker\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         version`` command.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Returns:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             (dict): The server version information\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Raises:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :py:class:`docker.errors.APIError`\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 If the server returns an error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url = self._url(\"/version\", versioned_api=api_version)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return self._result(self._get(url), json=True)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/daemon.py:181: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | args = ('http+docker://localhost/version',), kwargs = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def inner(self, *args, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if 'HttpHeaders' in self._general_configs:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if not kwargs.get('headers'):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return f(self, *args, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/utils/decorators.py:46: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     @update_headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _get(self, url, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:237: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | url = 'http+docker://localhost/version'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def get(self, url, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url: URL for the new :class:`Request` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"allow_redirects\", True)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return self.request(\"GET\", url, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/sessions.py:602: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>, method = 'GET'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | url = 'http+docker://localhost/version', params = None, data = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | cert = None, json = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         params=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         data=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         cookies=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         files=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         auth=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         allow_redirects=True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         proxies=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         hooks=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         stream=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         verify=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         cert=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         json=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Returns :class:`Response <Response>` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method: method for the new :class:`Request` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url: URL for the new :class:`Request` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             string for the :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             object to send in the body of the :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param json: (optional) json to send in the body of the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             for multipart encoding upload.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param auth: (optional) Auth tuple or callable to enable\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Basic/Digest/Custom HTTP Auth.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout: (optional) How long to wait for the server to send\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             read timeout) <timeouts>` tuple.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type timeout: float or tuple\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param allow_redirects: (optional) Set to True by default.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type allow_redirects: bool\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             hostname to the URL of the proxy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param stream: (optional) whether to immediately download the response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content. Defaults to ``False``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the server's TLS certificate, or a string, in which case it must be a path\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``False``, requests will accept any TLS certificate presented by\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the server, and will ignore hostname mismatches and/or expired\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             certificates, which will make your application vulnerable to\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             may be useful during local development or testing.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If Tuple, ('cert', 'key') pair.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Create the Request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         req = Request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             method=method.upper(),\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             files=files,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data=data or {},\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             json=json,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             params=params or {},\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auth=auth,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             cookies=cookies,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             hooks=hooks,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         prep = self.prepare_request(req)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         proxies = proxies or {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         settings = self.merge_environment_settings(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             prep.url, proxies, stream, verify, cert\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Send the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         send_kwargs = {\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             \"timeout\": timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             \"allow_redirects\": allow_redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         }\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         send_kwargs.update(settings)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       resp = self.send(prep, **send_kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/sessions.py:589: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | request = <PreparedRequest [GET]>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f723f3838e0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | start = 1688230010.6987472\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(self, request, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send a given PreparedRequest.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Set defaults that the hooks can utilize to ensure they always have\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the correct parameters to reproduce the previous request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"stream\", self.stream)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"verify\", self.verify)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"cert\", self.cert)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if \"proxies\" not in kwargs:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             kwargs[\"proxies\"] = resolve_proxies(request, self.proxies, self.trust_env)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # It's possible that users might accidentally send a Request object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Guard against that specific failure case.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if isinstance(request, Request):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise ValueError(\"You can only send PreparedRequests.\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         allow_redirects = kwargs.pop(\"allow_redirects\", True)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         stream = kwargs.get(\"stream\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         hooks = request.hooks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Get the appropriate adapter to use\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         adapter = self.get_adapter(url=request.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Start time (approximately) of the request\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         start = preferred_clock()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Send the request\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       r = adapter.send(request, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/sessions.py:703: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f723f3838e0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | request = <PreparedRequest [GET]>, stream = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | proxies = OrderedDict()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param stream: (optional) Whether to stream the request content.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout: (optional) How long to wait for the server to send\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             read timeout) <timeouts>` tuple.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type timeout: float or tuple or urllib3 Timeout object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             we verify the server's TLS certificate, or a string, in which case it\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             must be a path to a CA bundle to use\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self.get_connection(request.url, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except LocationValueError as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise InvalidURL(e, request=request)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.cert_verify(conn, request.url, verify, cert)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url = self.request_url(request, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.add_headers(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             stream=stream,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             verify=verify,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             cert=cert,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             proxies=proxies,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if isinstance(timeout, tuple):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 connect, read = timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except ValueError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise ValueError(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"or a single float to set both timeouts to the same value.\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         elif isinstance(timeout, TimeoutSauce):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             pass\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             resp = conn.urlopen(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method=request.method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=request.body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=request.headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 redirect=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 assert_same_host=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=self.max_retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (ProtocolError, OSError) as err:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           raise ConnectionError(err, request=request)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/adapters.py:501: ConnectionError\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | During handling of the above exception, another exception occurred:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | cls = <class 'tests.test_user_repository.TestUserRepository'>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     @classmethod\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def setUpClass(cls):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       cls.container = PostgresContainer(\"postgres:14\").with_bind_ports(5432, 16888)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/base_pg_testcontainer.py:26: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/postgres.py:49: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     super(PostgresContainer, self).__init__(image=image, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/core/generic.py:27: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     super(DbContainer, self).__init__(image, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/core/container.py:19: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self.client = docker.from_env(**kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/client.py:96: in from_env\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     return cls(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/client.py:45: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self.api = APIClient(*args, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:197: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self._version = self._retrieve_server_version()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _retrieve_server_version(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except KeyError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise DockerException(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 ' is missing.'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except Exception as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           raise DockerException(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 f'Error while fetching server API version: {e}'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:221: DockerException\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | ________ ERROR at setup of TestUserRepository.test_no_user_sub_good_id _________\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | redirect = False, assert_same_host = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | decode_content = False, response_kw = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | destination_scheme = None, conn = None, release_this_conn = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | http_tunnel_required = False, err = None, clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def urlopen(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | bool | int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         assert_same_host: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool_timeout: int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_conn: bool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         **response_kw: typing.Any,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Get a connection from the pool and perform an HTTP request. This is the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         lowest level call for making a request, so you'll need to specify all\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         the raw details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            More commonly, it's appropriate to use a convenience method\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            such as :meth:`request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `release_conn` will only behave as expected if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` because we want to make\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` the default behaviour someday soon without\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            breaking backwards compatibility.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param redirect:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, automatically handle redirects (status codes 301, 302,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             will disable redirect, too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param assert_same_host:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``True``, will make sure that the host of the pool requests is\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             consistent else will raise HostChangedError. When ``False``, you can\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             use the pool on an HTTP proxy and request foreign hosts.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param pool_timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If set and the pool is set to block=True, then this method will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             connection is available within the time period.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, the response's body will be preloaded into memory.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param release_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If False, then the urlopen call will not release the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool once a response is received (but will release if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             you read the entire contents of the response such as when\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             `preload_content=True`). This is useful if you're not preloading\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the response's content immediately. You will need to call\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool. If None, it takes the value of ``preload_content``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             which defaults to ``True``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param int body_pos:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Position to seek to in file-like body in the event of a retry or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             redirect. Typically this won't need to be set because urllib3 will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auto-populate the value when needed.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         parsed_url = parse_url(url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         destination_scheme = parsed_url.scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = self.headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not isinstance(retries, Retry):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if release_conn is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_conn = preload_content\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Check host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if assert_same_host and not self.is_same_host(url):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise HostChangedError(self, url, retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Ensure that the URL we're connecting to is properly encoded\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if url.startswith(\"/\"):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(_encode_target(url))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(parsed_url.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Track whether `conn` needs to be released before\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # returning/raising/recursing. Update this variable if necessary, and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # leave `release_conn` constant throughout the function. That way, if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the function recurses, the original value of `release_conn` will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # passed down into the recursive call, and its value will be respected.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # See issue #651 [1] for details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_this_conn = release_conn\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         http_tunnel_required = connection_requires_http_tunnel(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.proxy, self.proxy_config, destination_scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # have to copy the headers dict so we can safely change it without those\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # changes being reflected in anyone else's copy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not http_tunnel_required:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Must keep the exception bound to a separate variable or else Python 3\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # complains about UnboundLocalError.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         err = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Keep track of whether we cleanly exited the except block. This\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # ensures we do proper cleanup in finally.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Rewind body position, if needed. Record current position\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # for future rewinds in the event of a redirect/retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos = set_file_position(body, body_pos)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Request a connection from the queue.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self._get_conn(timeout=pool_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._prepare_proxy(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._raise_timeout(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If we're going to release the connection in ``finally:``, then\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # the response doesn't need to know about the connection. Otherwise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # it will also try to release it and we'll have a double-release\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # mess.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response_conn = conn if not release_conn else None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Make the request on the HTTPConnection object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           response = self._make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout_obj,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 response_conn=response_conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 **response_kw,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:790: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | response_conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | preload_content = False, decode_content = False, enforce_content_length = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn: BaseHTTPConnection,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         response_conn: BaseHTTPConnection | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Perform a request on a given urllib connection object taken from our\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             a connection from one of our connection pools\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param response_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Set this to ``None`` if you will handle releasing the connection or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             set the connection to have the response release it.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |           If True, the response's body will be preloaded during construction.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param enforce_content_length:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Enforce content length checking. Body returned by server must match\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             value of Content-Length header, if present. Otherwise, raise error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.num_requests += 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj.start_connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Trigger any extra validation we need to do.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._validate_conn(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except (SocketTimeout, BaseSSLError) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # _validate_conn() starts the connection to an HTTPS proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # so we need to wrap errors with 'ProxyError' here too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             NewConnectionError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             BaseSSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             CertificateError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             new_e: Exception = e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(e, (BaseSSLError, CertificateError)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = SSLError(e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If the connection didn't successfully connect to it's proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # then there\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e, (OSError, NewConnectionError, TimeoutError, SSLError)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise new_e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # conn.request() calls http.client.*.request, not the method in\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           conn.request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:496: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def request(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         *,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Update the inner socket's timeout value to send the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # This only triggers if the connection is re-used.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Store these values to be fed into the HTTPResponse\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # object later. TODO: Remove this in favor of a real\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # HTTP lifecycle mechanism.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # We have to store these before we call .request()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # because sometimes we can still salvage a response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # off the wire even if we aren't able to completely\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # send the request body.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._response_options = _ResponseOptions(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_method=method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         header_keys = frozenset(to_str(k.lower()) for k in headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_accept_encoding = \"accept-encoding\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_host = \"host\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.putrequest(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             method, url, skip_accept_encoding=skip_accept_encoding, skip_host=skip_host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Transform the body into an iterable of sendall()-able chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # and detect if an explicit Content-Length is doable.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks_and_cl = body_to_chunks(body, method=method, blocksize=self.blocksize)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks = chunks_and_cl.chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         content_length = chunks_and_cl.content_length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # When chunked is explicit set to 'True' we respect that.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"transfer-encoding\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Detect whether a framing mechanism is already in use. If so\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # we respect that value, otherwise we pick chunked vs content-length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # depending on the type of 'body'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"content-length\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif \"transfer-encoding\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Otherwise we go off the recommendation of 'body_to_chunks()'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 if content_length is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     if chunks is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self.putheader(\"Content-Length\", str(content_length))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Now that framing headers are out of the way we send all the other headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if \"user-agent\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(\"User-Agent\", _get_default_user_agent())\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         for header, value in headers.items():\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(header, value)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.endheaders()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connection.py:388: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         This method sends the request to the server.  The optional message_body\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         argument can be used to pass a message body associated with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.__state == _CS_REQ_STARTED:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.__state = _CS_REQ_SENT\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise CannotSendHeader()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1252: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None, encode_chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Appends an extra \\\\r\\\\n to the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         A message_body may be specified, to be appended to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._buffer.extend((b\"\", b\"\"))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         msg = b\"\\r\\n\".join(self._buffer)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         del self._buffer[:]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.send(msg)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1012: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/6.1.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(self, data):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send `data' to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ``data`` can be a string object, a bytes object, an array object, a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         file-like object that supports a .read() method, or an iterable object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.auto_open:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               self.connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:952: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def connect(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       sock.connect(self.unix_socket)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E       PermissionError: [Errno 13] Permission denied\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/transport/unixconn.py:27: PermissionError\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | During handling of the above exception, another exception occurred:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f723f3838e0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | request = <PreparedRequest [GET]>, stream = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | proxies = OrderedDict()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param stream: (optional) Whether to stream the request content.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout: (optional) How long to wait for the server to send\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             read timeout) <timeouts>` tuple.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type timeout: float or tuple or urllib3 Timeout object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             we verify the server's TLS certificate, or a string, in which case it\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             must be a path to a CA bundle to use\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self.get_connection(request.url, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except LocationValueError as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise InvalidURL(e, request=request)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.cert_verify(conn, request.url, verify, cert)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url = self.request_url(request, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.add_headers(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             stream=stream,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             verify=verify,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             cert=cert,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             proxies=proxies,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if isinstance(timeout, tuple):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 connect, read = timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except ValueError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise ValueError(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"or a single float to set both timeouts to the same value.\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         elif isinstance(timeout, TimeoutSauce):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             pass\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           resp = conn.urlopen(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method=request.method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=request.body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=request.headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 redirect=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 assert_same_host=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=self.max_retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/adapters.py:486: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | redirect = False, assert_same_host = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | decode_content = False, response_kw = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | destination_scheme = None, conn = None, release_this_conn = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | http_tunnel_required = False, err = None, clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def urlopen(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | bool | int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         assert_same_host: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool_timeout: int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_conn: bool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         **response_kw: typing.Any,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Get a connection from the pool and perform an HTTP request. This is the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         lowest level call for making a request, so you'll need to specify all\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         the raw details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            More commonly, it's appropriate to use a convenience method\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            such as :meth:`request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `release_conn` will only behave as expected if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` because we want to make\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` the default behaviour someday soon without\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            breaking backwards compatibility.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param redirect:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, automatically handle redirects (status codes 301, 302,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             will disable redirect, too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param assert_same_host:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``True``, will make sure that the host of the pool requests is\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             consistent else will raise HostChangedError. When ``False``, you can\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             use the pool on an HTTP proxy and request foreign hosts.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param pool_timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If set and the pool is set to block=True, then this method will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             connection is available within the time period.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, the response's body will be preloaded into memory.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param release_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If False, then the urlopen call will not release the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool once a response is received (but will release if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             you read the entire contents of the response such as when\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             `preload_content=True`). This is useful if you're not preloading\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the response's content immediately. You will need to call\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool. If None, it takes the value of ``preload_content``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             which defaults to ``True``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param int body_pos:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Position to seek to in file-like body in the event of a retry or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             redirect. Typically this won't need to be set because urllib3 will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auto-populate the value when needed.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         parsed_url = parse_url(url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         destination_scheme = parsed_url.scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = self.headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not isinstance(retries, Retry):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if release_conn is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_conn = preload_content\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Check host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if assert_same_host and not self.is_same_host(url):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise HostChangedError(self, url, retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Ensure that the URL we're connecting to is properly encoded\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if url.startswith(\"/\"):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(_encode_target(url))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(parsed_url.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Track whether `conn` needs to be released before\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # returning/raising/recursing. Update this variable if necessary, and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # leave `release_conn` constant throughout the function. That way, if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the function recurses, the original value of `release_conn` will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # passed down into the recursive call, and its value will be respected.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # See issue #651 [1] for details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_this_conn = release_conn\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         http_tunnel_required = connection_requires_http_tunnel(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.proxy, self.proxy_config, destination_scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # have to copy the headers dict so we can safely change it without those\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # changes being reflected in anyone else's copy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not http_tunnel_required:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Must keep the exception bound to a separate variable or else Python 3\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # complains about UnboundLocalError.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         err = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Keep track of whether we cleanly exited the except block. This\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # ensures we do proper cleanup in finally.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Rewind body position, if needed. Record current position\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # for future rewinds in the event of a redirect/retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos = set_file_position(body, body_pos)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Request a connection from the queue.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self._get_conn(timeout=pool_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._prepare_proxy(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._raise_timeout(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If we're going to release the connection in ``finally:``, then\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # the response doesn't need to know about the connection. Otherwise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # it will also try to release it and we'll have a double-release\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # mess.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response_conn = conn if not release_conn else None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Make the request on the HTTPConnection object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response = self._make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout_obj,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 response_conn=response_conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 **response_kw,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Everything went great!\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             clean_exit = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except EmptyPoolError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Didn't get a connection from the pool, no need to clean up\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             clean_exit = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_this_conn = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTPException,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ProtocolError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             BaseSSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             CertificateError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ProxyError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Discard the connection for these exceptions. It will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # replaced during the next _get_conn() call.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             new_e: Exception = e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(e, (BaseSSLError, CertificateError)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = SSLError(e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     NewConnectionError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     HTTPException,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 ),\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif isinstance(new_e, (OSError, HTTPException)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = ProtocolError(\"Connection aborted.\", new_e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           retries = retries.increment(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:844: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', response = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _stacktrace = <traceback object at 0x7f723f382080>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def increment(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         response: BaseHTTPResponse | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         error: Exception | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         _pool: ConnectionPool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         _stacktrace: TracebackType | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> Retry:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param response: A response object, or None, if the server did not\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             return a response.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param Exception error: An error encountered during the request, or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             None if the response was received successfully.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :return: A new ``Retry`` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.total is False and error:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Disabled, indicate to re-raise the error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise reraise(type(error), error, _stacktrace)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         total = self.total\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if total is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             total -= 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         connect = self.connect\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         read = self.read\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect = self.redirect\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         status_count = self.status\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         other = self.other\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         cause = \"unknown\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         status = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect_location = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if error and self._is_connection_error(error):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Connect retry?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if connect is False:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise reraise(type(error), error, _stacktrace)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif connect is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 connect -= 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         elif error and self._is_read_error(error):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Read retry?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if read is False or method is None or not self._is_method_retryable(method):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               raise reraise(type(error), error, _stacktrace)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/util/retry.py:470: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def reraise(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         tp: type[BaseException] | None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         value: BaseException,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         tb: TracebackType | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> typing.NoReturn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if value.__traceback__ is not tb:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               raise value.with_traceback(tb)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/util/util.py:38: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | redirect = False, assert_same_host = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | decode_content = False, response_kw = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | destination_scheme = None, conn = None, release_this_conn = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | http_tunnel_required = False, err = None, clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def urlopen(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | bool | int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         redirect: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         assert_same_host: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool_timeout: int | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_conn: bool | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         **response_kw: typing.Any,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Get a connection from the pool and perform an HTTP request. This is the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         lowest level call for making a request, so you'll need to specify all\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         the raw details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            More commonly, it's appropriate to use a convenience method\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            such as :meth:`request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         .. note::\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `release_conn` will only behave as expected if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` because we want to make\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            `preload_content=False` the default behaviour someday soon without\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |            breaking backwards compatibility.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param redirect:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, automatically handle redirects (status codes 301, 302,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             will disable redirect, too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param assert_same_host:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``True``, will make sure that the host of the pool requests is\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             consistent else will raise HostChangedError. When ``False``, you can\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             use the pool on an HTTP proxy and request foreign hosts.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param pool_timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If set and the pool is set to block=True, then this method will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             connection is available within the time period.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, the response's body will be preloaded into memory.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param release_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If False, then the urlopen call will not release the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool once a response is received (but will release if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             you read the entire contents of the response such as when\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             `preload_content=True`). This is useful if you're not preloading\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the response's content immediately. You will need to call\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             back into the pool. If None, it takes the value of ``preload_content``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             which defaults to ``True``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param bool chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param int body_pos:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Position to seek to in file-like body in the event of a retry or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             redirect. Typically this won't need to be set because urllib3 will\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auto-populate the value when needed.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         parsed_url = parse_url(url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         destination_scheme = parsed_url.scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = self.headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not isinstance(retries, Retry):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if release_conn is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             release_conn = preload_content\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Check host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if assert_same_host and not self.is_same_host(url):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise HostChangedError(self, url, retries)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Ensure that the URL we're connecting to is properly encoded\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if url.startswith(\"/\"):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(_encode_target(url))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url = to_str(parsed_url.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Track whether `conn` needs to be released before\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # returning/raising/recursing. Update this variable if necessary, and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # leave `release_conn` constant throughout the function. That way, if\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the function recurses, the original value of `release_conn` will be\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # passed down into the recursive call, and its value will be respected.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # See issue #651 [1] for details.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         #\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         release_this_conn = release_conn\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         http_tunnel_required = connection_requires_http_tunnel(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.proxy, self.proxy_config, destination_scheme\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # have to copy the headers dict so we can safely change it without those\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # changes being reflected in anyone else's copy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not http_tunnel_required:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Must keep the exception bound to a separate variable or else Python 3\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # complains about UnboundLocalError.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         err = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Keep track of whether we cleanly exited the except block. This\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # ensures we do proper cleanup in finally.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         clean_exit = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Rewind body position, if needed. Record current position\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # for future rewinds in the event of a redirect/retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body_pos = set_file_position(body, body_pos)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Request a connection from the queue.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self._get_conn(timeout=pool_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._prepare_proxy(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self._raise_timeout(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If we're going to release the connection in ``finally:``, then\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # the response doesn't need to know about the connection. Otherwise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # it will also try to release it and we'll have a double-release\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # mess.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             response_conn = conn if not release_conn else None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Make the request on the HTTPConnection object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           response = self._make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout_obj,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 response_conn=response_conn,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 **response_kw,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:790: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f723f36e3a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | response_conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | preload_content = False, decode_content = False, enforce_content_length = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _make_request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn: BaseHTTPConnection,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         retries: Retry | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         response_conn: BaseHTTPConnection | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> BaseHTTPResponse:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Perform a request on a given urllib connection object taken from our\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         pool.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             a connection from one of our connection pools\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             The URL to perform the request on.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param body:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Dictionary of custom headers to send, such as User-Agent,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             these headers completely replace any pool-specific headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param retries:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Configure the number of retries to allow before raising a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass ``None`` to retry until you receive a response. Pass a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             over different types of retries.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Pass an integer number to retry connection errors that many times,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             but no other types of errors. Pass zero to never retry.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If ``False``, then retries are disabled and any exception is raised\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the redirect response will be returned.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If specified, overrides the default timeout for this one\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request. It may be a float (in seconds) or an instance of\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`urllib3.util.Timeout`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, urllib3 will send the body using chunked transfer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content-length form. Defaults to False.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param response_conn:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Set this to ``None`` if you will handle releasing the connection or\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             set the connection to have the response release it.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param preload_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |           If True, the response's body will be preloaded during construction.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param decode_content:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If True, will attempt to decode the body based on the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             'content-encoding' header.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param enforce_content_length:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Enforce content length checking. Body returned by server must match\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             value of Content-Length header, if present. Otherwise, raise error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.num_requests += 1\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj = self._get_timeout(timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout_obj.start_connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Trigger any extra validation we need to do.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._validate_conn(conn)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except (SocketTimeout, BaseSSLError) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # _validate_conn() starts the connection to an HTTPS proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # so we need to wrap errors with 'ProxyError' here too.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             OSError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             NewConnectionError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             TimeoutError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             BaseSSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             CertificateError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             SSLError,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ) as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             new_e: Exception = e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(e, (BaseSSLError, CertificateError)):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = SSLError(e)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # If the connection didn't successfully connect to it's proxy\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # then there\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if isinstance(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e, (OSError, NewConnectionError, TimeoutError, SSLError)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise new_e\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # conn.request() calls http.client.*.request, not the method in\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           conn.request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connectionpool.py:496: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | method = 'GET', url = '/version', body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def request(  # type: ignore[override]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         body: _TYPE_BODY | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers: typing.Mapping[str, str] | None = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         *,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         preload_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         decode_content: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         enforce_content_length: bool = True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ) -> None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Update the inner socket's timeout value to send the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # This only triggers if the connection is re-used.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Store these values to be fed into the HTTPResponse\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # object later. TODO: Remove this in favor of a real\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # HTTP lifecycle mechanism.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # We have to store these before we call .request()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # because sometimes we can still salvage a response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # off the wire even if we aren't able to completely\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # send the request body.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._response_options = _ResponseOptions(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_method=method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request_url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             preload_content=preload_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             decode_content=decode_content,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             enforce_content_length=enforce_content_length,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if headers is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         header_keys = frozenset(to_str(k.lower()) for k in headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_accept_encoding = \"accept-encoding\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         skip_host = \"host\" in header_keys\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.putrequest(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             method, url, skip_accept_encoding=skip_accept_encoding, skip_host=skip_host\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Transform the body into an iterable of sendall()-able chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # and detect if an explicit Content-Length is doable.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks_and_cl = body_to_chunks(body, method=method, blocksize=self.blocksize)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunks = chunks_and_cl.chunks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         content_length = chunks_and_cl.content_length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # When chunked is explicit set to 'True' we respect that.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if chunked:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"transfer-encoding\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Detect whether a framing mechanism is already in use. If so\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # we respect that value, otherwise we pick chunked vs content-length\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # depending on the type of 'body'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if \"content-length\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             elif \"transfer-encoding\" in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             # Otherwise we go off the recommendation of 'body_to_chunks()'.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 if content_length is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     if chunks is not None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         chunked = True\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                         self.putheader(\"Transfer-Encoding\", \"chunked\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     self.putheader(\"Content-Length\", str(content_length))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Now that framing headers are out of the way we send all the other headers.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if \"user-agent\" not in header_keys:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(\"User-Agent\", _get_default_user_agent())\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         for header, value in headers.items():\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.putheader(header, value)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.endheaders()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/urllib3/connection.py:388: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         This method sends the request to the server.  The optional message_body\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         argument can be used to pass a message body associated with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.__state == _CS_REQ_STARTED:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             self.__state = _CS_REQ_SENT\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise CannotSendHeader()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1252: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | message_body = None, encode_chunked = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Appends an extra \\\\r\\\\n to the buffer.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         A message_body may be specified, to be appended to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self._buffer.extend((b\"\", b\"\"))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         msg = b\"\\r\\n\".join(self._buffer)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         del self._buffer[:]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.send(msg)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:1012: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/6.1.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(self, data):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send `data' to the server.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         ``data`` can be a string object, a bytes object, an array object, a\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         file-like object that supports a .read() method, or an iterable object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if self.sock is None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if self.auto_open:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >               self.connect()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/http/client.py:952: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f723f383c40>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def connect(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         sock.settimeout(self.timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       sock.connect(self.unix_socket)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | During handling of the above exception, another exception occurred:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _retrieve_server_version(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:214: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | api_version = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def version(self, api_version=True):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Returns version information from the server. Similar to the ``docker\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         version`` command.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Returns:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             (dict): The server version information\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Raises:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :py:class:`docker.errors.APIError`\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 If the server returns an error.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url = self._url(\"/version\", versioned_api=api_version)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return self._result(self._get(url), json=True)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/daemon.py:181: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | args = ('http+docker://localhost/version',), kwargs = {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def inner(self, *args, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if 'HttpHeaders' in self._general_configs:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             if not kwargs.get('headers'):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return f(self, *args, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/utils/decorators.py:46: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     @update_headers\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _get(self, url, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:237: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | url = 'http+docker://localhost/version'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def get(self, url, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url: URL for the new :class:`Request` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"allow_redirects\", True)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       return self.request(\"GET\", url, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/sessions.py:602: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>, method = 'GET'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | url = 'http+docker://localhost/version', params = None, data = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | cert = None, json = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         params=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         data=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         headers=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         cookies=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         files=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         auth=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         timeout=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         allow_redirects=True,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         proxies=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         hooks=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         stream=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         verify=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         cert=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         json=None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         Returns :class:`Response <Response>` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param method: method for the new :class:`Request` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param url: URL for the new :class:`Request` object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             string for the :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             object to send in the body of the :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param json: (optional) json to send in the body of the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             :class:`Request`.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             for multipart encoding upload.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param auth: (optional) Auth tuple or callable to enable\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             Basic/Digest/Custom HTTP Auth.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout: (optional) How long to wait for the server to send\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             read timeout) <timeouts>` tuple.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type timeout: float or tuple\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param allow_redirects: (optional) Set to True by default.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type allow_redirects: bool\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             hostname to the URL of the proxy.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param stream: (optional) whether to immediately download the response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             content. Defaults to ``False``.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the server's TLS certificate, or a string, in which case it must be a path\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             ``False``, requests will accept any TLS certificate presented by\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             the server, and will ignore hostname mismatches and/or expired\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             certificates, which will make your application vulnerable to\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             may be useful during local development or testing.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             If Tuple, ('cert', 'key') pair.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Create the Request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         req = Request(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             method=method.upper(),\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             headers=headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             files=files,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data=data or {},\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             json=json,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             params=params or {},\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             auth=auth,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             cookies=cookies,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             hooks=hooks,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         prep = self.prepare_request(req)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         proxies = proxies or {}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         settings = self.merge_environment_settings(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             prep.url, proxies, stream, verify, cert\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Send the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         send_kwargs = {\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             \"timeout\": timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             \"allow_redirects\": allow_redirects,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         }\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         send_kwargs.update(settings)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       resp = self.send(prep, **send_kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/sessions.py:589: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | request = <PreparedRequest [GET]>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f723f3838e0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | start = 1688230010.6987472\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(self, request, **kwargs):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Send a given PreparedRequest.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Set defaults that the hooks can utilize to ensure they always have\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # the correct parameters to reproduce the previous request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"stream\", self.stream)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"verify\", self.verify)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         kwargs.setdefault(\"cert\", self.cert)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if \"proxies\" not in kwargs:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             kwargs[\"proxies\"] = resolve_proxies(request, self.proxies, self.trust_env)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # It's possible that users might accidentally send a Request object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Guard against that specific failure case.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if isinstance(request, Request):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise ValueError(\"You can only send PreparedRequests.\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         allow_redirects = kwargs.pop(\"allow_redirects\", True)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         stream = kwargs.get(\"stream\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         hooks = request.hooks\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Get the appropriate adapter to use\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         adapter = self.get_adapter(url=request.url)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Start time (approximately) of the request\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         start = preferred_clock()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         # Send the request\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       r = adapter.send(request, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/sessions.py:703: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f723f3838e0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | request = <PreparedRequest [GET]>, stream = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | proxies = OrderedDict()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def send(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param stream: (optional) Whether to stream the request content.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param timeout: (optional) How long to wait for the server to send\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             read timeout) <timeouts>` tuple.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :type timeout: float or tuple or urllib3 Timeout object\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             we verify the server's TLS certificate, or a string, in which case it\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             must be a path to a CA bundle to use\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         :rtype: requests.Response\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         \"\"\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             conn = self.get_connection(request.url, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except LocationValueError as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise InvalidURL(e, request=request)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.cert_verify(conn, request.url, verify, cert)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         url = self.request_url(request, proxies)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self.add_headers(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             request,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             stream=stream,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             verify=verify,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             cert=cert,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             proxies=proxies,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if isinstance(timeout, tuple):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 connect, read = timeout\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             except ValueError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 raise ValueError(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                     f\"or a single float to set both timeouts to the same value.\"\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         elif isinstance(timeout, TimeoutSauce):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             pass\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         else:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             resp = conn.urlopen(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 method=request.method,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 url=url,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 body=request.body,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 headers=request.headers,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 redirect=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 assert_same_host=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 preload_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 decode_content=False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 retries=self.max_retries,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 timeout=timeout,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 chunked=chunked,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except (ProtocolError, OSError) as err:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           raise ConnectionError(err, request=request)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/requests/adapters.py:501: ConnectionError\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | During handling of the above exception, another exception occurred:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | cls = <class 'tests.test_user_repository.TestUserRepository'>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     @classmethod\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def setUpClass(cls):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       cls.container = PostgresContainer(\"postgres:14\").with_bind_ports(5432, 16888)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/base_pg_testcontainer.py:26: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/postgres.py:49: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     super(PostgresContainer, self).__init__(image=image, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/core/generic.py:27: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     super(DbContainer, self).__init__(image, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/core/container.py:19: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self.client = docker.from_env(**kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/client.py:96: in from_env\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     return cls(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/client.py:45: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self.api = APIClient(*args, **kwargs)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:197: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self._version = self._retrieve_server_version()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <docker.api.client.APIClient object at 0x7f723f387400>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def _retrieve_server_version(self):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         try:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except KeyError:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             raise DockerException(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 ' is missing.'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         except Exception as e:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           raise DockerException(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |                 f'Error while fetching server API version: {e}'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |             )\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/docker/api/client.py:221: DockerException\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | =================================== FAILURES ===================================\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | ___________________ TestDisableBlockedUserData.test_blocked ____________________\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <tests.test_pt_service.TestDisableBlockedUserData testMethod=test_blocked>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def setUp(self) -> None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.fake_is_blocked_by_user = patch('pt_bot.is_blocked_by_user').start()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/test_pt_service.py:15: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/unittest/mock.py:1541: in start\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     result = self.__enter__()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/unittest/mock.py:1389: in __enter__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self.target = self.getter()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/unittest/mock.py:1564: in <lambda>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     getter = lambda: _importer(target)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/unittest/mock.py:1236: in _importer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     thing = __import__(import_path)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | pt_bot.py:25: in <module>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     application = Application.builder().token(pt_config.BOT_TOKEN).build()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/telegram/ext/_applicationbuilder.py:286: in build\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     bot: Bot = self._build_ext_bot()  # build a bot\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/telegram/ext/_applicationbuilder.py:248: in _build_ext_bot\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     return ExtBot(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/telegram/ext/_extbot.py:209: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     super().__init__(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = ExtBot(), token = '', base_url = 'https://api.telegram.org/bot'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | base_file_url = 'https://api.telegram.org/file/bot'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | request = <telegram.request._httpxrequest.HTTPXRequest object at 0x7f723f9114a0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | get_updates_request = <telegram.request._httpxrequest.HTTPXRequest object at 0x7f723f911860>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | private_key = None, private_key_password = None, local_mode = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def __init__(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         token: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         base_url: str = \"https://api.telegram.org/bot\",\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         base_file_url: str = \"https://api.telegram.org/file/bot\",\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         request: BaseRequest = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         get_updates_request: BaseRequest = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         private_key: bytes = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         private_key_password: bytes = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         local_mode: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         super().__init__(api_kwargs=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not token:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           raise InvalidToken(\"You must pass the token you received from https://t.me/Botfather!\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E           telegram.error.InvalidToken: You must pass the token you received from https://t.me/Botfather!\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/telegram/_bot.py:233: InvalidToken\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | __________________ TestDisableBlockedUserData.test_unblocked ___________________\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = <tests.test_pt_service.TestDisableBlockedUserData testMethod=test_unblocked>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def setUp(self) -> None:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >       self.fake_is_blocked_by_user = patch('pt_bot.is_blocked_by_user').start()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | tests/test_pt_service.py:15: \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/unittest/mock.py:1541: in start\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     result = self.__enter__()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/unittest/mock.py:1389: in __enter__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     self.target = self.getter()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/unittest/mock.py:1564: in <lambda>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     getter = lambda: _importer(target)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/unittest/mock.py:1236: in _importer\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     thing = __import__(import_path)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | pt_bot.py:25: in <module>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     application = Application.builder().token(pt_config.BOT_TOKEN).build()\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/telegram/ext/_applicationbuilder.py:286: in build\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     bot: Bot = self._build_ext_bot()  # build a bot\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/telegram/ext/_applicationbuilder.py:248: in _build_ext_bot\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     return ExtBot(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/telegram/ext/_extbot.py:209: in __init__\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     super().__init__(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | self = ExtBot(), token = '', base_url = 'https://api.telegram.org/bot'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | base_file_url = 'https://api.telegram.org/file/bot'\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | request = <telegram.request._httpxrequest.HTTPXRequest object at 0x7f723f2cfef0>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | get_updates_request = <telegram.request._httpxrequest.HTTPXRequest object at 0x7f723f2cf090>\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | private_key = None, private_key_password = None, local_mode = False\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     def __init__(\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         self,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         token: str,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         base_url: str = \"https://api.telegram.org/bot\",\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         base_file_url: str = \"https://api.telegram.org/file/bot\",\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         request: BaseRequest = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         get_updates_request: BaseRequest = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         private_key: bytes = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         private_key_password: bytes = None,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         local_mode: bool = False,\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |     ):\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         super().__init__(api_kwargs=None)\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   |         if not token:\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | >           raise InvalidToken(\"You must pass the token you received from https://t.me/Botfather!\")\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | E           telegram.error.InvalidToken: You must pass the token you received from https://t.me/Botfather!\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | /home/runneradmin/.local/share/virtualenvs/chen-tf-price-tracker-bot-0a_-4RY1/lib/python3.9/site-packages/telegram/_bot.py:233: InvalidToken\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | - generated xml file: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/chen-tf-price-tracker-bot/report.xml -\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | - generated html file: file:///tmp/558156d8-17ed-11ee-8a50-bb14de238602/chen-tf-price-tracker-bot/testReport.html -\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | ----------- coverage: platform linux, python 3.9.6-final-0 -----------\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | Coverage HTML written to dir htmlcov\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | \n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | ============================= slowest 2 durations ==============================\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | 0.70s call     tests/test_pt_service.py::TestDisableBlockedUserData::test_blocked\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | 0.70s call     tests/test_pt_service.py::TestDisableBlockedUserData::test_blocked\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | =========================== short test summary info ============================\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | FAILED tests/test_pt_service.py::TestDisableBlockedUserData::test_blocked - telegram.error.InvalidToken: You must pass the token you received from https://t.me/Botfather!\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | FAILED tests/test_pt_service.py::TestDisableBlockedUserData::test_unblocked - telegram.error.InvalidToken: You must pass the token you received from https://t.me/Botfather!\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | ERROR tests/test_good_repository.py::TestGoodRepository::test_enable_state_goods - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | ERROR tests/test_user_repository.py::TestUserRepository::test_enable_state_users - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | ERROR tests/test_user_repository.py::TestUserRepository::test_find_id_345_user - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | ERROR tests/test_user_repository.py::TestUserRepository::test_find_not_exist_user - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | ERROR tests/test_user_repository.py::TestUserRepository::test_find_user_sub_another_good_id - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | ERROR tests/test_user_repository.py::TestUserRepository::test_find_user_sub_good_id - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | ERROR tests/test_user_repository.py::TestUserRepository::test_no_user_sub_good_id - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   | ==================== 2 failed, 9 passed, 7 errors in 8.12s =====================\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI]   \u274c  Failure - Main Run Tests\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI] exitcode '1': failure\n[691d0c21-2032-4b80-b469-8dce7ae94517/CI] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'CI' failed\n",
        "workflow": {
            "path": "/tmp/558156d8-17ed-11ee-8a50-bb14de238602/chen-tf-price-tracker-bot/.github/workflows/testing-crawler.yml",
            "type": "pytest"
        },
        "workflow_name": "691d0c21-2032-4b80-b469-8dce7ae94517",
        "build_tool": "pytest",
        "elapsed_time": 168.93787145614624
    }
}