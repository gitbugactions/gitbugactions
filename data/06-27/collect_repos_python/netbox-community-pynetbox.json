{
    "repository": "netbox-community/pynetbox",
    "stars": 450,
    "language": "python",
    "size": 662,
    "clone_url": "https://github.com/netbox-community/pynetbox.git",
    "timestamp": "2023-07-01T11:33:46.883680Z",
    "clone_success": true,
    "number_of_actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "pytest",
        "unknown"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": true,
        "tests": [
            {
                "classname": "tests.test_api.ApiTestCase",
                "name": "test_get",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_api.ApiTestCase",
                "name": "test_sanitize_url",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_api.ApiVersionTestCase",
                "name": "test_api_version",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_api.ApiVersionTestCase",
                "name": "test_api_version_not_found",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_api.ApiStatusTestCase",
                "name": "test_api_status",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_api.ApiCreateTokenTestCase",
                "name": "test_create_token",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_app.AppConfigTestCase",
                "name": "test_config",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_app.PluginAppTestCase",
                "name": "test_installed_plugins",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_app.PluginAppTestCase",
                "name": "test_plugin_app_name",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_circuits.CircuitsTestCase",
                "name": "test_filter",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_circuits.CircuitsTestCase",
                "name": "test_get",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_circuits.CircuitsTestCase",
                "name": "test_get_all",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_circuits.CircuitsTestCase",
                "name": "test_repr",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_circuits.ProviderTestCase",
                "name": "test_filter",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_circuits.ProviderTestCase",
                "name": "test_get",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_circuits.ProviderTestCase",
                "name": "test_get_all",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_circuits.CircuitTypeTestCase",
                "name": "test_filter",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_circuits.CircuitTypeTestCase",
                "name": "test_get",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_circuits.CircuitTypeTestCase",
                "name": "test_get_all",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_circuits.CircuitTerminationsTestCase",
                "name": "test_filter",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_circuits.CircuitTerminationsTestCase",
                "name": "test_get",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_circuits.CircuitTerminationsTestCase",
                "name": "test_get_all",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_circuits.CircuitTerminationsTestCase",
                "name": "test_repr",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tenancy.TenantsTestCase",
                "name": "test_filter",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tenancy.TenantsTestCase",
                "name": "test_get",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tenancy.TenantsTestCase",
                "name": "test_get_all",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tenancy.TenantGroupsTestCase",
                "name": "test_filter",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tenancy.TenantGroupsTestCase",
                "name": "test_get",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tenancy.TenantGroupsTestCase",
                "name": "test_get_all",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_users.UsersTestCase",
                "name": "test_filter",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_users.UsersTestCase",
                "name": "test_get",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_users.UsersTestCase",
                "name": "test_get_all",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_users.UsersTestCase",
                "name": "test_repr",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_users.GroupsTestCase",
                "name": "test_filter",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_users.GroupsTestCase",
                "name": "test_get",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_users.GroupsTestCase",
                "name": "test_get_all",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_users.PermissionsTestCase",
                "name": "test_filter",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_users.PermissionsTestCase",
                "name": "test_get",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_users.PermissionsTestCase",
                "name": "test_get_all",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_users.PermissionsTestCase",
                "name": "test_username",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_users.UnknownModelTestCase",
                "name": "test_unknown_model",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_virtualization.ClusterTypesTestCase",
                "name": "test_filter",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_virtualization.ClusterTypesTestCase",
                "name": "test_get",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_virtualization.ClusterTypesTestCase",
                "name": "test_get_all",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_virtualization.ClusterGroupsTestCase",
                "name": "test_filter",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_virtualization.ClusterGroupsTestCase",
                "name": "test_get",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_virtualization.ClusterGroupsTestCase",
                "name": "test_get_all",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_virtualization.ClustersTestCase",
                "name": "test_filter",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_virtualization.ClustersTestCase",
                "name": "test_get",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_virtualization.ClustersTestCase",
                "name": "test_get_all",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_virtualization.VirtualMachinesTestCase",
                "name": "test_filter",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_virtualization.VirtualMachinesTestCase",
                "name": "test_get",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_virtualization.VirtualMachinesTestCase",
                "name": "test_get_all",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_virtualization.InterfacesTestCase",
                "name": "test_filter",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_virtualization.InterfacesTestCase",
                "name": "test_get",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_virtualization.InterfacesTestCase",
                "name": "test_get_all",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_wireless.WirelessLansTestCase",
                "name": "test_filter",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_wireless.WirelessLansTestCase",
                "name": "test_get",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_wireless.WirelessLansTestCase",
                "name": "test_get_all",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_wireless.WirelessLansTestCase",
                "name": "test_repr",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestSite",
                "name": "test_create[netbox v3.3]",
                "time": 2.178,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestSite",
                "name": "test_str[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestSite",
                "name": "test_update_fixture[netbox v3.3]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestSite",
                "name": "test_get_fixture_by_id[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestSite",
                "name": "test_get_fixture_by_kwarg[netbox v3.3]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestSite",
                "name": "test_filter_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestSite",
                "name": "test_threading_duplicates[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestRack",
                "name": "test_create[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestRack",
                "name": "test_str[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestRack",
                "name": "test_update_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestRack",
                "name": "test_get_fixture_by_id[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestRack",
                "name": "test_get_fixture_by_kwarg[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestRack",
                "name": "test_filter_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestRack",
                "name": "test_get_elevation[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestManufacturer",
                "name": "test_create[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestManufacturer",
                "name": "test_str[netbox v3.3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestManufacturer",
                "name": "test_update_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestManufacturer",
                "name": "test_get_fixture_by_id[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestManufacturer",
                "name": "test_get_fixture_by_kwarg[netbox v3.3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestManufacturer",
                "name": "test_filter_fixture[netbox v3.3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestDeviceType",
                "name": "test_create[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestDeviceType",
                "name": "test_str[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestDeviceType",
                "name": "test_update_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestDeviceType",
                "name": "test_get_fixture_by_id[netbox v3.3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestDeviceType",
                "name": "test_get_fixture_by_kwarg[netbox v3.3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestDeviceType",
                "name": "test_filter_fixture[netbox v3.3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestDevice",
                "name": "test_create[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestDevice",
                "name": "test_str[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestDevice",
                "name": "test_update_fixture[netbox v3.3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestDevice",
                "name": "test_get_fixture_by_id[netbox v3.3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestDevice",
                "name": "test_get_fixture_by_kwarg[netbox v3.3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestDevice",
                "name": "test_filter_fixture[netbox v3.3]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestInterface",
                "name": "test_create[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestInterface",
                "name": "test_str[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestInterface",
                "name": "test_update_fixture[netbox v3.3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestInterface",
                "name": "test_get_fixture_by_id[netbox v3.3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestInterface",
                "name": "test_get_fixture_by_kwarg[netbox v3.3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestInterface",
                "name": "test_filter_fixture[netbox v3.3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestPowerCable",
                "name": "test_create[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestPowerCable",
                "name": "test_str[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestPowerCable",
                "name": "test_update_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestPowerCable",
                "name": "test_get_fixture_by_id[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestPowerCable",
                "name": "test_get_fixture_by_kwarg[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestPowerCable",
                "name": "test_filter_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestConsoleCable",
                "name": "test_create[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestConsoleCable",
                "name": "test_str[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestConsoleCable",
                "name": "test_update_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestConsoleCable",
                "name": "test_get_fixture_by_id[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestConsoleCable",
                "name": "test_get_fixture_by_kwarg[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestConsoleCable",
                "name": "test_filter_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestInterfaceCable",
                "name": "test_create[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestInterfaceCable",
                "name": "test_str[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestInterfaceCable",
                "name": "test_update_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestInterfaceCable",
                "name": "test_get_fixture_by_id[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestInterfaceCable",
                "name": "test_get_fixture_by_kwarg[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestInterfaceCable",
                "name": "test_filter_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_dcim.TestInterfaceCable",
                "name": "test_trace[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestRIR",
                "name": "test_create[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestRIR",
                "name": "test_str[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestRIR",
                "name": "test_update_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestRIR",
                "name": "test_get_fixture_by_id[netbox v3.3]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestRIR",
                "name": "test_get_fixture_by_kwarg[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestRIR",
                "name": "test_filter_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestAggregate",
                "name": "test_create[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestAggregate",
                "name": "test_str[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestAggregate",
                "name": "test_update_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestAggregate",
                "name": "test_get_fixture_by_id[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestAggregate",
                "name": "test_get_fixture_by_kwarg[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestAggregate",
                "name": "test_filter_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestPrefix",
                "name": "test_create[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestPrefix",
                "name": "test_str[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestPrefix",
                "name": "test_update_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestPrefix",
                "name": "test_get_fixture_by_id[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestPrefix",
                "name": "test_get_fixture_by_kwarg[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestPrefix",
                "name": "test_filter_fixture[netbox v3.3]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestIpAddress",
                "name": "test_create[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestIpAddress",
                "name": "test_str[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestIpAddress",
                "name": "test_update_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestIpAddress",
                "name": "test_get_fixture_by_id[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestIpAddress",
                "name": "test_get_fixture_by_kwarg[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestIpAddress",
                "name": "test_filter_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestRole",
                "name": "test_create[netbox v3.3]",
                "time": 0.028,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestRole",
                "name": "test_str[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestRole",
                "name": "test_update_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestRole",
                "name": "test_get_fixture_by_id[netbox v3.3]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestRole",
                "name": "test_get_fixture_by_kwarg[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestRole",
                "name": "test_filter_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestVlan",
                "name": "test_create[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestVlan",
                "name": "test_str[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestVlan",
                "name": "test_update_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestVlan",
                "name": "test_get_fixture_by_id[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestVlan",
                "name": "test_get_fixture_by_kwarg[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestVlan",
                "name": "test_filter_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestVRF",
                "name": "test_create[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestVRF",
                "name": "test_str[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestVRF",
                "name": "test_update_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestVRF",
                "name": "test_get_fixture_by_id[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestVRF",
                "name": "test_get_fixture_by_kwarg[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.test_ipam.TestVRF",
                "name": "test_filter_fixture[netbox v3.3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_detailendpoint.DetailEndpointTestCase",
                "name": "test_detail_endpoint_create_list",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_detailendpoint.DetailEndpointTestCase",
                "name": "test_detail_endpoint_create_single",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_endpoint.EndPointTestCase",
                "name": "test_all_invalid_pagination_args",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_endpoint.EndPointTestCase",
                "name": "test_bulk_update_json",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_endpoint.EndPointTestCase",
                "name": "test_bulk_update_records",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_endpoint.EndPointTestCase",
                "name": "test_choices",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_endpoint.EndPointTestCase",
                "name": "test_delete_with_ids",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_endpoint.EndPointTestCase",
                "name": "test_delete_with_objects",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_endpoint.EndPointTestCase",
                "name": "test_delete_with_recordset",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_endpoint.EndPointTestCase",
                "name": "test_filter",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_endpoint.EndPointTestCase",
                "name": "test_filter_invalid_pagination_args",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_endpoint.EndPointTestCase",
                "name": "test_get_greater_than_one",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_endpoint.EndPointTestCase",
                "name": "test_get_no_results",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_endpoint.EndPointTestCase",
                "name": "test_get_with_filter",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_extras.ExtrasTestCase",
                "name": "test_config_contexts",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_extras.ExtrasTestCase",
                "name": "test_config_contexts_diff_dict",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_extras.ExtrasTestCase",
                "name": "test_config_contexts_diff_str",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_query.RequestTestCase",
                "name": "test_get_count",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_query.RequestTestCase",
                "name": "test_get_count_no_filters",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_query.RequestTestCase",
                "name": "test_get_manual_pagination",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_request.RequestTestCase",
                "name": "test_get_openapi",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_response.RecordTestCase",
                "name": "test_attribute_access",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_response.RecordTestCase",
                "name": "test_choices_idempotence",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_response.RecordTestCase",
                "name": "test_compare",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_response.RecordTestCase",
                "name": "test_dict",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_response.RecordTestCase",
                "name": "test_dict_access",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_response.RecordTestCase",
                "name": "test_diff",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_response.RecordTestCase",
                "name": "test_diff_append_records_list",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_response.RecordTestCase",
                "name": "test_endpoint_from_url",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_response.RecordTestCase",
                "name": "test_endpoint_from_url_with_directory_in_base_url",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_response.RecordTestCase",
                "name": "test_endpoint_from_url_with_plugins",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_response.RecordTestCase",
                "name": "test_endpoint_from_url_with_plugins_and_directory_in_base_url",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_response.RecordTestCase",
                "name": "test_hash",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_response.RecordTestCase",
                "name": "test_hash_diff",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_response.RecordTestCase",
                "name": "test_nested_write",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_response.RecordTestCase",
                "name": "test_nested_write_with_directory_in_base_url",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_response.RecordTestCase",
                "name": "test_serialize_dict_tag_set",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_response.RecordTestCase",
                "name": "test_serialize_list_of_ints",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_response.RecordTestCase",
                "name": "test_serialize_list_of_records",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_response.RecordTestCase",
                "name": "test_serialize_string_tag_set",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_response.RecordTestCase",
                "name": "test_serialize_tag_list_order",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_response.RecordSetTestCase",
                "name": "test_delete",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.unit.test_response.RecordSetTestCase",
                "name": "test_update",
                "time": 0.072,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[333c1e91-39df-46e7-ad02-308527cd1ef9/build] \ud83d\ude80  Start image=crawlergpt:latest\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox] user=0 workdir=\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build] \ud83e\uddea  Matrix: map[netbox:3.3 python:3.8]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build] \u2b50 Run Main actions/checkout@v2\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \u2705  Success - Main actions/checkout@v2\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build] \u2b50 Run Main Setup Python\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udc33  docker cp src=/tmp/act-cache/5cbd8de4-c574-4e6b-8d57-f09862db7834/act/actions-setup-python@v2/ dst=/var/run/act/actions/actions-setup-python@v2/\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v2/] user=0 workdir=\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/setup/index.js] user= workdir=\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udcac  ::debug::Semantic version spec of 3.8 is 3.8\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udcac  ::debug::isExplicit: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udcac  ::debug::explicit? false\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udcac  ::debug::explicit? true\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udcac  ::debug::explicit? true\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udcac  ::debug::explicit? true\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udcac  ::debug::explicit? true\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udcac  ::debug::explicit? true\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udcac  ::debug::explicit? true\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udcac  ::debug::evaluating 6 versions\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udcac  ::debug::matched: 3.8.11\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.8.11/x64\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udcac  ::debug::Found tool in cache Python 3.8.11 x64\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Successfully setup CPython (3.8.11)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \u2753 add-matcher /run/act/actions/actions-setup-python@v2/.github/python.json\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \u2705  Success - Main Setup Python\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.8.11/x64\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \u2699  ::set-output:: python-version=3.8.11\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64/bin\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build] \u2b50 Run Main Install dev requirements\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Processing /tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |   DEPRECATION: A future pip version will change local packages to be built in-place without first copying to a temporary directory. We recommend you use --use-feature=in-tree-build to test your packages with this new behavior before it becomes the default.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |    pip 21.3 will remove support for this functionality. You can find discussion regarding this at https://github.com/pypa/pip/issues/7555.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Collecting black~=22.10\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |   Downloading black-22.12.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.5 MB)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Collecting pytest==7.1.*\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |   Downloading pytest-7.1.3-py3-none-any.whl (298 kB)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Collecting pytest-docker==1.0.*\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |   Downloading pytest_docker-1.0.1-py3-none-any.whl (7.4 kB)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Collecting PyYAML==6.0\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |   Downloading PyYAML-6.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (701 kB)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Collecting tomli>=1.0.0\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |   Using cached tomli-2.0.1-py3-none-any.whl (12 kB)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Collecting attrs>=19.2.0\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |   Downloading attrs-23.1.0-py3-none-any.whl (61 kB)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Collecting py>=1.8.2\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |   Downloading py-1.11.0-py2.py3-none-any.whl (98 kB)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Collecting packaging\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |   Using cached packaging-23.1-py3-none-any.whl (48 kB)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Collecting pluggy<2.0,>=0.12\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Collecting iniconfig\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Collecting requests<3.0,>=2.20.0\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Collecting pathspec>=0.9.0\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |   Downloading pathspec-0.11.1-py3-none-any.whl (29 kB)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Collecting mypy-extensions>=0.4.3\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |   Downloading mypy_extensions-1.0.0-py3-none-any.whl (4.7 kB)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Collecting platformdirs>=2\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |   Downloading platformdirs-3.8.0-py3-none-any.whl (16 kB)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Collecting typing-extensions>=3.10.0.0\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |   Using cached typing_extensions-4.7.0-py3-none-any.whl (33 kB)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Collecting click>=8.0.0\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |   Downloading click-8.1.3-py3-none-any.whl (96 kB)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Collecting certifi>=2017.4.17\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Collecting charset-normalizer<4,>=2\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |   Downloading charset_normalizer-3.1.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (195 kB)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Collecting idna<4,>=2.5\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Collecting urllib3<3,>=1.21.1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |   Downloading urllib3-2.0.3-py3-none-any.whl (123 kB)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Using legacy 'setup.py install' for pynetbox, since package 'wheel' is not installed.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Installing collected packages: urllib3, tomli, py, pluggy, packaging, iniconfig, idna, charset-normalizer, certifi, attrs, typing-extensions, requests, pytest, platformdirs, pathspec, mypy-extensions, click, PyYAML, pytest-docker, pynetbox, black\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     Running setup.py install for pynetbox: started\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     Running setup.py install for pynetbox: finished with status 'done'\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Successfully installed PyYAML-6.0 attrs-23.1.0 black-22.12.0 certifi-2023.5.7 charset-normalizer-3.1.0 click-8.1.3 idna-3.4 iniconfig-2.0.0 mypy-extensions-1.0.0 packaging-23.1 pathspec-0.11.1 platformdirs-3.8.0 pluggy-1.2.0 py-1.11.0 pynetbox-7.0.1 pytest-7.1.3 pytest-docker-1.0.1 requests-2.31.0 tomli-2.0.1 typing-extensions-4.7.0 urllib3-2.0.3\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.8.11/x64/bin/python -m pip install --upgrade pip' command.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \u2705  Success - Main Install dev requirements\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build] \u2b50 Run Main Run Linter\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | All done! \u2728 \ud83c\udf70 \u2728\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | 37 files would be left unchanged.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \u2705  Success - Main Run Linter\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build] \u2b50 Run Main Run Tests\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ============================= test session starts ==============================\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | platform linux -- Python 3.8.11, pytest-7.1.3, pluggy-1.2.0\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | rootdir: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | plugins: docker-1.0.1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | collected 202 items\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/test_api.py ......                                                 [  2%]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/test_app.py ...                                                    [  4%]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/test_circuits.py ..............                                    [ 11%]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/test_tenancy.py ......                                             [ 14%]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/test_users.py ............                                         [ 20%]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/test_virtualization.py ...............                             [ 27%]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/test_wireless.py ....                                              [ 29%]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/test_dcim.py EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE [ 50%]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | EEEEEEEEEEEEEEEE                                                         [ 57%]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/test_ipam.py EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE [ 78%]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E                                                                        [ 78%]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/unit/test_detailendpoint.py ..                                     [ 79%]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/unit/test_endpoint.py ............                                 [ 85%]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/unit/test_extras.py ...                                            [ 87%]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/unit/test_query.py ...                                             [ 88%]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/unit/test_request.py .                                             [ 89%]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/unit/test_response.py ......................                       [100%]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ==================================== ERRORS ====================================\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _____________ ERROR at setup of TestSite.test_create[netbox v3.3] ______________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ---------------------------- Captured stdout setup -----------------------------\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /usr/bin/git\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /usr/bin/docker\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | top:  /tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ---------------------------- Captured stderr setup -----------------------------\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/json?all=1\": dial unix /var/run/docker.sock: connect: permission denied\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _______________ ERROR at setup of TestSite.test_str[netbox v3.3] _______________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _________ ERROR at setup of TestSite.test_update_fixture[netbox v3.3] __________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ________ ERROR at setup of TestSite.test_get_fixture_by_id[netbox v3.3] ________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ______ ERROR at setup of TestSite.test_get_fixture_by_kwarg[netbox v3.3] _______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _________ ERROR at setup of TestSite.test_filter_fixture[netbox v3.3] __________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ______ ERROR at setup of TestSite.test_threading_duplicates[netbox v3.3] _______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _____________ ERROR at setup of TestRack.test_create[netbox v3.3] ______________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _______________ ERROR at setup of TestRack.test_str[netbox v3.3] _______________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _________ ERROR at setup of TestRack.test_update_fixture[netbox v3.3] __________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ________ ERROR at setup of TestRack.test_get_fixture_by_id[netbox v3.3] ________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ______ ERROR at setup of TestRack.test_get_fixture_by_kwarg[netbox v3.3] _______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _________ ERROR at setup of TestRack.test_filter_fixture[netbox v3.3] __________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | __________ ERROR at setup of TestRack.test_get_elevation[netbox v3.3] __________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _________ ERROR at setup of TestManufacturer.test_create[netbox v3.3] __________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ___________ ERROR at setup of TestManufacturer.test_str[netbox v3.3] ___________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _____ ERROR at setup of TestManufacturer.test_update_fixture[netbox v3.3] ______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ____ ERROR at setup of TestManufacturer.test_get_fixture_by_id[netbox v3.3] ____\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | __ ERROR at setup of TestManufacturer.test_get_fixture_by_kwarg[netbox v3.3] ___\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _____ ERROR at setup of TestManufacturer.test_filter_fixture[netbox v3.3] ______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | __________ ERROR at setup of TestDeviceType.test_create[netbox v3.3] ___________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ____________ ERROR at setup of TestDeviceType.test_str[netbox v3.3] ____________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ______ ERROR at setup of TestDeviceType.test_update_fixture[netbox v3.3] _______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _____ ERROR at setup of TestDeviceType.test_get_fixture_by_id[netbox v3.3] _____\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ___ ERROR at setup of TestDeviceType.test_get_fixture_by_kwarg[netbox v3.3] ____\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ______ ERROR at setup of TestDeviceType.test_filter_fixture[netbox v3.3] _______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ____________ ERROR at setup of TestDevice.test_create[netbox v3.3] _____________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ______________ ERROR at setup of TestDevice.test_str[netbox v3.3] ______________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ________ ERROR at setup of TestDevice.test_update_fixture[netbox v3.3] _________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _______ ERROR at setup of TestDevice.test_get_fixture_by_id[netbox v3.3] _______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _____ ERROR at setup of TestDevice.test_get_fixture_by_kwarg[netbox v3.3] ______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ________ ERROR at setup of TestDevice.test_filter_fixture[netbox v3.3] _________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ___________ ERROR at setup of TestInterface.test_create[netbox v3.3] ___________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ____________ ERROR at setup of TestInterface.test_str[netbox v3.3] _____________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _______ ERROR at setup of TestInterface.test_update_fixture[netbox v3.3] _______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _____ ERROR at setup of TestInterface.test_get_fixture_by_id[netbox v3.3] ______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ____ ERROR at setup of TestInterface.test_get_fixture_by_kwarg[netbox v3.3] ____\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _______ ERROR at setup of TestInterface.test_filter_fixture[netbox v3.3] _______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | __________ ERROR at setup of TestPowerCable.test_create[netbox v3.3] ___________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ____________ ERROR at setup of TestPowerCable.test_str[netbox v3.3] ____________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ______ ERROR at setup of TestPowerCable.test_update_fixture[netbox v3.3] _______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _____ ERROR at setup of TestPowerCable.test_get_fixture_by_id[netbox v3.3] _____\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ___ ERROR at setup of TestPowerCable.test_get_fixture_by_kwarg[netbox v3.3] ____\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ______ ERROR at setup of TestPowerCable.test_filter_fixture[netbox v3.3] _______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _________ ERROR at setup of TestConsoleCable.test_create[netbox v3.3] __________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ___________ ERROR at setup of TestConsoleCable.test_str[netbox v3.3] ___________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _____ ERROR at setup of TestConsoleCable.test_update_fixture[netbox v3.3] ______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ____ ERROR at setup of TestConsoleCable.test_get_fixture_by_id[netbox v3.3] ____\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | __ ERROR at setup of TestConsoleCable.test_get_fixture_by_kwarg[netbox v3.3] ___\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _____ ERROR at setup of TestConsoleCable.test_filter_fixture[netbox v3.3] ______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ________ ERROR at setup of TestInterfaceCable.test_create[netbox v3.3] _________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | __________ ERROR at setup of TestInterfaceCable.test_str[netbox v3.3] __________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ____ ERROR at setup of TestInterfaceCable.test_update_fixture[netbox v3.3] _____\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ___ ERROR at setup of TestInterfaceCable.test_get_fixture_by_id[netbox v3.3] ___\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ ERROR at setup of TestInterfaceCable.test_get_fixture_by_kwarg[netbox v3.3] __\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ____ ERROR at setup of TestInterfaceCable.test_filter_fixture[netbox v3.3] _____\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _________ ERROR at setup of TestInterfaceCable.test_trace[netbox v3.3] _________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ______________ ERROR at setup of TestRIR.test_create[netbox v3.3] ______________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _______________ ERROR at setup of TestRIR.test_str[netbox v3.3] ________________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | __________ ERROR at setup of TestRIR.test_update_fixture[netbox v3.3] __________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ________ ERROR at setup of TestRIR.test_get_fixture_by_id[netbox v3.3] _________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _______ ERROR at setup of TestRIR.test_get_fixture_by_kwarg[netbox v3.3] _______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | __________ ERROR at setup of TestRIR.test_filter_fixture[netbox v3.3] __________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ___________ ERROR at setup of TestAggregate.test_create[netbox v3.3] ___________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ____________ ERROR at setup of TestAggregate.test_str[netbox v3.3] _____________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _______ ERROR at setup of TestAggregate.test_update_fixture[netbox v3.3] _______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _____ ERROR at setup of TestAggregate.test_get_fixture_by_id[netbox v3.3] ______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ____ ERROR at setup of TestAggregate.test_get_fixture_by_kwarg[netbox v3.3] ____\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _______ ERROR at setup of TestAggregate.test_filter_fixture[netbox v3.3] _______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ____________ ERROR at setup of TestPrefix.test_create[netbox v3.3] _____________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ______________ ERROR at setup of TestPrefix.test_str[netbox v3.3] ______________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ________ ERROR at setup of TestPrefix.test_update_fixture[netbox v3.3] _________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _______ ERROR at setup of TestPrefix.test_get_fixture_by_id[netbox v3.3] _______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _____ ERROR at setup of TestPrefix.test_get_fixture_by_kwarg[netbox v3.3] ______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ________ ERROR at setup of TestPrefix.test_filter_fixture[netbox v3.3] _________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ___________ ERROR at setup of TestIpAddress.test_create[netbox v3.3] ___________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ____________ ERROR at setup of TestIpAddress.test_str[netbox v3.3] _____________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _______ ERROR at setup of TestIpAddress.test_update_fixture[netbox v3.3] _______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _____ ERROR at setup of TestIpAddress.test_get_fixture_by_id[netbox v3.3] ______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ____ ERROR at setup of TestIpAddress.test_get_fixture_by_kwarg[netbox v3.3] ____\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _______ ERROR at setup of TestIpAddress.test_filter_fixture[netbox v3.3] _______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _____________ ERROR at setup of TestRole.test_create[netbox v3.3] ______________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _______________ ERROR at setup of TestRole.test_str[netbox v3.3] _______________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _________ ERROR at setup of TestRole.test_update_fixture[netbox v3.3] __________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ________ ERROR at setup of TestRole.test_get_fixture_by_id[netbox v3.3] ________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ______ ERROR at setup of TestRole.test_get_fixture_by_kwarg[netbox v3.3] _______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _________ ERROR at setup of TestRole.test_filter_fixture[netbox v3.3] __________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _____________ ERROR at setup of TestVlan.test_create[netbox v3.3] ______________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _______________ ERROR at setup of TestVlan.test_str[netbox v3.3] _______________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _________ ERROR at setup of TestVlan.test_update_fixture[netbox v3.3] __________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ________ ERROR at setup of TestVlan.test_get_fixture_by_id[netbox v3.3] ________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ______ ERROR at setup of TestVlan.test_get_fixture_by_kwarg[netbox v3.3] _______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _________ ERROR at setup of TestVlan.test_filter_fixture[netbox v3.3] __________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ______________ ERROR at setup of TestVRF.test_create[netbox v3.3] ______________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _______________ ERROR at setup of TestVRF.test_str[netbox v3.3] ________________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | __________ ERROR at setup of TestVRF.test_update_fixture[netbox v3.3] __________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ________ ERROR at setup of TestVRF.test_get_fixture_by_id[netbox v3.3] _________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _______ ERROR at setup of TestVRF.test_get_fixture_by_kwarg[netbox v3.3] _______\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | __________ ERROR at setup of TestVRF.test_filter_fixture[netbox v3.3] __________\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | pytestconfig = <_pytest.config.Config object at 0x7f307cc68490>\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | netbox_docker_repo_dirpaths = {'/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.netbox-docker-2.2.0': [<Version('3.3')>]}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     @pytest.fixture(scope=\"session\")\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def docker_compose_file(pytestconfig, netbox_docker_repo_dirpaths):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Return paths to the compose files needed to create test containers.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         We can create container sets for multiple versions of netbox here by returning a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         list of paths to multiple compose files.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         clean_netbox_docker_tmpfiles()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >       clean_docker_objects()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:199: \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | tests/integration/conftest.py:149: in clean_docker_objects\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     for line in subp.check_output([\"docker\", \"ps\", \"-a\"]).decode(\"utf-8\").splitlines():\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | input = None, capture_output = False, timeout = None, check = True\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | popenargs = (['docker', 'ps', '-a'],), kwargs = {'stdout': -1}\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | process = <subprocess.Popen object at 0x7f307b76b460>, stdout = b''\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | stderr = None, retcode = 1\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     def run(*popenargs,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The returned instance will have attributes args, returncode, stdout and\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If check is True and the exit code was non-zero, it raises a\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         were captured.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         exception will be raised.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         There is an optional argument \"input\", allowing you to\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         it will be used internally.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         The other arguments are the same as for the Popen constructor.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         \"\"\"\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if input is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdin') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdin'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         if capture_output:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                  'with capture_output.')\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stdout'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             kwargs['stderr'] = PIPE\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |     \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |         with Popen(*popenargs, **kwargs) as process:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             try:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except TimeoutExpired as exc:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 if _mswindows:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # Windows accumulates the output in a single blocking\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # read() call run on child threads, with the timeout\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # being done in a join() on those threads.  communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # _after_ kill() is required to collect that and add it\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # to the exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     exc.stdout, exc.stderr = process.communicate()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 else:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # POSIX _communicate already populated the output so\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     # far into the TimeoutExpired exception.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                     process.wait()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 process.kill()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                 raise\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             retcode = process.poll()\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |             if check and retcode:\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | >               raise CalledProcessError(retcode, process.args,\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   |                                          output=stdout, stderr=stderr)\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | E               subprocess.CalledProcessError: Command '['docker', 'ps', '-a']' returned non-zero exit status 1.\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | \n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | - generated xml file: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/report.xml -\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | =========================== short test summary info ============================\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestSite::test_create[netbox v3.3] - su...\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestSite::test_str[netbox v3.3] - subpr...\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestSite::test_update_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestSite::test_get_fixture_by_id[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestSite::test_get_fixture_by_kwarg[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestSite::test_filter_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestSite::test_threading_duplicates[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestRack::test_create[netbox v3.3] - su...\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestRack::test_str[netbox v3.3] - subpr...\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestRack::test_update_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestRack::test_get_fixture_by_id[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestRack::test_get_fixture_by_kwarg[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestRack::test_filter_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestRack::test_get_elevation[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestManufacturer::test_create[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestManufacturer::test_str[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestManufacturer::test_update_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestManufacturer::test_get_fixture_by_id[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestManufacturer::test_get_fixture_by_kwarg[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestManufacturer::test_filter_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestDeviceType::test_create[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestDeviceType::test_str[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestDeviceType::test_update_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestDeviceType::test_get_fixture_by_id[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestDeviceType::test_get_fixture_by_kwarg[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestDeviceType::test_filter_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestDevice::test_create[netbox v3.3] - ...\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestDevice::test_str[netbox v3.3] - sub...\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestDevice::test_update_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestDevice::test_get_fixture_by_id[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestDevice::test_get_fixture_by_kwarg[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestDevice::test_filter_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestInterface::test_create[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestInterface::test_str[netbox v3.3] - ...\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestInterface::test_update_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestInterface::test_get_fixture_by_id[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestInterface::test_get_fixture_by_kwarg[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestInterface::test_filter_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestPowerCable::test_create[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestPowerCable::test_str[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestPowerCable::test_update_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestPowerCable::test_get_fixture_by_id[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestPowerCable::test_get_fixture_by_kwarg[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestPowerCable::test_filter_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestConsoleCable::test_create[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestConsoleCable::test_str[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestConsoleCable::test_update_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestConsoleCable::test_get_fixture_by_id[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestConsoleCable::test_get_fixture_by_kwarg[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestConsoleCable::test_filter_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestInterfaceCable::test_create[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestInterfaceCable::test_str[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestInterfaceCable::test_update_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestInterfaceCable::test_get_fixture_by_id[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestInterfaceCable::test_get_fixture_by_kwarg[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestInterfaceCable::test_filter_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_dcim.py::TestInterfaceCable::test_trace[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestRIR::test_create[netbox v3.3] - sub...\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestRIR::test_str[netbox v3.3] - subpro...\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestRIR::test_update_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestRIR::test_get_fixture_by_id[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestRIR::test_get_fixture_by_kwarg[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestRIR::test_filter_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestAggregate::test_create[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestAggregate::test_str[netbox v3.3] - ...\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestAggregate::test_update_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestAggregate::test_get_fixture_by_id[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestAggregate::test_get_fixture_by_kwarg[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestAggregate::test_filter_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestPrefix::test_create[netbox v3.3] - ...\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestPrefix::test_str[netbox v3.3] - sub...\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestPrefix::test_update_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestPrefix::test_get_fixture_by_id[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestPrefix::test_get_fixture_by_kwarg[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestPrefix::test_filter_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestIpAddress::test_create[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestIpAddress::test_str[netbox v3.3] - ...\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestIpAddress::test_update_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestIpAddress::test_get_fixture_by_id[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestIpAddress::test_get_fixture_by_kwarg[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestIpAddress::test_filter_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestRole::test_create[netbox v3.3] - su...\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestRole::test_str[netbox v3.3] - subpr...\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestRole::test_update_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestRole::test_get_fixture_by_id[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestRole::test_get_fixture_by_kwarg[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestRole::test_filter_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestVlan::test_create[netbox v3.3] - su...\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestVlan::test_str[netbox v3.3] - subpr...\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestVlan::test_update_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestVlan::test_get_fixture_by_id[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestVlan::test_get_fixture_by_kwarg[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestVlan::test_filter_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestVRF::test_create[netbox v3.3] - sub...\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestVRF::test_str[netbox v3.3] - subpro...\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestVRF::test_update_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestVRF::test_get_fixture_by_id[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestVRF::test_get_fixture_by_kwarg[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ERROR tests/integration/test_ipam.py::TestVRF::test_filter_fixture[netbox v3.3]\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   | ======================== 103 passed, 99 errors in 9.24s ========================\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build]   \u274c  Failure - Main Run Tests\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build] exitcode '1': failure\n[333c1e91-39df-46e7-ad02-308527cd1ef9/build] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'build' failed\n",
        "workflow": {
            "path": "/tmp/558156d8-17ed-11ee-8a50-bb14de238602/netbox-community-pynetbox/.github/workflows/py3-crawler.yml",
            "type": "pytest"
        },
        "workflow_name": "333c1e91-39df-46e7-ad02-308527cd1ef9",
        "build_tool": "pytest",
        "elapsed_time": 228.41526556015015
    }
}