{
    "repository": "dplocki/podcast-downloader",
    "stars": 52,
    "language": "python",
    "size": 118,
    "clone_url": "https://github.com/dplocki/podcast-downloader.git",
    "timestamp": "2023-06-28T15:08:36.236726Z",
    "clone_success": true,
    "number_of_actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "unknown",
        "unittest"
    ],
    "actions_test_build_tools": [
        "unittest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "file_template_test.TestFileTemplateToFileNameConverter",
                "name": "test_file_template_to_file_name",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "file_template_test.TestFileTemplateToFileNameConverter",
                "name": "test_limit_file_name",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "file_template_test.TestFileTemplateToFileNameConverter",
                "name": "test_link_to_extension",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "file_template_test.TestFileTemplateToFileNameConverter",
                "name": "test_link_to_file_name",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "file_template_test.TestFileTemplateToFileNameConverter",
                "name": "test_str_to_filename",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "extensions_checker_test.TestExtensionsChecker",
                "name": "test_only_extensions",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "only_last_rss_entity_test.TestOnlyLastRSSEntity",
                "name": "test_get_only_last_rss_entity",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "get_all_entries_from_th_day_test.TestGetNthDay",
                "name": "test_for_day_inside_the_month",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "get_all_entries_from_th_day_test.TestGetNthDay",
                "name": "test_for_day_month_before",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "get_all_entries_from_th_day_test.TestGetNthDay",
                "name": "test_for_day_month_before_january",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "find_new_rss_entities_test.TestFindNewRSSEntities",
                "name": "test_find_all_new_rss_entities",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "merge_parameters_collection_test.TestMergeParametersCollection",
                "name": "test_should_collection_be_written_by_themselves",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "merge_parameters_collection_test.TestMergeParametersCollection",
                "name": "test_should_return_default_if_args_is_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "merge_parameters_collection_test.TestMergeParametersCollection",
                "name": "test_should_rewrite_collection_values",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "merge_parameters_collection_test.TestMergeParametersCollection",
                "name": "test_should_rewrite_from_many_collection_values",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "get_all_entites_from_n_days_test.TestAllEntitiesFromNDays",
                "name": "test_of_filter_function",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "get_all_entites_from_n_days_test.TestAllEntitiesFromNDays",
                "name": "test_of_get_n_age_date",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "get_all_entites_from_n_days_test.TestAllEntitiesFromNDays",
                "name": "test_should_return_empty_collection",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "get_all_entites_from_n_days_test.TestAllEntitiesFromNDays",
                "name": "test_should_return_filtered_collection",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "build_only_allowed_filter_for_link_data_test.TestBuildOnlyAllowedFilterForLinkData",
                "name": "test_build_rss_entries_filter",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "get_all_entries_from_th_day_test.TestParseDayLabel",
                "name": "test_get_label_to_date_correct_values",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "get_all_entries_from_th_day_test.TestParseDayLabel",
                "name": "test_parse_day_label_correct_values",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "get_all_entries_from_th_day_test.TestParseDayLabel",
                "name": "test_parse_day_label_incorrect_values",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "configuration_verification_test.TestConfigurationVerification",
                "name": "test_check_for_name_in_podcast_subgroup",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "configuration_verification_test.TestConfigurationVerification",
                "name": "test_check_for_path_in_podcast_subgroup",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "configuration_verification_test.TestConfigurationVerification",
                "name": "test_check_for_rss_link_in_podcast_subgroup",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "configuration_verification_test.TestConfigurationVerification",
                "name": "test_check_for_valid_configuration",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "get_all_entries_from_th_day_test.TestGetWeekDay",
                "name": "test_for_day_before",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "get_all_entries_from_th_day_test.TestGetWeekDay",
                "name": "test_for_day_in_the_day",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests] \ud83d\ude80  Start image=crawlergpt:latest\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/dplocki-podcast-downloader] user=0 workdir=\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests] \u2b50 Run Main Get sources\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \u2705  Success - Main Get sources\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests] \u2b50 Run Main Set up Python\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udc33  docker cp src=/tmp/act-cache/60bfc7ed-a1d7-44a3-b1c9-5b520c050323/act/actions-setup-python@v2/ dst=/var/run/act/actions/actions-setup-python@v2/\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v2/] user=0 workdir=\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/setup/index.js] user= workdir=\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udcac  ::debug::Semantic version spec of 3.x is 3.x\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udcac  ::debug::isExplicit: \n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udcac  ::debug::explicit? false\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udcac  ::debug::explicit? true\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udcac  ::debug::explicit? true\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udcac  ::debug::explicit? true\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udcac  ::debug::explicit? true\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udcac  ::debug::explicit? true\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udcac  ::debug::explicit? true\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udcac  ::debug::evaluating 6 versions\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udcac  ::debug::matched: 3.9.6\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.9.6/x64\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udcac  ::debug::Found tool in cache Python 3.9.6 x64\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | Successfully setup CPython (3.9.6)\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \u2753 add-matcher /run/act/actions/actions-setup-python@v2/.github/python.json\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \u2705  Success - Main Set up Python\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.9.6/x64\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \u2699  ::set-output:: python-version=3.9.6\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64/bin\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests] \u2b50 Run Main Installing dependencies\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \u2705  Success - Main Installing dependencies\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests] \u2b50 Run Main Style check\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | All done! \u2728 \ud83c\udf70 \u2728\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | 19 files would be left unchanged.\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \u2705  Success - Main Style check\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests] \u2b50 Run Main Install module\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | Obtaining file:///tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/dplocki-podcast-downloader\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Installing build dependencies: started\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Installing build dependencies: finished with status 'done'\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Checking if build backend supports build_editable: started\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Checking if build backend supports build_editable: finished with status 'done'\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Getting requirements to build editable: started\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Getting requirements to build editable: finished with status 'done'\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Preparing editable metadata (pyproject.toml): started\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Preparing editable metadata (pyproject.toml): finished with status 'done'\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | Collecting feedparser (from podcast-downloader==1.dev0)\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Downloading feedparser-6.0.10-py3-none-any.whl (81 kB)\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 81.1/81.1 kB 782.9 kB/s eta 0:00:00\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | Collecting sgmllib3k (from feedparser->podcast-downloader==1.dev0)\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Downloading sgmllib3k-1.0.0.tar.gz (5.8 kB)\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Installing build dependencies: started\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Installing build dependencies: finished with status 'done'\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Getting requirements to build wheel: started\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Getting requirements to build wheel: finished with status 'done'\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Preparing metadata (pyproject.toml): started\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | Building wheels for collected packages: podcast-downloader, sgmllib3k\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Building editable for podcast-downloader (pyproject.toml): started\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Building editable for podcast-downloader (pyproject.toml): finished with status 'done'\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Created wheel for podcast-downloader: filename=podcast_downloader-1.dev0-0.editable-py3-none-any.whl size=18661 sha256=79bb8e17a92f2a8dc369f32e989e3c234579807e82d8aec4c6abf1c0a7db4c6b\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Stored in directory: /tmp/pip-ephem-wheel-cache-bo5nf8xm/wheels/1b/55/c9/b967d8883e692a8afac445ddc215d44d626243782b347f46be\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Building wheel for sgmllib3k (pyproject.toml): started\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Building wheel for sgmllib3k (pyproject.toml): finished with status 'done'\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Created wheel for sgmllib3k: filename=sgmllib3k-1.0.0-py3-none-any.whl size=6046 sha256=c9cad1f996aa73515ae88f96782edb8c3bd01763be1abdeac090a60260fddc65\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/65/7a/a7/78c287f64e401255dff4c13fdbc672fed5efbfd21c530114e1\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | Successfully built podcast-downloader sgmllib3k\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | Installing collected packages: sgmllib3k, feedparser, podcast-downloader\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | Successfully installed feedparser-6.0.10 podcast-downloader-1.dev0 sgmllib3k-1.0.0\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | \n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | [notice] A new release of pip is available: 21.1.3 -> 23.1.2\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | [notice] To update, run: pip install --upgrade pip\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \u2705  Success - Main Install module\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests] \u2b50 Run Main Running tests\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | Collecting unittest-xml-reporting\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Downloading unittest_xml_reporting-3.2.0-py2.py3-none-any.whl (20 kB)\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | Collecting lxml (from unittest-xml-reporting)\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |   Downloading lxml-4.9.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl (7.1 MB)\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 7.1/7.1 MB 24.7 MB/s eta 0:00:00\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | Installing collected packages: lxml, unittest-xml-reporting\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | Successfully installed lxml-4.9.2 unittest-xml-reporting-3.2.0\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | \n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | [notice] A new release of pip is available: 21.1.3 -> 23.1.2\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | [notice] To update, run: pip install --upgrade pip\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | \n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | Running tests...\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | ----------------------------------------------------------------------\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | .............................\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | ----------------------------------------------------------------------\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | Ran 29 tests in 0.046s\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | \n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | OK\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | \n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   | Generating XML reports...\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \u2705  Success - Main Running tests\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests] \u2b50 Run Post Set up Python\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/cache-save/index.js] user= workdir=\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests]   \u2705  Success - Post Set up Python\n[e8a84dc1-d020-451d-b383-3ad37da181a2/run_tests] \ud83c\udfc1  Job succeeded\n",
        "stderr": "",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/dplocki-podcast-downloader/.github/workflows/run-tests-crawler.yml",
        "build_tool": "unittest",
        "elapsed_time": 351.5240569114685
    }
}