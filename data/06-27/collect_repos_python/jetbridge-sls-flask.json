{
    "repository": "jetbridge/sls-flask",
    "stars": 94,
    "language": "python",
    "size": 415,
    "clone_url": "https://github.com/jetbridge/sls-flask.git",
    "timestamp": "2023-06-28T13:44:30.273545Z",
    "clone_success": true,
    "number_of_actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": true,
        "tests": [],
        "stdout": "[639d021a-5f84-4e61-a80e-6ad31c75433e/Static Checks   ] \ud83d\ude80  Start image=crawlergpt:latest\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Check Formatting] \ud83d\ude80  Start image=crawlergpt:latest\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ] \ud83d\ude80  Start image=crawlergpt:latest\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Check Formatting]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Static Checks   ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Check Formatting]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Static Checks   ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Static Checks   ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Check Formatting]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Check Formatting]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/jetbridge-sls-flask] user=0 workdir=\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Static Checks   ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/jetbridge-sls-flask] user=0 workdir=\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/jetbridge-sls-flask] user=0 workdir=\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Check Formatting]   \u2601  git clone 'https://github.com/lgeiger/black-action' # ref=master\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Static Checks   ]   \u2601  git clone 'https://github.com/returntocorp/bento-action' # ref=v1\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v1\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Check Formatting] \u2b50 Run Main actions/checkout@v2\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Check Formatting]   \u2705  Success - Main actions/checkout@v2\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Check Formatting] \u2b50 Run Main Check formatting: black\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Check Formatting]   \ud83d\udc33  docker build -t act-lgeiger-black-action-master-dockeraction:latest /tmp/act-cache/23dfe664-61c2-4e96-8d49-3b2f9b78108d/act/lgeiger-black-action@master/\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Check Formatting]   \ud83d\udc33  docker pull image=act-lgeiger-black-action-master-dockeraction:latest platform= username= forcePull=false\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Check Formatting]   \ud83d\udc33  docker create image=act-lgeiger-black-action-master-dockeraction:latest platform= entrypoint=[] cmd=[\".\" \"--check\"]\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Static Checks   ] \u2b50 Run Main actions/checkout@v2\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Static Checks   ]   \u2705  Success - Main actions/checkout@v2\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Static Checks   ] \u2b50 Run Main Bento\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Static Checks   ]   \ud83d\udc33  docker pull image=returntocorp/bento-action:v1 platform= username= forcePull=false\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Static Checks   ]   \ud83d\udc33  docker create image=returntocorp/bento-action:v1 platform= entrypoint=[] cmd=[]\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \u2601  git clone 'https://github.com/harmon758/postgresql-action' # ref=v1\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \u2601  git clone 'https://github.com/dschep/install-poetry-action' # ref=v1.3\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \u2601  git clone 'https://github.com/TrueBrain/actions-flake8' # ref=master\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \u2601  git clone 'https://github.com/jpetrucciani/mypy-check' # ref=master\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ] \u2b50 Run Pre Type checks: mypy\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \u2705  Success - Pre Type checks: mypy\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ] \u2b50 Run Main actions/checkout@v2\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \u2705  Success - Main actions/checkout@v2\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ] \u2b50 Run Main Set up Python 3.8\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udc33  docker cp src=/tmp/act-cache/23dfe664-61c2-4e96-8d49-3b2f9b78108d/act/actions-setup-python@v1/ dst=/var/run/act/actions/actions-setup-python@v1/\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v1/] user=0 workdir=\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Check Formatting]   \ud83d\udc33  docker run image=act-lgeiger-black-action-master-dockeraction:latest platform= entrypoint=[] cmd=[\".\" \"--check\"]\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v1/dist/index.js] user= workdir=\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Static Checks   ]   \ud83d\udc33  docker run image=returntocorp/bento-action:v1 platform= entrypoint=[] cmd=[]\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udcac  ::debug::Semantic version spec of 3.8 is 3.8\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udcac  ::debug::isExplicit: \n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udcac  ::debug::explicit? false\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udcac  ::debug::explicit? true\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udcac  ::debug::explicit? true\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udcac  ::debug::explicit? true\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udcac  ::debug::explicit? true\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udcac  ::debug::explicit? true\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udcac  ::debug::explicit? true\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udcac  ::debug::evaluating 6 versions\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udcac  ::debug::matched: 3.8.11\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.8.11/x64\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udcac  ::debug::Found tool in cache Python 3.8.11 x64\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   | Successfully setup CPython (3.8.11)\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \u2753 add-matcher /run/act/actions/actions-setup-python@v1/.github/python.json\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \u2705  Success - Main Set up Python 3.8\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.8.11/x64\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \u2699  ::set-output:: python-version=3.8.11\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64/bin\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Check Formatting]   | All done! \u2728 \ud83c\udf70 \u2728\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Check Formatting]   | 24 files would be left unchanged.\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ] \u2b50 Run Main harmon758/postgresql-action@v1\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udc33  docker build -t act-harmon758-postgresql-action-v1-dockeraction:latest /tmp/act-cache/23dfe664-61c2-4e96-8d49-3b2f9b78108d/act/harmon758-postgresql-action@v1/\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udc33  docker pull image=act-harmon758-postgresql-action-v1-dockeraction:latest platform= username= forcePull=false\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udc33  docker create image=act-harmon758-postgresql-action-v1-dockeraction:latest platform= entrypoint=[] cmd=[]\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Static Checks   ]   | == action's environment: bento/0.12.0, Python 3.8.3, Docker version 19.03.9, build 9d988398e7\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Static Checks   ]   | == triggered by a push\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Static Checks   ]   | \n[639d021a-5f84-4e61-a80e-6ad31c75433e/Static Checks   ]   | == seeing if there are any findings\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Static Checks   ]   | \n[639d021a-5f84-4e61-a80e-6ad31c75433e/Check Formatting]   \u2705  Success - Main Check formatting: black\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Static Checks   ]   \u274c  Failure - Main Bento\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Check Formatting] \ud83c\udfc1  Job succeeded\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \ud83d\udc33  docker run image=act-harmon758-postgresql-action-v1-dockeraction:latest platform= entrypoint=[] cmd=[]\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Static Checks   ] exit with `FAILURE`: 1\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   | docker: Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.40/containers/create: dial unix /var/run/docker.sock: connect: permission denied.\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   | See 'docker run --help'.\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Static Checks   ] \ud83c\udfc1  Job failed\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ]   \u274c  Failure - Main harmon758/postgresql-action@v1\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ] exit with `FAILURE`: 126\n[639d021a-5f84-4e61-a80e-6ad31c75433e/Build and Test  ] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'Static Checks' failed\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/jetbridge-sls-flask/.github/workflows/pythonapp-crawler.yml",
        "build_tool": "pytest",
        "elapsed_time": 93.0645215511322
    }
}